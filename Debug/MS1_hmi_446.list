
MS1_hmi_446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007270  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f8  08007440  08007440  00017440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e38  08007e38  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e38  08007e38  00017e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e40  08007e40  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e40  08007e40  00017e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e44  08007e44  00017e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041a8  2000007c  08007ec4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004224  08007ec4  00024224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ebc8  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004583  00000000  00000000  0003ec74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  000431f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001520  00000000  00000000  000448f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000261f9  00000000  00000000  00045e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d084  00000000  00000000  0006c011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc102  00000000  00000000  00089095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00165197  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005edc  00000000  00000000  001651ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007428 	.word	0x08007428

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08007428 	.word	0x08007428

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b96e 	b.w	8000518 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9d08      	ldr	r5, [sp, #32]
 800025a:	4604      	mov	r4, r0
 800025c:	468c      	mov	ip, r1
 800025e:	2b00      	cmp	r3, #0
 8000260:	f040 8083 	bne.w	800036a <__udivmoddi4+0x116>
 8000264:	428a      	cmp	r2, r1
 8000266:	4617      	mov	r7, r2
 8000268:	d947      	bls.n	80002fa <__udivmoddi4+0xa6>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b142      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 8000270:	f1c2 0020 	rsb	r0, r2, #32
 8000274:	fa24 f000 	lsr.w	r0, r4, r0
 8000278:	4091      	lsls	r1, r2
 800027a:	4097      	lsls	r7, r2
 800027c:	ea40 0c01 	orr.w	ip, r0, r1
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000286:	0c23      	lsrs	r3, r4, #16
 8000288:	fbbc f6f8 	udiv	r6, ip, r8
 800028c:	fa1f fe87 	uxth.w	lr, r7
 8000290:	fb08 c116 	mls	r1, r8, r6, ip
 8000294:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000298:	fb06 f10e 	mul.w	r1, r6, lr
 800029c:	4299      	cmp	r1, r3
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x60>
 80002a0:	18fb      	adds	r3, r7, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 8119 	bcs.w	80004dc <__udivmoddi4+0x288>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 8116 	bls.w	80004dc <__udivmoddi4+0x288>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	443b      	add	r3, r7
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	45a6      	cmp	lr, r4
 80002ca:	d909      	bls.n	80002e0 <__udivmoddi4+0x8c>
 80002cc:	193c      	adds	r4, r7, r4
 80002ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d2:	f080 8105 	bcs.w	80004e0 <__udivmoddi4+0x28c>
 80002d6:	45a6      	cmp	lr, r4
 80002d8:	f240 8102 	bls.w	80004e0 <__udivmoddi4+0x28c>
 80002dc:	3802      	subs	r0, #2
 80002de:	443c      	add	r4, r7
 80002e0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e4:	eba4 040e 	sub.w	r4, r4, lr
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa0>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b902      	cbnz	r2, 80002fe <__udivmoddi4+0xaa>
 80002fc:	deff      	udf	#255	; 0xff
 80002fe:	fab2 f282 	clz	r2, r2
 8000302:	2a00      	cmp	r2, #0
 8000304:	d150      	bne.n	80003a8 <__udivmoddi4+0x154>
 8000306:	1bcb      	subs	r3, r1, r7
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fa1f f887 	uxth.w	r8, r7
 8000310:	2601      	movs	r6, #1
 8000312:	fbb3 fcfe 	udiv	ip, r3, lr
 8000316:	0c21      	lsrs	r1, r4, #16
 8000318:	fb0e 331c 	mls	r3, lr, ip, r3
 800031c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000320:	fb08 f30c 	mul.w	r3, r8, ip
 8000324:	428b      	cmp	r3, r1
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0xe4>
 8000328:	1879      	adds	r1, r7, r1
 800032a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0xe2>
 8000330:	428b      	cmp	r3, r1
 8000332:	f200 80e9 	bhi.w	8000508 <__udivmoddi4+0x2b4>
 8000336:	4684      	mov	ip, r0
 8000338:	1ac9      	subs	r1, r1, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000340:	fb0e 1110 	mls	r1, lr, r0, r1
 8000344:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000348:	fb08 f800 	mul.w	r8, r8, r0
 800034c:	45a0      	cmp	r8, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x10c>
 8000350:	193c      	adds	r4, r7, r4
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x10a>
 8000358:	45a0      	cmp	r8, r4
 800035a:	f200 80d9 	bhi.w	8000510 <__udivmoddi4+0x2bc>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 0408 	sub.w	r4, r4, r8
 8000364:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000368:	e7bf      	b.n	80002ea <__udivmoddi4+0x96>
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x12e>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80b1 	beq.w	80004d6 <__udivmoddi4+0x282>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x1cc>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0x140>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80b8 	bhi.w	8000504 <__udivmoddi4+0x2b0>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0103 	sbc.w	r1, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	468c      	mov	ip, r1
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0a8      	beq.n	80002f4 <__udivmoddi4+0xa0>
 80003a2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a6:	e7a5      	b.n	80002f4 <__udivmoddi4+0xa0>
 80003a8:	f1c2 0320 	rsb	r3, r2, #32
 80003ac:	fa20 f603 	lsr.w	r6, r0, r3
 80003b0:	4097      	lsls	r7, r2
 80003b2:	fa01 f002 	lsl.w	r0, r1, r2
 80003b6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ba:	40d9      	lsrs	r1, r3
 80003bc:	4330      	orrs	r0, r6
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c4:	fa1f f887 	uxth.w	r8, r7
 80003c8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003d0:	fb06 f108 	mul.w	r1, r6, r8
 80003d4:	4299      	cmp	r1, r3
 80003d6:	fa04 f402 	lsl.w	r4, r4, r2
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x19c>
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	f106 3cff 	add.w	ip, r6, #4294967295
 80003e2:	f080 808d 	bcs.w	8000500 <__udivmoddi4+0x2ac>
 80003e6:	4299      	cmp	r1, r3
 80003e8:	f240 808a 	bls.w	8000500 <__udivmoddi4+0x2ac>
 80003ec:	3e02      	subs	r6, #2
 80003ee:	443b      	add	r3, r7
 80003f0:	1a5b      	subs	r3, r3, r1
 80003f2:	b281      	uxth	r1, r0
 80003f4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000400:	fb00 f308 	mul.w	r3, r0, r8
 8000404:	428b      	cmp	r3, r1
 8000406:	d907      	bls.n	8000418 <__udivmoddi4+0x1c4>
 8000408:	1879      	adds	r1, r7, r1
 800040a:	f100 3cff 	add.w	ip, r0, #4294967295
 800040e:	d273      	bcs.n	80004f8 <__udivmoddi4+0x2a4>
 8000410:	428b      	cmp	r3, r1
 8000412:	d971      	bls.n	80004f8 <__udivmoddi4+0x2a4>
 8000414:	3802      	subs	r0, #2
 8000416:	4439      	add	r1, r7
 8000418:	1acb      	subs	r3, r1, r3
 800041a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041e:	e778      	b.n	8000312 <__udivmoddi4+0xbe>
 8000420:	f1c6 0c20 	rsb	ip, r6, #32
 8000424:	fa03 f406 	lsl.w	r4, r3, r6
 8000428:	fa22 f30c 	lsr.w	r3, r2, ip
 800042c:	431c      	orrs	r4, r3
 800042e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800043a:	fa21 f10c 	lsr.w	r1, r1, ip
 800043e:	431f      	orrs	r7, r3
 8000440:	0c3b      	lsrs	r3, r7, #16
 8000442:	fbb1 f9fe 	udiv	r9, r1, lr
 8000446:	fa1f f884 	uxth.w	r8, r4
 800044a:	fb0e 1119 	mls	r1, lr, r9, r1
 800044e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000452:	fb09 fa08 	mul.w	sl, r9, r8
 8000456:	458a      	cmp	sl, r1
 8000458:	fa02 f206 	lsl.w	r2, r2, r6
 800045c:	fa00 f306 	lsl.w	r3, r0, r6
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x220>
 8000462:	1861      	adds	r1, r4, r1
 8000464:	f109 30ff 	add.w	r0, r9, #4294967295
 8000468:	d248      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 800046a:	458a      	cmp	sl, r1
 800046c:	d946      	bls.n	80004fc <__udivmoddi4+0x2a8>
 800046e:	f1a9 0902 	sub.w	r9, r9, #2
 8000472:	4421      	add	r1, r4
 8000474:	eba1 010a 	sub.w	r1, r1, sl
 8000478:	b2bf      	uxth	r7, r7
 800047a:	fbb1 f0fe 	udiv	r0, r1, lr
 800047e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000482:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000486:	fb00 f808 	mul.w	r8, r0, r8
 800048a:	45b8      	cmp	r8, r7
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x24a>
 800048e:	19e7      	adds	r7, r4, r7
 8000490:	f100 31ff 	add.w	r1, r0, #4294967295
 8000494:	d22e      	bcs.n	80004f4 <__udivmoddi4+0x2a0>
 8000496:	45b8      	cmp	r8, r7
 8000498:	d92c      	bls.n	80004f4 <__udivmoddi4+0x2a0>
 800049a:	3802      	subs	r0, #2
 800049c:	4427      	add	r7, r4
 800049e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a2:	eba7 0708 	sub.w	r7, r7, r8
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	454f      	cmp	r7, r9
 80004ac:	46c6      	mov	lr, r8
 80004ae:	4649      	mov	r1, r9
 80004b0:	d31a      	bcc.n	80004e8 <__udivmoddi4+0x294>
 80004b2:	d017      	beq.n	80004e4 <__udivmoddi4+0x290>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x27a>
 80004b6:	ebb3 020e 	subs.w	r2, r3, lr
 80004ba:	eb67 0701 	sbc.w	r7, r7, r1
 80004be:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004c2:	40f2      	lsrs	r2, r6
 80004c4:	ea4c 0202 	orr.w	r2, ip, r2
 80004c8:	40f7      	lsrs	r7, r6
 80004ca:	e9c5 2700 	strd	r2, r7, [r5]
 80004ce:	2600      	movs	r6, #0
 80004d0:	4631      	mov	r1, r6
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e70b      	b.n	80002f4 <__udivmoddi4+0xa0>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e9      	b.n	80002b4 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fd      	b.n	80002e0 <__udivmoddi4+0x8c>
 80004e4:	4543      	cmp	r3, r8
 80004e6:	d2e5      	bcs.n	80004b4 <__udivmoddi4+0x260>
 80004e8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ec:	eb69 0104 	sbc.w	r1, r9, r4
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7df      	b.n	80004b4 <__udivmoddi4+0x260>
 80004f4:	4608      	mov	r0, r1
 80004f6:	e7d2      	b.n	800049e <__udivmoddi4+0x24a>
 80004f8:	4660      	mov	r0, ip
 80004fa:	e78d      	b.n	8000418 <__udivmoddi4+0x1c4>
 80004fc:	4681      	mov	r9, r0
 80004fe:	e7b9      	b.n	8000474 <__udivmoddi4+0x220>
 8000500:	4666      	mov	r6, ip
 8000502:	e775      	b.n	80003f0 <__udivmoddi4+0x19c>
 8000504:	4630      	mov	r0, r6
 8000506:	e74a      	b.n	800039e <__udivmoddi4+0x14a>
 8000508:	f1ac 0c02 	sub.w	ip, ip, #2
 800050c:	4439      	add	r1, r7
 800050e:	e713      	b.n	8000338 <__udivmoddi4+0xe4>
 8000510:	3802      	subs	r0, #2
 8000512:	443c      	add	r4, r7
 8000514:	e724      	b.n	8000360 <__udivmoddi4+0x10c>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <handler_btn>:
 * @brief       
 * 
 * @param       parameters 
 * ************************************************************* **/
static void handler_btn(void* parameters)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
    ENUM_BTN_LIST_t btn;

    while(1)
    {
        if(xQueueReceive(QueueHandle_btn, &btn, portMAX_DELAY))
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <handler_btn+0x28>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f107 010f 	add.w	r1, r7, #15
 800052c:	f04f 32ff 	mov.w	r2, #4294967295
 8000530:	4618      	mov	r0, r3
 8000532:	f004 fde3 	bl	80050fc <xQueueReceive>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d0f3      	beq.n	8000524 <handler_btn+0x8>
        {
            pressed_button = btn;
 800053c:	7bfa      	ldrb	r2, [r7, #15]
 800053e:	4b02      	ldr	r3, [pc, #8]	; (8000548 <handler_btn+0x2c>)
 8000540:	701a      	strb	r2, [r3, #0]
        if(xQueueReceive(QueueHandle_btn, &btn, portMAX_DELAY))
 8000542:	e7ef      	b.n	8000524 <handler_btn+0x8>
 8000544:	20004078 	.word	0x20004078
 8000548:	20000098 	.word	0x20000098

0800054c <bouttons_init>:
        }
    }
}

void bouttons_init(ENUM_BTN_LIST_t* button)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af02      	add	r7, sp, #8
 8000552:	6078      	str	r0, [r7, #4]
    BaseType_t status;
    
    button = &pressed_button;
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <bouttons_init+0x58>)
 8000556:	607b      	str	r3, [r7, #4]

    QueueHandle_btn  = xQueueCreate (1, sizeof(ENUM_BTN_LIST_t));
 8000558:	2200      	movs	r2, #0
 800055a:	2101      	movs	r1, #1
 800055c:	2001      	movs	r0, #1
 800055e:	f004 fba3 	bl	8004ca8 <xQueueGenericCreate>
 8000562:	4603      	mov	r3, r0
 8000564:	4a10      	ldr	r2, [pc, #64]	; (80005a8 <bouttons_init+0x5c>)
 8000566:	6013      	str	r3, [r2, #0]

    status = xTaskCreate(handler_btn, "task_btn", configMINIMAL_STACK_SIZE, NULL, TASK_PRIORITY_APP_BTN, &TaskHandle_btn);
 8000568:	4b10      	ldr	r3, [pc, #64]	; (80005ac <bouttons_init+0x60>)
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2305      	movs	r3, #5
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2300      	movs	r3, #0
 8000572:	2280      	movs	r2, #128	; 0x80
 8000574:	490e      	ldr	r1, [pc, #56]	; (80005b0 <bouttons_init+0x64>)
 8000576:	480f      	ldr	r0, [pc, #60]	; (80005b4 <bouttons_init+0x68>)
 8000578:	f005 f80e 	bl	8005598 <xTaskCreate>
 800057c:	60f8      	str	r0, [r7, #12]
    configASSERT(status == pdPASS);
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d00a      	beq.n	800059a <bouttons_init+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000588:	f383 8811 	msr	BASEPRI, r3
 800058c:	f3bf 8f6f 	isb	sy
 8000590:	f3bf 8f4f 	dsb	sy
 8000594:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000596:	bf00      	nop
 8000598:	e7fe      	b.n	8000598 <bouttons_init+0x4c>
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000098 	.word	0x20000098
 80005a8:	20004078 	.word	0x20004078
 80005ac:	2000407c 	.word	0x2000407c
 80005b0:	08007440 	.word	0x08007440
 80005b4:	0800051d 	.word	0x0800051d

080005b8 <handler_oled>:
 *              commands
 * 
 * @param       parameters 
 * ************************************************************* **/
static void handler_oled(void* parameters)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
 80005c0:	f005 faaa 	bl	8005b18 <xTaskGetTickCount>
 80005c4:	4603      	mov	r3, r0
 80005c6:	60fb      	str	r3, [r7, #12]

    while(1)
    {
        if(oled.OLED_GUI_MENU == OLED_GUI_MAIN)
 80005c8:	4b3a      	ldr	r3, [pc, #232]	; (80006b4 <handler_oled+0xfc>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	4a3a      	ldr	r2, [pc, #232]	; (80006b8 <handler_oled+0x100>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d159      	bne.n	8000686 <handler_oled+0xce>
        {
            switch (button)
 80005d2:	4b3a      	ldr	r3, [pc, #232]	; (80006bc <handler_oled+0x104>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b03      	cmp	r3, #3
 80005d8:	d016      	beq.n	8000608 <handler_oled+0x50>
 80005da:	2b03      	cmp	r3, #3
 80005dc:	dc4e      	bgt.n	800067c <handler_oled+0xc4>
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d002      	beq.n	80005e8 <handler_oled+0x30>
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d020      	beq.n	8000628 <handler_oled+0x70>
                        default:                break;
                    }
                    break;

                case OLED_BTN_RETURN:
                default: break;
 80005e6:	e049      	b.n	800067c <handler_oled+0xc4>
                case OLED_BTN_UP:      oled.line_pointer = (oled.line_pointer >= oled.max_pointer) ? oled.max_pointer : oled.line_pointer +1; break;
 80005e8:	4b32      	ldr	r3, [pc, #200]	; (80006b4 <handler_oled+0xfc>)
 80005ea:	785a      	ldrb	r2, [r3, #1]
 80005ec:	4b31      	ldr	r3, [pc, #196]	; (80006b4 <handler_oled+0xfc>)
 80005ee:	78db      	ldrb	r3, [r3, #3]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d302      	bcc.n	80005fa <handler_oled+0x42>
 80005f4:	4b2f      	ldr	r3, [pc, #188]	; (80006b4 <handler_oled+0xfc>)
 80005f6:	78db      	ldrb	r3, [r3, #3]
 80005f8:	e003      	b.n	8000602 <handler_oled+0x4a>
 80005fa:	4b2e      	ldr	r3, [pc, #184]	; (80006b4 <handler_oled+0xfc>)
 80005fc:	785b      	ldrb	r3, [r3, #1]
 80005fe:	3301      	adds	r3, #1
 8000600:	b2db      	uxtb	r3, r3
 8000602:	4a2c      	ldr	r2, [pc, #176]	; (80006b4 <handler_oled+0xfc>)
 8000604:	7053      	strb	r3, [r2, #1]
 8000606:	e03a      	b.n	800067e <handler_oled+0xc6>
                case OLED_BTN_DOWN:    oled.line_pointer = (oled.line_pointer <= oled.min_pointer) ? oled.min_pointer : oled.line_pointer -1; break;
 8000608:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <handler_oled+0xfc>)
 800060a:	785a      	ldrb	r2, [r3, #1]
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <handler_oled+0xfc>)
 800060e:	789b      	ldrb	r3, [r3, #2]
 8000610:	429a      	cmp	r2, r3
 8000612:	d802      	bhi.n	800061a <handler_oled+0x62>
 8000614:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <handler_oled+0xfc>)
 8000616:	789b      	ldrb	r3, [r3, #2]
 8000618:	e003      	b.n	8000622 <handler_oled+0x6a>
 800061a:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <handler_oled+0xfc>)
 800061c:	785b      	ldrb	r3, [r3, #1]
 800061e:	3b01      	subs	r3, #1
 8000620:	b2db      	uxtb	r3, r3
 8000622:	4a24      	ldr	r2, [pc, #144]	; (80006b4 <handler_oled+0xfc>)
 8000624:	7053      	strb	r3, [r2, #1]
 8000626:	e02a      	b.n	800067e <handler_oled+0xc6>
                    switch (oled.line_pointer)
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <handler_oled+0xfc>)
 800062a:	785b      	ldrb	r3, [r3, #1]
 800062c:	2b09      	cmp	r3, #9
 800062e:	d823      	bhi.n	8000678 <handler_oled+0xc0>
 8000630:	a201      	add	r2, pc, #4	; (adr r2, 8000638 <handler_oled+0x80>)
 8000632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000636:	bf00      	nop
 8000638:	08000679 	.word	0x08000679
 800063c:	08000661 	.word	0x08000661
 8000640:	08000669 	.word	0x08000669
 8000644:	08000671 	.word	0x08000671
 8000648:	08000679 	.word	0x08000679
 800064c:	08000679 	.word	0x08000679
 8000650:	08000679 	.word	0x08000679
 8000654:	08000679 	.word	0x08000679
 8000658:	08000679 	.word	0x08000679
 800065c:	08000679 	.word	0x08000679
                        case E_HMI_OLED_LINE_1: oled.OLED_GUI_MENU = OLED_GUI_MONITORING;    break;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <handler_oled+0xfc>)
 8000662:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <handler_oled+0x108>)
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	e008      	b.n	800067a <handler_oled+0xc2>
                        case E_HMI_OLED_LINE_2: oled.OLED_GUI_MENU = OLED_GUI_STATUS;        break;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <handler_oled+0xfc>)
 800066a:	4a16      	ldr	r2, [pc, #88]	; (80006c4 <handler_oled+0x10c>)
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	e004      	b.n	800067a <handler_oled+0xc2>
                        case E_HMI_OLED_LINE_3: oled.OLED_GUI_MENU = OLED_GUI_DATA;          break;
 8000670:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <handler_oled+0xfc>)
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <handler_oled+0x110>)
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	e000      	b.n	800067a <handler_oled+0xc2>
                        default:                break;
 8000678:	bf00      	nop
                    break;
 800067a:	e000      	b.n	800067e <handler_oled+0xc6>
                default: break;
 800067c:	bf00      	nop
            }
            button = E_BTN_NONE;
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <handler_oled+0x104>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
 8000684:	e00c      	b.n	80006a0 <handler_oled+0xe8>
        }
        else if(button == OLED_BTN_RETURN)
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <handler_oled+0x104>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b04      	cmp	r3, #4
 800068c:	d108      	bne.n	80006a0 <handler_oled+0xe8>
        {
            oled.OLED_GUI_MENU = OLED_GUI_MAIN;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <handler_oled+0xfc>)
 8000690:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <handler_oled+0x100>)
 8000692:	605a      	str	r2, [r3, #4]
            oled.menu_flag = E_HMI_OLED_MENU_NEW;
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <handler_oled+0xfc>)
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
            button = E_BTN_NONE;
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <handler_oled+0x104>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
        }

        /* refresh the page */
        oled.OLED_GUI_MENU(); 
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <handler_oled+0xfc>)
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	4798      	blx	r3

        vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(OLED_DEFAULT_PERIOD_TASK));
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2164      	movs	r1, #100	; 0x64
 80006ac:	4618      	mov	r0, r3
 80006ae:	f005 f8b9 	bl	8005824 <xTaskDelayUntil>
        if(oled.OLED_GUI_MENU == OLED_GUI_MAIN)
 80006b2:	e789      	b.n	80005c8 <handler_oled+0x10>
 80006b4:	200001d0 	.word	0x200001d0
 80006b8:	0800074d 	.word	0x0800074d
 80006bc:	20000099 	.word	0x20000099
 80006c0:	08000899 	.word	0x08000899
 80006c4:	080008cd 	.word	0x080008cd
 80006c8:	08000901 	.word	0x08000901

080006cc <OLED_GUI_START>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
static void OLED_GUI_START(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
    if(oled.menu_flag == E_HMI_OLED_MENU_NEW)
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <OLED_GUI_START+0x68>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d11d      	bne.n	8000714 <OLED_GUI_START+0x48>
    {
        //seeting for the menu
        oled.line_pointer = E_HMI_OLED_LINE_0;
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <OLED_GUI_START+0x68>)
 80006da:	2200      	movs	r2, #0
 80006dc:	705a      	strb	r2, [r3, #1]
        oled.min_pointer  = E_HMI_OLED_LINE_0;
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <OLED_GUI_START+0x68>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	709a      	strb	r2, [r3, #2]
        oled.max_pointer  = E_HMI_OLED_LINE_0;
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <OLED_GUI_START+0x68>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	70da      	strb	r2, [r3, #3]
        oled.menu_flag    = E_HMI_OLED_MENU_OLD;
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <OLED_GUI_START+0x68>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]

        Clear_Screen();
 80006f0:	f000 fd1e 	bl	8001130 <Clear_Screen>
        Set_Color(WHITE);
 80006f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006f8:	f000 fc68 	bl	8000fcc <Set_Color>
        print_String(0, 0, (const uint8_t*)"Hello World !", FONT_5X8);
 80006fc:	2300      	movs	r3, #0
 80006fe:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <OLED_GUI_START+0x6c>)
 8000700:	2100      	movs	r1, #0
 8000702:	2000      	movs	r0, #0
 8000704:	f000 fe3c 	bl	8001380 <print_String>
        print_String(0, 15, (const uint8_t*)"Waiting for SEQ ready...", FONT_5X8);
 8000708:	2300      	movs	r3, #0
 800070a:	4a0c      	ldr	r2, [pc, #48]	; (800073c <OLED_GUI_START+0x70>)
 800070c:	210f      	movs	r1, #15
 800070e:	2000      	movs	r0, #0
 8000710:	f000 fe36 	bl	8001380 <print_String>
    }

    /* print the image */
    /* wait for seq */
    if(!strcmp((char*)parsed_data.APP_PHASE, "wait"))
 8000714:	490a      	ldr	r1, [pc, #40]	; (8000740 <OLED_GUI_START+0x74>)
 8000716:	480b      	ldr	r0, [pc, #44]	; (8000744 <OLED_GUI_START+0x78>)
 8000718:	f7ff fd7a 	bl	8000210 <strcmp>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d105      	bne.n	800072e <OLED_GUI_START+0x62>
    {
        oled.OLED_GUI_MENU = OLED_GUI_MAIN;
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <OLED_GUI_START+0x68>)
 8000724:	4a08      	ldr	r2, [pc, #32]	; (8000748 <OLED_GUI_START+0x7c>)
 8000726:	605a      	str	r2, [r3, #4]
        oled.menu_flag = E_HMI_OLED_MENU_NEW;
 8000728:	4b02      	ldr	r3, [pc, #8]	; (8000734 <OLED_GUI_START+0x68>)
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
    }
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200001d0 	.word	0x200001d0
 8000738:	0800744c 	.word	0x0800744c
 800073c:	0800745c 	.word	0x0800745c
 8000740:	08007478 	.word	0x08007478
 8000744:	2000009c 	.word	0x2000009c
 8000748:	0800074d 	.word	0x0800074d

0800074c <OLED_GUI_MAIN>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
static void OLED_GUI_MAIN(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	static ENUM_HMI_OLED_POINTER_t last_pointer = E_HMI_OLED_LINE_1;

    if(oled.menu_flag == E_HMI_OLED_MENU_NEW)
 8000750:	4b48      	ldr	r3, [pc, #288]	; (8000874 <OLED_GUI_MAIN+0x128>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d13b      	bne.n	80007d0 <OLED_GUI_MAIN+0x84>
    {
        //seeting for the menu
        oled.line_pointer = E_HMI_OLED_LINE_1;
 8000758:	4b46      	ldr	r3, [pc, #280]	; (8000874 <OLED_GUI_MAIN+0x128>)
 800075a:	2201      	movs	r2, #1
 800075c:	705a      	strb	r2, [r3, #1]
        oled.min_pointer  = E_HMI_OLED_LINE_1;
 800075e:	4b45      	ldr	r3, [pc, #276]	; (8000874 <OLED_GUI_MAIN+0x128>)
 8000760:	2201      	movs	r2, #1
 8000762:	709a      	strb	r2, [r3, #2]
        oled.max_pointer  = E_HMI_OLED_LINE_5;
 8000764:	4b43      	ldr	r3, [pc, #268]	; (8000874 <OLED_GUI_MAIN+0x128>)
 8000766:	2205      	movs	r2, #5
 8000768:	70da      	strb	r2, [r3, #3]
        oled.menu_flag    = E_HMI_OLED_MENU_OLD;
 800076a:	4b42      	ldr	r3, [pc, #264]	; (8000874 <OLED_GUI_MAIN+0x128>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]

        Clear_Screen();
 8000770:	f000 fcde 	bl	8001130 <Clear_Screen>
        Set_Color(WHITE);
 8000774:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000778:	f000 fc28 	bl	8000fcc <Set_Color>
        print_String(0, 0, (const uint8_t*)"===== MAIN MENU =====", FONT_5X8);
 800077c:	2300      	movs	r3, #0
 800077e:	4a3e      	ldr	r2, [pc, #248]	; (8000878 <OLED_GUI_MAIN+0x12c>)
 8000780:	2100      	movs	r1, #0
 8000782:	2000      	movs	r0, #0
 8000784:	f000 fdfc 	bl	8001380 <print_String>
        print_String(10, 15, (const uint8_t*)"Monitoring", FONT_5X8);
 8000788:	2300      	movs	r3, #0
 800078a:	4a3c      	ldr	r2, [pc, #240]	; (800087c <OLED_GUI_MAIN+0x130>)
 800078c:	210f      	movs	r1, #15
 800078e:	200a      	movs	r0, #10
 8000790:	f000 fdf6 	bl	8001380 <print_String>
        print_String(10, 23, (const uint8_t*)"Status", FONT_5X8);
 8000794:	2300      	movs	r3, #0
 8000796:	4a3a      	ldr	r2, [pc, #232]	; (8000880 <OLED_GUI_MAIN+0x134>)
 8000798:	2117      	movs	r1, #23
 800079a:	200a      	movs	r0, #10
 800079c:	f000 fdf0 	bl	8001380 <print_String>
        print_String(10, 31, (const uint8_t*)"Data", FONT_5X8);
 80007a0:	2300      	movs	r3, #0
 80007a2:	4a38      	ldr	r2, [pc, #224]	; (8000884 <OLED_GUI_MAIN+0x138>)
 80007a4:	211f      	movs	r1, #31
 80007a6:	200a      	movs	r0, #10
 80007a8:	f000 fdea 	bl	8001380 <print_String>
        print_String(10, 39, (const uint8_t*)"Sleep", FONT_5X8);
 80007ac:	2300      	movs	r3, #0
 80007ae:	4a36      	ldr	r2, [pc, #216]	; (8000888 <OLED_GUI_MAIN+0x13c>)
 80007b0:	2127      	movs	r1, #39	; 0x27
 80007b2:	200a      	movs	r0, #10
 80007b4:	f000 fde4 	bl	8001380 <print_String>
        print_String(10, 47, (const uint8_t*)"Reset all", FONT_5X8);
 80007b8:	2300      	movs	r3, #0
 80007ba:	4a34      	ldr	r2, [pc, #208]	; (800088c <OLED_GUI_MAIN+0x140>)
 80007bc:	212f      	movs	r1, #47	; 0x2f
 80007be:	200a      	movs	r0, #10
 80007c0:	f000 fdde 	bl	8001380 <print_String>
        print_String(0, OLED_MENU_LINE_1, (const uint8_t*)">", FONT_5X8);
 80007c4:	2300      	movs	r3, #0
 80007c6:	4a32      	ldr	r2, [pc, #200]	; (8000890 <OLED_GUI_MAIN+0x144>)
 80007c8:	2110      	movs	r1, #16
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 fdd8 	bl	8001380 <print_String>
    }

    if(last_pointer != oled.line_pointer)
 80007d0:	4b28      	ldr	r3, [pc, #160]	; (8000874 <OLED_GUI_MAIN+0x128>)
 80007d2:	785a      	ldrb	r2, [r3, #1]
 80007d4:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <OLED_GUI_MAIN+0x148>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d046      	beq.n	800086a <OLED_GUI_MAIN+0x11e>
    {
    	last_pointer = oled.line_pointer;
 80007dc:	4b25      	ldr	r3, [pc, #148]	; (8000874 <OLED_GUI_MAIN+0x128>)
 80007de:	785a      	ldrb	r2, [r3, #1]
 80007e0:	4b2c      	ldr	r3, [pc, #176]	; (8000894 <OLED_GUI_MAIN+0x148>)
 80007e2:	701a      	strb	r2, [r3, #0]
    	Set_Color(BLACK);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f000 fbf1 	bl	8000fcc <Set_Color>
    	Fill_Rect(0,OLED_MENU_LINE_1 , 5, OLED_MENU_LINE_5);
 80007ea:	2330      	movs	r3, #48	; 0x30
 80007ec:	2205      	movs	r2, #5
 80007ee:	2110      	movs	r1, #16
 80007f0:	2000      	movs	r0, #0
 80007f2:	f000 febb 	bl	800156c <Fill_Rect>
    	Set_Color(WHITE);
 80007f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80007fa:	f000 fbe7 	bl	8000fcc <Set_Color>

		switch(oled.line_pointer)
 80007fe:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <OLED_GUI_MAIN+0x128>)
 8000800:	785b      	ldrb	r3, [r3, #1]
 8000802:	3b01      	subs	r3, #1
 8000804:	2b04      	cmp	r3, #4
 8000806:	d832      	bhi.n	800086e <OLED_GUI_MAIN+0x122>
 8000808:	a201      	add	r2, pc, #4	; (adr r2, 8000810 <OLED_GUI_MAIN+0xc4>)
 800080a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080e:	bf00      	nop
 8000810:	08000825 	.word	0x08000825
 8000814:	08000833 	.word	0x08000833
 8000818:	08000841 	.word	0x08000841
 800081c:	0800084f 	.word	0x0800084f
 8000820:	0800085d 	.word	0x0800085d
		{
		case E_HMI_OLED_LINE_1 : print_String(0, OLED_MENU_LINE_1, (const uint8_t*)">", FONT_5X8); break;
 8000824:	2300      	movs	r3, #0
 8000826:	4a1a      	ldr	r2, [pc, #104]	; (8000890 <OLED_GUI_MAIN+0x144>)
 8000828:	2110      	movs	r1, #16
 800082a:	2000      	movs	r0, #0
 800082c:	f000 fda8 	bl	8001380 <print_String>
 8000830:	e01e      	b.n	8000870 <OLED_GUI_MAIN+0x124>
		case E_HMI_OLED_LINE_2 : print_String(0, OLED_MENU_LINE_2, (const uint8_t*)">", FONT_5X8); break;
 8000832:	2300      	movs	r3, #0
 8000834:	4a16      	ldr	r2, [pc, #88]	; (8000890 <OLED_GUI_MAIN+0x144>)
 8000836:	2118      	movs	r1, #24
 8000838:	2000      	movs	r0, #0
 800083a:	f000 fda1 	bl	8001380 <print_String>
 800083e:	e017      	b.n	8000870 <OLED_GUI_MAIN+0x124>
		case E_HMI_OLED_LINE_3 : print_String(0, OLED_MENU_LINE_3, (const uint8_t*)">", FONT_5X8); break;
 8000840:	2300      	movs	r3, #0
 8000842:	4a13      	ldr	r2, [pc, #76]	; (8000890 <OLED_GUI_MAIN+0x144>)
 8000844:	2120      	movs	r1, #32
 8000846:	2000      	movs	r0, #0
 8000848:	f000 fd9a 	bl	8001380 <print_String>
 800084c:	e010      	b.n	8000870 <OLED_GUI_MAIN+0x124>
		case E_HMI_OLED_LINE_4 : print_String(0, OLED_MENU_LINE_4, (const uint8_t*)">", FONT_5X8); break;
 800084e:	2300      	movs	r3, #0
 8000850:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <OLED_GUI_MAIN+0x144>)
 8000852:	2128      	movs	r1, #40	; 0x28
 8000854:	2000      	movs	r0, #0
 8000856:	f000 fd93 	bl	8001380 <print_String>
 800085a:	e009      	b.n	8000870 <OLED_GUI_MAIN+0x124>
		case E_HMI_OLED_LINE_5 : print_String(0, OLED_MENU_LINE_5, (const uint8_t*)">", FONT_5X8); break;
 800085c:	2300      	movs	r3, #0
 800085e:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <OLED_GUI_MAIN+0x144>)
 8000860:	2130      	movs	r1, #48	; 0x30
 8000862:	2000      	movs	r0, #0
 8000864:	f000 fd8c 	bl	8001380 <print_String>
 8000868:	e002      	b.n	8000870 <OLED_GUI_MAIN+0x124>
		default: break;
		}
    }
 800086a:	bf00      	nop
 800086c:	e000      	b.n	8000870 <OLED_GUI_MAIN+0x124>
		default: break;
 800086e:	bf00      	nop
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200001d0 	.word	0x200001d0
 8000878:	08007480 	.word	0x08007480
 800087c:	08007498 	.word	0x08007498
 8000880:	080074a4 	.word	0x080074a4
 8000884:	080074ac 	.word	0x080074ac
 8000888:	080074b4 	.word	0x080074b4
 800088c:	080074bc 	.word	0x080074bc
 8000890:	080074c8 	.word	0x080074c8
 8000894:	20000000 	.word	0x20000000

08000898 <OLED_GUI_MONITORING>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
static void OLED_GUI_MONITORING(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
    if(oled.menu_flag == E_HMI_OLED_MENU_NEW)
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <OLED_GUI_MONITORING+0x30>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d10b      	bne.n	80008bc <OLED_GUI_MONITORING+0x24>
    {
        //seeting for the menu
        oled.line_pointer = E_HMI_OLED_LINE_1;
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <OLED_GUI_MONITORING+0x30>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	705a      	strb	r2, [r3, #1]
        oled.min_pointer  = E_HMI_OLED_LINE_1;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <OLED_GUI_MONITORING+0x30>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	709a      	strb	r2, [r3, #2]
        oled.max_pointer  = E_HMI_OLED_LINE_5;
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <OLED_GUI_MONITORING+0x30>)
 80008b2:	2205      	movs	r2, #5
 80008b4:	70da      	strb	r2, [r3, #3]
        oled.menu_flag    = E_HMI_OLED_MENU_OLD;
 80008b6:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <OLED_GUI_MONITORING+0x30>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
    }
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	200001d0 	.word	0x200001d0

080008cc <OLED_GUI_STATUS>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
static void OLED_GUI_STATUS(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
    if(oled.menu_flag == E_HMI_OLED_MENU_NEW)
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <OLED_GUI_STATUS+0x30>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d10b      	bne.n	80008f0 <OLED_GUI_STATUS+0x24>
    {
        //seeting for the menu
        oled.line_pointer = E_HMI_OLED_LINE_1;
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <OLED_GUI_STATUS+0x30>)
 80008da:	2201      	movs	r2, #1
 80008dc:	705a      	strb	r2, [r3, #1]
        oled.min_pointer  = E_HMI_OLED_LINE_1;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <OLED_GUI_STATUS+0x30>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	709a      	strb	r2, [r3, #2]
        oled.max_pointer  = E_HMI_OLED_LINE_5;
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <OLED_GUI_STATUS+0x30>)
 80008e6:	2205      	movs	r2, #5
 80008e8:	70da      	strb	r2, [r3, #3]
        oled.menu_flag    = E_HMI_OLED_MENU_OLD;
 80008ea:	4b04      	ldr	r3, [pc, #16]	; (80008fc <OLED_GUI_STATUS+0x30>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
    }
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	200001d0 	.word	0x200001d0

08000900 <OLED_GUI_DATA>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
static void OLED_GUI_DATA(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
    if(oled.menu_flag == E_HMI_OLED_MENU_NEW)
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <OLED_GUI_DATA+0x30>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d10b      	bne.n	8000924 <OLED_GUI_DATA+0x24>
    {
        //seeting for the menu
        oled.line_pointer = E_HMI_OLED_LINE_1;
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <OLED_GUI_DATA+0x30>)
 800090e:	2201      	movs	r2, #1
 8000910:	705a      	strb	r2, [r3, #1]
        oled.min_pointer  = E_HMI_OLED_LINE_1;
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <OLED_GUI_DATA+0x30>)
 8000914:	2201      	movs	r2, #1
 8000916:	709a      	strb	r2, [r3, #2]
        oled.max_pointer  = E_HMI_OLED_LINE_5;
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <OLED_GUI_DATA+0x30>)
 800091a:	2205      	movs	r2, #5
 800091c:	70da      	strb	r2, [r3, #3]
        oled.menu_flag    = E_HMI_OLED_MENU_OLD;
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <OLED_GUI_DATA+0x30>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
    }
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	200001d0 	.word	0x200001d0

08000934 <API_HMI_START>:
/** ************************************************************* *
 * @brief       init and start the payload task
 * 
 * ************************************************************* **/
void API_HMI_START(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af02      	add	r7, sp, #8
    BaseType_t status;

    leds_init();
 800093a:	f000 fa25 	bl	8000d88 <leds_init>
    leds_send_cmd(E_LIST_LED5, E_CMD_LEDS_GREEN);
 800093e:	2102      	movs	r1, #2
 8000940:	2004      	movs	r0, #4
 8000942:	f000 fb29 	bl	8000f98 <leds_send_cmd>

    uart_init(&parsed_data);
 8000946:	4816      	ldr	r0, [pc, #88]	; (80009a0 <API_HMI_START+0x6c>)
 8000948:	f000 ffe0 	bl	800190c <uart_init>

    bouttons_init(&button);
 800094c:	4815      	ldr	r0, [pc, #84]	; (80009a4 <API_HMI_START+0x70>)
 800094e:	f7ff fdfd 	bl	800054c <bouttons_init>

    /* oled */ 
    Device_Init();
 8000952:	f000 fc63 	bl	800121c <Device_Init>
    Clear_Screen();
 8000956:	f000 fbeb 	bl	8001130 <Clear_Screen>
    oled.OLED_GUI_MENU = OLED_GUI_START;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <API_HMI_START+0x74>)
 800095c:	4a13      	ldr	r2, [pc, #76]	; (80009ac <API_HMI_START+0x78>)
 800095e:	605a      	str	r2, [r3, #4]
    oled.menu_flag = E_HMI_OLED_MENU_NEW;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <API_HMI_START+0x74>)
 8000962:	2201      	movs	r2, #1
 8000964:	701a      	strb	r2, [r3, #0]

    /* create the task */
    status = xTaskCreate(handler_oled, "task_oled", configMINIMAL_STACK_SIZE, NULL, TASK_PRIORITY_APP_OLED, &TaskHandle_oled);
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <API_HMI_START+0x7c>)
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	2305      	movs	r3, #5
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	2300      	movs	r3, #0
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	4910      	ldr	r1, [pc, #64]	; (80009b4 <API_HMI_START+0x80>)
 8000974:	4810      	ldr	r0, [pc, #64]	; (80009b8 <API_HMI_START+0x84>)
 8000976:	f004 fe0f 	bl	8005598 <xTaskCreate>
 800097a:	6078      	str	r0, [r7, #4]
    configASSERT(status == pdPASS);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d00a      	beq.n	8000998 <API_HMI_START+0x64>
        __asm volatile
 8000982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000986:	f383 8811 	msr	BASEPRI, r3
 800098a:	f3bf 8f6f 	isb	sy
 800098e:	f3bf 8f4f 	dsb	sy
 8000992:	603b      	str	r3, [r7, #0]
    }
 8000994:	bf00      	nop
 8000996:	e7fe      	b.n	8000996 <API_HMI_START+0x62>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000009c 	.word	0x2000009c
 80009a4:	20000099 	.word	0x20000099
 80009a8:	200001d0 	.word	0x200001d0
 80009ac:	080006cd 	.word	0x080006cd
 80009b0:	20004080 	.word	0x20004080
 80009b4:	080074e0 	.word	0x080074e0
 80009b8:	080005b9 	.word	0x080005b9

080009bc <handler_leds>:
 *              commands
 * 
 * @param       parameters 
 * ************************************************************* **/
static void handler_leds(void* parameters)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
    STRUCT_LEDS_t led;

    while(1)
    {
        /* check for new command */
        if(xQueueReceive(QueueHandle_leds_cmd, &led, portMAX_DELAY)) 
 80009c4:	4bc3      	ldr	r3, [pc, #780]	; (8000cd4 <handler_leds+0x318>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f107 010c 	add.w	r1, r7, #12
 80009cc:	f04f 32ff 	mov.w	r2, #4294967295
 80009d0:	4618      	mov	r0, r3
 80009d2:	f004 fb93 	bl	80050fc <xQueueReceive>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	f000 81cf 	beq.w	8000d7c <handler_leds+0x3c0>
        {
            switch (led.list)
 80009de:	7b7b      	ldrb	r3, [r7, #13]
 80009e0:	2b04      	cmp	r3, #4
 80009e2:	f200 81cd 	bhi.w	8000d80 <handler_leds+0x3c4>
 80009e6:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <handler_leds+0x30>)
 80009e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ec:	08000a01 	.word	0x08000a01
 80009f0:	08000ab9 	.word	0x08000ab9
 80009f4:	08000b71 	.word	0x08000b71
 80009f8:	08000c19 	.word	0x08000c19
 80009fc:	08000cb9 	.word	0x08000cb9
            {
                /* LED 1 */
                case E_LIST_LED1 :
                    switch (led.cmd)
 8000a00:	7b3b      	ldrb	r3, [r7, #12]
 8000a02:	2b03      	cmp	r3, #3
 8000a04:	d856      	bhi.n	8000ab4 <handler_leds+0xf8>
 8000a06:	a201      	add	r2, pc, #4	; (adr r2, 8000a0c <handler_leds+0x50>)
 8000a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0c:	08000a1d 	.word	0x08000a1d
 8000a10:	08000a43 	.word	0x08000a43
 8000a14:	08000a69 	.word	0x08000a69
 8000a18:	08000a8f 	.word	0x08000a8f
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a22:	48ad      	ldr	r0, [pc, #692]	; (8000cd8 <handler_leds+0x31c>)
 8000a24:	f002 fb1a 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a2e:	48aa      	ldr	r0, [pc, #680]	; (8000cd8 <handler_leds+0x31c>)
 8000a30:	f002 fb14 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a3a:	48a7      	ldr	r0, [pc, #668]	; (8000cd8 <handler_leds+0x31c>)
 8000a3c:	f002 fb0e 	bl	800305c <HAL_GPIO_WritePin>
                            break;
 8000a40:	e039      	b.n	8000ab6 <handler_leds+0xfa>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a48:	48a3      	ldr	r0, [pc, #652]	; (8000cd8 <handler_leds+0x31c>)
 8000a4a:	f002 fb07 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a54:	48a0      	ldr	r0, [pc, #640]	; (8000cd8 <handler_leds+0x31c>)
 8000a56:	f002 fb01 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a60:	489d      	ldr	r0, [pc, #628]	; (8000cd8 <handler_leds+0x31c>)
 8000a62:	f002 fafb 	bl	800305c <HAL_GPIO_WritePin>
                            break;
 8000a66:	e026      	b.n	8000ab6 <handler_leds+0xfa>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6e:	489a      	ldr	r0, [pc, #616]	; (8000cd8 <handler_leds+0x31c>)
 8000a70:	f002 faf4 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7a:	4897      	ldr	r0, [pc, #604]	; (8000cd8 <handler_leds+0x31c>)
 8000a7c:	f002 faee 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a86:	4894      	ldr	r0, [pc, #592]	; (8000cd8 <handler_leds+0x31c>)
 8000a88:	f002 fae8 	bl	800305c <HAL_GPIO_WritePin>
                            break;
 8000a8c:	e013      	b.n	8000ab6 <handler_leds+0xfa>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a94:	4890      	ldr	r0, [pc, #576]	; (8000cd8 <handler_leds+0x31c>)
 8000a96:	f002 fae1 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aa0:	488d      	ldr	r0, [pc, #564]	; (8000cd8 <handler_leds+0x31c>)
 8000aa2:	f002 fadb 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aac:	488a      	ldr	r0, [pc, #552]	; (8000cd8 <handler_leds+0x31c>)
 8000aae:	f002 fad5 	bl	800305c <HAL_GPIO_WritePin>
                            break;
 8000ab2:	e000      	b.n	8000ab6 <handler_leds+0xfa>

                        default:
                            break;
 8000ab4:	bf00      	nop
                    }
                    break;
 8000ab6:	e164      	b.n	8000d82 <handler_leds+0x3c6>

                /* LED 2 */
                case E_LIST_LED2 :
                    switch (led.cmd)
 8000ab8:	7b3b      	ldrb	r3, [r7, #12]
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	d856      	bhi.n	8000b6c <handler_leds+0x1b0>
 8000abe:	a201      	add	r2, pc, #4	; (adr r2, 8000ac4 <handler_leds+0x108>)
 8000ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac4:	08000ad5 	.word	0x08000ad5
 8000ac8:	08000afb 	.word	0x08000afb
 8000acc:	08000b21 	.word	0x08000b21
 8000ad0:	08000b47 	.word	0x08000b47
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ada:	487f      	ldr	r0, [pc, #508]	; (8000cd8 <handler_leds+0x31c>)
 8000adc:	f002 fabe 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae6:	487c      	ldr	r0, [pc, #496]	; (8000cd8 <handler_leds+0x31c>)
 8000ae8:	f002 fab8 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af2:	487a      	ldr	r0, [pc, #488]	; (8000cdc <handler_leds+0x320>)
 8000af4:	f002 fab2 	bl	800305c <HAL_GPIO_WritePin>
                            break;
 8000af8:	e039      	b.n	8000b6e <handler_leds+0x1b2>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b00:	4875      	ldr	r0, [pc, #468]	; (8000cd8 <handler_leds+0x31c>)
 8000b02:	f002 faab 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b0c:	4873      	ldr	r0, [pc, #460]	; (8000cdc <handler_leds+0x320>)
 8000b0e:	f002 faa5 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b18:	486f      	ldr	r0, [pc, #444]	; (8000cd8 <handler_leds+0x31c>)
 8000b1a:	f002 fa9f 	bl	800305c <HAL_GPIO_WritePin>
                            break;
 8000b1e:	e026      	b.n	8000b6e <handler_leds+0x1b2>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b26:	486c      	ldr	r0, [pc, #432]	; (8000cd8 <handler_leds+0x31c>)
 8000b28:	f002 fa98 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b32:	486a      	ldr	r0, [pc, #424]	; (8000cdc <handler_leds+0x320>)
 8000b34:	f002 fa92 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_SET);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b3e:	4866      	ldr	r0, [pc, #408]	; (8000cd8 <handler_leds+0x31c>)
 8000b40:	f002 fa8c 	bl	800305c <HAL_GPIO_WritePin>
                            break;
 8000b44:	e013      	b.n	8000b6e <handler_leds+0x1b2>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b4c:	4862      	ldr	r0, [pc, #392]	; (8000cd8 <handler_leds+0x31c>)
 8000b4e:	f002 fa85 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b58:	485f      	ldr	r0, [pc, #380]	; (8000cd8 <handler_leds+0x31c>)
 8000b5a:	f002 fa7f 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b64:	485d      	ldr	r0, [pc, #372]	; (8000cdc <handler_leds+0x320>)
 8000b66:	f002 fa79 	bl	800305c <HAL_GPIO_WritePin>
                            break;
 8000b6a:	e000      	b.n	8000b6e <handler_leds+0x1b2>

                        default:
                            break;
 8000b6c:	bf00      	nop
                    }
                    break;
 8000b6e:	e108      	b.n	8000d82 <handler_leds+0x3c6>

                /* LED 3 */
                case E_LIST_LED3 :
                    switch (led.cmd)
 8000b70:	7b3b      	ldrb	r3, [r7, #12]
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d84e      	bhi.n	8000c14 <handler_leds+0x258>
 8000b76:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <handler_leds+0x1c0>)
 8000b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7c:	08000b8d 	.word	0x08000b8d
 8000b80:	08000baf 	.word	0x08000baf
 8000b84:	08000bd1 	.word	0x08000bd1
 8000b88:	08000bf3 	.word	0x08000bf3
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b92:	4852      	ldr	r0, [pc, #328]	; (8000cdc <handler_leds+0x320>)
 8000b94:	f002 fa62 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2180      	movs	r1, #128	; 0x80
 8000b9c:	484f      	ldr	r0, [pc, #316]	; (8000cdc <handler_leds+0x320>)
 8000b9e:	f002 fa5d 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	484d      	ldr	r0, [pc, #308]	; (8000cdc <handler_leds+0x320>)
 8000ba8:	f002 fa58 	bl	800305c <HAL_GPIO_WritePin>
                            break;
 8000bac:	e033      	b.n	8000c16 <handler_leds+0x25a>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2180      	movs	r1, #128	; 0x80
 8000bb2:	484a      	ldr	r0, [pc, #296]	; (8000cdc <handler_leds+0x320>)
 8000bb4:	f002 fa52 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2140      	movs	r1, #64	; 0x40
 8000bbc:	4847      	ldr	r0, [pc, #284]	; (8000cdc <handler_leds+0x320>)
 8000bbe:	f002 fa4d 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc8:	4844      	ldr	r0, [pc, #272]	; (8000cdc <handler_leds+0x320>)
 8000bca:	f002 fa47 	bl	800305c <HAL_GPIO_WritePin>
                            break;
 8000bce:	e022      	b.n	8000c16 <handler_leds+0x25a>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd6:	4841      	ldr	r0, [pc, #260]	; (8000cdc <handler_leds+0x320>)
 8000bd8:	f002 fa40 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2140      	movs	r1, #64	; 0x40
 8000be0:	483e      	ldr	r0, [pc, #248]	; (8000cdc <handler_leds+0x320>)
 8000be2:	f002 fa3b 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2180      	movs	r1, #128	; 0x80
 8000bea:	483c      	ldr	r0, [pc, #240]	; (8000cdc <handler_leds+0x320>)
 8000bec:	f002 fa36 	bl	800305c <HAL_GPIO_WritePin>
                            break;
 8000bf0:	e011      	b.n	8000c16 <handler_leds+0x25a>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf8:	4838      	ldr	r0, [pc, #224]	; (8000cdc <handler_leds+0x320>)
 8000bfa:	f002 fa2f 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2180      	movs	r1, #128	; 0x80
 8000c02:	4836      	ldr	r0, [pc, #216]	; (8000cdc <handler_leds+0x320>)
 8000c04:	f002 fa2a 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2140      	movs	r1, #64	; 0x40
 8000c0c:	4833      	ldr	r0, [pc, #204]	; (8000cdc <handler_leds+0x320>)
 8000c0e:	f002 fa25 	bl	800305c <HAL_GPIO_WritePin>
                            break;
 8000c12:	e000      	b.n	8000c16 <handler_leds+0x25a>

                        default:
                            break;
 8000c14:	bf00      	nop
                    }
                    break;
 8000c16:	e0b4      	b.n	8000d82 <handler_leds+0x3c6>

                /* LED 4 */
                case E_LIST_LED4 :
                    switch (led.cmd)
 8000c18:	7b3b      	ldrb	r3, [r7, #12]
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	d84a      	bhi.n	8000cb4 <handler_leds+0x2f8>
 8000c1e:	a201      	add	r2, pc, #4	; (adr r2, 8000c24 <handler_leds+0x268>)
 8000c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c24:	08000c35 	.word	0x08000c35
 8000c28:	08000c55 	.word	0x08000c55
 8000c2c:	08000c75 	.word	0x08000c75
 8000c30:	08000c95 	.word	0x08000c95
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2104      	movs	r1, #4
 8000c38:	4828      	ldr	r0, [pc, #160]	; (8000cdc <handler_leds+0x320>)
 8000c3a:	f002 fa0f 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2102      	movs	r1, #2
 8000c42:	4826      	ldr	r0, [pc, #152]	; (8000cdc <handler_leds+0x320>)
 8000c44:	f002 fa0a 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	4823      	ldr	r0, [pc, #140]	; (8000cdc <handler_leds+0x320>)
 8000c4e:	f002 fa05 	bl	800305c <HAL_GPIO_WritePin>
                            break;
 8000c52:	e030      	b.n	8000cb6 <handler_leds+0x2fa>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2102      	movs	r1, #2
 8000c58:	4820      	ldr	r0, [pc, #128]	; (8000cdc <handler_leds+0x320>)
 8000c5a:	f002 f9ff 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2101      	movs	r1, #1
 8000c62:	481e      	ldr	r0, [pc, #120]	; (8000cdc <handler_leds+0x320>)
 8000c64:	f002 f9fa 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	481b      	ldr	r0, [pc, #108]	; (8000cdc <handler_leds+0x320>)
 8000c6e:	f002 f9f5 	bl	800305c <HAL_GPIO_WritePin>
                            break;
 8000c72:	e020      	b.n	8000cb6 <handler_leds+0x2fa>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2104      	movs	r1, #4
 8000c78:	4818      	ldr	r0, [pc, #96]	; (8000cdc <handler_leds+0x320>)
 8000c7a:	f002 f9ef 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2101      	movs	r1, #1
 8000c82:	4816      	ldr	r0, [pc, #88]	; (8000cdc <handler_leds+0x320>)
 8000c84:	f002 f9ea 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	4813      	ldr	r0, [pc, #76]	; (8000cdc <handler_leds+0x320>)
 8000c8e:	f002 f9e5 	bl	800305c <HAL_GPIO_WritePin>
                            break;
 8000c92:	e010      	b.n	8000cb6 <handler_leds+0x2fa>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2104      	movs	r1, #4
 8000c98:	4810      	ldr	r0, [pc, #64]	; (8000cdc <handler_leds+0x320>)
 8000c9a:	f002 f9df 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	480e      	ldr	r0, [pc, #56]	; (8000cdc <handler_leds+0x320>)
 8000ca4:	f002 f9da 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2101      	movs	r1, #1
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <handler_leds+0x320>)
 8000cae:	f002 f9d5 	bl	800305c <HAL_GPIO_WritePin>
                            break;
 8000cb2:	e000      	b.n	8000cb6 <handler_leds+0x2fa>

                        default:
                            break;
 8000cb4:	bf00      	nop
                    }
                    break;
 8000cb6:	e064      	b.n	8000d82 <handler_leds+0x3c6>

                /* LED 5 */
                case E_LIST_LED5 :
                    switch (led.cmd)
 8000cb8:	7b3b      	ldrb	r3, [r7, #12]
 8000cba:	2b03      	cmp	r3, #3
 8000cbc:	d85c      	bhi.n	8000d78 <handler_leds+0x3bc>
 8000cbe:	a201      	add	r2, pc, #4	; (adr r2, 8000cc4 <handler_leds+0x308>)
 8000cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc4:	08000ce1 	.word	0x08000ce1
 8000cc8:	08000d07 	.word	0x08000d07
 8000ccc:	08000d2d 	.word	0x08000d2d
 8000cd0:	08000d53 	.word	0x08000d53
 8000cd4:	20004084 	.word	0x20004084
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	40020800 	.word	0x40020800
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ce6:	4827      	ldr	r0, [pc, #156]	; (8000d84 <handler_leds+0x3c8>)
 8000ce8:	f002 f9b8 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cf2:	4824      	ldr	r0, [pc, #144]	; (8000d84 <handler_leds+0x3c8>)
 8000cf4:	f002 f9b2 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfe:	4821      	ldr	r0, [pc, #132]	; (8000d84 <handler_leds+0x3c8>)
 8000d00:	f002 f9ac 	bl	800305c <HAL_GPIO_WritePin>
                            break;
 8000d04:	e039      	b.n	8000d7a <handler_leds+0x3be>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d0c:	481d      	ldr	r0, [pc, #116]	; (8000d84 <handler_leds+0x3c8>)
 8000d0e:	f002 f9a5 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d18:	481a      	ldr	r0, [pc, #104]	; (8000d84 <handler_leds+0x3c8>)
 8000d1a:	f002 f99f 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d24:	4817      	ldr	r0, [pc, #92]	; (8000d84 <handler_leds+0x3c8>)
 8000d26:	f002 f999 	bl	800305c <HAL_GPIO_WritePin>
                            break;
 8000d2a:	e026      	b.n	8000d7a <handler_leds+0x3be>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d32:	4814      	ldr	r0, [pc, #80]	; (8000d84 <handler_leds+0x3c8>)
 8000d34:	f002 f992 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d3e:	4811      	ldr	r0, [pc, #68]	; (8000d84 <handler_leds+0x3c8>)
 8000d40:	f002 f98c 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d4a:	480e      	ldr	r0, [pc, #56]	; (8000d84 <handler_leds+0x3c8>)
 8000d4c:	f002 f986 	bl	800305c <HAL_GPIO_WritePin>
                            break;
 8000d50:	e013      	b.n	8000d7a <handler_leds+0x3be>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d58:	480a      	ldr	r0, [pc, #40]	; (8000d84 <handler_leds+0x3c8>)
 8000d5a:	f002 f97f 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d64:	4807      	ldr	r0, [pc, #28]	; (8000d84 <handler_leds+0x3c8>)
 8000d66:	f002 f979 	bl	800305c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <handler_leds+0x3c8>)
 8000d72:	f002 f973 	bl	800305c <HAL_GPIO_WritePin>
                            break;
 8000d76:	e000      	b.n	8000d7a <handler_leds+0x3be>

                        default:
                            break;
 8000d78:	bf00      	nop
                    }
                    break;
 8000d7a:	e002      	b.n	8000d82 <handler_leds+0x3c6>
            
                default:
                    break;
            }
        }
 8000d7c:	bf00      	nop
 8000d7e:	e621      	b.n	80009c4 <handler_leds+0x8>
                    break;
 8000d80:	bf00      	nop
        if(xQueueReceive(QueueHandle_leds_cmd, &led, portMAX_DELAY)) 
 8000d82:	e61f      	b.n	80009c4 <handler_leds+0x8>
 8000d84:	40020800 	.word	0x40020800

08000d88 <leds_init>:
/** ************************************************************* *
 * @brief       init and start the payload task
 * 
 * ************************************************************* **/
void leds_init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af02      	add	r7, sp, #8
    BaseType_t status;

    HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d94:	487a      	ldr	r0, [pc, #488]	; (8000f80 <leds_init+0x1f8>)
 8000d96:	f002 f961 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da0:	4877      	ldr	r0, [pc, #476]	; (8000f80 <leds_init+0x1f8>)
 8000da2:	f002 f95b 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dac:	4874      	ldr	r0, [pc, #464]	; (8000f80 <leds_init+0x1f8>)
 8000dae:	f002 f955 	bl	800305c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db8:	4871      	ldr	r0, [pc, #452]	; (8000f80 <leds_init+0x1f8>)
 8000dba:	f002 f94f 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc4:	486e      	ldr	r0, [pc, #440]	; (8000f80 <leds_init+0x1f8>)
 8000dc6:	f002 f949 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dd0:	486c      	ldr	r0, [pc, #432]	; (8000f84 <leds_init+0x1fc>)
 8000dd2:	f002 f943 	bl	800305c <HAL_GPIO_WritePin>
    
    HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ddc:	4869      	ldr	r0, [pc, #420]	; (8000f84 <leds_init+0x1fc>)
 8000dde:	f002 f93d 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	4867      	ldr	r0, [pc, #412]	; (8000f84 <leds_init+0x1fc>)
 8000de8:	f002 f938 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2140      	movs	r1, #64	; 0x40
 8000df0:	4864      	ldr	r0, [pc, #400]	; (8000f84 <leds_init+0x1fc>)
 8000df2:	f002 f933 	bl	800305c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2104      	movs	r1, #4
 8000dfa:	4862      	ldr	r0, [pc, #392]	; (8000f84 <leds_init+0x1fc>)
 8000dfc:	f002 f92e 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2102      	movs	r1, #2
 8000e04:	485f      	ldr	r0, [pc, #380]	; (8000f84 <leds_init+0x1fc>)
 8000e06:	f002 f929 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	485d      	ldr	r0, [pc, #372]	; (8000f84 <leds_init+0x1fc>)
 8000e10:	f002 f924 	bl	800305c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e1a:	485a      	ldr	r0, [pc, #360]	; (8000f84 <leds_init+0x1fc>)
 8000e1c:	f002 f91e 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e26:	4857      	ldr	r0, [pc, #348]	; (8000f84 <leds_init+0x1fc>)
 8000e28:	f002 f918 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e32:	4854      	ldr	r0, [pc, #336]	; (8000f84 <leds_init+0x1fc>)
 8000e34:	f002 f912 	bl	800305c <HAL_GPIO_WritePin>

    HAL_Delay(200);
 8000e38:	20c8      	movs	r0, #200	; 0xc8
 8000e3a:	f001 fb8b 	bl	8002554 <HAL_Delay>

    /* */ 
    HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_SET);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e44:	484e      	ldr	r0, [pc, #312]	; (8000f80 <leds_init+0x1f8>)
 8000e46:	f002 f909 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e50:	484b      	ldr	r0, [pc, #300]	; (8000f80 <leds_init+0x1f8>)
 8000e52:	f002 f903 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_SET);
 8000e56:	2201      	movs	r2, #1
 8000e58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e5c:	4849      	ldr	r0, [pc, #292]	; (8000f84 <leds_init+0x1fc>)
 8000e5e:	f002 f8fd 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2104      	movs	r1, #4
 8000e66:	4847      	ldr	r0, [pc, #284]	; (8000f84 <leds_init+0x1fc>)
 8000e68:	f002 f8f8 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e72:	4844      	ldr	r0, [pc, #272]	; (8000f84 <leds_init+0x1fc>)
 8000e74:	f002 f8f2 	bl	800305c <HAL_GPIO_WritePin>

    HAL_Delay(200);
 8000e78:	20c8      	movs	r0, #200	; 0xc8
 8000e7a:	f001 fb6b 	bl	8002554 <HAL_Delay>

    /* */ 
    HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e84:	483e      	ldr	r0, [pc, #248]	; (8000f80 <leds_init+0x1f8>)
 8000e86:	f002 f8e9 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e90:	483b      	ldr	r0, [pc, #236]	; (8000f80 <leds_init+0x1f8>)
 8000e92:	f002 f8e3 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2180      	movs	r1, #128	; 0x80
 8000e9a:	483a      	ldr	r0, [pc, #232]	; (8000f84 <leds_init+0x1fc>)
 8000e9c:	f002 f8de 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	4837      	ldr	r0, [pc, #220]	; (8000f84 <leds_init+0x1fc>)
 8000ea6:	f002 f8d9 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eb0:	4834      	ldr	r0, [pc, #208]	; (8000f84 <leds_init+0x1fc>)
 8000eb2:	f002 f8d3 	bl	800305c <HAL_GPIO_WritePin>

    HAL_Delay(200);
 8000eb6:	20c8      	movs	r0, #200	; 0xc8
 8000eb8:	f001 fb4c 	bl	8002554 <HAL_Delay>

    /* */ 
    HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec2:	482f      	ldr	r0, [pc, #188]	; (8000f80 <leds_init+0x1f8>)
 8000ec4:	f002 f8ca 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ece:	482d      	ldr	r0, [pc, #180]	; (8000f84 <leds_init+0x1fc>)
 8000ed0:	f002 f8c4 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2140      	movs	r1, #64	; 0x40
 8000ed8:	482a      	ldr	r0, [pc, #168]	; (8000f84 <leds_init+0x1fc>)
 8000eda:	f002 f8bf 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	4828      	ldr	r0, [pc, #160]	; (8000f84 <leds_init+0x1fc>)
 8000ee4:	f002 f8ba 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eee:	4825      	ldr	r0, [pc, #148]	; (8000f84 <leds_init+0x1fc>)
 8000ef0:	f002 f8b4 	bl	800305c <HAL_GPIO_WritePin>

    HAL_Delay(1000);
 8000ef4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef8:	f001 fb2c 	bl	8002554 <HAL_Delay>

    HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f02:	481f      	ldr	r0, [pc, #124]	; (8000f80 <leds_init+0x1f8>)
 8000f04:	f002 f8aa 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f0e:	481c      	ldr	r0, [pc, #112]	; (8000f80 <leds_init+0x1f8>)
 8000f10:	f002 f8a4 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f1a:	481a      	ldr	r0, [pc, #104]	; (8000f84 <leds_init+0x1fc>)
 8000f1c:	f002 f89e 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2104      	movs	r1, #4
 8000f24:	4817      	ldr	r0, [pc, #92]	; (8000f84 <leds_init+0x1fc>)
 8000f26:	f002 f899 	bl	800305c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f30:	4814      	ldr	r0, [pc, #80]	; (8000f84 <leds_init+0x1fc>)
 8000f32:	f002 f893 	bl	800305c <HAL_GPIO_WritePin>

    /* create the queues */
    QueueHandle_leds_cmd  = xQueueCreate(32, sizeof(ENUM_LEDS_CMD_t));
 8000f36:	2200      	movs	r2, #0
 8000f38:	2101      	movs	r1, #1
 8000f3a:	2020      	movs	r0, #32
 8000f3c:	f003 feb4 	bl	8004ca8 <xQueueGenericCreate>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a11      	ldr	r2, [pc, #68]	; (8000f88 <leds_init+0x200>)
 8000f44:	6013      	str	r3, [r2, #0]

    status = xTaskCreate(handler_leds, "task_leds", configMINIMAL_STACK_SIZE, NULL, TASK_PRIORITY_APP_LEDS, &TaskHandle_leds);
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <leds_init+0x204>)
 8000f48:	9301      	str	r3, [sp, #4]
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	490f      	ldr	r1, [pc, #60]	; (8000f90 <leds_init+0x208>)
 8000f54:	480f      	ldr	r0, [pc, #60]	; (8000f94 <leds_init+0x20c>)
 8000f56:	f004 fb1f 	bl	8005598 <xTaskCreate>
 8000f5a:	6078      	str	r0, [r7, #4]
    configASSERT(status == pdPASS);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d00a      	beq.n	8000f78 <leds_init+0x1f0>
        __asm volatile
 8000f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f66:	f383 8811 	msr	BASEPRI, r3
 8000f6a:	f3bf 8f6f 	isb	sy
 8000f6e:	f3bf 8f4f 	dsb	sy
 8000f72:	603b      	str	r3, [r7, #0]
    }
 8000f74:	bf00      	nop
 8000f76:	e7fe      	b.n	8000f76 <leds_init+0x1ee>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40020800 	.word	0x40020800
 8000f88:	20004084 	.word	0x20004084
 8000f8c:	20004088 	.word	0x20004088
 8000f90:	080074ec 	.word	0x080074ec
 8000f94:	080009bd 	.word	0x080009bd

08000f98 <leds_send_cmd>:
 * @brief       send a command to the payload task
 * 
 * @param       cmd 
 * ************************************************************* **/
void leds_send_cmd(ENUM_LEDS_LIST_t led, ENUM_LEDS_CMD_t command)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
    STRUCT_LEDS_t data =
 8000fa8:	79bb      	ldrb	r3, [r7, #6]
 8000faa:	733b      	strb	r3, [r7, #12]
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	737b      	strb	r3, [r7, #13]
    {
        .cmd = command, 
        .list = led
    };

    xQueueSend(QueueHandle_leds_cmd, &data, (TickType_t)0);
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <leds_send_cmd+0x30>)
 8000fb2:	6818      	ldr	r0, [r3, #0]
 8000fb4:	f107 010c 	add.w	r1, r7, #12
 8000fb8:	2300      	movs	r3, #0
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f003 fef6 	bl	8004dac <xQueueGenericSend>
}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20004084 	.word	0x20004084

08000fcc <Set_Color>:
  #error "SPI Setting Error !!"
#endif

uint8_t color_byte[2],color_fill_byte[2];

void Set_Color(uint16_t color)  {
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	80fb      	strh	r3, [r7, #6]
  
  color_byte[0] = (uint8_t)(color >> 8);
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	0a1b      	lsrs	r3, r3, #8
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <Set_Color+0x2c>)
 8000fe0:	701a      	strb	r2, [r3, #0]
  color_byte[1] = (uint8_t)(color & 0x00ff);
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <Set_Color+0x2c>)
 8000fe8:	705a      	strb	r2, [r3, #1]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20004090 	.word	0x20004090

08000ffc <Write_Command>:
  color_fill_byte[0] = (uint8_t)(color >> 8);
  color_fill_byte[1] = (uint8_t)(color & 0x00ff);
}
  

void Write_Command(uint8_t cmd)  {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  
  OLED_CS(GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	2110      	movs	r1, #16
 800100a:	4810      	ldr	r0, [pc, #64]	; (800104c <Write_Command+0x50>)
 800100c:	f002 f826 	bl	800305c <HAL_GPIO_WritePin>
  
#if  INTERFACE_4WIRE_SPI
  
  OLED_DC(GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	2140      	movs	r1, #64	; 0x40
 8001014:	480d      	ldr	r0, [pc, #52]	; (800104c <Write_Command+0x50>)
 8001016:	f002 f821 	bl	800305c <HAL_GPIO_WritePin>
  
  while(HAL_SPI_Transmit(&hspi1,&cmd,0x01,0x10) != HAL_OK);
 800101a:	bf00      	nop
 800101c:	1df9      	adds	r1, r7, #7
 800101e:	2310      	movs	r3, #16
 8001020:	2201      	movs	r2, #1
 8001022:	480b      	ldr	r0, [pc, #44]	; (8001050 <Write_Command+0x54>)
 8001024:	f002 fe59 	bl	8003cda <HAL_SPI_Transmit>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f6      	bne.n	800101c <Write_Command+0x20>
  
  OLED_DC(GPIO_PIN_SET);
 800102e:	2201      	movs	r2, #1
 8001030:	2140      	movs	r1, #64	; 0x40
 8001032:	4806      	ldr	r0, [pc, #24]	; (800104c <Write_Command+0x50>)
 8001034:	f002 f812 	bl	800305c <HAL_GPIO_WritePin>
	}

  
#endif
  
  OLED_CS(GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2110      	movs	r1, #16
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <Write_Command+0x50>)
 800103e:	f002 f80d 	bl	800305c <HAL_GPIO_WritePin>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40020000 	.word	0x40020000
 8001050:	2000409c 	.word	0x2000409c

08001054 <Write_Data>:


void Write_Data(uint8_t dat) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  
  OLED_CS(GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2110      	movs	r1, #16
 8001062:	4810      	ldr	r0, [pc, #64]	; (80010a4 <Write_Data+0x50>)
 8001064:	f001 fffa 	bl	800305c <HAL_GPIO_WritePin>
  
#if  INTERFACE_4WIRE_SPI
  
  OLED_DC(GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	2140      	movs	r1, #64	; 0x40
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <Write_Data+0x50>)
 800106e:	f001 fff5 	bl	800305c <HAL_GPIO_WritePin>
  
  while(HAL_SPI_Transmit(&hspi1,&dat,0x01,0x10) != HAL_OK);
 8001072:	bf00      	nop
 8001074:	1df9      	adds	r1, r7, #7
 8001076:	2310      	movs	r3, #16
 8001078:	2201      	movs	r2, #1
 800107a:	480b      	ldr	r0, [pc, #44]	; (80010a8 <Write_Data+0x54>)
 800107c:	f002 fe2d 	bl	8003cda <HAL_SPI_Transmit>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1f6      	bne.n	8001074 <Write_Data+0x20>
  
  OLED_DC(GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	2140      	movs	r1, #64	; 0x40
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <Write_Data+0x50>)
 800108c:	f001 ffe6 	bl	800305c <HAL_GPIO_WritePin>
		hwData <<= 1;
	}
  
#endif
  
  OLED_CS(GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	2110      	movs	r1, #16
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <Write_Data+0x50>)
 8001096:	f001 ffe1 	bl	800305c <HAL_GPIO_WritePin>
  
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40020000 	.word	0x40020000
 80010a8:	2000409c 	.word	0x2000409c

080010ac <Write_Data_ptr>:

void Write_Data_ptr(uint8_t* dat_p, uint16_t length) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	807b      	strh	r3, [r7, #2]
  
  OLED_CS(GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2110      	movs	r1, #16
 80010bc:	480f      	ldr	r0, [pc, #60]	; (80010fc <Write_Data_ptr+0x50>)
 80010be:	f001 ffcd 	bl	800305c <HAL_GPIO_WritePin>
  
#if INTERFACE_4WIRE_SPI
  
  OLED_DC(GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2140      	movs	r1, #64	; 0x40
 80010c6:	480d      	ldr	r0, [pc, #52]	; (80010fc <Write_Data_ptr+0x50>)
 80010c8:	f001 ffc8 	bl	800305c <HAL_GPIO_WritePin>
  
  while(HAL_SPI_Transmit(&hspi1,dat_p,length,0x10) != HAL_OK);
 80010cc:	bf00      	nop
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	2310      	movs	r3, #16
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	480a      	ldr	r0, [pc, #40]	; (8001100 <Write_Data_ptr+0x54>)
 80010d6:	f002 fe00 	bl	8003cda <HAL_SPI_Transmit>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1f6      	bne.n	80010ce <Write_Data_ptr+0x22>
  
  OLED_DC(GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2140      	movs	r1, #64	; 0x40
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <Write_Data_ptr+0x50>)
 80010e6:	f001 ffb9 	bl	800305c <HAL_GPIO_WritePin>
      hwData <<= 1;
    }
  }
#endif
  
  OLED_CS(GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	2110      	movs	r1, #16
 80010ee:	4803      	ldr	r0, [pc, #12]	; (80010fc <Write_Data_ptr+0x50>)
 80010f0:	f001 ffb4 	bl	800305c <HAL_GPIO_WritePin>
  
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40020000 	.word	0x40020000
 8001100:	2000409c 	.word	0x2000409c

08001104 <RAM_Address>:


void RAM_Address(void)  {
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  
  Write_Command(0x15);
 8001108:	2015      	movs	r0, #21
 800110a:	f7ff ff77 	bl	8000ffc <Write_Command>
  Write_Data(0x00);
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff ffa0 	bl	8001054 <Write_Data>
  Write_Data(0x7f);
 8001114:	207f      	movs	r0, #127	; 0x7f
 8001116:	f7ff ff9d 	bl	8001054 <Write_Data>

  Write_Command(0x75);
 800111a:	2075      	movs	r0, #117	; 0x75
 800111c:	f7ff ff6e 	bl	8000ffc <Write_Command>
  Write_Data(0x00);
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff ff97 	bl	8001054 <Write_Data>
  Write_Data(0x7f);
 8001126:	207f      	movs	r0, #127	; 0x7f
 8001128:	f7ff ff94 	bl	8001054 <Write_Data>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <Clear_Screen>:


void Clear_Screen(void)  {
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
  
  int i,j;
  
  uint8_t clear_byte[] = {0x00, 0x00};
 8001136:	2300      	movs	r3, #0
 8001138:	80bb      	strh	r3, [r7, #4]
  RAM_Address();
 800113a:	f7ff ffe3 	bl	8001104 <RAM_Address>
  Write_Command(0x5C);
 800113e:	205c      	movs	r0, #92	; 0x5c
 8001140:	f7ff ff5c 	bl	8000ffc <Write_Command>
  for(i=0;i<128;i++)  {
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	e010      	b.n	800116c <Clear_Screen+0x3c>
    for(j=0;j<128;j++)  {
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	e007      	b.n	8001160 <Clear_Screen+0x30>
      Write_Data_ptr(clear_byte,2);//RAM data clear
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	2102      	movs	r1, #2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ffa9 	bl	80010ac <Write_Data_ptr>
    for(j=0;j<128;j++)  {
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	3301      	adds	r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	2b7f      	cmp	r3, #127	; 0x7f
 8001164:	ddf4      	ble.n	8001150 <Clear_Screen+0x20>
  for(i=0;i<128;i++)  {
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3301      	adds	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b7f      	cmp	r3, #127	; 0x7f
 8001170:	ddeb      	ble.n	800114a <Clear_Screen+0x1a>
    }
  }
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <Set_Address>:
  Write_Data(y);
  Write_Data(SSD1351_HEIGHT-1);
  Write_Command(SSD1351_CMD_WRITERAM);
}
  
void Set_Address(uint8_t column, uint8_t row)  {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	460a      	mov	r2, r1
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	4613      	mov	r3, r2
 800118a:	71bb      	strb	r3, [r7, #6]
  
  Write_Command(SSD1351_CMD_SETCOLUMN);  
 800118c:	2015      	movs	r0, #21
 800118e:	f7ff ff35 	bl	8000ffc <Write_Command>
  Write_Data(column);	//X start 
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5d 	bl	8001054 <Write_Data>
  Write_Data(column);	//X end 
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff59 	bl	8001054 <Write_Data>
  Write_Command(SSD1351_CMD_SETROW); 
 80011a2:	2075      	movs	r0, #117	; 0x75
 80011a4:	f7ff ff2a 	bl	8000ffc <Write_Command>
  Write_Data(row);	//Y start 
 80011a8:	79bb      	ldrb	r3, [r7, #6]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff52 	bl	8001054 <Write_Data>
  Write_Data(row+7);	//Y end 
 80011b0:	79bb      	ldrb	r3, [r7, #6]
 80011b2:	3307      	adds	r3, #7
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff4c 	bl	8001054 <Write_Data>
  Write_Command(SSD1351_CMD_WRITERAM); 
 80011bc:	205c      	movs	r0, #92	; 0x5c
 80011be:	f7ff ff1d 	bl	8000ffc <Write_Command>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <Write_text>:
  
void Write_text(uint8_t dat) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
    
  uint8_t i;
    
  for(i=0;i<8;i++)  {
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]
 80011da:	e015      	b.n	8001208 <Write_text+0x3c>
    if (dat & 0x01)	
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d004      	beq.n	80011f0 <Write_text+0x24>
      Write_Data_ptr(color_byte,2);
 80011e6:	2102      	movs	r1, #2
 80011e8:	480b      	ldr	r0, [pc, #44]	; (8001218 <Write_text+0x4c>)
 80011ea:	f7ff ff5f 	bl	80010ac <Write_Data_ptr>
 80011ee:	e005      	b.n	80011fc <Write_text+0x30>
    else  {
      Write_Data(0x00);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff ff2f 	bl	8001054 <Write_Data>
      Write_Data(0x00);
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff ff2c 	bl	8001054 <Write_Data>
    }
    dat >>= 1;
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	085b      	lsrs	r3, r3, #1
 8001200:	71fb      	strb	r3, [r7, #7]
  for(i=0;i<8;i++)  {
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	3301      	adds	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	2b07      	cmp	r3, #7
 800120c:	d9e6      	bls.n	80011dc <Write_text+0x10>
  }
}
 800120e:	bf00      	nop
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20004090 	.word	0x20004090

0800121c <Device_Init>:
  Write_Data_ptr(color_byte,2);
  
}
  
  
void Device_Init(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit(&hspi1);
  SPI_GPIO_Init();

#endif

  OLED_CS(GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	2110      	movs	r1, #16
 8001224:	4854      	ldr	r0, [pc, #336]	; (8001378 <Device_Init+0x15c>)
 8001226:	f001 ff19 	bl	800305c <HAL_GPIO_WritePin>

  OLED_RST(GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2110      	movs	r1, #16
 800122e:	4853      	ldr	r0, [pc, #332]	; (800137c <Device_Init+0x160>)
 8001230:	f001 ff14 	bl	800305c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001234:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001238:	f001 f98c 	bl	8002554 <HAL_Delay>
  OLED_RST(GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	2110      	movs	r1, #16
 8001240:	484e      	ldr	r0, [pc, #312]	; (800137c <Device_Init+0x160>)
 8001242:	f001 ff0b 	bl	800305c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001246:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800124a:	f001 f983 	bl	8002554 <HAL_Delay>
    
  Write_Command(0xfd);	// command lock
 800124e:	20fd      	movs	r0, #253	; 0xfd
 8001250:	f7ff fed4 	bl	8000ffc <Write_Command>
  Write_Data(0x12);
 8001254:	2012      	movs	r0, #18
 8001256:	f7ff fefd 	bl	8001054 <Write_Data>
  Write_Command(0xfd);	// command lock
 800125a:	20fd      	movs	r0, #253	; 0xfd
 800125c:	f7ff fece 	bl	8000ffc <Write_Command>
  Write_Data(0xB1);
 8001260:	20b1      	movs	r0, #177	; 0xb1
 8001262:	f7ff fef7 	bl	8001054 <Write_Data>

  Write_Command(0xae);	// display off
 8001266:	20ae      	movs	r0, #174	; 0xae
 8001268:	f7ff fec8 	bl	8000ffc <Write_Command>
  Write_Command(0xa4); 	// Normal Display mode
 800126c:	20a4      	movs	r0, #164	; 0xa4
 800126e:	f7ff fec5 	bl	8000ffc <Write_Command>

  Write_Command(0x15);	//set column address
 8001272:	2015      	movs	r0, #21
 8001274:	f7ff fec2 	bl	8000ffc <Write_Command>
  Write_Data(0x00);     //column address start 00
 8001278:	2000      	movs	r0, #0
 800127a:	f7ff feeb 	bl	8001054 <Write_Data>
  Write_Data(0x7f);     //column address end 95
 800127e:	207f      	movs	r0, #127	; 0x7f
 8001280:	f7ff fee8 	bl	8001054 <Write_Data>
  Write_Command(0x75);	//set row address
 8001284:	2075      	movs	r0, #117	; 0x75
 8001286:	f7ff feb9 	bl	8000ffc <Write_Command>
  Write_Data(0x00);     //row address start 00
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fee2 	bl	8001054 <Write_Data>
  Write_Data(0x7f);     //row address end 63	
 8001290:	207f      	movs	r0, #127	; 0x7f
 8001292:	f7ff fedf 	bl	8001054 <Write_Data>

  Write_Command(0xB3);
 8001296:	20b3      	movs	r0, #179	; 0xb3
 8001298:	f7ff feb0 	bl	8000ffc <Write_Command>
  Write_Data(0xF1);
 800129c:	20f1      	movs	r0, #241	; 0xf1
 800129e:	f7ff fed9 	bl	8001054 <Write_Data>

  Write_Command(0xCA);	
 80012a2:	20ca      	movs	r0, #202	; 0xca
 80012a4:	f7ff feaa 	bl	8000ffc <Write_Command>
  Write_Data(0x7F);
 80012a8:	207f      	movs	r0, #127	; 0x7f
 80012aa:	f7ff fed3 	bl	8001054 <Write_Data>

  Write_Command(0xa0);  //set re-map & data format
 80012ae:	20a0      	movs	r0, #160	; 0xa0
 80012b0:	f7ff fea4 	bl	8000ffc <Write_Command>
  Write_Data(0x74);     //Horizontal address increment
 80012b4:	2074      	movs	r0, #116	; 0x74
 80012b6:	f7ff fecd 	bl	8001054 <Write_Data>

  Write_Command(0xa1);  //set display start line
 80012ba:	20a1      	movs	r0, #161	; 0xa1
 80012bc:	f7ff fe9e 	bl	8000ffc <Write_Command>
  Write_Data(0x00);     //start 00 line
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff fec7 	bl	8001054 <Write_Data>

  Write_Command(0xa2);  //set display offset
 80012c6:	20a2      	movs	r0, #162	; 0xa2
 80012c8:	f7ff fe98 	bl	8000ffc <Write_Command>
  Write_Data(0x00);
 80012cc:	2000      	movs	r0, #0
 80012ce:	f7ff fec1 	bl	8001054 <Write_Data>

  Write_Command(0xAB);	
 80012d2:	20ab      	movs	r0, #171	; 0xab
 80012d4:	f7ff fe92 	bl	8000ffc <Write_Command>
  Write_Command(0x01);	
 80012d8:	2001      	movs	r0, #1
 80012da:	f7ff fe8f 	bl	8000ffc <Write_Command>

  Write_Command(0xB4);	
 80012de:	20b4      	movs	r0, #180	; 0xb4
 80012e0:	f7ff fe8c 	bl	8000ffc <Write_Command>
  Write_Data(0xA0);	  
 80012e4:	20a0      	movs	r0, #160	; 0xa0
 80012e6:	f7ff feb5 	bl	8001054 <Write_Data>
  Write_Data(0xB5);  
 80012ea:	20b5      	movs	r0, #181	; 0xb5
 80012ec:	f7ff feb2 	bl	8001054 <Write_Data>
  Write_Data(0x55);    
 80012f0:	2055      	movs	r0, #85	; 0x55
 80012f2:	f7ff feaf 	bl	8001054 <Write_Data>

  Write_Command(0xC1);	
 80012f6:	20c1      	movs	r0, #193	; 0xc1
 80012f8:	f7ff fe80 	bl	8000ffc <Write_Command>
  Write_Data(0xC8);	
 80012fc:	20c8      	movs	r0, #200	; 0xc8
 80012fe:	f7ff fea9 	bl	8001054 <Write_Data>
  Write_Data(0x80);
 8001302:	2080      	movs	r0, #128	; 0x80
 8001304:	f7ff fea6 	bl	8001054 <Write_Data>
  Write_Data(0xC0);
 8001308:	20c0      	movs	r0, #192	; 0xc0
 800130a:	f7ff fea3 	bl	8001054 <Write_Data>

  Write_Command(0xC7);	
 800130e:	20c7      	movs	r0, #199	; 0xc7
 8001310:	f7ff fe74 	bl	8000ffc <Write_Command>
  Write_Data(0x0F);
 8001314:	200f      	movs	r0, #15
 8001316:	f7ff fe9d 	bl	8001054 <Write_Data>

  Write_Command(0xB1);	
 800131a:	20b1      	movs	r0, #177	; 0xb1
 800131c:	f7ff fe6e 	bl	8000ffc <Write_Command>
  Write_Data(0x32);
 8001320:	2032      	movs	r0, #50	; 0x32
 8001322:	f7ff fe97 	bl	8001054 <Write_Data>

  Write_Command(0xB2);	
 8001326:	20b2      	movs	r0, #178	; 0xb2
 8001328:	f7ff fe68 	bl	8000ffc <Write_Command>
  Write_Data(0xA4);
 800132c:	20a4      	movs	r0, #164	; 0xa4
 800132e:	f7ff fe91 	bl	8001054 <Write_Data>
  Write_Data(0x00);
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff fe8e 	bl	8001054 <Write_Data>
  Write_Data(0x00);
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff fe8b 	bl	8001054 <Write_Data>

  Write_Command(0xBB);	
 800133e:	20bb      	movs	r0, #187	; 0xbb
 8001340:	f7ff fe5c 	bl	8000ffc <Write_Command>
  Write_Data(0x17);
 8001344:	2017      	movs	r0, #23
 8001346:	f7ff fe85 	bl	8001054 <Write_Data>

  Write_Command(0xB6);
 800134a:	20b6      	movs	r0, #182	; 0xb6
 800134c:	f7ff fe56 	bl	8000ffc <Write_Command>
  Write_Data(0x01);
 8001350:	2001      	movs	r0, #1
 8001352:	f7ff fe7f 	bl	8001054 <Write_Data>

  Write_Command(0xBE);
 8001356:	20be      	movs	r0, #190	; 0xbe
 8001358:	f7ff fe50 	bl	8000ffc <Write_Command>
  Write_Data(0x05);
 800135c:	2005      	movs	r0, #5
 800135e:	f7ff fe79 	bl	8001054 <Write_Data>

  Write_Command(0xA6);
 8001362:	20a6      	movs	r0, #166	; 0xa6
 8001364:	f7ff fe4a 	bl	8000ffc <Write_Command>

  Clear_Screen();
 8001368:	f7ff fee2 	bl	8001130 <Clear_Screen>
  Write_Command(0xaf);	 //display on
 800136c:	20af      	movs	r0, #175	; 0xaf
 800136e:	f7ff fe45 	bl	8000ffc <Write_Command>
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40020000 	.word	0x40020000
 800137c:	40020800 	.word	0x40020800

08001380 <print_String>:
  
void Set_FontSize(FONT_SIZE size) {
  Font_Size = size;
}
  
void print_String(uint8_t x, uint8_t y, const uint8_t *text, FONT_SIZE size)  {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	603a      	str	r2, [r7, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
 800138e:	460b      	mov	r3, r1
 8001390:	71bb      	strb	r3, [r7, #6]
 8001392:	4613      	mov	r3, r2
 8001394:	717b      	strb	r3, [r7, #5]
  
  Font_Size = size;
 8001396:	4a0e      	ldr	r2, [pc, #56]	; (80013d0 <print_String+0x50>)
 8001398:	797b      	ldrb	r3, [r7, #5]
 800139a:	7013      	strb	r3, [r2, #0]
  
  if(Font_Size == FONT_5X8)
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <print_String+0x50>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d106      	bne.n	80013b2 <print_String+0x32>
    Display_String_5x8(x, y, text);
 80013a4:	79b9      	ldrb	r1, [r7, #6]
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f87a 	bl	80014a4 <Display_String_5x8>
  else if(Font_Size == FONT_8X16)
    Display_String_8x16(x, y, text);
  
}
 80013b0:	e009      	b.n	80013c6 <print_String+0x46>
  else if(Font_Size == FONT_8X16)
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <print_String+0x50>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d105      	bne.n	80013c6 <print_String+0x46>
    Display_String_8x16(x, y, text);
 80013ba:	79b9      	ldrb	r1, [r7, #6]
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 f807 	bl	80013d4 <Display_String_8x16>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200001d8 	.word	0x200001d8

080013d4 <Display_String_8x16>:

void Display_String_8x16(uint8_t x, uint8_t y, const uint8_t *text) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	603a      	str	r2, [r7, #0]
 80013de:	71fb      	strb	r3, [r7, #7]
 80013e0:	460b      	mov	r3, r1
 80013e2:	71bb      	strb	r3, [r7, #6]
  
  uint16_t i=0,j,k,n;
 80013e4:	2300      	movs	r3, #0
 80013e6:	81fb      	strh	r3, [r7, #14]
  if(x>120)  {
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	2b78      	cmp	r3, #120	; 0x78
 80013ec:	d94d      	bls.n	800148a <Display_String_8x16+0xb6>
    x=1;
 80013ee:	2301      	movs	r3, #1
 80013f0:	71fb      	strb	r3, [r7, #7]
  }
  while(text[i]>0x00) {
 80013f2:	e04a      	b.n	800148a <Display_String_8x16+0xb6>
    if((text[i]>=0x20)&&(text[i]<=0x7e))  {
 80013f4:	89fb      	ldrh	r3, [r7, #14]
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	4413      	add	r3, r2
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b1f      	cmp	r3, #31
 80013fe:	d941      	bls.n	8001484 <Display_String_8x16+0xb0>
 8001400:	89fb      	ldrh	r3, [r7, #14]
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	4413      	add	r3, r2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b7e      	cmp	r3, #126	; 0x7e
 800140a:	d83b      	bhi.n	8001484 <Display_String_8x16+0xb0>
      j=text[i]-0x20;
 800140c:	89fb      	ldrh	r3, [r7, #14]
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	4413      	add	r3, r2
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b29b      	uxth	r3, r3
 8001416:	3b20      	subs	r3, #32
 8001418:	813b      	strh	r3, [r7, #8]
      for(n=0;n<2;n++)  {
 800141a:	2300      	movs	r3, #0
 800141c:	817b      	strh	r3, [r7, #10]
 800141e:	e027      	b.n	8001470 <Display_String_8x16+0x9c>
        for(k=0;k<8;k++)  {
 8001420:	2300      	movs	r3, #0
 8001422:	81bb      	strh	r3, [r7, #12]
 8001424:	e01e      	b.n	8001464 <Display_String_8x16+0x90>
          Set_Address(x+k, n*8+y);
 8001426:	89bb      	ldrh	r3, [r7, #12]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4413      	add	r3, r2
 800142e:	b2d8      	uxtb	r0, r3
 8001430:	897b      	ldrh	r3, [r7, #10]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	b2da      	uxtb	r2, r3
 8001438:	79bb      	ldrb	r3, [r7, #6]
 800143a:	4413      	add	r3, r2
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fe9c 	bl	800117c <Set_Address>
          Write_text(ascii_table_8x16[j][k+8*n]);
 8001444:	893a      	ldrh	r2, [r7, #8]
 8001446:	89b9      	ldrh	r1, [r7, #12]
 8001448:	897b      	ldrh	r3, [r7, #10]
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	440b      	add	r3, r1
 800144e:	4914      	ldr	r1, [pc, #80]	; (80014a0 <Display_String_8x16+0xcc>)
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	440a      	add	r2, r1
 8001454:	4413      	add	r3, r2
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff feb7 	bl	80011cc <Write_text>
        for(k=0;k<8;k++)  {
 800145e:	89bb      	ldrh	r3, [r7, #12]
 8001460:	3301      	adds	r3, #1
 8001462:	81bb      	strh	r3, [r7, #12]
 8001464:	89bb      	ldrh	r3, [r7, #12]
 8001466:	2b07      	cmp	r3, #7
 8001468:	d9dd      	bls.n	8001426 <Display_String_8x16+0x52>
      for(n=0;n<2;n++)  {
 800146a:	897b      	ldrh	r3, [r7, #10]
 800146c:	3301      	adds	r3, #1
 800146e:	817b      	strh	r3, [r7, #10]
 8001470:	897b      	ldrh	r3, [r7, #10]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d9d4      	bls.n	8001420 <Display_String_8x16+0x4c>
        }
      }
      i++;
 8001476:	89fb      	ldrh	r3, [r7, #14]
 8001478:	3301      	adds	r3, #1
 800147a:	81fb      	strh	r3, [r7, #14]
      x+=8;
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	3308      	adds	r3, #8
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	e002      	b.n	800148a <Display_String_8x16+0xb6>
    }
    else
      i++;
 8001484:	89fb      	ldrh	r3, [r7, #14]
 8001486:	3301      	adds	r3, #1
 8001488:	81fb      	strh	r3, [r7, #14]
  while(text[i]>0x00) {
 800148a:	89fb      	ldrh	r3, [r7, #14]
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	4413      	add	r3, r2
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1ae      	bne.n	80013f4 <Display_String_8x16+0x20>
  }
}
 8001496:	bf00      	nop
 8001498:	bf00      	nop
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	08007548 	.word	0x08007548

080014a4 <Display_String_5x8>:

void Display_String_5x8(uint8_t x, uint8_t y, const uint8_t *text)  {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	603a      	str	r2, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	460b      	mov	r3, r1
 80014b2:	71bb      	strb	r3, [r7, #6]
  
  uint8_t i=0,j,k;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]

  while(text[i]>0x00) {	
 80014b8:	e04a      	b.n	8001550 <Display_String_5x8+0xac>
    if((text[i]>=0x20)&&(text[i]<=0x7e))  {
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b1f      	cmp	r3, #31
 80014c4:	d941      	bls.n	800154a <Display_String_5x8+0xa6>
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b7e      	cmp	r3, #126	; 0x7e
 80014d0:	d83b      	bhi.n	800154a <Display_String_5x8+0xa6>
      j=text[i]-0x20;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	3b20      	subs	r3, #32
 80014dc:	737b      	strb	r3, [r7, #13]
      for(k=0; k<5;k++)  {
 80014de:	2300      	movs	r3, #0
 80014e0:	73bb      	strb	r3, [r7, #14]
 80014e2:	e017      	b.n	8001514 <Display_String_5x8+0x70>
        Set_Address(x+k, y);
 80014e4:	79fa      	ldrb	r2, [r7, #7]
 80014e6:	7bbb      	ldrb	r3, [r7, #14]
 80014e8:	4413      	add	r3, r2
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	79ba      	ldrb	r2, [r7, #6]
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fe43 	bl	800117c <Set_Address>
        Write_text(ascii_table_5x8[j][k]);
 80014f6:	7b7a      	ldrb	r2, [r7, #13]
 80014f8:	7bb9      	ldrb	r1, [r7, #14]
 80014fa:	481b      	ldr	r0, [pc, #108]	; (8001568 <Display_String_5x8+0xc4>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	4403      	add	r3, r0
 8001504:	440b      	add	r3, r1
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fe5f 	bl	80011cc <Write_text>
      for(k=0; k<5;k++)  {
 800150e:	7bbb      	ldrb	r3, [r7, #14]
 8001510:	3301      	adds	r3, #1
 8001512:	73bb      	strb	r3, [r7, #14]
 8001514:	7bbb      	ldrb	r3, [r7, #14]
 8001516:	2b04      	cmp	r3, #4
 8001518:	d9e4      	bls.n	80014e4 <Display_String_5x8+0x40>
      }
      Set_Address(x+5, y);   
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	3305      	adds	r3, #5
 800151e:	b2db      	uxtb	r3, r3
 8001520:	79ba      	ldrb	r2, [r7, #6]
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fe29 	bl	800117c <Set_Address>
      Write_text(0x00);
 800152a:	2000      	movs	r0, #0
 800152c:	f7ff fe4e 	bl	80011cc <Write_text>
      i++;
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	3301      	adds	r3, #1
 8001534:	73fb      	strb	r3, [r7, #15]
      x+=6;
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	3306      	adds	r3, #6
 800153a:	71fb      	strb	r3, [r7, #7]
      if(x>=128)
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	2b00      	cmp	r3, #0
 8001542:	da05      	bge.n	8001550 <Display_String_5x8+0xac>
        x=1;
 8001544:	2301      	movs	r3, #1
 8001546:	71fb      	strb	r3, [r7, #7]
      if(x>=128)
 8001548:	e002      	b.n	8001550 <Display_String_5x8+0xac>
    }
    else  
      i++;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	3301      	adds	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
  while(text[i]>0x00) {	
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	4413      	add	r3, r2
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1ae      	bne.n	80014ba <Display_String_5x8+0x16>
  }
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	08007b38 	.word	0x08007b38

0800156c <Fill_Rect>:
/**************************************************************************/
/*!
    @brief  Draws a filled rectangle using HW acceleration
*/
/**************************************************************************/
void Fill_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	4604      	mov	r4, r0
 8001574:	4608      	mov	r0, r1
 8001576:	4611      	mov	r1, r2
 8001578:	461a      	mov	r2, r3
 800157a:	4623      	mov	r3, r4
 800157c:	80fb      	strh	r3, [r7, #6]
 800157e:	4603      	mov	r3, r0
 8001580:	80bb      	strh	r3, [r7, #4]
 8001582:	460b      	mov	r3, r1
 8001584:	807b      	strh	r3, [r7, #2]
 8001586:	4613      	mov	r3, r2
 8001588:	803b      	strh	r3, [r7, #0]

  if ((x >= SSD1351_WIDTH) || (y >= SSD1351_HEIGHT))
 800158a:	88fb      	ldrh	r3, [r7, #6]
 800158c:	2b7f      	cmp	r3, #127	; 0x7f
 800158e:	d84f      	bhi.n	8001630 <Fill_Rect+0xc4>
 8001590:	88bb      	ldrh	r3, [r7, #4]
 8001592:	2b7f      	cmp	r3, #127	; 0x7f
 8001594:	d84c      	bhi.n	8001630 <Fill_Rect+0xc4>
  return;

  // Y bounds check
  if (y+h > SSD1351_HEIGHT) {
 8001596:	88ba      	ldrh	r2, [r7, #4]
 8001598:	883b      	ldrh	r3, [r7, #0]
 800159a:	4413      	add	r3, r2
 800159c:	2b80      	cmp	r3, #128	; 0x80
 800159e:	dd03      	ble.n	80015a8 <Fill_Rect+0x3c>
    h = SSD1351_HEIGHT - y - 1;
 80015a0:	88bb      	ldrh	r3, [r7, #4]
 80015a2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80015a6:	803b      	strh	r3, [r7, #0]
  }

  // X bounds check
  if (x+w > SSD1351_WIDTH)  {
 80015a8:	88fa      	ldrh	r2, [r7, #6]
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	4413      	add	r3, r2
 80015ae:	2b80      	cmp	r3, #128	; 0x80
 80015b0:	dd03      	ble.n	80015ba <Fill_Rect+0x4e>
    w = SSD1351_WIDTH - x - 1;
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80015b8:	807b      	strh	r3, [r7, #2]
  }

  // set location
  Write_Command(SSD1351_CMD_SETCOLUMN);
 80015ba:	2015      	movs	r0, #21
 80015bc:	f7ff fd1e 	bl	8000ffc <Write_Command>
  Write_Data(x);
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fd45 	bl	8001054 <Write_Data>
  Write_Data(x+w-1);
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	4413      	add	r3, r2
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	3b01      	subs	r3, #1
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fd3a 	bl	8001054 <Write_Data>
  Write_Command(SSD1351_CMD_SETROW);
 80015e0:	2075      	movs	r0, #117	; 0x75
 80015e2:	f7ff fd0b 	bl	8000ffc <Write_Command>
  Write_Data(y);
 80015e6:	88bb      	ldrh	r3, [r7, #4]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fd32 	bl	8001054 <Write_Data>
  Write_Data(y+h-1);
 80015f0:	88bb      	ldrh	r3, [r7, #4]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	883b      	ldrh	r3, [r7, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4413      	add	r3, r2
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	3b01      	subs	r3, #1
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fd27 	bl	8001054 <Write_Data>
  // fill!
  Write_Command(SSD1351_CMD_WRITERAM);  
 8001606:	205c      	movs	r0, #92	; 0x5c
 8001608:	f7ff fcf8 	bl	8000ffc <Write_Command>
  
  for (uint16_t i=0; i < w*h; i++) {
 800160c:	2300      	movs	r3, #0
 800160e:	81fb      	strh	r3, [r7, #14]
 8001610:	e006      	b.n	8001620 <Fill_Rect+0xb4>
    Write_Data_ptr(color_fill_byte,2);
 8001612:	2102      	movs	r1, #2
 8001614:	4808      	ldr	r0, [pc, #32]	; (8001638 <Fill_Rect+0xcc>)
 8001616:	f7ff fd49 	bl	80010ac <Write_Data_ptr>
  for (uint16_t i=0; i < w*h; i++) {
 800161a:	89fb      	ldrh	r3, [r7, #14]
 800161c:	3301      	adds	r3, #1
 800161e:	81fb      	strh	r3, [r7, #14]
 8001620:	89fa      	ldrh	r2, [r7, #14]
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	8839      	ldrh	r1, [r7, #0]
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	429a      	cmp	r2, r3
 800162c:	dbf1      	blt.n	8001612 <Fill_Rect+0xa6>
 800162e:	e000      	b.n	8001632 <Fill_Rect+0xc6>
  return;
 8001630:	bf00      	nop
  }
}
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	bd90      	pop	{r4, r7, pc}
 8001638:	2000408c 	.word	0x2000408c

0800163c <handler_uart>:
 * @brief       
 * 
 * @param       parameters 
 * ************************************************************* **/
void handler_uart(void* parameters)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
    uint8_t frame[FRAME_SIZE] = {0};
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
    uint8_t buffID[ID_SIZE+1] = {0};
 8001654:	4bab      	ldr	r3, [pc, #684]	; (8001904 <handler_uart+0x2c8>)
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	813b      	strh	r3, [r7, #8]
 800165a:	2300      	movs	r3, #0
 800165c:	72bb      	strb	r3, [r7, #10]
    uint8_t id = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	77fb      	strb	r3, [r7, #31]

    while(1)
    {
        if(xQueueReceive(QueueHandle_uart, &frame, portMAX_DELAY))
 8001662:	4ba9      	ldr	r3, [pc, #676]	; (8001908 <handler_uart+0x2cc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f107 010c 	add.w	r1, r7, #12
 800166a:	f04f 32ff 	mov.w	r2, #4294967295
 800166e:	4618      	mov	r0, r3
 8001670:	f003 fd44 	bl	80050fc <xQueueReceive>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8140 	beq.w	80018fc <handler_uart+0x2c0>
        {
            if(frame[0] == '[' && frame[3] == ']')
 800167c:	7b3b      	ldrb	r3, [r7, #12]
 800167e:	2b5b      	cmp	r3, #91	; 0x5b
 8001680:	f040 813c 	bne.w	80018fc <handler_uart+0x2c0>
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	2b5d      	cmp	r3, #93	; 0x5d
 8001688:	f040 8138 	bne.w	80018fc <handler_uart+0x2c0>
            {
                // parsing 
	            memcpy(buffID, (char*)(frame + ID_OFFSET), ID_SIZE);
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	3301      	adds	r3, #1
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	b29b      	uxth	r3, r3
 8001696:	813b      	strh	r3, [r7, #8]
	            buffID[2] = '\0';
 8001698:	2300      	movs	r3, #0
 800169a:	72bb      	strb	r3, [r7, #10]
	            id = atoi((char*)buffID);
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	4618      	mov	r0, r3
 80016a2:	f005 fdef 	bl	8007284 <atoi>
 80016a6:	4603      	mov	r3, r0
 80016a8:	77fb      	strb	r3, [r7, #31]

                /* process the payload with the associated ID */
                switch (id)
 80016aa:	7ffb      	ldrb	r3, [r7, #31]
 80016ac:	2b51      	cmp	r3, #81	; 0x51
 80016ae:	f200 8127 	bhi.w	8001900 <handler_uart+0x2c4>
 80016b2:	a201      	add	r2, pc, #4	; (adr r2, 80016b8 <handler_uart+0x7c>)
 80016b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b8:	08001901 	.word	0x08001901
 80016bc:	08001901 	.word	0x08001901
 80016c0:	08001901 	.word	0x08001901
 80016c4:	08001901 	.word	0x08001901
 80016c8:	08001901 	.word	0x08001901
 80016cc:	08001901 	.word	0x08001901
 80016d0:	08001901 	.word	0x08001901
 80016d4:	08001901 	.word	0x08001901
 80016d8:	08001901 	.word	0x08001901
 80016dc:	08001901 	.word	0x08001901
 80016e0:	08001901 	.word	0x08001901
 80016e4:	08001901 	.word	0x08001901
 80016e8:	08001901 	.word	0x08001901
 80016ec:	08001901 	.word	0x08001901
 80016f0:	08001901 	.word	0x08001901
 80016f4:	08001901 	.word	0x08001901
 80016f8:	08001801 	.word	0x08001801
 80016fc:	08001819 	.word	0x08001819
 8001700:	0800180d 	.word	0x0800180d
 8001704:	08001901 	.word	0x08001901
 8001708:	08001901 	.word	0x08001901
 800170c:	08001901 	.word	0x08001901
 8001710:	08001901 	.word	0x08001901
 8001714:	08001901 	.word	0x08001901
 8001718:	08001901 	.word	0x08001901
 800171c:	08001901 	.word	0x08001901
 8001720:	08001901 	.word	0x08001901
 8001724:	08001901 	.word	0x08001901
 8001728:	08001901 	.word	0x08001901
 800172c:	08001901 	.word	0x08001901
 8001730:	08001901 	.word	0x08001901
 8001734:	08001901 	.word	0x08001901
 8001738:	08001825 	.word	0x08001825
 800173c:	08001831 	.word	0x08001831
 8001740:	0800183d 	.word	0x0800183d
 8001744:	08001849 	.word	0x08001849
 8001748:	08001855 	.word	0x08001855
 800174c:	08001861 	.word	0x08001861
 8001750:	0800186d 	.word	0x0800186d
 8001754:	08001879 	.word	0x08001879
 8001758:	08001885 	.word	0x08001885
 800175c:	08001891 	.word	0x08001891
 8001760:	0800189d 	.word	0x0800189d
 8001764:	08001901 	.word	0x08001901
 8001768:	08001901 	.word	0x08001901
 800176c:	08001901 	.word	0x08001901
 8001770:	08001901 	.word	0x08001901
 8001774:	08001901 	.word	0x08001901
 8001778:	080018a9 	.word	0x080018a9
 800177c:	080018b5 	.word	0x080018b5
 8001780:	080018c1 	.word	0x080018c1
 8001784:	08001901 	.word	0x08001901
 8001788:	08001901 	.word	0x08001901
 800178c:	08001901 	.word	0x08001901
 8001790:	08001901 	.word	0x08001901
 8001794:	08001901 	.word	0x08001901
 8001798:	08001901 	.word	0x08001901
 800179c:	08001901 	.word	0x08001901
 80017a0:	08001901 	.word	0x08001901
 80017a4:	08001901 	.word	0x08001901
 80017a8:	08001901 	.word	0x08001901
 80017ac:	08001901 	.word	0x08001901
 80017b0:	08001901 	.word	0x08001901
 80017b4:	08001901 	.word	0x08001901
 80017b8:	080018cd 	.word	0x080018cd
 80017bc:	080018d9 	.word	0x080018d9
 80017c0:	08001901 	.word	0x08001901
 80017c4:	08001901 	.word	0x08001901
 80017c8:	08001901 	.word	0x08001901
 80017cc:	08001901 	.word	0x08001901
 80017d0:	08001901 	.word	0x08001901
 80017d4:	08001901 	.word	0x08001901
 80017d8:	08001901 	.word	0x08001901
 80017dc:	08001901 	.word	0x08001901
 80017e0:	08001901 	.word	0x08001901
 80017e4:	08001901 	.word	0x08001901
 80017e8:	08001901 	.word	0x08001901
 80017ec:	08001901 	.word	0x08001901
 80017f0:	08001901 	.word	0x08001901
 80017f4:	08001901 	.word	0x08001901
 80017f8:	080018e5 	.word	0x080018e5
 80017fc:	080018f1 	.word	0x080018f1
                {
                    /* none */
                    case HMI_ID_NONE:                                                    break;

                    /* application data */
                    case HMI_ID_APP_PHASE:          id_parser_app_phase(frame);          break; 
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	4618      	mov	r0, r3
 8001806:	f000 f8b7 	bl	8001978 <id_parser_app_phase>
 800180a:	e07a      	b.n	8001902 <handler_uart+0x2c6>
                    case HMI_ID_APP_WINDOW:         id_parser_app_window(frame);         break; 
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	4618      	mov	r0, r3
 8001812:	f000 f8f1 	bl	80019f8 <id_parser_app_window>
 8001816:	e074      	b.n	8001902 <handler_uart+0x2c6>
                    case HMI_ID_APP_AEROC:          id_parser_app_aeroc(frame);          break;   
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4618      	mov	r0, r3
 800181e:	f000 f921 	bl	8001a64 <id_parser_app_aeroc>
 8001822:	e06e      	b.n	8001902 <handler_uart+0x2c6>
                    
                    /* sensors data */
                    case HMI_ID_SENS_IMU_AX:        id_parser_sens_imu_ax(frame);        break; 
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	4618      	mov	r0, r3
 800182a:	f000 f931 	bl	8001a90 <id_parser_sens_imu_ax>
 800182e:	e068      	b.n	8001902 <handler_uart+0x2c6>
                    case HMI_ID_SENS_IMU_AY:        id_parser_sens_imu_ay(frame);        break;   
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	4618      	mov	r0, r3
 8001836:	f000 f93d 	bl	8001ab4 <id_parser_sens_imu_ay>
 800183a:	e062      	b.n	8001902 <handler_uart+0x2c6>
                    case HMI_ID_SENS_IMU_AZ:        id_parser_sens_imu_az(frame);        break;    
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	4618      	mov	r0, r3
 8001842:	f000 f94b 	bl	8001adc <id_parser_sens_imu_az>
 8001846:	e05c      	b.n	8001902 <handler_uart+0x2c6>
                    case HMI_ID_SENS_IMU_GX:        id_parser_sens_imu_gx(frame);        break; 
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f957 	bl	8001b00 <id_parser_sens_imu_gx>
 8001852:	e056      	b.n	8001902 <handler_uart+0x2c6>
                    case HMI_ID_SENS_IMU_GY:        id_parser_sens_imu_gy(frame);        break;   
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	4618      	mov	r0, r3
 800185a:	f000 f965 	bl	8001b28 <id_parser_sens_imu_gy>
 800185e:	e050      	b.n	8001902 <handler_uart+0x2c6>
                    case HMI_ID_SENS_IMU_GZ:        id_parser_sens_imu_gz(frame);        break;
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	4618      	mov	r0, r3
 8001866:	f000 f971 	bl	8001b4c <id_parser_sens_imu_gz>
 800186a:	e04a      	b.n	8001902 <handler_uart+0x2c6>
                    case HMI_ID_SENS_IMU_TEMP:      id_parser_sens_imu_temp(frame);      break;
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	4618      	mov	r0, r3
 8001872:	f000 f97f 	bl	8001b74 <id_parser_sens_imu_temp>
 8001876:	e044      	b.n	8001902 <handler_uart+0x2c6>
                    case HMI_ID_SENS_IMU_ERROR:     id_parser_sens_imu_error(frame);     break;
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	4618      	mov	r0, r3
 800187e:	f000 f98d 	bl	8001b9c <id_parser_sens_imu_error>
 8001882:	e03e      	b.n	8001902 <handler_uart+0x2c6>
                    case HMI_ID_SENS_BARO_PRESS:    id_parser_sens_baro_press(frame);    break;
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	4618      	mov	r0, r3
 800188a:	f000 f99b 	bl	8001bc4 <id_parser_sens_baro_press>
 800188e:	e038      	b.n	8001902 <handler_uart+0x2c6>
                    case HMI_ID_SENS_BARO_TEMP:     id_parser_sens_baro_temp(frame);     break;
 8001890:	f107 030c 	add.w	r3, r7, #12
 8001894:	4618      	mov	r0, r3
 8001896:	f000 f9a9 	bl	8001bec <id_parser_sens_baro_temp>
 800189a:	e032      	b.n	8001902 <handler_uart+0x2c6>
                    case HMI_ID_SENS_BARO_ERROR:    id_parser_sens_baro_error(frame);    break;
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 f9b7 	bl	8001c14 <id_parser_sens_baro_error>
 80018a6:	e02c      	b.n	8001902 <handler_uart+0x2c6>
                    
                    /* monitoring data */
                    case HMI_ID_MNTR_BAT_SEQ:       id_parser_mntr_bat_seq(frame);       break;
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 f9c5 	bl	8001c3c <id_parser_mntr_bat_seq>
 80018b2:	e026      	b.n	8001902 <handler_uart+0x2c6>
                    case HMI_ID_MNTR_BAT_MOTOR1:    id_parser_mntr_bat_motor1(frame);    break;
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 f9ef 	bl	8001c9c <id_parser_mntr_bat_motor1>
 80018be:	e020      	b.n	8001902 <handler_uart+0x2c6>
                    case HMI_ID_MNTR_BAT_MOTOR2:    id_parser_mntr_bat_motor2(frame);    break;
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 fa19 	bl	8001cfc <id_parser_mntr_bat_motor2>
 80018ca:	e01a      	b.n	8001902 <handler_uart+0x2c6>
                    
                    /* recovery data */
                    case HMI_ID_RECOV_LAST_CMD:     id_parser_recov_last_cmd(frame);     break;
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 fa43 	bl	8001d5c <id_parser_recov_last_cmd>
 80018d6:	e014      	b.n	8001902 <handler_uart+0x2c6>
                    case HMI_ID_RECOV_STATUS:       id_parser_recov_status(frame);       break;
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 fa51 	bl	8001d84 <id_parser_recov_status>
 80018e2:	e00e      	b.n	8001902 <handler_uart+0x2c6>
                    
                    /* payload data */
                    case HMI_ID_PAYLOAD_LAST_CMD:   id_parser_payload_last_cmd(frame);   break; 
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fa5f 	bl	8001dac <id_parser_payload_last_cmd>
 80018ee:	e008      	b.n	8001902 <handler_uart+0x2c6>
                    case HMI_ID_PAYLOAD_STATUS:     id_parser_payload_status(frame);     break;
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 fa6d 	bl	8001dd4 <id_parser_payload_status>
 80018fa:	e002      	b.n	8001902 <handler_uart+0x2c6>

                    default:                                                             break;

                }
            }
 80018fc:	bf00      	nop
 80018fe:	e6b0      	b.n	8001662 <handler_uart+0x26>
                    default:                                                             break;
 8001900:	bf00      	nop
        if(xQueueReceive(QueueHandle_uart, &frame, portMAX_DELAY))
 8001902:	e6ae      	b.n	8001662 <handler_uart+0x26>
 8001904:	080074f8 	.word	0x080074f8
 8001908:	20004098 	.word	0x20004098

0800190c <uart_init>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
void uart_init(STRUCT_UART_STORAGE_t* parsed_data)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af02      	add	r7, sp, #8
 8001912:	6078      	str	r0, [r7, #4]
    BaseType_t status;

    parsed_data = &uart_storage;
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <uart_init+0x58>)
 8001916:	607b      	str	r3, [r7, #4]

    QueueHandle_uart = xQueueCreate (32, sizeof(uint8_t*));
 8001918:	2200      	movs	r2, #0
 800191a:	2104      	movs	r1, #4
 800191c:	2020      	movs	r0, #32
 800191e:	f003 f9c3 	bl	8004ca8 <xQueueGenericCreate>
 8001922:	4603      	mov	r3, r0
 8001924:	4a10      	ldr	r2, [pc, #64]	; (8001968 <uart_init+0x5c>)
 8001926:	6013      	str	r3, [r2, #0]
    status = xTaskCreate(handler_uart, "task_uart", configMINIMAL_STACK_SIZE, NULL, TASK_PRIORITY_APP_UART, &TaskHandle_uart);
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <uart_init+0x60>)
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	2305      	movs	r3, #5
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2300      	movs	r3, #0
 8001932:	2280      	movs	r2, #128	; 0x80
 8001934:	490e      	ldr	r1, [pc, #56]	; (8001970 <uart_init+0x64>)
 8001936:	480f      	ldr	r0, [pc, #60]	; (8001974 <uart_init+0x68>)
 8001938:	f003 fe2e 	bl	8005598 <xTaskCreate>
 800193c:	60f8      	str	r0, [r7, #12]
    configASSERT(status == pdPASS);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d00a      	beq.n	800195a <uart_init+0x4e>
        __asm volatile
 8001944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001948:	f383 8811 	msr	BASEPRI, r3
 800194c:	f3bf 8f6f 	isb	sy
 8001950:	f3bf 8f4f 	dsb	sy
 8001954:	60bb      	str	r3, [r7, #8]
    }
 8001956:	bf00      	nop
 8001958:	e7fe      	b.n	8001958 <uart_init+0x4c>
}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200001dc 	.word	0x200001dc
 8001968:	20004098 	.word	0x20004098
 800196c:	20004094 	.word	0x20004094
 8001970:	080074fc 	.word	0x080074fc
 8001974:	0800163d 	.word	0x0800163d

08001978 <id_parser_app_phase>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_app_phase(uint8_t* data)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
    memcpy(uart_storage.APP_PHASE, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3304      	adds	r3, #4
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <id_parser_app_phase+0x70>)
 800198a:	601a      	str	r2, [r3, #0]

    /* phase wait */
    if(!strcmp("wait", (char*)(data + PAYLOAD_OFFSET)))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3304      	adds	r3, #4
 8001990:	4619      	mov	r1, r3
 8001992:	4816      	ldr	r0, [pc, #88]	; (80019ec <id_parser_app_phase+0x74>)
 8001994:	f7fe fc3c 	bl	8000210 <strcmp>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d104      	bne.n	80019a8 <id_parser_app_phase+0x30>
    {
        leds_send_cmd(E_LIST_LED4, E_CMD_LEDS_GREEN);
 800199e:	2102      	movs	r1, #2
 80019a0:	2003      	movs	r0, #3
 80019a2:	f7ff faf9 	bl	8000f98 <leds_send_cmd>
    /* phase descend */
    if(!strcmp("descend", (char*)(data + PAYLOAD_OFFSET)))
    {
        leds_send_cmd(E_LIST_LED4, E_CMD_LEDS_NONE);
    }
}
 80019a6:	e01a      	b.n	80019de <id_parser_app_phase+0x66>
    if(!strcmp("ascend", (char*)(data + PAYLOAD_OFFSET)))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3304      	adds	r3, #4
 80019ac:	4619      	mov	r1, r3
 80019ae:	4810      	ldr	r0, [pc, #64]	; (80019f0 <id_parser_app_phase+0x78>)
 80019b0:	f7fe fc2e 	bl	8000210 <strcmp>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d104      	bne.n	80019c4 <id_parser_app_phase+0x4c>
        leds_send_cmd(E_LIST_LED4, E_CMD_LEDS_RED);
 80019ba:	2101      	movs	r1, #1
 80019bc:	2003      	movs	r0, #3
 80019be:	f7ff faeb 	bl	8000f98 <leds_send_cmd>
}
 80019c2:	e00c      	b.n	80019de <id_parser_app_phase+0x66>
    if(!strcmp("descend", (char*)(data + PAYLOAD_OFFSET)))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3304      	adds	r3, #4
 80019c8:	4619      	mov	r1, r3
 80019ca:	480a      	ldr	r0, [pc, #40]	; (80019f4 <id_parser_app_phase+0x7c>)
 80019cc:	f7fe fc20 	bl	8000210 <strcmp>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d103      	bne.n	80019de <id_parser_app_phase+0x66>
        leds_send_cmd(E_LIST_LED4, E_CMD_LEDS_NONE);
 80019d6:	2100      	movs	r1, #0
 80019d8:	2003      	movs	r0, #3
 80019da:	f7ff fadd 	bl	8000f98 <leds_send_cmd>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200001dc 	.word	0x200001dc
 80019ec:	08007508 	.word	0x08007508
 80019f0:	08007510 	.word	0x08007510
 80019f4:	08007518 	.word	0x08007518

080019f8 <id_parser_app_window>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_app_window(uint8_t* data)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
    /* window in */
    if(!strcmp("in", (char*)(data + PAYLOAD_OFFSET)))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3304      	adds	r3, #4
 8001a04:	4619      	mov	r1, r3
 8001a06:	4814      	ldr	r0, [pc, #80]	; (8001a58 <id_parser_app_window+0x60>)
 8001a08:	f7fe fc02 	bl	8000210 <strcmp>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10a      	bne.n	8001a28 <id_parser_app_window+0x30>
    {
        memcpy(uart_storage.APP_WINDOW, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3304      	adds	r3, #4
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <id_parser_app_window+0x64>)
 8001a1c:	61da      	str	r2, [r3, #28]
        leds_send_cmd(E_LIST_LED4, E_CMD_LEDS_BLUE);
 8001a1e:	2103      	movs	r1, #3
 8001a20:	2003      	movs	r0, #3
 8001a22:	f7ff fab9 	bl	8000f98 <leds_send_cmd>
    if(!strcmp("out", (char*)(data + PAYLOAD_OFFSET)))
    {
        memcpy(uart_storage.APP_WINDOW, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
        leds_send_cmd(E_LIST_LED4, E_CMD_LEDS_NONE);
    }
}
 8001a26:	e012      	b.n	8001a4e <id_parser_app_window+0x56>
    if(!strcmp("out", (char*)(data + PAYLOAD_OFFSET)))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	480c      	ldr	r0, [pc, #48]	; (8001a60 <id_parser_app_window+0x68>)
 8001a30:	f7fe fbee 	bl	8000210 <strcmp>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <id_parser_app_window+0x56>
        memcpy(uart_storage.APP_WINDOW, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <id_parser_app_window+0x64>)
 8001a44:	61da      	str	r2, [r3, #28]
        leds_send_cmd(E_LIST_LED4, E_CMD_LEDS_NONE);
 8001a46:	2100      	movs	r1, #0
 8001a48:	2003      	movs	r0, #3
 8001a4a:	f7ff faa5 	bl	8000f98 <leds_send_cmd>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	08007520 	.word	0x08007520
 8001a5c:	200001dc 	.word	0x200001dc
 8001a60:	08007524 	.word	0x08007524

08001a64 <id_parser_app_aeroc>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_app_aeroc(uint8_t* data)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
    memcpy(uart_storage.APP_AEROC, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3304      	adds	r3, #4
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <id_parser_app_aeroc+0x28>)
 8001a76:	f8c3 200e 	str.w	r2, [r3, #14]
    leds_send_cmd(E_LIST_LED5, E_CMD_LEDS_RED);
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	2004      	movs	r0, #4
 8001a7e:	f7ff fa8b 	bl	8000f98 <leds_send_cmd>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200001dc 	.word	0x200001dc

08001a90 <id_parser_sens_imu_ax>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_sens_imu_ax(uint8_t* data)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
    memcpy(uart_storage.SENS_IMU_AX, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <id_parser_sens_imu_ax+0x20>)
 8001aa2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	200001dc 	.word	0x200001dc

08001ab4 <id_parser_sens_imu_ay>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_sens_imu_ay(uint8_t* data)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
    memcpy(uart_storage.SENS_IMU_AY, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <id_parser_sens_imu_ay+0x24>)
 8001ac6:	f8c3 2046 	str.w	r2, [r3, #70]	; 0x46
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	200001dc 	.word	0x200001dc

08001adc <id_parser_sens_imu_az>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_sens_imu_az(uint8_t* data)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
    memcpy(uart_storage.SENS_IMU_AZ, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <id_parser_sens_imu_az+0x20>)
 8001aee:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	200001dc 	.word	0x200001dc

08001b00 <id_parser_sens_imu_gx>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_sens_imu_gx(uint8_t* data)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
    memcpy(uart_storage.SENS_IMU_GX, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <id_parser_sens_imu_gx+0x24>)
 8001b12:	f8c3 2062 	str.w	r2, [r3, #98]	; 0x62
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	200001dc 	.word	0x200001dc

08001b28 <id_parser_sens_imu_gy>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_sens_imu_gy(uint8_t* data)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
    memcpy(uart_storage.SENS_IMU_GY, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3304      	adds	r3, #4
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <id_parser_sens_imu_gy+0x20>)
 8001b3a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	200001dc 	.word	0x200001dc

08001b4c <id_parser_sens_imu_gz>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_sens_imu_gz(uint8_t* data)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
    memcpy(uart_storage.SENS_IMU_GZ, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3304      	adds	r3, #4
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <id_parser_sens_imu_gz+0x24>)
 8001b5e:	f8c3 207e 	str.w	r2, [r3, #126]	; 0x7e
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	200001dc 	.word	0x200001dc

08001b74 <id_parser_sens_imu_temp>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_sens_imu_temp(uint8_t* data)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
    memcpy(uart_storage.SENS_IMU_TEMP, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3304      	adds	r3, #4
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <id_parser_sens_imu_temp+0x24>)
 8001b86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	200001dc 	.word	0x200001dc

08001b9c <id_parser_sens_imu_error>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_sens_imu_error(uint8_t* data)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
    memcpy(uart_storage.SENS_IMU_ERROR, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <id_parser_sens_imu_error+0x24>)
 8001bae:	f8c3 209a 	str.w	r2, [r3, #154]	; 0x9a
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	200001dc 	.word	0x200001dc

08001bc4 <id_parser_sens_baro_press>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_sens_baro_press(uint8_t* data)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
    memcpy(uart_storage.SENS_BARO_PRESS, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3304      	adds	r3, #4
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <id_parser_sens_baro_press+0x24>)
 8001bd6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	200001dc 	.word	0x200001dc

08001bec <id_parser_sens_baro_temp>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_sens_baro_temp(uint8_t* data)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
    memcpy(uart_storage.SENS_BARO_TEMP, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <id_parser_sens_baro_temp+0x24>)
 8001bfe:	f8c3 20b6 	str.w	r2, [r3, #182]	; 0xb6
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	200001dc 	.word	0x200001dc

08001c14 <id_parser_sens_baro_error>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_sens_baro_error(uint8_t* data)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
    memcpy(uart_storage.SENS_BARO_ERROR, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3304      	adds	r3, #4
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <id_parser_sens_baro_error+0x24>)
 8001c26:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	200001dc 	.word	0x200001dc

08001c3c <id_parser_mntr_bat_seq>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_mntr_bat_seq(uint8_t* data)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
    memcpy(uart_storage.MNTR_BAT_SEQ, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3304      	adds	r3, #4
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <id_parser_mntr_bat_seq+0x54>)
 8001c4e:	f8c3 20d2 	str.w	r2, [r3, #210]	; 0xd2
    
    /* battery ok */
    if(!strcmp("ok", (char*)(data + PAYLOAD_OFFSET)))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3304      	adds	r3, #4
 8001c56:	4619      	mov	r1, r3
 8001c58:	480e      	ldr	r0, [pc, #56]	; (8001c94 <id_parser_mntr_bat_seq+0x58>)
 8001c5a:	f7fe fad9 	bl	8000210 <strcmp>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d104      	bne.n	8001c6e <id_parser_mntr_bat_seq+0x32>
    {
        leds_send_cmd(E_LIST_LED1, E_CMD_LEDS_GREEN);
 8001c64:	2102      	movs	r1, #2
 8001c66:	2000      	movs	r0, #0
 8001c68:	f7ff f996 	bl	8000f98 <leds_send_cmd>
    /* battery ko */
    if(!strcmp("ko", (char*)(data + PAYLOAD_OFFSET)))
    {
        leds_send_cmd(E_LIST_LED1, E_CMD_LEDS_RED);
    }
}
 8001c6c:	e00c      	b.n	8001c88 <id_parser_mntr_bat_seq+0x4c>
    if(!strcmp("ko", (char*)(data + PAYLOAD_OFFSET)))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3304      	adds	r3, #4
 8001c72:	4619      	mov	r1, r3
 8001c74:	4808      	ldr	r0, [pc, #32]	; (8001c98 <id_parser_mntr_bat_seq+0x5c>)
 8001c76:	f7fe facb 	bl	8000210 <strcmp>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d103      	bne.n	8001c88 <id_parser_mntr_bat_seq+0x4c>
        leds_send_cmd(E_LIST_LED1, E_CMD_LEDS_RED);
 8001c80:	2101      	movs	r1, #1
 8001c82:	2000      	movs	r0, #0
 8001c84:	f7ff f988 	bl	8000f98 <leds_send_cmd>
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	200001dc 	.word	0x200001dc
 8001c94:	08007528 	.word	0x08007528
 8001c98:	0800752c 	.word	0x0800752c

08001c9c <id_parser_mntr_bat_motor1>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_mntr_bat_motor1(uint8_t* data)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
    memcpy(uart_storage.MNTR_BAT_MOTOR1, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <id_parser_mntr_bat_motor1+0x54>)
 8001cae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    
    /* battery ok */
    if(!strcmp("ok", (char*)(data + PAYLOAD_OFFSET)))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480e      	ldr	r0, [pc, #56]	; (8001cf4 <id_parser_mntr_bat_motor1+0x58>)
 8001cba:	f7fe faa9 	bl	8000210 <strcmp>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d104      	bne.n	8001cce <id_parser_mntr_bat_motor1+0x32>
    {
        leds_send_cmd(E_LIST_LED2, E_CMD_LEDS_GREEN);
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f7ff f966 	bl	8000f98 <leds_send_cmd>
    /* battery ko */
    if(!strcmp("ko", (char*)(data + PAYLOAD_OFFSET)))
    {
        leds_send_cmd(E_LIST_LED2, E_CMD_LEDS_RED);
    }
}
 8001ccc:	e00c      	b.n	8001ce8 <id_parser_mntr_bat_motor1+0x4c>
    if(!strcmp("ko", (char*)(data + PAYLOAD_OFFSET)))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4808      	ldr	r0, [pc, #32]	; (8001cf8 <id_parser_mntr_bat_motor1+0x5c>)
 8001cd6:	f7fe fa9b 	bl	8000210 <strcmp>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d103      	bne.n	8001ce8 <id_parser_mntr_bat_motor1+0x4c>
        leds_send_cmd(E_LIST_LED2, E_CMD_LEDS_RED);
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f7ff f958 	bl	8000f98 <leds_send_cmd>
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200001dc 	.word	0x200001dc
 8001cf4:	08007528 	.word	0x08007528
 8001cf8:	0800752c 	.word	0x0800752c

08001cfc <id_parser_mntr_bat_motor2>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_mntr_bat_motor2(uint8_t* data)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
    memcpy(uart_storage.MNTR_BAT_MOTOR2, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3304      	adds	r3, #4
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <id_parser_mntr_bat_motor2+0x54>)
 8001d0e:	f8c3 20ee 	str.w	r2, [r3, #238]	; 0xee

    /* battery ok */
    if(!strcmp("ok", (char*)(data + PAYLOAD_OFFSET)))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3304      	adds	r3, #4
 8001d16:	4619      	mov	r1, r3
 8001d18:	480e      	ldr	r0, [pc, #56]	; (8001d54 <id_parser_mntr_bat_motor2+0x58>)
 8001d1a:	f7fe fa79 	bl	8000210 <strcmp>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d104      	bne.n	8001d2e <id_parser_mntr_bat_motor2+0x32>
    {
        leds_send_cmd(E_LIST_LED3, E_CMD_LEDS_GREEN);
 8001d24:	2102      	movs	r1, #2
 8001d26:	2002      	movs	r0, #2
 8001d28:	f7ff f936 	bl	8000f98 <leds_send_cmd>
    /* battery ko */
    if(!strcmp("ko", (char*)(data + PAYLOAD_OFFSET)))
    {
        leds_send_cmd(E_LIST_LED3, E_CMD_LEDS_RED);
    }
}
 8001d2c:	e00c      	b.n	8001d48 <id_parser_mntr_bat_motor2+0x4c>
    if(!strcmp("ko", (char*)(data + PAYLOAD_OFFSET)))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3304      	adds	r3, #4
 8001d32:	4619      	mov	r1, r3
 8001d34:	4808      	ldr	r0, [pc, #32]	; (8001d58 <id_parser_mntr_bat_motor2+0x5c>)
 8001d36:	f7fe fa6b 	bl	8000210 <strcmp>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d103      	bne.n	8001d48 <id_parser_mntr_bat_motor2+0x4c>
        leds_send_cmd(E_LIST_LED3, E_CMD_LEDS_RED);
 8001d40:	2101      	movs	r1, #1
 8001d42:	2002      	movs	r0, #2
 8001d44:	f7ff f928 	bl	8000f98 <leds_send_cmd>
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	200001dc 	.word	0x200001dc
 8001d54:	08007528 	.word	0x08007528
 8001d58:	0800752c 	.word	0x0800752c

08001d5c <id_parser_recov_last_cmd>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_recov_last_cmd(uint8_t* data)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
    memcpy(uart_storage.RECOV_LAST_CMD, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3304      	adds	r3, #4
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <id_parser_recov_last_cmd+0x24>)
 8001d6e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	200001dc 	.word	0x200001dc

08001d84 <id_parser_recov_status>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_recov_status(uint8_t* data)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
    memcpy(uart_storage.RECOV_STATUS, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3304      	adds	r3, #4
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <id_parser_recov_status+0x24>)
 8001d96:	f8c3 210a 	str.w	r2, [r3, #266]	; 0x10a
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	200001dc 	.word	0x200001dc

08001dac <id_parser_payload_last_cmd>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_payload_last_cmd(uint8_t* data)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
    memcpy(uart_storage.PAYLOAD_LAST_CMD, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3304      	adds	r3, #4
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <id_parser_payload_last_cmd+0x24>)
 8001dbe:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	200001dc 	.word	0x200001dc

08001dd4 <id_parser_payload_status>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static void id_parser_payload_status(uint8_t* data)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    memcpy(uart_storage.PAYLOAD_STATUS, (char*)(data + PAYLOAD_OFFSET), sizeof(PAYLOAD_SIZE));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3304      	adds	r3, #4
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <id_parser_payload_status+0x24>)
 8001de6:	f8c3 2126 	str.w	r2, [r3, #294]	; 0x126
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	200001dc 	.word	0x200001dc

08001dfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <MX_DMA_Init+0x3c>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a0b      	ldr	r2, [pc, #44]	; (8001e38 <MX_DMA_Init+0x3c>)
 8001e0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <MX_DMA_Init+0x3c>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	2010      	movs	r0, #16
 8001e24:	f000 fc72 	bl	800270c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e28:	2010      	movs	r0, #16
 8001e2a:	f000 fc8b 	bl	8002744 <HAL_NVIC_EnableIRQ>

}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800

08001e3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e42:	f107 030c 	add.w	r3, r7, #12
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	4b49      	ldr	r3, [pc, #292]	; (8001f7c <MX_GPIO_Init+0x140>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a48      	ldr	r2, [pc, #288]	; (8001f7c <MX_GPIO_Init+0x140>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b46      	ldr	r3, [pc, #280]	; (8001f7c <MX_GPIO_Init+0x140>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	4b42      	ldr	r3, [pc, #264]	; (8001f7c <MX_GPIO_Init+0x140>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a41      	ldr	r2, [pc, #260]	; (8001f7c <MX_GPIO_Init+0x140>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b3f      	ldr	r3, [pc, #252]	; (8001f7c <MX_GPIO_Init+0x140>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	4b3b      	ldr	r3, [pc, #236]	; (8001f7c <MX_GPIO_Init+0x140>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a3a      	ldr	r2, [pc, #232]	; (8001f7c <MX_GPIO_Init+0x140>)
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b38      	ldr	r3, [pc, #224]	; (8001f7c <MX_GPIO_Init+0x140>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB5_B_Pin|RGB5_G_Pin|RGB5_R_Pin|RGB4_B_Pin
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f24e 31d7 	movw	r1, #58327	; 0xe3d7
 8001eac:	4834      	ldr	r0, [pc, #208]	; (8001f80 <MX_GPIO_Init+0x144>)
 8001eae:	f001 f8d5 	bl	800305c <HAL_GPIO_WritePin>
                          |RGB4_G_Pin|RGB4_R_Pin|SSD1351_NRST_Pin|RGB3_B_Pin
                          |RGB3_G_Pin|RGB3_R_Pin|RGB2_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEQ_RST_Pin|SSD1351_NSS_Pin|SSD1351_DC_Pin|RGB2_G_Pin
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f641 7151 	movw	r1, #8017	; 0x1f51
 8001eb8:	4832      	ldr	r0, [pc, #200]	; (8001f84 <MX_GPIO_Init+0x148>)
 8001eba:	f001 f8cf 	bl	800305c <HAL_GPIO_WritePin>
                          |RGB2_R_Pin|RGB1_B_Pin|RGB1_G_Pin|RGB1_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BTN1_Pin|BTN2_Pin|BTN3_Pin|BTN4_Pin, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	21f0      	movs	r1, #240	; 0xf0
 8001ec2:	4831      	ldr	r0, [pc, #196]	; (8001f88 <MX_GPIO_Init+0x14c>)
 8001ec4:	f001 f8ca 	bl	800305c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = RGB5_B_Pin|RGB5_G_Pin|RGB5_R_Pin|RGB4_B_Pin
 8001ec8:	f24e 33c7 	movw	r3, #58311	; 0xe3c7
 8001ecc:	60fb      	str	r3, [r7, #12]
                          |RGB4_G_Pin|RGB4_R_Pin|RGB3_B_Pin|RGB3_G_Pin
                          |RGB3_R_Pin|RGB2_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4827      	ldr	r0, [pc, #156]	; (8001f80 <MX_GPIO_Init+0x144>)
 8001ee2:	f000 ff27 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SEQ_RST_Pin|SSD1351_NSS_Pin;
 8001ee6:	2311      	movs	r3, #17
 8001ee8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	4619      	mov	r1, r3
 8001efc:	4821      	ldr	r0, [pc, #132]	; (8001f84 <MX_GPIO_Init+0x148>)
 8001efe:	f000 ff19 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1351_DC_Pin;
 8001f02:	2340      	movs	r3, #64	; 0x40
 8001f04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f06:	2301      	movs	r3, #1
 8001f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSD1351_DC_GPIO_Port, &GPIO_InitStruct);
 8001f12:	f107 030c 	add.w	r3, r7, #12
 8001f16:	4619      	mov	r1, r3
 8001f18:	481a      	ldr	r0, [pc, #104]	; (8001f84 <MX_GPIO_Init+0x148>)
 8001f1a:	f000 ff0b 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1351_NRST_Pin;
 8001f1e:	2310      	movs	r3, #16
 8001f20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f22:	2301      	movs	r3, #1
 8001f24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSD1351_NRST_GPIO_Port, &GPIO_InitStruct);
 8001f2e:	f107 030c 	add.w	r3, r7, #12
 8001f32:	4619      	mov	r1, r3
 8001f34:	4812      	ldr	r0, [pc, #72]	; (8001f80 <MX_GPIO_Init+0x144>)
 8001f36:	f000 fefd 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = RGB2_G_Pin|RGB2_R_Pin|RGB1_B_Pin|RGB1_G_Pin
 8001f3a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001f3e:	60fb      	str	r3, [r7, #12]
                          |RGB1_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f40:	2301      	movs	r3, #1
 8001f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4c:	f107 030c 	add.w	r3, r7, #12
 8001f50:	4619      	mov	r1, r3
 8001f52:	480c      	ldr	r0, [pc, #48]	; (8001f84 <MX_GPIO_Init+0x148>)
 8001f54:	f000 feee 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin|BTN4_Pin;
 8001f58:	23f0      	movs	r3, #240	; 0xf0
 8001f5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4806      	ldr	r0, [pc, #24]	; (8001f88 <MX_GPIO_Init+0x14c>)
 8001f70:	f000 fee0 	bl	8002d34 <HAL_GPIO_Init>

}
 8001f74:	bf00      	nop
 8001f76:	3720      	adds	r7, #32
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020800 	.word	0x40020800
 8001f84:	40020000 	.word	0x40020000
 8001f88:	40020400 	.word	0x40020400

08001f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f90:	f000 fa9e 	bl	80024d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f94:	f000 f80e 	bl	8001fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f98:	f7ff ff50 	bl	8001e3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001f9c:	f000 f9ca 	bl	8002334 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001fa0:	f7ff ff2c 	bl	8001dfc <MX_DMA_Init>
  MX_SPI1_Init();
 8001fa4:	f000 f88c 	bl	80020c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  API_HMI_START();
 8001fa8:	f7fe fcc4 	bl	8000934 <API_HMI_START>

  vTaskStartScheduler();
 8001fac:	f003 fcb8 	bl	8005920 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <main+0x24>
	...

08001fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b094      	sub	sp, #80	; 0x50
 8001fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fba:	f107 031c 	add.w	r3, r7, #28
 8001fbe:	2234      	movs	r2, #52	; 0x34
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f005 f99a 	bl	80072fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc8:	f107 0308 	add.w	r3, r7, #8
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd8:	2300      	movs	r3, #0
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <SystemClock_Config+0xd4>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	4a29      	ldr	r2, [pc, #164]	; (8002088 <SystemClock_Config+0xd4>)
 8001fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe8:	4b27      	ldr	r3, [pc, #156]	; (8002088 <SystemClock_Config+0xd4>)
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	4b24      	ldr	r3, [pc, #144]	; (800208c <SystemClock_Config+0xd8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002000:	4a22      	ldr	r2, [pc, #136]	; (800208c <SystemClock_Config+0xd8>)
 8002002:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b20      	ldr	r3, [pc, #128]	; (800208c <SystemClock_Config+0xd8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002010:	603b      	str	r3, [r7, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002014:	2302      	movs	r3, #2
 8002016:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002018:	2301      	movs	r3, #1
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800201c:	2310      	movs	r3, #16
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002020:	2302      	movs	r3, #2
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002024:	2300      	movs	r3, #0
 8002026:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002028:	2310      	movs	r3, #16
 800202a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800202c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002030:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002032:	2304      	movs	r3, #4
 8002034:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002036:	2302      	movs	r3, #2
 8002038:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800203a:	2302      	movs	r3, #2
 800203c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800203e:	f107 031c 	add.w	r3, r7, #28
 8002042:	4618      	mov	r0, r3
 8002044:	f001 fb22 	bl	800368c <HAL_RCC_OscConfig>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800204e:	f000 f831 	bl	80020b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002052:	230f      	movs	r3, #15
 8002054:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002056:	2302      	movs	r3, #2
 8002058:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800205e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002062:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002064:	2300      	movs	r3, #0
 8002066:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002068:	f107 0308 	add.w	r3, r7, #8
 800206c:	2102      	movs	r1, #2
 800206e:	4618      	mov	r0, r3
 8002070:	f001 f80e 	bl	8003090 <HAL_RCC_ClockConfig>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800207a:	f000 f81b 	bl	80020b4 <Error_Handler>
  }
}
 800207e:	bf00      	nop
 8002080:	3750      	adds	r7, #80	; 0x50
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800
 800208c:	40007000 	.word	0x40007000

08002090 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d101      	bne.n	80020a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020a2:	f000 fa37 	bl	8002514 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40014800 	.word	0x40014800

080020b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b8:	b672      	cpsid	i
}
 80020ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020bc:	e7fe      	b.n	80020bc <Error_Handler+0x8>
	...

080020c0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80020c4:	4b17      	ldr	r3, [pc, #92]	; (8002124 <MX_SPI1_Init+0x64>)
 80020c6:	4a18      	ldr	r2, [pc, #96]	; (8002128 <MX_SPI1_Init+0x68>)
 80020c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <MX_SPI1_Init+0x64>)
 80020cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <MX_SPI1_Init+0x64>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <MX_SPI1_Init+0x64>)
 80020da:	2200      	movs	r2, #0
 80020dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <MX_SPI1_Init+0x64>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <MX_SPI1_Init+0x64>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <MX_SPI1_Init+0x64>)
 80020ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <MX_SPI1_Init+0x64>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <MX_SPI1_Init+0x64>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <MX_SPI1_Init+0x64>)
 8002100:	2200      	movs	r2, #0
 8002102:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <MX_SPI1_Init+0x64>)
 8002106:	2200      	movs	r2, #0
 8002108:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <MX_SPI1_Init+0x64>)
 800210c:	220a      	movs	r2, #10
 800210e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002110:	4804      	ldr	r0, [pc, #16]	; (8002124 <MX_SPI1_Init+0x64>)
 8002112:	f001 fd59 	bl	8003bc8 <HAL_SPI_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800211c:	f7ff ffca 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}
 8002124:	2000409c 	.word	0x2000409c
 8002128:	40013000 	.word	0x40013000

0800212c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	; 0x28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a19      	ldr	r2, [pc, #100]	; (80021b0 <HAL_SPI_MspInit+0x84>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d12b      	bne.n	80021a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <HAL_SPI_MspInit+0x88>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	4a17      	ldr	r2, [pc, #92]	; (80021b4 <HAL_SPI_MspInit+0x88>)
 8002158:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800215c:	6453      	str	r3, [r2, #68]	; 0x44
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <HAL_SPI_MspInit+0x88>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <HAL_SPI_MspInit+0x88>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a10      	ldr	r2, [pc, #64]	; (80021b4 <HAL_SPI_MspInit+0x88>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <HAL_SPI_MspInit+0x88>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SSD1351_SCK_Pin|SSD1351_MOSI_Pin;
 8002186:	23a0      	movs	r3, #160	; 0xa0
 8002188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002192:	2303      	movs	r3, #3
 8002194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002196:	2305      	movs	r3, #5
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	4619      	mov	r1, r3
 80021a0:	4805      	ldr	r0, [pc, #20]	; (80021b8 <HAL_SPI_MspInit+0x8c>)
 80021a2:	f000 fdc7 	bl	8002d34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80021a6:	bf00      	nop
 80021a8:	3728      	adds	r7, #40	; 0x28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40013000 	.word	0x40013000
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020000 	.word	0x40020000

080021bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <HAL_MspInit+0x4c>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	4a0f      	ldr	r2, [pc, #60]	; (8002208 <HAL_MspInit+0x4c>)
 80021cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d0:	6453      	str	r3, [r2, #68]	; 0x44
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <HAL_MspInit+0x4c>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	603b      	str	r3, [r7, #0]
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_MspInit+0x4c>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a08      	ldr	r2, [pc, #32]	; (8002208 <HAL_MspInit+0x4c>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_MspInit+0x4c>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800

0800220c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08c      	sub	sp, #48	; 0x30
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 800221c:	2200      	movs	r2, #0
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	201a      	movs	r0, #26
 8002222:	f000 fa73 	bl	800270c <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002226:	201a      	movs	r0, #26
 8002228:	f000 fa8c 	bl	8002744 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <HAL_InitTick+0xa0>)
 8002232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002234:	4a1d      	ldr	r2, [pc, #116]	; (80022ac <HAL_InitTick+0xa0>)
 8002236:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800223a:	6453      	str	r3, [r2, #68]	; 0x44
 800223c:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <HAL_InitTick+0xa0>)
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002248:	f107 0210 	add.w	r2, r7, #16
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	4611      	mov	r1, r2
 8002252:	4618      	mov	r0, r3
 8002254:	f001 f836 	bl	80032c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002258:	f001 f820 	bl	800329c <HAL_RCC_GetPCLK2Freq>
 800225c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800225e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002260:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_InitTick+0xa4>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	0c9b      	lsrs	r3, r3, #18
 8002268:	3b01      	subs	r3, #1
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_InitTick+0xa8>)
 800226e:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <HAL_InitTick+0xac>)
 8002270:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <HAL_InitTick+0xa8>)
 8002274:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002278:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800227a:	4a0e      	ldr	r2, [pc, #56]	; (80022b4 <HAL_InitTick+0xa8>)
 800227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <HAL_InitTick+0xa8>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_InitTick+0xa8>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 800228c:	4809      	ldr	r0, [pc, #36]	; (80022b4 <HAL_InitTick+0xa8>)
 800228e:	f001 ff2b 	bl	80040e8 <HAL_TIM_Base_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d104      	bne.n	80022a2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8002298:	4806      	ldr	r0, [pc, #24]	; (80022b4 <HAL_InitTick+0xa8>)
 800229a:	f001 ff7f 	bl	800419c <HAL_TIM_Base_Start_IT>
 800229e:	4603      	mov	r3, r0
 80022a0:	e000      	b.n	80022a4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3730      	adds	r7, #48	; 0x30
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40023800 	.word	0x40023800
 80022b0:	431bde83 	.word	0x431bde83
 80022b4:	200040f4 	.word	0x200040f4
 80022b8:	40014800 	.word	0x40014800

080022bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022c0:	e7fe      	b.n	80022c0 <NMI_Handler+0x4>

080022c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c6:	e7fe      	b.n	80022c6 <HardFault_Handler+0x4>

080022c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022cc:	e7fe      	b.n	80022cc <MemManage_Handler+0x4>

080022ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d2:	e7fe      	b.n	80022d2 <BusFault_Handler+0x4>

080022d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d8:	e7fe      	b.n	80022d8 <UsageFault_Handler+0x4>

080022da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <DMA1_Stream5_IRQHandler+0x10>)
 80022ee:	f000 fae5 	bl	80028bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	2000413c 	.word	0x2000413c

080022fc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002302:	f001 ffbb 	bl	800427c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200040f4 	.word	0x200040f4

08002310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <SystemInit+0x20>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	4a05      	ldr	r2, [pc, #20]	; (8002330 <SystemInit+0x20>)
 800231c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <MX_USART2_UART_Init+0x4c>)
 800233a:	4a12      	ldr	r2, [pc, #72]	; (8002384 <MX_USART2_UART_Init+0x50>)
 800233c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <MX_USART2_UART_Init+0x4c>)
 8002340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002344:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002346:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <MX_USART2_UART_Init+0x4c>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <MX_USART2_UART_Init+0x4c>)
 800234e:	2200      	movs	r2, #0
 8002350:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002352:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <MX_USART2_UART_Init+0x4c>)
 8002354:	2200      	movs	r2, #0
 8002356:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <MX_USART2_UART_Init+0x4c>)
 800235a:	220c      	movs	r2, #12
 800235c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <MX_USART2_UART_Init+0x4c>)
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <MX_USART2_UART_Init+0x4c>)
 8002366:	2200      	movs	r2, #0
 8002368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800236a:	4805      	ldr	r0, [pc, #20]	; (8002380 <MX_USART2_UART_Init+0x4c>)
 800236c:	f002 f96a 	bl	8004644 <HAL_UART_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002376:	f7ff fe9d 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000419c 	.word	0x2000419c
 8002384:	40004400 	.word	0x40004400

08002388 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	; 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a30      	ldr	r2, [pc, #192]	; (8002468 <HAL_UART_MspInit+0xe0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d159      	bne.n	800245e <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	4b2f      	ldr	r3, [pc, #188]	; (800246c <HAL_UART_MspInit+0xe4>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4a2e      	ldr	r2, [pc, #184]	; (800246c <HAL_UART_MspInit+0xe4>)
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ba:	4b2c      	ldr	r3, [pc, #176]	; (800246c <HAL_UART_MspInit+0xe4>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b28      	ldr	r3, [pc, #160]	; (800246c <HAL_UART_MspInit+0xe4>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a27      	ldr	r2, [pc, #156]	; (800246c <HAL_UART_MspInit+0xe4>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b25      	ldr	r3, [pc, #148]	; (800246c <HAL_UART_MspInit+0xe4>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023e2:	230c      	movs	r3, #12
 80023e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023f2:	2307      	movs	r3, #7
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4619      	mov	r1, r3
 80023fc:	481c      	ldr	r0, [pc, #112]	; (8002470 <HAL_UART_MspInit+0xe8>)
 80023fe:	f000 fc99 	bl	8002d34 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002402:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <HAL_UART_MspInit+0xec>)
 8002404:	4a1c      	ldr	r2, [pc, #112]	; (8002478 <HAL_UART_MspInit+0xf0>)
 8002406:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002408:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <HAL_UART_MspInit+0xec>)
 800240a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800240e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002410:	4b18      	ldr	r3, [pc, #96]	; (8002474 <HAL_UART_MspInit+0xec>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <HAL_UART_MspInit+0xec>)
 8002418:	2200      	movs	r2, #0
 800241a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <HAL_UART_MspInit+0xec>)
 800241e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002422:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002424:	4b13      	ldr	r3, [pc, #76]	; (8002474 <HAL_UART_MspInit+0xec>)
 8002426:	2200      	movs	r2, #0
 8002428:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_UART_MspInit+0xec>)
 800242c:	2200      	movs	r2, #0
 800242e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002430:	4b10      	ldr	r3, [pc, #64]	; (8002474 <HAL_UART_MspInit+0xec>)
 8002432:	2200      	movs	r2, #0
 8002434:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <HAL_UART_MspInit+0xec>)
 8002438:	2200      	movs	r2, #0
 800243a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800243c:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <HAL_UART_MspInit+0xec>)
 800243e:	2200      	movs	r2, #0
 8002440:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002442:	480c      	ldr	r0, [pc, #48]	; (8002474 <HAL_UART_MspInit+0xec>)
 8002444:	f000 f98c 	bl	8002760 <HAL_DMA_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800244e:	f7ff fe31 	bl	80020b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a07      	ldr	r2, [pc, #28]	; (8002474 <HAL_UART_MspInit+0xec>)
 8002456:	639a      	str	r2, [r3, #56]	; 0x38
 8002458:	4a06      	ldr	r2, [pc, #24]	; (8002474 <HAL_UART_MspInit+0xec>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800245e:	bf00      	nop
 8002460:	3728      	adds	r7, #40	; 0x28
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40004400 	.word	0x40004400
 800246c:	40023800 	.word	0x40023800
 8002470:	40020000 	.word	0x40020000
 8002474:	2000413c 	.word	0x2000413c
 8002478:	40026088 	.word	0x40026088

0800247c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800247c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002480:	480d      	ldr	r0, [pc, #52]	; (80024b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002482:	490e      	ldr	r1, [pc, #56]	; (80024bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002484:	4a0e      	ldr	r2, [pc, #56]	; (80024c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002488:	e002      	b.n	8002490 <LoopCopyDataInit>

0800248a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800248a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800248c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248e:	3304      	adds	r3, #4

08002490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002494:	d3f9      	bcc.n	800248a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002496:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002498:	4c0b      	ldr	r4, [pc, #44]	; (80024c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800249a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800249c:	e001      	b.n	80024a2 <LoopFillZerobss>

0800249e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a0:	3204      	adds	r2, #4

080024a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a4:	d3fb      	bcc.n	800249e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024a6:	f7ff ff33 	bl	8002310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024aa:	f004 fef5 	bl	8007298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ae:	f7ff fd6d 	bl	8001f8c <main>
  bx  lr    
 80024b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024bc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80024c0:	08007e48 	.word	0x08007e48
  ldr r2, =_sbss
 80024c4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80024c8:	20004224 	.word	0x20004224

080024cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024cc:	e7fe      	b.n	80024cc <ADC_IRQHandler>
	...

080024d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <HAL_Init+0x40>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <HAL_Init+0x40>)
 80024da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_Init+0x40>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <HAL_Init+0x40>)
 80024e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <HAL_Init+0x40>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a07      	ldr	r2, [pc, #28]	; (8002510 <HAL_Init+0x40>)
 80024f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f8:	2003      	movs	r0, #3
 80024fa:	f000 f8fc 	bl	80026f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024fe:	200f      	movs	r0, #15
 8002500:	f7ff fe84 	bl	800220c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002504:	f7ff fe5a 	bl	80021bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023c00 	.word	0x40023c00

08002514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_IncTick+0x20>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_IncTick+0x24>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4413      	add	r3, r2
 8002524:	4a04      	ldr	r2, [pc, #16]	; (8002538 <HAL_IncTick+0x24>)
 8002526:	6013      	str	r3, [r2, #0]
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	2000000c 	.word	0x2000000c
 8002538:	200041e0 	.word	0x200041e0

0800253c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return uwTick;
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <HAL_GetTick+0x14>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	200041e0 	.word	0x200041e0

08002554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800255c:	f7ff ffee 	bl	800253c <HAL_GetTick>
 8002560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256c:	d005      	beq.n	800257a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_Delay+0x44>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4413      	add	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800257a:	bf00      	nop
 800257c:	f7ff ffde 	bl	800253c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	429a      	cmp	r2, r3
 800258a:	d8f7      	bhi.n	800257c <HAL_Delay+0x28>
  {
  }
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	2000000c 	.word	0x2000000c

0800259c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <__NVIC_SetPriorityGrouping+0x44>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025b8:	4013      	ands	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ce:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <__NVIC_SetPriorityGrouping+0x44>)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	60d3      	str	r3, [r2, #12]
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <__NVIC_GetPriorityGrouping+0x18>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0a1b      	lsrs	r3, r3, #8
 80025ee:	f003 0307 	and.w	r3, r3, #7
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	2b00      	cmp	r3, #0
 8002610:	db0b      	blt.n	800262a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	f003 021f 	and.w	r2, r3, #31
 8002618:	4907      	ldr	r1, [pc, #28]	; (8002638 <__NVIC_EnableIRQ+0x38>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2001      	movs	r0, #1
 8002622:	fa00 f202 	lsl.w	r2, r0, r2
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000e100 	.word	0xe000e100

0800263c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	2b00      	cmp	r3, #0
 800264e:	db0a      	blt.n	8002666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	490c      	ldr	r1, [pc, #48]	; (8002688 <__NVIC_SetPriority+0x4c>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	440b      	add	r3, r1
 8002660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002664:	e00a      	b.n	800267c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4908      	ldr	r1, [pc, #32]	; (800268c <__NVIC_SetPriority+0x50>)
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	3b04      	subs	r3, #4
 8002674:	0112      	lsls	r2, r2, #4
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	440b      	add	r3, r1
 800267a:	761a      	strb	r2, [r3, #24]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000e100 	.word	0xe000e100
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f1c3 0307 	rsb	r3, r3, #7
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	bf28      	it	cs
 80026ae:	2304      	movcs	r3, #4
 80026b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d902      	bls.n	80026c0 <NVIC_EncodePriority+0x30>
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3b03      	subs	r3, #3
 80026be:	e000      	b.n	80026c2 <NVIC_EncodePriority+0x32>
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	401a      	ands	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d8:	f04f 31ff 	mov.w	r1, #4294967295
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43d9      	mvns	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	4313      	orrs	r3, r2
         );
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff ff4c 	bl	800259c <__NVIC_SetPriorityGrouping>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800271e:	f7ff ff61 	bl	80025e4 <__NVIC_GetPriorityGrouping>
 8002722:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	68b9      	ldr	r1, [r7, #8]
 8002728:	6978      	ldr	r0, [r7, #20]
 800272a:	f7ff ffb1 	bl	8002690 <NVIC_EncodePriority>
 800272e:	4602      	mov	r2, r0
 8002730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff ff80 	bl	800263c <__NVIC_SetPriority>
}
 800273c:	bf00      	nop
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff ff54 	bl	8002600 <__NVIC_EnableIRQ>
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800276c:	f7ff fee6 	bl	800253c <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e099      	b.n	80028b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0201 	bic.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800279c:	e00f      	b.n	80027be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800279e:	f7ff fecd 	bl	800253c <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d908      	bls.n	80027be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2203      	movs	r2, #3
 80027b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e078      	b.n	80028b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1e8      	bne.n	800279e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4b38      	ldr	r3, [pc, #224]	; (80028b8 <HAL_DMA_Init+0x158>)
 80027d8:	4013      	ands	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002802:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	2b04      	cmp	r3, #4
 8002816:	d107      	bne.n	8002828 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	4313      	orrs	r3, r2
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f023 0307 	bic.w	r3, r3, #7
 800283e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	4313      	orrs	r3, r2
 8002848:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	2b04      	cmp	r3, #4
 8002850:	d117      	bne.n	8002882 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4313      	orrs	r3, r2
 800285a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00e      	beq.n	8002882 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f9e9 	bl	8002c3c <DMA_CheckFifoParam>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2240      	movs	r2, #64	; 0x40
 8002874:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800287e:	2301      	movs	r3, #1
 8002880:	e016      	b.n	80028b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f9a0 	bl	8002bd0 <DMA_CalcBaseAndBitshift>
 8002890:	4603      	mov	r3, r0
 8002892:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002898:	223f      	movs	r2, #63	; 0x3f
 800289a:	409a      	lsls	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	f010803f 	.word	0xf010803f

080028bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028c8:	4b92      	ldr	r3, [pc, #584]	; (8002b14 <HAL_DMA_IRQHandler+0x258>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a92      	ldr	r2, [pc, #584]	; (8002b18 <HAL_DMA_IRQHandler+0x25c>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	0a9b      	lsrs	r3, r3, #10
 80028d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e6:	2208      	movs	r2, #8
 80028e8:	409a      	lsls	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d01a      	beq.n	8002928 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d013      	beq.n	8002928 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0204 	bic.w	r2, r2, #4
 800290e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002914:	2208      	movs	r2, #8
 8002916:	409a      	lsls	r2, r3
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002920:	f043 0201 	orr.w	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292c:	2201      	movs	r2, #1
 800292e:	409a      	lsls	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d012      	beq.n	800295e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294a:	2201      	movs	r2, #1
 800294c:	409a      	lsls	r2, r3
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002956:	f043 0202 	orr.w	r2, r3, #2
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002962:	2204      	movs	r2, #4
 8002964:	409a      	lsls	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d012      	beq.n	8002994 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00b      	beq.n	8002994 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002980:	2204      	movs	r2, #4
 8002982:	409a      	lsls	r2, r3
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298c:	f043 0204 	orr.w	r2, r3, #4
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002998:	2210      	movs	r2, #16
 800299a:	409a      	lsls	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d043      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d03c      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b6:	2210      	movs	r2, #16
 80029b8:	409a      	lsls	r2, r3
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d018      	beq.n	80029fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d108      	bne.n	80029ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d024      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	4798      	blx	r3
 80029ea:	e01f      	b.n	8002a2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01b      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	4798      	blx	r3
 80029fc:	e016      	b.n	8002a2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d107      	bne.n	8002a1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0208 	bic.w	r2, r2, #8
 8002a1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a30:	2220      	movs	r2, #32
 8002a32:	409a      	lsls	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 808e 	beq.w	8002b5a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 8086 	beq.w	8002b5a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a52:	2220      	movs	r2, #32
 8002a54:	409a      	lsls	r2, r3
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b05      	cmp	r3, #5
 8002a64:	d136      	bne.n	8002ad4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0216 	bic.w	r2, r2, #22
 8002a74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d103      	bne.n	8002a96 <HAL_DMA_IRQHandler+0x1da>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0208 	bic.w	r2, r2, #8
 8002aa4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	223f      	movs	r2, #63	; 0x3f
 8002aac:	409a      	lsls	r2, r3
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d07d      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	4798      	blx	r3
        }
        return;
 8002ad2:	e078      	b.n	8002bc6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d01c      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d108      	bne.n	8002b02 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d030      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	4798      	blx	r3
 8002b00:	e02b      	b.n	8002b5a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d027      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	4798      	blx	r3
 8002b12:	e022      	b.n	8002b5a <HAL_DMA_IRQHandler+0x29e>
 8002b14:	20000004 	.word	0x20000004
 8002b18:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10f      	bne.n	8002b4a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0210 	bic.w	r2, r2, #16
 8002b38:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d032      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d022      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2205      	movs	r2, #5
 8002b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0201 	bic.w	r2, r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d307      	bcc.n	8002ba2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f2      	bne.n	8002b86 <HAL_DMA_IRQHandler+0x2ca>
 8002ba0:	e000      	b.n	8002ba4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002ba2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3
 8002bc4:	e000      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002bc6:	bf00      	nop
    }
  }
}
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop

08002bd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	3b10      	subs	r3, #16
 8002be0:	4a14      	ldr	r2, [pc, #80]	; (8002c34 <DMA_CalcBaseAndBitshift+0x64>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	091b      	lsrs	r3, r3, #4
 8002be8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bea:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <DMA_CalcBaseAndBitshift+0x68>)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4413      	add	r3, r2
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d909      	bls.n	8002c12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c06:	f023 0303 	bic.w	r3, r3, #3
 8002c0a:	1d1a      	adds	r2, r3, #4
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c10:	e007      	b.n	8002c22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c1a:	f023 0303 	bic.w	r3, r3, #3
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	aaaaaaab 	.word	0xaaaaaaab
 8002c38:	08007d2c 	.word	0x08007d2c

08002c3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d11f      	bne.n	8002c96 <DMA_CheckFifoParam+0x5a>
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d856      	bhi.n	8002d0a <DMA_CheckFifoParam+0xce>
 8002c5c:	a201      	add	r2, pc, #4	; (adr r2, 8002c64 <DMA_CheckFifoParam+0x28>)
 8002c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c62:	bf00      	nop
 8002c64:	08002c75 	.word	0x08002c75
 8002c68:	08002c87 	.word	0x08002c87
 8002c6c:	08002c75 	.word	0x08002c75
 8002c70:	08002d0b 	.word	0x08002d0b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d046      	beq.n	8002d0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c84:	e043      	b.n	8002d0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c8e:	d140      	bne.n	8002d12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c94:	e03d      	b.n	8002d12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c9e:	d121      	bne.n	8002ce4 <DMA_CheckFifoParam+0xa8>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d837      	bhi.n	8002d16 <DMA_CheckFifoParam+0xda>
 8002ca6:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <DMA_CheckFifoParam+0x70>)
 8002ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cac:	08002cbd 	.word	0x08002cbd
 8002cb0:	08002cc3 	.word	0x08002cc3
 8002cb4:	08002cbd 	.word	0x08002cbd
 8002cb8:	08002cd5 	.word	0x08002cd5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc0:	e030      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d025      	beq.n	8002d1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd2:	e022      	b.n	8002d1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cdc:	d11f      	bne.n	8002d1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ce2:	e01c      	b.n	8002d1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d903      	bls.n	8002cf2 <DMA_CheckFifoParam+0xb6>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d003      	beq.n	8002cf8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cf0:	e018      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf6:	e015      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00e      	beq.n	8002d22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
      break;
 8002d08:	e00b      	b.n	8002d22 <DMA_CheckFifoParam+0xe6>
      break;
 8002d0a:	bf00      	nop
 8002d0c:	e00a      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e008      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      break;
 8002d12:	bf00      	nop
 8002d14:	e006      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      break;
 8002d16:	bf00      	nop
 8002d18:	e004      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e002      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d1e:	bf00      	nop
 8002d20:	e000      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      break;
 8002d22:	bf00      	nop
    }
  } 
  
  return status; 
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop

08002d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b089      	sub	sp, #36	; 0x24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	e165      	b.n	800301c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d50:	2201      	movs	r2, #1
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4013      	ands	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	f040 8154 	bne.w	8003016 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d005      	beq.n	8002d86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d130      	bne.n	8002de8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	2203      	movs	r2, #3
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 0201 	and.w	r2, r3, #1
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d017      	beq.n	8002e24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	2203      	movs	r2, #3
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d123      	bne.n	8002e78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	08da      	lsrs	r2, r3, #3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3208      	adds	r2, #8
 8002e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	220f      	movs	r2, #15
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	08da      	lsrs	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3208      	adds	r2, #8
 8002e72:	69b9      	ldr	r1, [r7, #24]
 8002e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	2203      	movs	r2, #3
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0203 	and.w	r2, r3, #3
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 80ae 	beq.w	8003016 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	4b5d      	ldr	r3, [pc, #372]	; (8003034 <HAL_GPIO_Init+0x300>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	4a5c      	ldr	r2, [pc, #368]	; (8003034 <HAL_GPIO_Init+0x300>)
 8002ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eca:	4b5a      	ldr	r3, [pc, #360]	; (8003034 <HAL_GPIO_Init+0x300>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ed6:	4a58      	ldr	r2, [pc, #352]	; (8003038 <HAL_GPIO_Init+0x304>)
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	089b      	lsrs	r3, r3, #2
 8002edc:	3302      	adds	r3, #2
 8002ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	220f      	movs	r2, #15
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4f      	ldr	r2, [pc, #316]	; (800303c <HAL_GPIO_Init+0x308>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d025      	beq.n	8002f4e <HAL_GPIO_Init+0x21a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4e      	ldr	r2, [pc, #312]	; (8003040 <HAL_GPIO_Init+0x30c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d01f      	beq.n	8002f4a <HAL_GPIO_Init+0x216>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4d      	ldr	r2, [pc, #308]	; (8003044 <HAL_GPIO_Init+0x310>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d019      	beq.n	8002f46 <HAL_GPIO_Init+0x212>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4c      	ldr	r2, [pc, #304]	; (8003048 <HAL_GPIO_Init+0x314>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d013      	beq.n	8002f42 <HAL_GPIO_Init+0x20e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a4b      	ldr	r2, [pc, #300]	; (800304c <HAL_GPIO_Init+0x318>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00d      	beq.n	8002f3e <HAL_GPIO_Init+0x20a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a4a      	ldr	r2, [pc, #296]	; (8003050 <HAL_GPIO_Init+0x31c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <HAL_GPIO_Init+0x206>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a49      	ldr	r2, [pc, #292]	; (8003054 <HAL_GPIO_Init+0x320>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d101      	bne.n	8002f36 <HAL_GPIO_Init+0x202>
 8002f32:	2306      	movs	r3, #6
 8002f34:	e00c      	b.n	8002f50 <HAL_GPIO_Init+0x21c>
 8002f36:	2307      	movs	r3, #7
 8002f38:	e00a      	b.n	8002f50 <HAL_GPIO_Init+0x21c>
 8002f3a:	2305      	movs	r3, #5
 8002f3c:	e008      	b.n	8002f50 <HAL_GPIO_Init+0x21c>
 8002f3e:	2304      	movs	r3, #4
 8002f40:	e006      	b.n	8002f50 <HAL_GPIO_Init+0x21c>
 8002f42:	2303      	movs	r3, #3
 8002f44:	e004      	b.n	8002f50 <HAL_GPIO_Init+0x21c>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e002      	b.n	8002f50 <HAL_GPIO_Init+0x21c>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <HAL_GPIO_Init+0x21c>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	f002 0203 	and.w	r2, r2, #3
 8002f56:	0092      	lsls	r2, r2, #2
 8002f58:	4093      	lsls	r3, r2
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f60:	4935      	ldr	r1, [pc, #212]	; (8003038 <HAL_GPIO_Init+0x304>)
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	089b      	lsrs	r3, r3, #2
 8002f66:	3302      	adds	r3, #2
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f6e:	4b3a      	ldr	r3, [pc, #232]	; (8003058 <HAL_GPIO_Init+0x324>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f92:	4a31      	ldr	r2, [pc, #196]	; (8003058 <HAL_GPIO_Init+0x324>)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f98:	4b2f      	ldr	r3, [pc, #188]	; (8003058 <HAL_GPIO_Init+0x324>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fbc:	4a26      	ldr	r2, [pc, #152]	; (8003058 <HAL_GPIO_Init+0x324>)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fc2:	4b25      	ldr	r3, [pc, #148]	; (8003058 <HAL_GPIO_Init+0x324>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fe6:	4a1c      	ldr	r2, [pc, #112]	; (8003058 <HAL_GPIO_Init+0x324>)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fec:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <HAL_GPIO_Init+0x324>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003010:	4a11      	ldr	r2, [pc, #68]	; (8003058 <HAL_GPIO_Init+0x324>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3301      	adds	r3, #1
 800301a:	61fb      	str	r3, [r7, #28]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	2b0f      	cmp	r3, #15
 8003020:	f67f ae96 	bls.w	8002d50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	3724      	adds	r7, #36	; 0x24
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40023800 	.word	0x40023800
 8003038:	40013800 	.word	0x40013800
 800303c:	40020000 	.word	0x40020000
 8003040:	40020400 	.word	0x40020400
 8003044:	40020800 	.word	0x40020800
 8003048:	40020c00 	.word	0x40020c00
 800304c:	40021000 	.word	0x40021000
 8003050:	40021400 	.word	0x40021400
 8003054:	40021800 	.word	0x40021800
 8003058:	40013c00 	.word	0x40013c00

0800305c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
 8003068:	4613      	mov	r3, r2
 800306a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800306c:	787b      	ldrb	r3, [r7, #1]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003072:	887a      	ldrh	r2, [r7, #2]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003078:	e003      	b.n	8003082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800307a:	887b      	ldrh	r3, [r7, #2]
 800307c:	041a      	lsls	r2, r3, #16
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	619a      	str	r2, [r3, #24]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0cc      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030a4:	4b68      	ldr	r3, [pc, #416]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d90c      	bls.n	80030cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4b65      	ldr	r3, [pc, #404]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b63      	ldr	r3, [pc, #396]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0b8      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d020      	beq.n	800311a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e4:	4b59      	ldr	r3, [pc, #356]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4a58      	ldr	r2, [pc, #352]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030fc:	4b53      	ldr	r3, [pc, #332]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	4a52      	ldr	r2, [pc, #328]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003108:	4b50      	ldr	r3, [pc, #320]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	494d      	ldr	r1, [pc, #308]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	4313      	orrs	r3, r2
 8003118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d044      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d107      	bne.n	800313e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d119      	bne.n	800316e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e07f      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d003      	beq.n	800314e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314a:	2b03      	cmp	r3, #3
 800314c:	d107      	bne.n	800315e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314e:	4b3f      	ldr	r3, [pc, #252]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e06f      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315e:	4b3b      	ldr	r3, [pc, #236]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e067      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800316e:	4b37      	ldr	r3, [pc, #220]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f023 0203 	bic.w	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	4934      	ldr	r1, [pc, #208]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	4313      	orrs	r3, r2
 800317e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003180:	f7ff f9dc 	bl	800253c <HAL_GetTick>
 8003184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003186:	e00a      	b.n	800319e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003188:	f7ff f9d8 	bl	800253c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f241 3288 	movw	r2, #5000	; 0x1388
 8003196:	4293      	cmp	r3, r2
 8003198:	d901      	bls.n	800319e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e04f      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319e:	4b2b      	ldr	r3, [pc, #172]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 020c 	and.w	r2, r3, #12
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d1eb      	bne.n	8003188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031b0:	4b25      	ldr	r3, [pc, #148]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d20c      	bcs.n	80031d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031be:	4b22      	ldr	r3, [pc, #136]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d001      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e032      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e4:	4b19      	ldr	r3, [pc, #100]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4916      	ldr	r1, [pc, #88]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003202:	4b12      	ldr	r3, [pc, #72]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	490e      	ldr	r1, [pc, #56]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003216:	f000 f887 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 800321a:	4602      	mov	r2, r0
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	490a      	ldr	r1, [pc, #40]	; (8003250 <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	5ccb      	ldrb	r3, [r1, r3]
 800322a:	fa22 f303 	lsr.w	r3, r2, r3
 800322e:	4a09      	ldr	r2, [pc, #36]	; (8003254 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <HAL_RCC_ClockConfig+0x1c8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe ffe8 	bl	800220c <HAL_InitTick>

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40023c00 	.word	0x40023c00
 800324c:	40023800 	.word	0x40023800
 8003250:	08007d14 	.word	0x08007d14
 8003254:	20000004 	.word	0x20000004
 8003258:	20000008 	.word	0x20000008

0800325c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <HAL_RCC_GetHCLKFreq+0x14>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20000004 	.word	0x20000004

08003274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003278:	f7ff fff0 	bl	800325c <HAL_RCC_GetHCLKFreq>
 800327c:	4602      	mov	r2, r0
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	0a9b      	lsrs	r3, r3, #10
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	4903      	ldr	r1, [pc, #12]	; (8003298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800328a:	5ccb      	ldrb	r3, [r1, r3]
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40023800 	.word	0x40023800
 8003298:	08007d24 	.word	0x08007d24

0800329c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032a0:	f7ff ffdc 	bl	800325c <HAL_RCC_GetHCLKFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	0b5b      	lsrs	r3, r3, #13
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	4903      	ldr	r1, [pc, #12]	; (80032c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40023800 	.word	0x40023800
 80032c0:	08007d24 	.word	0x08007d24

080032c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	220f      	movs	r2, #15
 80032d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032d4:	4b12      	ldr	r3, [pc, #72]	; (8003320 <HAL_RCC_GetClockConfig+0x5c>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0203 	and.w	r2, r3, #3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032e0:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <HAL_RCC_GetClockConfig+0x5c>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <HAL_RCC_GetClockConfig+0x5c>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80032f8:	4b09      	ldr	r3, [pc, #36]	; (8003320 <HAL_RCC_GetClockConfig+0x5c>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	08db      	lsrs	r3, r3, #3
 80032fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003306:	4b07      	ldr	r3, [pc, #28]	; (8003324 <HAL_RCC_GetClockConfig+0x60>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 020f 	and.w	r2, r3, #15
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	601a      	str	r2, [r3, #0]
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800
 8003324:	40023c00 	.word	0x40023c00

08003328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800332c:	b088      	sub	sp, #32
 800332e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003344:	4bce      	ldr	r3, [pc, #824]	; (8003680 <HAL_RCC_GetSysClockFreq+0x358>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b0c      	cmp	r3, #12
 800334e:	f200 818d 	bhi.w	800366c <HAL_RCC_GetSysClockFreq+0x344>
 8003352:	a201      	add	r2, pc, #4	; (adr r2, 8003358 <HAL_RCC_GetSysClockFreq+0x30>)
 8003354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003358:	0800338d 	.word	0x0800338d
 800335c:	0800366d 	.word	0x0800366d
 8003360:	0800366d 	.word	0x0800366d
 8003364:	0800366d 	.word	0x0800366d
 8003368:	08003393 	.word	0x08003393
 800336c:	0800366d 	.word	0x0800366d
 8003370:	0800366d 	.word	0x0800366d
 8003374:	0800366d 	.word	0x0800366d
 8003378:	08003399 	.word	0x08003399
 800337c:	0800366d 	.word	0x0800366d
 8003380:	0800366d 	.word	0x0800366d
 8003384:	0800366d 	.word	0x0800366d
 8003388:	0800350d 	.word	0x0800350d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800338c:	4bbd      	ldr	r3, [pc, #756]	; (8003684 <HAL_RCC_GetSysClockFreq+0x35c>)
 800338e:	61bb      	str	r3, [r7, #24]
       break;
 8003390:	e16f      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003392:	4bbd      	ldr	r3, [pc, #756]	; (8003688 <HAL_RCC_GetSysClockFreq+0x360>)
 8003394:	61bb      	str	r3, [r7, #24]
      break;
 8003396:	e16c      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003398:	4bb9      	ldr	r3, [pc, #740]	; (8003680 <HAL_RCC_GetSysClockFreq+0x358>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033a2:	4bb7      	ldr	r3, [pc, #732]	; (8003680 <HAL_RCC_GetSysClockFreq+0x358>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d053      	beq.n	8003456 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ae:	4bb4      	ldr	r3, [pc, #720]	; (8003680 <HAL_RCC_GetSysClockFreq+0x358>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	099b      	lsrs	r3, r3, #6
 80033b4:	461a      	mov	r2, r3
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033be:	f04f 0100 	mov.w	r1, #0
 80033c2:	ea02 0400 	and.w	r4, r2, r0
 80033c6:	603c      	str	r4, [r7, #0]
 80033c8:	400b      	ands	r3, r1
 80033ca:	607b      	str	r3, [r7, #4]
 80033cc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033d0:	4620      	mov	r0, r4
 80033d2:	4629      	mov	r1, r5
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	014b      	lsls	r3, r1, #5
 80033de:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033e2:	0142      	lsls	r2, r0, #5
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	4623      	mov	r3, r4
 80033ea:	1ac0      	subs	r0, r0, r3
 80033ec:	462b      	mov	r3, r5
 80033ee:	eb61 0103 	sbc.w	r1, r1, r3
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	018b      	lsls	r3, r1, #6
 80033fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003400:	0182      	lsls	r2, r0, #6
 8003402:	1a12      	subs	r2, r2, r0
 8003404:	eb63 0301 	sbc.w	r3, r3, r1
 8003408:	f04f 0000 	mov.w	r0, #0
 800340c:	f04f 0100 	mov.w	r1, #0
 8003410:	00d9      	lsls	r1, r3, #3
 8003412:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003416:	00d0      	lsls	r0, r2, #3
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4621      	mov	r1, r4
 800341e:	1852      	adds	r2, r2, r1
 8003420:	4629      	mov	r1, r5
 8003422:	eb43 0101 	adc.w	r1, r3, r1
 8003426:	460b      	mov	r3, r1
 8003428:	f04f 0000 	mov.w	r0, #0
 800342c:	f04f 0100 	mov.w	r1, #0
 8003430:	0259      	lsls	r1, r3, #9
 8003432:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003436:	0250      	lsls	r0, r2, #9
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4610      	mov	r0, r2
 800343e:	4619      	mov	r1, r3
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	461a      	mov	r2, r3
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	f7fc feec 	bl	8000224 <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4613      	mov	r3, r2
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	e04c      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003456:	4b8a      	ldr	r3, [pc, #552]	; (8003680 <HAL_RCC_GetSysClockFreq+0x358>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	099b      	lsrs	r3, r3, #6
 800345c:	461a      	mov	r2, r3
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003466:	f04f 0100 	mov.w	r1, #0
 800346a:	ea02 0a00 	and.w	sl, r2, r0
 800346e:	ea03 0b01 	and.w	fp, r3, r1
 8003472:	4650      	mov	r0, sl
 8003474:	4659      	mov	r1, fp
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	014b      	lsls	r3, r1, #5
 8003480:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003484:	0142      	lsls	r2, r0, #5
 8003486:	4610      	mov	r0, r2
 8003488:	4619      	mov	r1, r3
 800348a:	ebb0 000a 	subs.w	r0, r0, sl
 800348e:	eb61 010b 	sbc.w	r1, r1, fp
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	018b      	lsls	r3, r1, #6
 800349c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034a0:	0182      	lsls	r2, r0, #6
 80034a2:	1a12      	subs	r2, r2, r0
 80034a4:	eb63 0301 	sbc.w	r3, r3, r1
 80034a8:	f04f 0000 	mov.w	r0, #0
 80034ac:	f04f 0100 	mov.w	r1, #0
 80034b0:	00d9      	lsls	r1, r3, #3
 80034b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034b6:	00d0      	lsls	r0, r2, #3
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	eb12 020a 	adds.w	r2, r2, sl
 80034c0:	eb43 030b 	adc.w	r3, r3, fp
 80034c4:	f04f 0000 	mov.w	r0, #0
 80034c8:	f04f 0100 	mov.w	r1, #0
 80034cc:	0299      	lsls	r1, r3, #10
 80034ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80034d2:	0290      	lsls	r0, r2, #10
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4610      	mov	r0, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	461a      	mov	r2, r3
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	f7fc fe9e 	bl	8000224 <__aeabi_uldivmod>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	4613      	mov	r3, r2
 80034ee:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034f0:	4b63      	ldr	r3, [pc, #396]	; (8003680 <HAL_RCC_GetSysClockFreq+0x358>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	0c1b      	lsrs	r3, r3, #16
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	3301      	adds	r3, #1
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003500:	69fa      	ldr	r2, [r7, #28]
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	fbb2 f3f3 	udiv	r3, r2, r3
 8003508:	61bb      	str	r3, [r7, #24]
      break;
 800350a:	e0b2      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800350c:	4b5c      	ldr	r3, [pc, #368]	; (8003680 <HAL_RCC_GetSysClockFreq+0x358>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003514:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003516:	4b5a      	ldr	r3, [pc, #360]	; (8003680 <HAL_RCC_GetSysClockFreq+0x358>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d04d      	beq.n	80035be <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003522:	4b57      	ldr	r3, [pc, #348]	; (8003680 <HAL_RCC_GetSysClockFreq+0x358>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	099b      	lsrs	r3, r3, #6
 8003528:	461a      	mov	r2, r3
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003532:	f04f 0100 	mov.w	r1, #0
 8003536:	ea02 0800 	and.w	r8, r2, r0
 800353a:	ea03 0901 	and.w	r9, r3, r1
 800353e:	4640      	mov	r0, r8
 8003540:	4649      	mov	r1, r9
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	014b      	lsls	r3, r1, #5
 800354c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003550:	0142      	lsls	r2, r0, #5
 8003552:	4610      	mov	r0, r2
 8003554:	4619      	mov	r1, r3
 8003556:	ebb0 0008 	subs.w	r0, r0, r8
 800355a:	eb61 0109 	sbc.w	r1, r1, r9
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	018b      	lsls	r3, r1, #6
 8003568:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800356c:	0182      	lsls	r2, r0, #6
 800356e:	1a12      	subs	r2, r2, r0
 8003570:	eb63 0301 	sbc.w	r3, r3, r1
 8003574:	f04f 0000 	mov.w	r0, #0
 8003578:	f04f 0100 	mov.w	r1, #0
 800357c:	00d9      	lsls	r1, r3, #3
 800357e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003582:	00d0      	lsls	r0, r2, #3
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	eb12 0208 	adds.w	r2, r2, r8
 800358c:	eb43 0309 	adc.w	r3, r3, r9
 8003590:	f04f 0000 	mov.w	r0, #0
 8003594:	f04f 0100 	mov.w	r1, #0
 8003598:	0259      	lsls	r1, r3, #9
 800359a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800359e:	0250      	lsls	r0, r2, #9
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4610      	mov	r0, r2
 80035a6:	4619      	mov	r1, r3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	461a      	mov	r2, r3
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	f7fc fe38 	bl	8000224 <__aeabi_uldivmod>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4613      	mov	r3, r2
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	e04a      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035be:	4b30      	ldr	r3, [pc, #192]	; (8003680 <HAL_RCC_GetSysClockFreq+0x358>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	099b      	lsrs	r3, r3, #6
 80035c4:	461a      	mov	r2, r3
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035ce:	f04f 0100 	mov.w	r1, #0
 80035d2:	ea02 0400 	and.w	r4, r2, r0
 80035d6:	ea03 0501 	and.w	r5, r3, r1
 80035da:	4620      	mov	r0, r4
 80035dc:	4629      	mov	r1, r5
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	014b      	lsls	r3, r1, #5
 80035e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035ec:	0142      	lsls	r2, r0, #5
 80035ee:	4610      	mov	r0, r2
 80035f0:	4619      	mov	r1, r3
 80035f2:	1b00      	subs	r0, r0, r4
 80035f4:	eb61 0105 	sbc.w	r1, r1, r5
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	018b      	lsls	r3, r1, #6
 8003602:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003606:	0182      	lsls	r2, r0, #6
 8003608:	1a12      	subs	r2, r2, r0
 800360a:	eb63 0301 	sbc.w	r3, r3, r1
 800360e:	f04f 0000 	mov.w	r0, #0
 8003612:	f04f 0100 	mov.w	r1, #0
 8003616:	00d9      	lsls	r1, r3, #3
 8003618:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800361c:	00d0      	lsls	r0, r2, #3
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	1912      	adds	r2, r2, r4
 8003624:	eb45 0303 	adc.w	r3, r5, r3
 8003628:	f04f 0000 	mov.w	r0, #0
 800362c:	f04f 0100 	mov.w	r1, #0
 8003630:	0299      	lsls	r1, r3, #10
 8003632:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003636:	0290      	lsls	r0, r2, #10
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4610      	mov	r0, r2
 800363e:	4619      	mov	r1, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	461a      	mov	r2, r3
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	f7fc fdec 	bl	8000224 <__aeabi_uldivmod>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4613      	mov	r3, r2
 8003652:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <HAL_RCC_GetSysClockFreq+0x358>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	0f1b      	lsrs	r3, r3, #28
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003660:	69fa      	ldr	r2, [r7, #28]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	61bb      	str	r3, [r7, #24]
      break;
 800366a:	e002      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <HAL_RCC_GetSysClockFreq+0x35c>)
 800366e:	61bb      	str	r3, [r7, #24]
      break;
 8003670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003672:	69bb      	ldr	r3, [r7, #24]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800367e:	bf00      	nop
 8003680:	40023800 	.word	0x40023800
 8003684:	00f42400 	.word	0x00f42400
 8003688:	007a1200 	.word	0x007a1200

0800368c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e28d      	b.n	8003bba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 8083 	beq.w	80037b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036ac:	4b94      	ldr	r3, [pc, #592]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 030c 	and.w	r3, r3, #12
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d019      	beq.n	80036ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036b8:	4b91      	ldr	r3, [pc, #580]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d106      	bne.n	80036d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036c4:	4b8e      	ldr	r3, [pc, #568]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036d0:	d00c      	beq.n	80036ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036d2:	4b8b      	ldr	r3, [pc, #556]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036da:	2b0c      	cmp	r3, #12
 80036dc:	d112      	bne.n	8003704 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036de:	4b88      	ldr	r3, [pc, #544]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ea:	d10b      	bne.n	8003704 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ec:	4b84      	ldr	r3, [pc, #528]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d05b      	beq.n	80037b0 <HAL_RCC_OscConfig+0x124>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d157      	bne.n	80037b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e25a      	b.n	8003bba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370c:	d106      	bne.n	800371c <HAL_RCC_OscConfig+0x90>
 800370e:	4b7c      	ldr	r3, [pc, #496]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a7b      	ldr	r2, [pc, #492]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e01d      	b.n	8003758 <HAL_RCC_OscConfig+0xcc>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003724:	d10c      	bne.n	8003740 <HAL_RCC_OscConfig+0xb4>
 8003726:	4b76      	ldr	r3, [pc, #472]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a75      	ldr	r2, [pc, #468]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 800372c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4b73      	ldr	r3, [pc, #460]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a72      	ldr	r2, [pc, #456]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 8003738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	e00b      	b.n	8003758 <HAL_RCC_OscConfig+0xcc>
 8003740:	4b6f      	ldr	r3, [pc, #444]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a6e      	ldr	r2, [pc, #440]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 8003746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	4b6c      	ldr	r3, [pc, #432]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a6b      	ldr	r2, [pc, #428]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 8003752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d013      	beq.n	8003788 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7fe feec 	bl	800253c <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003768:	f7fe fee8 	bl	800253c <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b64      	cmp	r3, #100	; 0x64
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e21f      	b.n	8003bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377a:	4b61      	ldr	r3, [pc, #388]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0xdc>
 8003786:	e014      	b.n	80037b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7fe fed8 	bl	800253c <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003790:	f7fe fed4 	bl	800253c <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b64      	cmp	r3, #100	; 0x64
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e20b      	b.n	8003bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a2:	4b57      	ldr	r3, [pc, #348]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x104>
 80037ae:	e000      	b.n	80037b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d06f      	beq.n	800389e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037be:	4b50      	ldr	r3, [pc, #320]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 030c 	and.w	r3, r3, #12
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d017      	beq.n	80037fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037ca:	4b4d      	ldr	r3, [pc, #308]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d105      	bne.n	80037e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037d6:	4b4a      	ldr	r3, [pc, #296]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00b      	beq.n	80037fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037e2:	4b47      	ldr	r3, [pc, #284]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037ea:	2b0c      	cmp	r3, #12
 80037ec:	d11c      	bne.n	8003828 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ee:	4b44      	ldr	r3, [pc, #272]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d116      	bne.n	8003828 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fa:	4b41      	ldr	r3, [pc, #260]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <HAL_RCC_OscConfig+0x186>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d001      	beq.n	8003812 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e1d3      	b.n	8003bba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003812:	4b3b      	ldr	r3, [pc, #236]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4937      	ldr	r1, [pc, #220]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 8003822:	4313      	orrs	r3, r2
 8003824:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003826:	e03a      	b.n	800389e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d020      	beq.n	8003872 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003830:	4b34      	ldr	r3, [pc, #208]	; (8003904 <HAL_RCC_OscConfig+0x278>)
 8003832:	2201      	movs	r2, #1
 8003834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003836:	f7fe fe81 	bl	800253c <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800383e:	f7fe fe7d 	bl	800253c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e1b4      	b.n	8003bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003850:	4b2b      	ldr	r3, [pc, #172]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385c:	4b28      	ldr	r3, [pc, #160]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4925      	ldr	r1, [pc, #148]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]
 8003870:	e015      	b.n	800389e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003872:	4b24      	ldr	r3, [pc, #144]	; (8003904 <HAL_RCC_OscConfig+0x278>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7fe fe60 	bl	800253c <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003880:	f7fe fe5c 	bl	800253c <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e193      	b.n	8003bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003892:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d036      	beq.n	8003918 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d016      	beq.n	80038e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038b2:	4b15      	ldr	r3, [pc, #84]	; (8003908 <HAL_RCC_OscConfig+0x27c>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b8:	f7fe fe40 	bl	800253c <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c0:	f7fe fe3c 	bl	800253c <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e173      	b.n	8003bba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_RCC_OscConfig+0x274>)
 80038d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCC_OscConfig+0x234>
 80038de:	e01b      	b.n	8003918 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e0:	4b09      	ldr	r3, [pc, #36]	; (8003908 <HAL_RCC_OscConfig+0x27c>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e6:	f7fe fe29 	bl	800253c <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ec:	e00e      	b.n	800390c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ee:	f7fe fe25 	bl	800253c <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d907      	bls.n	800390c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e15c      	b.n	8003bba <HAL_RCC_OscConfig+0x52e>
 8003900:	40023800 	.word	0x40023800
 8003904:	42470000 	.word	0x42470000
 8003908:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800390c:	4b8a      	ldr	r3, [pc, #552]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 800390e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1ea      	bne.n	80038ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 8097 	beq.w	8003a54 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003926:	2300      	movs	r3, #0
 8003928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800392a:	4b83      	ldr	r3, [pc, #524]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10f      	bne.n	8003956 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	4b7f      	ldr	r3, [pc, #508]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	4a7e      	ldr	r2, [pc, #504]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 8003940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003944:	6413      	str	r3, [r2, #64]	; 0x40
 8003946:	4b7c      	ldr	r3, [pc, #496]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394e:	60bb      	str	r3, [r7, #8]
 8003950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003952:	2301      	movs	r3, #1
 8003954:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003956:	4b79      	ldr	r3, [pc, #484]	; (8003b3c <HAL_RCC_OscConfig+0x4b0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d118      	bne.n	8003994 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003962:	4b76      	ldr	r3, [pc, #472]	; (8003b3c <HAL_RCC_OscConfig+0x4b0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a75      	ldr	r2, [pc, #468]	; (8003b3c <HAL_RCC_OscConfig+0x4b0>)
 8003968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396e:	f7fe fde5 	bl	800253c <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003976:	f7fe fde1 	bl	800253c <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e118      	b.n	8003bba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003988:	4b6c      	ldr	r3, [pc, #432]	; (8003b3c <HAL_RCC_OscConfig+0x4b0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0f0      	beq.n	8003976 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d106      	bne.n	80039aa <HAL_RCC_OscConfig+0x31e>
 800399c:	4b66      	ldr	r3, [pc, #408]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	4a65      	ldr	r2, [pc, #404]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6713      	str	r3, [r2, #112]	; 0x70
 80039a8:	e01c      	b.n	80039e4 <HAL_RCC_OscConfig+0x358>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b05      	cmp	r3, #5
 80039b0:	d10c      	bne.n	80039cc <HAL_RCC_OscConfig+0x340>
 80039b2:	4b61      	ldr	r3, [pc, #388]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 80039b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b6:	4a60      	ldr	r2, [pc, #384]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 80039b8:	f043 0304 	orr.w	r3, r3, #4
 80039bc:	6713      	str	r3, [r2, #112]	; 0x70
 80039be:	4b5e      	ldr	r3, [pc, #376]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 80039c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c2:	4a5d      	ldr	r2, [pc, #372]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	6713      	str	r3, [r2, #112]	; 0x70
 80039ca:	e00b      	b.n	80039e4 <HAL_RCC_OscConfig+0x358>
 80039cc:	4b5a      	ldr	r3, [pc, #360]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 80039ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d0:	4a59      	ldr	r2, [pc, #356]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 80039d2:	f023 0301 	bic.w	r3, r3, #1
 80039d6:	6713      	str	r3, [r2, #112]	; 0x70
 80039d8:	4b57      	ldr	r3, [pc, #348]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	4a56      	ldr	r2, [pc, #344]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 80039de:	f023 0304 	bic.w	r3, r3, #4
 80039e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d015      	beq.n	8003a18 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ec:	f7fe fda6 	bl	800253c <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f2:	e00a      	b.n	8003a0a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f4:	f7fe fda2 	bl	800253c <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e0d7      	b.n	8003bba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0a:	4b4b      	ldr	r3, [pc, #300]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0ee      	beq.n	80039f4 <HAL_RCC_OscConfig+0x368>
 8003a16:	e014      	b.n	8003a42 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a18:	f7fe fd90 	bl	800253c <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a1e:	e00a      	b.n	8003a36 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a20:	f7fe fd8c 	bl	800253c <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e0c1      	b.n	8003bba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a36:	4b40      	ldr	r3, [pc, #256]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1ee      	bne.n	8003a20 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d105      	bne.n	8003a54 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a48:	4b3b      	ldr	r3, [pc, #236]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	4a3a      	ldr	r2, [pc, #232]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 8003a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 80ad 	beq.w	8003bb8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a5e:	4b36      	ldr	r3, [pc, #216]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d060      	beq.n	8003b2c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d145      	bne.n	8003afe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a72:	4b33      	ldr	r3, [pc, #204]	; (8003b40 <HAL_RCC_OscConfig+0x4b4>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7fe fd60 	bl	800253c <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a80:	f7fe fd5c 	bl	800253c <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e093      	b.n	8003bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a92:	4b29      	ldr	r3, [pc, #164]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69da      	ldr	r2, [r3, #28]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	019b      	lsls	r3, r3, #6
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	041b      	lsls	r3, r3, #16
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	061b      	lsls	r3, r3, #24
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	071b      	lsls	r3, r3, #28
 8003aca:	491b      	ldr	r1, [pc, #108]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <HAL_RCC_OscConfig+0x4b4>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fe fd31 	bl	800253c <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ade:	f7fe fd2d 	bl	800253c <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e064      	b.n	8003bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af0:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x452>
 8003afc:	e05c      	b.n	8003bb8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afe:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <HAL_RCC_OscConfig+0x4b4>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fe fd1a 	bl	800253c <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b0c:	f7fe fd16 	bl	800253c <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e04d      	b.n	8003bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_RCC_OscConfig+0x4ac>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x480>
 8003b2a:	e045      	b.n	8003bb8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d107      	bne.n	8003b44 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e040      	b.n	8003bba <HAL_RCC_OscConfig+0x52e>
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	40007000 	.word	0x40007000
 8003b40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b44:	4b1f      	ldr	r3, [pc, #124]	; (8003bc4 <HAL_RCC_OscConfig+0x538>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d030      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d129      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d122      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b74:	4013      	ands	r3, r2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d119      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8a:	085b      	lsrs	r3, r3, #1
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d10f      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d107      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800

08003bc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e07b      	b.n	8003cd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d108      	bne.n	8003bf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bea:	d009      	beq.n	8003c00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	61da      	str	r2, [r3, #28]
 8003bf2:	e005      	b.n	8003c00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fe fa86 	bl	800212c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c84:	ea42 0103 	orr.w	r1, r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	0c1b      	lsrs	r3, r3, #16
 8003c9e:	f003 0104 	and.w	r1, r3, #4
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	f003 0210 	and.w	r2, r3, #16
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b088      	sub	sp, #32
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	603b      	str	r3, [r7, #0]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_SPI_Transmit+0x22>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e126      	b.n	8003f4a <HAL_SPI_Transmit+0x270>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d04:	f7fe fc1a 	bl	800253c <HAL_GetTick>
 8003d08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d002      	beq.n	8003d20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d1e:	e10b      	b.n	8003f38 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <HAL_SPI_Transmit+0x52>
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d102      	bne.n	8003d32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d30:	e102      	b.n	8003f38 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2203      	movs	r2, #3
 8003d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	88fa      	ldrh	r2, [r7, #6]
 8003d4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	88fa      	ldrh	r2, [r7, #6]
 8003d50:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d78:	d10f      	bne.n	8003d9a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d007      	beq.n	8003db8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003db6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc0:	d14b      	bne.n	8003e5a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <HAL_SPI_Transmit+0xf6>
 8003dca:	8afb      	ldrh	r3, [r7, #22]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d13e      	bne.n	8003e4e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	881a      	ldrh	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	1c9a      	adds	r2, r3, #2
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003df4:	e02b      	b.n	8003e4e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d112      	bne.n	8003e2a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	881a      	ldrh	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	1c9a      	adds	r2, r3, #2
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e28:	e011      	b.n	8003e4e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e2a:	f7fe fb87 	bl	800253c <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d803      	bhi.n	8003e42 <HAL_SPI_Transmit+0x168>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e40:	d102      	bne.n	8003e48 <HAL_SPI_Transmit+0x16e>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d102      	bne.n	8003e4e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e4c:	e074      	b.n	8003f38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1ce      	bne.n	8003df6 <HAL_SPI_Transmit+0x11c>
 8003e58:	e04c      	b.n	8003ef4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <HAL_SPI_Transmit+0x18e>
 8003e62:	8afb      	ldrh	r3, [r7, #22]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d140      	bne.n	8003eea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	330c      	adds	r3, #12
 8003e72:	7812      	ldrb	r2, [r2, #0]
 8003e74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e8e:	e02c      	b.n	8003eea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d113      	bne.n	8003ec6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	330c      	adds	r3, #12
 8003ea8:	7812      	ldrb	r2, [r2, #0]
 8003eaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ec4:	e011      	b.n	8003eea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ec6:	f7fe fb39 	bl	800253c <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d803      	bhi.n	8003ede <HAL_SPI_Transmit+0x204>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003edc:	d102      	bne.n	8003ee4 <HAL_SPI_Transmit+0x20a>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d102      	bne.n	8003eea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ee8:	e026      	b.n	8003f38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1cd      	bne.n	8003e90 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	6839      	ldr	r1, [r7, #0]
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f8b3 	bl	8004064 <SPI_EndRxTxTransaction>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2220      	movs	r2, #32
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f12:	2300      	movs	r3, #0
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	77fb      	strb	r3, [r7, #31]
 8003f34:	e000      	b.n	8003f38 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003f36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f48:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	4613      	mov	r3, r2
 8003f62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f64:	f7fe faea 	bl	800253c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6c:	1a9b      	subs	r3, r3, r2
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	4413      	add	r3, r2
 8003f72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f74:	f7fe fae2 	bl	800253c <HAL_GetTick>
 8003f78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f7a:	4b39      	ldr	r3, [pc, #228]	; (8004060 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	015b      	lsls	r3, r3, #5
 8003f80:	0d1b      	lsrs	r3, r3, #20
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	fb02 f303 	mul.w	r3, r2, r3
 8003f88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f8a:	e054      	b.n	8004036 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d050      	beq.n	8004036 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f94:	f7fe fad2 	bl	800253c <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d902      	bls.n	8003faa <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d13d      	bne.n	8004026 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fc2:	d111      	bne.n	8003fe8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fcc:	d004      	beq.n	8003fd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd6:	d107      	bne.n	8003fe8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff0:	d10f      	bne.n	8004012 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004010:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e017      	b.n	8004056 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	3b01      	subs	r3, #1
 8004034:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	4013      	ands	r3, r2
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	429a      	cmp	r2, r3
 8004044:	bf0c      	ite	eq
 8004046:	2301      	moveq	r3, #1
 8004048:	2300      	movne	r3, #0
 800404a:	b2db      	uxtb	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	429a      	cmp	r2, r3
 8004052:	d19b      	bne.n	8003f8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3720      	adds	r7, #32
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20000004 	.word	0x20000004

08004064 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004070:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <SPI_EndRxTxTransaction+0x7c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1b      	ldr	r2, [pc, #108]	; (80040e4 <SPI_EndRxTxTransaction+0x80>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	0d5b      	lsrs	r3, r3, #21
 800407c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004080:	fb02 f303 	mul.w	r3, r2, r3
 8004084:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800408e:	d112      	bne.n	80040b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2200      	movs	r2, #0
 8004098:	2180      	movs	r1, #128	; 0x80
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f7ff ff5a 	bl	8003f54 <SPI_WaitFlagStateUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d016      	beq.n	80040d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040aa:	f043 0220 	orr.w	r2, r3, #32
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e00f      	b.n	80040d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	3b01      	subs	r3, #1
 80040c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040cc:	2b80      	cmp	r3, #128	; 0x80
 80040ce:	d0f2      	beq.n	80040b6 <SPI_EndRxTxTransaction+0x52>
 80040d0:	e000      	b.n	80040d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80040d2:	bf00      	nop
  }

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000004 	.word	0x20000004
 80040e4:	165e9f81 	.word	0x165e9f81

080040e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e041      	b.n	800417e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f839 	bl	8004186 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3304      	adds	r3, #4
 8004124:	4619      	mov	r1, r3
 8004126:	4610      	mov	r0, r2
 8004128:	f000 f9d8 	bl	80044dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d001      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e04e      	b.n	8004252 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a23      	ldr	r2, [pc, #140]	; (8004260 <HAL_TIM_Base_Start_IT+0xc4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d022      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x80>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041de:	d01d      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x80>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1f      	ldr	r2, [pc, #124]	; (8004264 <HAL_TIM_Base_Start_IT+0xc8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d018      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x80>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1e      	ldr	r2, [pc, #120]	; (8004268 <HAL_TIM_Base_Start_IT+0xcc>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d013      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x80>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1c      	ldr	r2, [pc, #112]	; (800426c <HAL_TIM_Base_Start_IT+0xd0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00e      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x80>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <HAL_TIM_Base_Start_IT+0xd4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d009      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x80>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a19      	ldr	r2, [pc, #100]	; (8004274 <HAL_TIM_Base_Start_IT+0xd8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d004      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x80>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a18      	ldr	r2, [pc, #96]	; (8004278 <HAL_TIM_Base_Start_IT+0xdc>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d111      	bne.n	8004240 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b06      	cmp	r3, #6
 800422c:	d010      	beq.n	8004250 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0201 	orr.w	r2, r2, #1
 800423c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423e:	e007      	b.n	8004250 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0201 	orr.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40010000 	.word	0x40010000
 8004264:	40000400 	.word	0x40000400
 8004268:	40000800 	.word	0x40000800
 800426c:	40000c00 	.word	0x40000c00
 8004270:	40010400 	.word	0x40010400
 8004274:	40014000 	.word	0x40014000
 8004278:	40001800 	.word	0x40001800

0800427c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b02      	cmp	r3, #2
 8004290:	d122      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b02      	cmp	r3, #2
 800429e:	d11b      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0202 	mvn.w	r2, #2
 80042a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f8ee 	bl	80044a0 <HAL_TIM_IC_CaptureCallback>
 80042c4:	e005      	b.n	80042d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f8e0 	bl	800448c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f8f1 	bl	80044b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d122      	bne.n	800432c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d11b      	bne.n	800432c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0204 	mvn.w	r2, #4
 80042fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2202      	movs	r2, #2
 8004302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f8c4 	bl	80044a0 <HAL_TIM_IC_CaptureCallback>
 8004318:	e005      	b.n	8004326 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f8b6 	bl	800448c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f8c7 	bl	80044b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b08      	cmp	r3, #8
 8004338:	d122      	bne.n	8004380 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	2b08      	cmp	r3, #8
 8004346:	d11b      	bne.n	8004380 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0208 	mvn.w	r2, #8
 8004350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2204      	movs	r2, #4
 8004356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f89a 	bl	80044a0 <HAL_TIM_IC_CaptureCallback>
 800436c:	e005      	b.n	800437a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f88c 	bl	800448c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f89d 	bl	80044b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b10      	cmp	r3, #16
 800438c:	d122      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b10      	cmp	r3, #16
 800439a:	d11b      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0210 	mvn.w	r2, #16
 80043a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2208      	movs	r2, #8
 80043aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f870 	bl	80044a0 <HAL_TIM_IC_CaptureCallback>
 80043c0:	e005      	b.n	80043ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f862 	bl	800448c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f873 	bl	80044b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d10e      	bne.n	8004400 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d107      	bne.n	8004400 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0201 	mvn.w	r2, #1
 80043f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fd fe48 	bl	8002090 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440a:	2b80      	cmp	r3, #128	; 0x80
 800440c:	d10e      	bne.n	800442c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004418:	2b80      	cmp	r3, #128	; 0x80
 800441a:	d107      	bne.n	800442c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f902 	bl	8004630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004436:	2b40      	cmp	r3, #64	; 0x40
 8004438:	d10e      	bne.n	8004458 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004444:	2b40      	cmp	r3, #64	; 0x40
 8004446:	d107      	bne.n	8004458 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f838 	bl	80044c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	2b20      	cmp	r3, #32
 8004464:	d10e      	bne.n	8004484 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b20      	cmp	r3, #32
 8004472:	d107      	bne.n	8004484 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0220 	mvn.w	r2, #32
 800447c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f8cc 	bl	800461c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004484:	bf00      	nop
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a40      	ldr	r2, [pc, #256]	; (80045f0 <TIM_Base_SetConfig+0x114>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d013      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fa:	d00f      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a3d      	ldr	r2, [pc, #244]	; (80045f4 <TIM_Base_SetConfig+0x118>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00b      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a3c      	ldr	r2, [pc, #240]	; (80045f8 <TIM_Base_SetConfig+0x11c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d007      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a3b      	ldr	r2, [pc, #236]	; (80045fc <TIM_Base_SetConfig+0x120>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d003      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a3a      	ldr	r2, [pc, #232]	; (8004600 <TIM_Base_SetConfig+0x124>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d108      	bne.n	800452e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a2f      	ldr	r2, [pc, #188]	; (80045f0 <TIM_Base_SetConfig+0x114>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d02b      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453c:	d027      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a2c      	ldr	r2, [pc, #176]	; (80045f4 <TIM_Base_SetConfig+0x118>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d023      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a2b      	ldr	r2, [pc, #172]	; (80045f8 <TIM_Base_SetConfig+0x11c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d01f      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a2a      	ldr	r2, [pc, #168]	; (80045fc <TIM_Base_SetConfig+0x120>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d01b      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a29      	ldr	r2, [pc, #164]	; (8004600 <TIM_Base_SetConfig+0x124>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d017      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a28      	ldr	r2, [pc, #160]	; (8004604 <TIM_Base_SetConfig+0x128>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d013      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a27      	ldr	r2, [pc, #156]	; (8004608 <TIM_Base_SetConfig+0x12c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00f      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a26      	ldr	r2, [pc, #152]	; (800460c <TIM_Base_SetConfig+0x130>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00b      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a25      	ldr	r2, [pc, #148]	; (8004610 <TIM_Base_SetConfig+0x134>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d007      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a24      	ldr	r2, [pc, #144]	; (8004614 <TIM_Base_SetConfig+0x138>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d003      	beq.n	800458e <TIM_Base_SetConfig+0xb2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a23      	ldr	r2, [pc, #140]	; (8004618 <TIM_Base_SetConfig+0x13c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d108      	bne.n	80045a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a0a      	ldr	r2, [pc, #40]	; (80045f0 <TIM_Base_SetConfig+0x114>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_Base_SetConfig+0xf8>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a0c      	ldr	r2, [pc, #48]	; (8004600 <TIM_Base_SetConfig+0x124>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d103      	bne.n	80045dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	615a      	str	r2, [r3, #20]
}
 80045e2:	bf00      	nop
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40010000 	.word	0x40010000
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40000800 	.word	0x40000800
 80045fc:	40000c00 	.word	0x40000c00
 8004600:	40010400 	.word	0x40010400
 8004604:	40014000 	.word	0x40014000
 8004608:	40014400 	.word	0x40014400
 800460c:	40014800 	.word	0x40014800
 8004610:	40001800 	.word	0x40001800
 8004614:	40001c00 	.word	0x40001c00
 8004618:	40002000 	.word	0x40002000

0800461c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e03f      	b.n	80046d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d106      	bne.n	8004670 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fd fe8c 	bl	8002388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2224      	movs	r2, #36	; 0x24
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004686:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f829 	bl	80046e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800469c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e4:	b09f      	sub	sp, #124	; 0x7c
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f6:	68d9      	ldr	r1, [r3, #12]
 80046f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	ea40 0301 	orr.w	r3, r0, r1
 8004700:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	431a      	orrs	r2, r3
 800470c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	431a      	orrs	r2, r3
 8004712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	4313      	orrs	r3, r2
 8004718:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800471a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004724:	f021 010c 	bic.w	r1, r1, #12
 8004728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800472e:	430b      	orrs	r3, r1
 8004730:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800473c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800473e:	6999      	ldr	r1, [r3, #24]
 8004740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	ea40 0301 	orr.w	r3, r0, r1
 8004748:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800474a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4bc5      	ldr	r3, [pc, #788]	; (8004a64 <UART_SetConfig+0x384>)
 8004750:	429a      	cmp	r2, r3
 8004752:	d004      	beq.n	800475e <UART_SetConfig+0x7e>
 8004754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	4bc3      	ldr	r3, [pc, #780]	; (8004a68 <UART_SetConfig+0x388>)
 800475a:	429a      	cmp	r2, r3
 800475c:	d103      	bne.n	8004766 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800475e:	f7fe fd9d 	bl	800329c <HAL_RCC_GetPCLK2Freq>
 8004762:	6778      	str	r0, [r7, #116]	; 0x74
 8004764:	e002      	b.n	800476c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004766:	f7fe fd85 	bl	8003274 <HAL_RCC_GetPCLK1Freq>
 800476a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800476c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004774:	f040 80b6 	bne.w	80048e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800477a:	461c      	mov	r4, r3
 800477c:	f04f 0500 	mov.w	r5, #0
 8004780:	4622      	mov	r2, r4
 8004782:	462b      	mov	r3, r5
 8004784:	1891      	adds	r1, r2, r2
 8004786:	6439      	str	r1, [r7, #64]	; 0x40
 8004788:	415b      	adcs	r3, r3
 800478a:	647b      	str	r3, [r7, #68]	; 0x44
 800478c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004790:	1912      	adds	r2, r2, r4
 8004792:	eb45 0303 	adc.w	r3, r5, r3
 8004796:	f04f 0000 	mov.w	r0, #0
 800479a:	f04f 0100 	mov.w	r1, #0
 800479e:	00d9      	lsls	r1, r3, #3
 80047a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047a4:	00d0      	lsls	r0, r2, #3
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	1911      	adds	r1, r2, r4
 80047ac:	6639      	str	r1, [r7, #96]	; 0x60
 80047ae:	416b      	adcs	r3, r5
 80047b0:	667b      	str	r3, [r7, #100]	; 0x64
 80047b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	461a      	mov	r2, r3
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	1891      	adds	r1, r2, r2
 80047be:	63b9      	str	r1, [r7, #56]	; 0x38
 80047c0:	415b      	adcs	r3, r3
 80047c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80047cc:	f7fb fd2a 	bl	8000224 <__aeabi_uldivmod>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4ba5      	ldr	r3, [pc, #660]	; (8004a6c <UART_SetConfig+0x38c>)
 80047d6:	fba3 2302 	umull	r2, r3, r3, r2
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	011e      	lsls	r6, r3, #4
 80047de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047e0:	461c      	mov	r4, r3
 80047e2:	f04f 0500 	mov.w	r5, #0
 80047e6:	4622      	mov	r2, r4
 80047e8:	462b      	mov	r3, r5
 80047ea:	1891      	adds	r1, r2, r2
 80047ec:	6339      	str	r1, [r7, #48]	; 0x30
 80047ee:	415b      	adcs	r3, r3
 80047f0:	637b      	str	r3, [r7, #52]	; 0x34
 80047f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80047f6:	1912      	adds	r2, r2, r4
 80047f8:	eb45 0303 	adc.w	r3, r5, r3
 80047fc:	f04f 0000 	mov.w	r0, #0
 8004800:	f04f 0100 	mov.w	r1, #0
 8004804:	00d9      	lsls	r1, r3, #3
 8004806:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800480a:	00d0      	lsls	r0, r2, #3
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	1911      	adds	r1, r2, r4
 8004812:	65b9      	str	r1, [r7, #88]	; 0x58
 8004814:	416b      	adcs	r3, r5
 8004816:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	461a      	mov	r2, r3
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	1891      	adds	r1, r2, r2
 8004824:	62b9      	str	r1, [r7, #40]	; 0x28
 8004826:	415b      	adcs	r3, r3
 8004828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800482a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800482e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004832:	f7fb fcf7 	bl	8000224 <__aeabi_uldivmod>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4b8c      	ldr	r3, [pc, #560]	; (8004a6c <UART_SetConfig+0x38c>)
 800483c:	fba3 1302 	umull	r1, r3, r3, r2
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	2164      	movs	r1, #100	; 0x64
 8004844:	fb01 f303 	mul.w	r3, r1, r3
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	3332      	adds	r3, #50	; 0x32
 800484e:	4a87      	ldr	r2, [pc, #540]	; (8004a6c <UART_SetConfig+0x38c>)
 8004850:	fba2 2303 	umull	r2, r3, r2, r3
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800485c:	441e      	add	r6, r3
 800485e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004860:	4618      	mov	r0, r3
 8004862:	f04f 0100 	mov.w	r1, #0
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	1894      	adds	r4, r2, r2
 800486c:	623c      	str	r4, [r7, #32]
 800486e:	415b      	adcs	r3, r3
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
 8004872:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004876:	1812      	adds	r2, r2, r0
 8004878:	eb41 0303 	adc.w	r3, r1, r3
 800487c:	f04f 0400 	mov.w	r4, #0
 8004880:	f04f 0500 	mov.w	r5, #0
 8004884:	00dd      	lsls	r5, r3, #3
 8004886:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800488a:	00d4      	lsls	r4, r2, #3
 800488c:	4622      	mov	r2, r4
 800488e:	462b      	mov	r3, r5
 8004890:	1814      	adds	r4, r2, r0
 8004892:	653c      	str	r4, [r7, #80]	; 0x50
 8004894:	414b      	adcs	r3, r1
 8004896:	657b      	str	r3, [r7, #84]	; 0x54
 8004898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	461a      	mov	r2, r3
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	1891      	adds	r1, r2, r2
 80048a4:	61b9      	str	r1, [r7, #24]
 80048a6:	415b      	adcs	r3, r3
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80048b2:	f7fb fcb7 	bl	8000224 <__aeabi_uldivmod>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4b6c      	ldr	r3, [pc, #432]	; (8004a6c <UART_SetConfig+0x38c>)
 80048bc:	fba3 1302 	umull	r1, r3, r3, r2
 80048c0:	095b      	lsrs	r3, r3, #5
 80048c2:	2164      	movs	r1, #100	; 0x64
 80048c4:	fb01 f303 	mul.w	r3, r1, r3
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	3332      	adds	r3, #50	; 0x32
 80048ce:	4a67      	ldr	r2, [pc, #412]	; (8004a6c <UART_SetConfig+0x38c>)
 80048d0:	fba2 2303 	umull	r2, r3, r2, r3
 80048d4:	095b      	lsrs	r3, r3, #5
 80048d6:	f003 0207 	and.w	r2, r3, #7
 80048da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4432      	add	r2, r6
 80048e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048e2:	e0b9      	b.n	8004a58 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048e6:	461c      	mov	r4, r3
 80048e8:	f04f 0500 	mov.w	r5, #0
 80048ec:	4622      	mov	r2, r4
 80048ee:	462b      	mov	r3, r5
 80048f0:	1891      	adds	r1, r2, r2
 80048f2:	6139      	str	r1, [r7, #16]
 80048f4:	415b      	adcs	r3, r3
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048fc:	1912      	adds	r2, r2, r4
 80048fe:	eb45 0303 	adc.w	r3, r5, r3
 8004902:	f04f 0000 	mov.w	r0, #0
 8004906:	f04f 0100 	mov.w	r1, #0
 800490a:	00d9      	lsls	r1, r3, #3
 800490c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004910:	00d0      	lsls	r0, r2, #3
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	eb12 0804 	adds.w	r8, r2, r4
 800491a:	eb43 0905 	adc.w	r9, r3, r5
 800491e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	4618      	mov	r0, r3
 8004924:	f04f 0100 	mov.w	r1, #0
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	008b      	lsls	r3, r1, #2
 8004932:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004936:	0082      	lsls	r2, r0, #2
 8004938:	4640      	mov	r0, r8
 800493a:	4649      	mov	r1, r9
 800493c:	f7fb fc72 	bl	8000224 <__aeabi_uldivmod>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4b49      	ldr	r3, [pc, #292]	; (8004a6c <UART_SetConfig+0x38c>)
 8004946:	fba3 2302 	umull	r2, r3, r3, r2
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	011e      	lsls	r6, r3, #4
 800494e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004950:	4618      	mov	r0, r3
 8004952:	f04f 0100 	mov.w	r1, #0
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	1894      	adds	r4, r2, r2
 800495c:	60bc      	str	r4, [r7, #8]
 800495e:	415b      	adcs	r3, r3
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004966:	1812      	adds	r2, r2, r0
 8004968:	eb41 0303 	adc.w	r3, r1, r3
 800496c:	f04f 0400 	mov.w	r4, #0
 8004970:	f04f 0500 	mov.w	r5, #0
 8004974:	00dd      	lsls	r5, r3, #3
 8004976:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800497a:	00d4      	lsls	r4, r2, #3
 800497c:	4622      	mov	r2, r4
 800497e:	462b      	mov	r3, r5
 8004980:	1814      	adds	r4, r2, r0
 8004982:	64bc      	str	r4, [r7, #72]	; 0x48
 8004984:	414b      	adcs	r3, r1
 8004986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4618      	mov	r0, r3
 800498e:	f04f 0100 	mov.w	r1, #0
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	f04f 0300 	mov.w	r3, #0
 800499a:	008b      	lsls	r3, r1, #2
 800499c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80049a0:	0082      	lsls	r2, r0, #2
 80049a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80049a6:	f7fb fc3d 	bl	8000224 <__aeabi_uldivmod>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4b2f      	ldr	r3, [pc, #188]	; (8004a6c <UART_SetConfig+0x38c>)
 80049b0:	fba3 1302 	umull	r1, r3, r3, r2
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	2164      	movs	r1, #100	; 0x64
 80049b8:	fb01 f303 	mul.w	r3, r1, r3
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	3332      	adds	r3, #50	; 0x32
 80049c2:	4a2a      	ldr	r2, [pc, #168]	; (8004a6c <UART_SetConfig+0x38c>)
 80049c4:	fba2 2303 	umull	r2, r3, r2, r3
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ce:	441e      	add	r6, r3
 80049d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049d2:	4618      	mov	r0, r3
 80049d4:	f04f 0100 	mov.w	r1, #0
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	1894      	adds	r4, r2, r2
 80049de:	603c      	str	r4, [r7, #0]
 80049e0:	415b      	adcs	r3, r3
 80049e2:	607b      	str	r3, [r7, #4]
 80049e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049e8:	1812      	adds	r2, r2, r0
 80049ea:	eb41 0303 	adc.w	r3, r1, r3
 80049ee:	f04f 0400 	mov.w	r4, #0
 80049f2:	f04f 0500 	mov.w	r5, #0
 80049f6:	00dd      	lsls	r5, r3, #3
 80049f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049fc:	00d4      	lsls	r4, r2, #3
 80049fe:	4622      	mov	r2, r4
 8004a00:	462b      	mov	r3, r5
 8004a02:	eb12 0a00 	adds.w	sl, r2, r0
 8004a06:	eb43 0b01 	adc.w	fp, r3, r1
 8004a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f04f 0100 	mov.w	r1, #0
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	008b      	lsls	r3, r1, #2
 8004a1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a22:	0082      	lsls	r2, r0, #2
 8004a24:	4650      	mov	r0, sl
 8004a26:	4659      	mov	r1, fp
 8004a28:	f7fb fbfc 	bl	8000224 <__aeabi_uldivmod>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4b0e      	ldr	r3, [pc, #56]	; (8004a6c <UART_SetConfig+0x38c>)
 8004a32:	fba3 1302 	umull	r1, r3, r3, r2
 8004a36:	095b      	lsrs	r3, r3, #5
 8004a38:	2164      	movs	r1, #100	; 0x64
 8004a3a:	fb01 f303 	mul.w	r3, r1, r3
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	3332      	adds	r3, #50	; 0x32
 8004a44:	4a09      	ldr	r2, [pc, #36]	; (8004a6c <UART_SetConfig+0x38c>)
 8004a46:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	f003 020f 	and.w	r2, r3, #15
 8004a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4432      	add	r2, r6
 8004a56:	609a      	str	r2, [r3, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	377c      	adds	r7, #124	; 0x7c
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a62:	bf00      	nop
 8004a64:	40011000 	.word	0x40011000
 8004a68:	40011400 	.word	0x40011400
 8004a6c:	51eb851f 	.word	0x51eb851f

08004a70 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f103 0208 	add.w	r2, r3, #8
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f04f 32ff 	mov.w	r2, #4294967295
 8004a88:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f103 0208 	add.w	r2, r3, #8
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f103 0208 	add.w	r2, r3, #8
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	601a      	str	r2, [r3, #0]
}
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d103      	bne.n	8004b32 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	e00c      	b.n	8004b4c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3308      	adds	r3, #8
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	e002      	b.n	8004b40 <vListInsert+0x2e>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d2f6      	bcs.n	8004b3a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	601a      	str	r2, [r3, #0]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6892      	ldr	r2, [r2, #8]
 8004b9a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6852      	ldr	r2, [r2, #4]
 8004ba4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d103      	bne.n	8004bb8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	1e5a      	subs	r2, r3, #1
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10a      	bne.n	8004c02 <xQueueGenericReset+0x2a>
        __asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	60bb      	str	r3, [r7, #8]
    }
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004c02:	f001 ffd9 	bl	8006bb8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0e:	68f9      	ldr	r1, [r7, #12]
 8004c10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c12:	fb01 f303 	mul.w	r3, r1, r3
 8004c16:	441a      	add	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c32:	3b01      	subs	r3, #1
 8004c34:	68f9      	ldr	r1, [r7, #12]
 8004c36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c38:	fb01 f303 	mul.w	r3, r1, r3
 8004c3c:	441a      	add	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	22ff      	movs	r2, #255	; 0xff
 8004c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	22ff      	movs	r2, #255	; 0xff
 8004c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d114      	bne.n	8004c82 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01a      	beq.n	8004c96 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3310      	adds	r3, #16
 8004c64:	4618      	mov	r0, r3
 8004c66:	f001 f8cb 	bl	8005e00 <xTaskRemoveFromEventList>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d012      	beq.n	8004c96 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004c70:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <xQueueGenericReset+0xcc>)
 8004c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	e009      	b.n	8004c96 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3310      	adds	r3, #16
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff fef2 	bl	8004a70 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3324      	adds	r3, #36	; 0x24
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff feed 	bl	8004a70 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004c96:	f001 ffbf 	bl	8006c18 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004c9a:	2301      	movs	r3, #1
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	e000ed04 	.word	0xe000ed04

08004ca8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08c      	sub	sp, #48	; 0x30
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <xQueueGenericCreate+0x2a>
        __asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	61bb      	str	r3, [r7, #24]
    }
 8004cce:	bf00      	nop
 8004cd0:	e7fe      	b.n	8004cd0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	fb02 f303 	mul.w	r3, r2, r3
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d006      	beq.n	8004cf0 <xQueueGenericCreate+0x48>
 8004ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d101      	bne.n	8004cf4 <xQueueGenericCreate+0x4c>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e000      	b.n	8004cf6 <xQueueGenericCreate+0x4e>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10a      	bne.n	8004d10 <xQueueGenericCreate+0x68>
        __asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	617b      	str	r3, [r7, #20]
    }
 8004d0c:	bf00      	nop
 8004d0e:	e7fe      	b.n	8004d0e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004d16:	d90a      	bls.n	8004d2e <xQueueGenericCreate+0x86>
        __asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	613b      	str	r3, [r7, #16]
    }
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	3350      	adds	r3, #80	; 0x50
 8004d32:	4618      	mov	r0, r3
 8004d34:	f002 f8a8 	bl	8006e88 <pvPortMalloc>
 8004d38:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00d      	beq.n	8004d5c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	3350      	adds	r3, #80	; 0x50
 8004d48:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d4a:	79fa      	ldrb	r2, [r7, #7]
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	4613      	mov	r3, r2
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 f805 	bl	8004d66 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
    }
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3728      	adds	r7, #40	; 0x28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	607a      	str	r2, [r7, #4]
 8004d72:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d103      	bne.n	8004d82 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	e002      	b.n	8004d88 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d94:	2101      	movs	r1, #1
 8004d96:	69b8      	ldr	r0, [r7, #24]
 8004d98:	f7ff ff1e 	bl	8004bd8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	78fa      	ldrb	r2, [r7, #3]
 8004da0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004da4:	bf00      	nop
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08e      	sub	sp, #56	; 0x38
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10a      	bne.n	8004dde <xQueueGenericSend+0x32>
        __asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004dda:	bf00      	nop
 8004ddc:	e7fe      	b.n	8004ddc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d103      	bne.n	8004dec <xQueueGenericSend+0x40>
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <xQueueGenericSend+0x44>
 8004dec:	2301      	movs	r3, #1
 8004dee:	e000      	b.n	8004df2 <xQueueGenericSend+0x46>
 8004df0:	2300      	movs	r3, #0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10a      	bne.n	8004e0c <xQueueGenericSend+0x60>
        __asm volatile
 8004df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004e08:	bf00      	nop
 8004e0a:	e7fe      	b.n	8004e0a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d103      	bne.n	8004e1a <xQueueGenericSend+0x6e>
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <xQueueGenericSend+0x72>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <xQueueGenericSend+0x74>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10a      	bne.n	8004e3a <xQueueGenericSend+0x8e>
        __asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	623b      	str	r3, [r7, #32]
    }
 8004e36:	bf00      	nop
 8004e38:	e7fe      	b.n	8004e38 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e3a:	f001 f97d 	bl	8006138 <xTaskGetSchedulerState>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d102      	bne.n	8004e4a <xQueueGenericSend+0x9e>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <xQueueGenericSend+0xa2>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <xQueueGenericSend+0xa4>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10a      	bne.n	8004e6a <xQueueGenericSend+0xbe>
        __asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	61fb      	str	r3, [r7, #28]
    }
 8004e66:	bf00      	nop
 8004e68:	e7fe      	b.n	8004e68 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004e6a:	f001 fea5 	bl	8006bb8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d302      	bcc.n	8004e80 <xQueueGenericSend+0xd4>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d129      	bne.n	8004ed4 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e86:	f000 fa19 	bl	80052bc <prvCopyDataToQueue>
 8004e8a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d010      	beq.n	8004eb6 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e96:	3324      	adds	r3, #36	; 0x24
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 ffb1 	bl	8005e00 <xTaskRemoveFromEventList>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d013      	beq.n	8004ecc <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004ea4:	4b3f      	ldr	r3, [pc, #252]	; (8004fa4 <xQueueGenericSend+0x1f8>)
 8004ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	e00a      	b.n	8004ecc <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004ebc:	4b39      	ldr	r3, [pc, #228]	; (8004fa4 <xQueueGenericSend+0x1f8>)
 8004ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004ecc:	f001 fea4 	bl	8006c18 <vPortExitCritical>
                return pdPASS;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e063      	b.n	8004f9c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d103      	bne.n	8004ee2 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004eda:	f001 fe9d 	bl	8006c18 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	e05c      	b.n	8004f9c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d106      	bne.n	8004ef6 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004ee8:	f107 0314 	add.w	r3, r7, #20
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 ffe9 	bl	8005ec4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004ef6:	f001 fe8f 	bl	8006c18 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004efa:	f000 fd63 	bl	80059c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004efe:	f001 fe5b 	bl	8006bb8 <vPortEnterCritical>
 8004f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f08:	b25b      	sxtb	r3, r3
 8004f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0e:	d103      	bne.n	8004f18 <xQueueGenericSend+0x16c>
 8004f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f1e:	b25b      	sxtb	r3, r3
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f24:	d103      	bne.n	8004f2e <xQueueGenericSend+0x182>
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f2e:	f001 fe73 	bl	8006c18 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f32:	1d3a      	adds	r2, r7, #4
 8004f34:	f107 0314 	add.w	r3, r7, #20
 8004f38:	4611      	mov	r1, r2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 ffd8 	bl	8005ef0 <xTaskCheckForTimeOut>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d124      	bne.n	8004f90 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f48:	f000 fab0 	bl	80054ac <prvIsQueueFull>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d018      	beq.n	8004f84 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	3310      	adds	r3, #16
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	4611      	mov	r1, r2
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 ff00 	bl	8005d60 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f62:	f000 fa3b 	bl	80053dc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004f66:	f000 fd3b 	bl	80059e0 <xTaskResumeAll>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f47f af7c 	bne.w	8004e6a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004f72:	4b0c      	ldr	r3, [pc, #48]	; (8004fa4 <xQueueGenericSend+0x1f8>)
 8004f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	e772      	b.n	8004e6a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f86:	f000 fa29 	bl	80053dc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004f8a:	f000 fd29 	bl	80059e0 <xTaskResumeAll>
 8004f8e:	e76c      	b.n	8004e6a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f92:	f000 fa23 	bl	80053dc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004f96:	f000 fd23 	bl	80059e0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004f9a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3738      	adds	r7, #56	; 0x38
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	e000ed04 	.word	0xe000ed04

08004fa8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b090      	sub	sp, #64	; 0x40
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10a      	bne.n	8004fd6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004fd2:	bf00      	nop
 8004fd4:	e7fe      	b.n	8004fd4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d103      	bne.n	8004fe4 <xQueueGenericSendFromISR+0x3c>
 8004fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <xQueueGenericSendFromISR+0x40>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <xQueueGenericSendFromISR+0x42>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10a      	bne.n	8005004 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005000:	bf00      	nop
 8005002:	e7fe      	b.n	8005002 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2b02      	cmp	r3, #2
 8005008:	d103      	bne.n	8005012 <xQueueGenericSendFromISR+0x6a>
 800500a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <xQueueGenericSendFromISR+0x6e>
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <xQueueGenericSendFromISR+0x70>
 8005016:	2300      	movs	r3, #0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10a      	bne.n	8005032 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	623b      	str	r3, [r7, #32]
    }
 800502e:	bf00      	nop
 8005030:	e7fe      	b.n	8005030 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005032:	f001 fea3 	bl	8006d7c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005036:	f3ef 8211 	mrs	r2, BASEPRI
 800503a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	61fa      	str	r2, [r7, #28]
 800504c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800504e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005050:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505a:	429a      	cmp	r2, r3
 800505c:	d302      	bcc.n	8005064 <xQueueGenericSendFromISR+0xbc>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b02      	cmp	r3, #2
 8005062:	d13e      	bne.n	80050e2 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005066:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800506a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800506e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	68b9      	ldr	r1, [r7, #8]
 8005078:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800507a:	f000 f91f 	bl	80052bc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800507e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005086:	d112      	bne.n	80050ae <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	2b00      	cmp	r3, #0
 800508e:	d025      	beq.n	80050dc <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005092:	3324      	adds	r3, #36	; 0x24
 8005094:	4618      	mov	r0, r3
 8005096:	f000 feb3 	bl	8005e00 <xTaskRemoveFromEventList>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01d      	beq.n	80050dc <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01a      	beq.n	80050dc <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	e016      	b.n	80050dc <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80050ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80050b2:	2b7f      	cmp	r3, #127	; 0x7f
 80050b4:	d10a      	bne.n	80050cc <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	617b      	str	r3, [r7, #20]
    }
 80050c8:	bf00      	nop
 80050ca:	e7fe      	b.n	80050ca <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050d0:	3301      	adds	r3, #1
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	b25a      	sxtb	r2, r3
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80050dc:	2301      	movs	r3, #1
 80050de:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80050e0:	e001      	b.n	80050e6 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80050f0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80050f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3740      	adds	r7, #64	; 0x40
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08c      	sub	sp, #48	; 0x30
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005108:	2300      	movs	r3, #0
 800510a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10a      	bne.n	800512c <xQueueReceive+0x30>
        __asm volatile
 8005116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511a:	f383 8811 	msr	BASEPRI, r3
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	623b      	str	r3, [r7, #32]
    }
 8005128:	bf00      	nop
 800512a:	e7fe      	b.n	800512a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d103      	bne.n	800513a <xQueueReceive+0x3e>
 8005132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <xQueueReceive+0x42>
 800513a:	2301      	movs	r3, #1
 800513c:	e000      	b.n	8005140 <xQueueReceive+0x44>
 800513e:	2300      	movs	r3, #0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10a      	bne.n	800515a <xQueueReceive+0x5e>
        __asm volatile
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	61fb      	str	r3, [r7, #28]
    }
 8005156:	bf00      	nop
 8005158:	e7fe      	b.n	8005158 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800515a:	f000 ffed 	bl	8006138 <xTaskGetSchedulerState>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d102      	bne.n	800516a <xQueueReceive+0x6e>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <xQueueReceive+0x72>
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <xQueueReceive+0x74>
 800516e:	2300      	movs	r3, #0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10a      	bne.n	800518a <xQueueReceive+0x8e>
        __asm volatile
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	61bb      	str	r3, [r7, #24]
    }
 8005186:	bf00      	nop
 8005188:	e7fe      	b.n	8005188 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800518a:	f001 fd15 	bl	8006bb8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	2b00      	cmp	r3, #0
 8005198:	d01f      	beq.n	80051da <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800519e:	f000 f8f7 	bl	8005390 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	1e5a      	subs	r2, r3, #1
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00f      	beq.n	80051d2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b4:	3310      	adds	r3, #16
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fe22 	bl	8005e00 <xTaskRemoveFromEventList>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d007      	beq.n	80051d2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80051c2:	4b3d      	ldr	r3, [pc, #244]	; (80052b8 <xQueueReceive+0x1bc>)
 80051c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80051d2:	f001 fd21 	bl	8006c18 <vPortExitCritical>
                return pdPASS;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e069      	b.n	80052ae <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d103      	bne.n	80051e8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80051e0:	f001 fd1a 	bl	8006c18 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80051e4:	2300      	movs	r3, #0
 80051e6:	e062      	b.n	80052ae <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80051ee:	f107 0310 	add.w	r3, r7, #16
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fe66 	bl	8005ec4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80051f8:	2301      	movs	r3, #1
 80051fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80051fc:	f001 fd0c 	bl	8006c18 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005200:	f000 fbe0 	bl	80059c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005204:	f001 fcd8 	bl	8006bb8 <vPortEnterCritical>
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800520e:	b25b      	sxtb	r3, r3
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005214:	d103      	bne.n	800521e <xQueueReceive+0x122>
 8005216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800521e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005220:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005224:	b25b      	sxtb	r3, r3
 8005226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522a:	d103      	bne.n	8005234 <xQueueReceive+0x138>
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005234:	f001 fcf0 	bl	8006c18 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005238:	1d3a      	adds	r2, r7, #4
 800523a:	f107 0310 	add.w	r3, r7, #16
 800523e:	4611      	mov	r1, r2
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fe55 	bl	8005ef0 <xTaskCheckForTimeOut>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d123      	bne.n	8005294 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800524c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800524e:	f000 f917 	bl	8005480 <prvIsQueueEmpty>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d017      	beq.n	8005288 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525a:	3324      	adds	r3, #36	; 0x24
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	4611      	mov	r1, r2
 8005260:	4618      	mov	r0, r3
 8005262:	f000 fd7d 	bl	8005d60 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005268:	f000 f8b8 	bl	80053dc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800526c:	f000 fbb8 	bl	80059e0 <xTaskResumeAll>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d189      	bne.n	800518a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005276:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <xQueueReceive+0x1bc>)
 8005278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	e780      	b.n	800518a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800528a:	f000 f8a7 	bl	80053dc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800528e:	f000 fba7 	bl	80059e0 <xTaskResumeAll>
 8005292:	e77a      	b.n	800518a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005296:	f000 f8a1 	bl	80053dc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800529a:	f000 fba1 	bl	80059e0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800529e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052a0:	f000 f8ee 	bl	8005480 <prvIsQueueEmpty>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f43f af6f 	beq.w	800518a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80052ac:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3730      	adds	r7, #48	; 0x30
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	e000ed04 	.word	0xe000ed04

080052bc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80052c8:	2300      	movs	r3, #0
 80052ca:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10d      	bne.n	80052f6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d14d      	bne.n	800537e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 ff44 	bl	8006174 <xTaskPriorityDisinherit>
 80052ec:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	609a      	str	r2, [r3, #8]
 80052f4:	e043      	b.n	800537e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d119      	bne.n	8005330 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6858      	ldr	r0, [r3, #4]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	461a      	mov	r2, r3
 8005306:	68b9      	ldr	r1, [r7, #8]
 8005308:	f001 ffea 	bl	80072e0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	441a      	add	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	429a      	cmp	r2, r3
 8005324:	d32b      	bcc.n	800537e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	605a      	str	r2, [r3, #4]
 800532e:	e026      	b.n	800537e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	68d8      	ldr	r0, [r3, #12]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	461a      	mov	r2, r3
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	f001 ffd0 	bl	80072e0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	425b      	negs	r3, r3
 800534a:	441a      	add	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d207      	bcs.n	800536c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	425b      	negs	r3, r3
 8005366:	441a      	add	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b02      	cmp	r3, #2
 8005370:	d105      	bne.n	800537e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	3b01      	subs	r3, #1
 800537c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005386:	697b      	ldr	r3, [r7, #20]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d018      	beq.n	80053d4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	441a      	add	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d303      	bcc.n	80053c4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68d9      	ldr	r1, [r3, #12]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053cc:	461a      	mov	r2, r3
 80053ce:	6838      	ldr	r0, [r7, #0]
 80053d0:	f001 ff86 	bl	80072e0 <memcpy>
    }
}
 80053d4:	bf00      	nop
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80053e4:	f001 fbe8 	bl	8006bb8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053ee:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80053f0:	e011      	b.n	8005416 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d012      	beq.n	8005420 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3324      	adds	r3, #36	; 0x24
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fcfe 	bl	8005e00 <xTaskRemoveFromEventList>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800540a:	f000 fdd7 	bl	8005fbc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800540e:	7bfb      	ldrb	r3, [r7, #15]
 8005410:	3b01      	subs	r3, #1
 8005412:	b2db      	uxtb	r3, r3
 8005414:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800541a:	2b00      	cmp	r3, #0
 800541c:	dce9      	bgt.n	80053f2 <prvUnlockQueue+0x16>
 800541e:	e000      	b.n	8005422 <prvUnlockQueue+0x46>
                        break;
 8005420:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	22ff      	movs	r2, #255	; 0xff
 8005426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800542a:	f001 fbf5 	bl	8006c18 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800542e:	f001 fbc3 	bl	8006bb8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005438:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800543a:	e011      	b.n	8005460 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d012      	beq.n	800546a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3310      	adds	r3, #16
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fcd9 	bl	8005e00 <xTaskRemoveFromEventList>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005454:	f000 fdb2 	bl	8005fbc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005458:	7bbb      	ldrb	r3, [r7, #14]
 800545a:	3b01      	subs	r3, #1
 800545c:	b2db      	uxtb	r3, r3
 800545e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005460:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005464:	2b00      	cmp	r3, #0
 8005466:	dce9      	bgt.n	800543c <prvUnlockQueue+0x60>
 8005468:	e000      	b.n	800546c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800546a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	22ff      	movs	r2, #255	; 0xff
 8005470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005474:	f001 fbd0 	bl	8006c18 <vPortExitCritical>
}
 8005478:	bf00      	nop
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005488:	f001 fb96 	bl	8006bb8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005490:	2b00      	cmp	r3, #0
 8005492:	d102      	bne.n	800549a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005494:	2301      	movs	r3, #1
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	e001      	b.n	800549e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800549e:	f001 fbbb 	bl	8006c18 <vPortExitCritical>

    return xReturn;
 80054a2:	68fb      	ldr	r3, [r7, #12]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80054b4:	f001 fb80 	bl	8006bb8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d102      	bne.n	80054ca <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80054c4:	2301      	movs	r3, #1
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	e001      	b.n	80054ce <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80054ce:	f001 fba3 	bl	8006c18 <vPortExitCritical>

    return xReturn;
 80054d2:	68fb      	ldr	r3, [r7, #12]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054e6:	2300      	movs	r3, #0
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	e014      	b.n	8005516 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80054ec:	4a0f      	ldr	r2, [pc, #60]	; (800552c <vQueueAddToRegistry+0x50>)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10b      	bne.n	8005510 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80054f8:	490c      	ldr	r1, [pc, #48]	; (800552c <vQueueAddToRegistry+0x50>)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8005502:	4a0a      	ldr	r2, [pc, #40]	; (800552c <vQueueAddToRegistry+0x50>)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	4413      	add	r3, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800550e:	e006      	b.n	800551e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3301      	adds	r3, #1
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b07      	cmp	r3, #7
 800551a:	d9e7      	bls.n	80054ec <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800551c:	bf00      	nop
 800551e:	bf00      	nop
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	200041e4 	.word	0x200041e4

08005530 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005540:	f001 fb3a 	bl	8006bb8 <vPortEnterCritical>
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800554a:	b25b      	sxtb	r3, r3
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d103      	bne.n	800555a <vQueueWaitForMessageRestricted+0x2a>
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005560:	b25b      	sxtb	r3, r3
 8005562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005566:	d103      	bne.n	8005570 <vQueueWaitForMessageRestricted+0x40>
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005570:	f001 fb52 	bl	8006c18 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005578:	2b00      	cmp	r3, #0
 800557a:	d106      	bne.n	800558a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	3324      	adds	r3, #36	; 0x24
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	68b9      	ldr	r1, [r7, #8]
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fc0f 	bl	8005da8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800558a:	6978      	ldr	r0, [r7, #20]
 800558c:	f7ff ff26 	bl	80053dc <prvUnlockQueue>
    }
 8005590:	bf00      	nop
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005598:	b580      	push	{r7, lr}
 800559a:	b08c      	sub	sp, #48	; 0x30
 800559c:	af04      	add	r7, sp, #16
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	603b      	str	r3, [r7, #0]
 80055a4:	4613      	mov	r3, r2
 80055a6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055a8:	88fb      	ldrh	r3, [r7, #6]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4618      	mov	r0, r3
 80055ae:	f001 fc6b 	bl	8006e88 <pvPortMalloc>
 80055b2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00e      	beq.n	80055d8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055ba:	206c      	movs	r0, #108	; 0x6c
 80055bc:	f001 fc64 	bl	8006e88 <pvPortMalloc>
 80055c0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	631a      	str	r2, [r3, #48]	; 0x30
 80055ce:	e005      	b.n	80055dc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80055d0:	6978      	ldr	r0, [r7, #20]
 80055d2:	f001 fd39 	bl	8007048 <vPortFree>
 80055d6:	e001      	b.n	80055dc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80055d8:	2300      	movs	r3, #0
 80055da:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d013      	beq.n	800560a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055e2:	88fa      	ldrh	r2, [r7, #6]
 80055e4:	2300      	movs	r3, #0
 80055e6:	9303      	str	r3, [sp, #12]
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	9302      	str	r3, [sp, #8]
 80055ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ee:	9301      	str	r3, [sp, #4]
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f80e 	bl	800561a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80055fe:	69f8      	ldr	r0, [r7, #28]
 8005600:	f000 f8a2 	bl	8005748 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005604:	2301      	movs	r3, #1
 8005606:	61bb      	str	r3, [r7, #24]
 8005608:	e002      	b.n	8005610 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800560a:	f04f 33ff 	mov.w	r3, #4294967295
 800560e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005610:	69bb      	ldr	r3, [r7, #24]
    }
 8005612:	4618      	mov	r0, r3
 8005614:	3720      	adds	r7, #32
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b088      	sub	sp, #32
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	607a      	str	r2, [r7, #4]
 8005626:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	461a      	mov	r2, r3
 8005632:	21a5      	movs	r1, #165	; 0xa5
 8005634:	f001 fe62 	bl	80072fc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005642:	3b01      	subs	r3, #1
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	f023 0307 	bic.w	r3, r3, #7
 8005650:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00a      	beq.n	8005672 <prvInitialiseNewTask+0x58>
        __asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	617b      	str	r3, [r7, #20]
    }
 800566e:	bf00      	nop
 8005670:	e7fe      	b.n	8005670 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01f      	beq.n	80056b8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005678:	2300      	movs	r3, #0
 800567a:	61fb      	str	r3, [r7, #28]
 800567c:	e012      	b.n	80056a4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	4413      	add	r3, r2
 8005684:	7819      	ldrb	r1, [r3, #0]
 8005686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	4413      	add	r3, r2
 800568c:	3334      	adds	r3, #52	; 0x34
 800568e:	460a      	mov	r2, r1
 8005690:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	4413      	add	r3, r2
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d006      	beq.n	80056ac <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	3301      	adds	r3, #1
 80056a2:	61fb      	str	r3, [r7, #28]
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	2b1d      	cmp	r3, #29
 80056a8:	d9e9      	bls.n	800567e <prvInitialiseNewTask+0x64>
 80056aa:	e000      	b.n	80056ae <prvInitialiseNewTask+0x94>
            {
                break;
 80056ac:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80056b6:	e003      	b.n	80056c0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d901      	bls.n	80056ca <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056c6:	2304      	movs	r3, #4
 80056c8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ce:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056d4:	65da      	str	r2, [r3, #92]	; 0x5c
            pxNewTCB->uxMutexesHeld = 0;
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	2200      	movs	r2, #0
 80056da:	661a      	str	r2, [r3, #96]	; 0x60
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056de:	3304      	adds	r3, #4
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff f9e5 	bl	8004ab0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	3318      	adds	r3, #24
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff f9e0 	bl	8004ab0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	f1c3 0205 	rsb	r2, r3, #5
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005704:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	3364      	adds	r3, #100	; 0x64
 800570a:	2204      	movs	r2, #4
 800570c:	2100      	movs	r1, #0
 800570e:	4618      	mov	r0, r3
 8005710:	f001 fdf4 	bl	80072fc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	3368      	adds	r3, #104	; 0x68
 8005718:	2201      	movs	r2, #1
 800571a:	2100      	movs	r1, #0
 800571c:	4618      	mov	r0, r3
 800571e:	f001 fded 	bl	80072fc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	68f9      	ldr	r1, [r7, #12]
 8005726:	69b8      	ldr	r0, [r7, #24]
 8005728:	f001 f916 	bl	8006958 <pxPortInitialiseStack>
 800572c:	4602      	mov	r2, r0
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800573c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800573e:	bf00      	nop
 8005740:	3720      	adds	r7, #32
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005750:	f001 fa32 	bl	8006bb8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005754:	4b2c      	ldr	r3, [pc, #176]	; (8005808 <prvAddNewTaskToReadyList+0xc0>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3301      	adds	r3, #1
 800575a:	4a2b      	ldr	r2, [pc, #172]	; (8005808 <prvAddNewTaskToReadyList+0xc0>)
 800575c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800575e:	4b2b      	ldr	r3, [pc, #172]	; (800580c <prvAddNewTaskToReadyList+0xc4>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005766:	4a29      	ldr	r2, [pc, #164]	; (800580c <prvAddNewTaskToReadyList+0xc4>)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800576c:	4b26      	ldr	r3, [pc, #152]	; (8005808 <prvAddNewTaskToReadyList+0xc0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d110      	bne.n	8005796 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005774:	f000 fc46 	bl	8006004 <prvInitialiseTaskLists>
 8005778:	e00d      	b.n	8005796 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800577a:	4b25      	ldr	r3, [pc, #148]	; (8005810 <prvAddNewTaskToReadyList+0xc8>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d109      	bne.n	8005796 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005782:	4b22      	ldr	r3, [pc, #136]	; (800580c <prvAddNewTaskToReadyList+0xc4>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578c:	429a      	cmp	r2, r3
 800578e:	d802      	bhi.n	8005796 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005790:	4a1e      	ldr	r2, [pc, #120]	; (800580c <prvAddNewTaskToReadyList+0xc4>)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005796:	4b1f      	ldr	r3, [pc, #124]	; (8005814 <prvAddNewTaskToReadyList+0xcc>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3301      	adds	r3, #1
 800579c:	4a1d      	ldr	r2, [pc, #116]	; (8005814 <prvAddNewTaskToReadyList+0xcc>)
 800579e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80057a0:	4b1c      	ldr	r3, [pc, #112]	; (8005814 <prvAddNewTaskToReadyList+0xcc>)
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	655a      	str	r2, [r3, #84]	; 0x54
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	2201      	movs	r2, #1
 80057ae:	409a      	lsls	r2, r3
 80057b0:	4b19      	ldr	r3, [pc, #100]	; (8005818 <prvAddNewTaskToReadyList+0xd0>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	4a18      	ldr	r2, [pc, #96]	; (8005818 <prvAddNewTaskToReadyList+0xd0>)
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057be:	4613      	mov	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4a15      	ldr	r2, [pc, #84]	; (800581c <prvAddNewTaskToReadyList+0xd4>)
 80057c8:	441a      	add	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3304      	adds	r3, #4
 80057ce:	4619      	mov	r1, r3
 80057d0:	4610      	mov	r0, r2
 80057d2:	f7ff f97a 	bl	8004aca <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80057d6:	f001 fa1f 	bl	8006c18 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80057da:	4b0d      	ldr	r3, [pc, #52]	; (8005810 <prvAddNewTaskToReadyList+0xc8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00e      	beq.n	8005800 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057e2:	4b0a      	ldr	r3, [pc, #40]	; (800580c <prvAddNewTaskToReadyList+0xc4>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d207      	bcs.n	8005800 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80057f0:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <prvAddNewTaskToReadyList+0xd8>)
 80057f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005800:	bf00      	nop
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	200003e8 	.word	0x200003e8
 800580c:	20000310 	.word	0x20000310
 8005810:	200003f4 	.word	0x200003f4
 8005814:	20000404 	.word	0x20000404
 8005818:	200003f0 	.word	0x200003f0
 800581c:	20000314 	.word	0x20000314
 8005820:	e000ed04 	.word	0xe000ed04

08005824 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8005824:	b580      	push	{r7, lr}
 8005826:	b08a      	sub	sp, #40	; 0x28
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800582e:	2300      	movs	r3, #0
 8005830:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <xTaskDelayUntil+0x2a>
        __asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	617b      	str	r3, [r7, #20]
    }
 800584a:	bf00      	nop
 800584c:	e7fe      	b.n	800584c <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <xTaskDelayUntil+0x46>
        __asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	613b      	str	r3, [r7, #16]
    }
 8005866:	bf00      	nop
 8005868:	e7fe      	b.n	8005868 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800586a:	4b2a      	ldr	r3, [pc, #168]	; (8005914 <xTaskDelayUntil+0xf0>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <xTaskDelayUntil+0x64>
        __asm volatile
 8005872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	60fb      	str	r3, [r7, #12]
    }
 8005884:	bf00      	nop
 8005886:	e7fe      	b.n	8005886 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8005888:	f000 f89c 	bl	80059c4 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800588c:	4b22      	ldr	r3, [pc, #136]	; (8005918 <xTaskDelayUntil+0xf4>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	4413      	add	r3, r2
 800589a:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6a3a      	ldr	r2, [r7, #32]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d20b      	bcs.n	80058be <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69fa      	ldr	r2, [r7, #28]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d211      	bcs.n	80058d4 <xTaskDelayUntil+0xb0>
 80058b0:	69fa      	ldr	r2, [r7, #28]
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d90d      	bls.n	80058d4 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80058b8:	2301      	movs	r3, #1
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
 80058bc:	e00a      	b.n	80058d4 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69fa      	ldr	r2, [r7, #28]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d303      	bcc.n	80058d0 <xTaskDelayUntil+0xac>
 80058c8:	69fa      	ldr	r2, [r7, #28]
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d901      	bls.n	80058d4 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80058d0:	2301      	movs	r3, #1
 80058d2:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d006      	beq.n	80058ee <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80058e0:	69fa      	ldr	r2, [r7, #28]
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2100      	movs	r1, #0
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fcbd 	bl	8006268 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80058ee:	f000 f877 	bl	80059e0 <xTaskResumeAll>
 80058f2:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d107      	bne.n	800590a <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 80058fa:	4b08      	ldr	r3, [pc, #32]	; (800591c <xTaskDelayUntil+0xf8>)
 80058fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800590c:	4618      	mov	r0, r3
 800590e:	3728      	adds	r7, #40	; 0x28
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	20000410 	.word	0x20000410
 8005918:	200003ec 	.word	0x200003ec
 800591c:	e000ed04 	.word	0xe000ed04

08005920 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005926:	4b20      	ldr	r3, [pc, #128]	; (80059a8 <vTaskStartScheduler+0x88>)
 8005928:	9301      	str	r3, [sp, #4]
 800592a:	2300      	movs	r3, #0
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	2300      	movs	r3, #0
 8005930:	2280      	movs	r2, #128	; 0x80
 8005932:	491e      	ldr	r1, [pc, #120]	; (80059ac <vTaskStartScheduler+0x8c>)
 8005934:	481e      	ldr	r0, [pc, #120]	; (80059b0 <vTaskStartScheduler+0x90>)
 8005936:	f7ff fe2f 	bl	8005598 <xTaskCreate>
 800593a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d102      	bne.n	8005948 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005942:	f000 fcf7 	bl	8006334 <xTimerCreateTimerTask>
 8005946:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d116      	bne.n	800597c <vTaskStartScheduler+0x5c>
        __asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	60bb      	str	r3, [r7, #8]
    }
 8005960:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005962:	4b14      	ldr	r3, [pc, #80]	; (80059b4 <vTaskStartScheduler+0x94>)
 8005964:	f04f 32ff 	mov.w	r2, #4294967295
 8005968:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800596a:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <vTaskStartScheduler+0x98>)
 800596c:	2201      	movs	r2, #1
 800596e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005970:	4b12      	ldr	r3, [pc, #72]	; (80059bc <vTaskStartScheduler+0x9c>)
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005976:	f001 f87d 	bl	8006a74 <xPortStartScheduler>
 800597a:	e00e      	b.n	800599a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005982:	d10a      	bne.n	800599a <vTaskStartScheduler+0x7a>
        __asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	607b      	str	r3, [r7, #4]
    }
 8005996:	bf00      	nop
 8005998:	e7fe      	b.n	8005998 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800599a:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <vTaskStartScheduler+0xa0>)
 800599c:	681b      	ldr	r3, [r3, #0]
}
 800599e:	bf00      	nop
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	2000040c 	.word	0x2000040c
 80059ac:	08007530 	.word	0x08007530
 80059b0:	08005fd5 	.word	0x08005fd5
 80059b4:	20000408 	.word	0x20000408
 80059b8:	200003f4 	.word	0x200003f4
 80059bc:	200003ec 	.word	0x200003ec
 80059c0:	20000010 	.word	0x20000010

080059c4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80059c4:	b480      	push	{r7}
 80059c6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80059c8:	4b04      	ldr	r3, [pc, #16]	; (80059dc <vTaskSuspendAll+0x18>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3301      	adds	r3, #1
 80059ce:	4a03      	ldr	r2, [pc, #12]	; (80059dc <vTaskSuspendAll+0x18>)
 80059d0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80059d2:	bf00      	nop
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	20000410 	.word	0x20000410

080059e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80059ee:	4b41      	ldr	r3, [pc, #260]	; (8005af4 <xTaskResumeAll+0x114>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10a      	bne.n	8005a0c <xTaskResumeAll+0x2c>
        __asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	603b      	str	r3, [r7, #0]
    }
 8005a08:	bf00      	nop
 8005a0a:	e7fe      	b.n	8005a0a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005a0c:	f001 f8d4 	bl	8006bb8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005a10:	4b38      	ldr	r3, [pc, #224]	; (8005af4 <xTaskResumeAll+0x114>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	4a37      	ldr	r2, [pc, #220]	; (8005af4 <xTaskResumeAll+0x114>)
 8005a18:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a1a:	4b36      	ldr	r3, [pc, #216]	; (8005af4 <xTaskResumeAll+0x114>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d161      	bne.n	8005ae6 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a22:	4b35      	ldr	r3, [pc, #212]	; (8005af8 <xTaskResumeAll+0x118>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d05d      	beq.n	8005ae6 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a2a:	e02e      	b.n	8005a8a <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a2c:	4b33      	ldr	r3, [pc, #204]	; (8005afc <xTaskResumeAll+0x11c>)
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3318      	adds	r3, #24
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff f8a3 	bl	8004b84 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3304      	adds	r3, #4
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff f89e 	bl	8004b84 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	409a      	lsls	r2, r3
 8005a50:	4b2b      	ldr	r3, [pc, #172]	; (8005b00 <xTaskResumeAll+0x120>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	4a2a      	ldr	r2, [pc, #168]	; (8005b00 <xTaskResumeAll+0x120>)
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4a27      	ldr	r2, [pc, #156]	; (8005b04 <xTaskResumeAll+0x124>)
 8005a68:	441a      	add	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4610      	mov	r0, r2
 8005a72:	f7ff f82a 	bl	8004aca <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7a:	4b23      	ldr	r3, [pc, #140]	; (8005b08 <xTaskResumeAll+0x128>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d302      	bcc.n	8005a8a <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8005a84:	4b21      	ldr	r3, [pc, #132]	; (8005b0c <xTaskResumeAll+0x12c>)
 8005a86:	2201      	movs	r2, #1
 8005a88:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a8a:	4b1c      	ldr	r3, [pc, #112]	; (8005afc <xTaskResumeAll+0x11c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1cc      	bne.n	8005a2c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005a98:	f000 fb32 	bl	8006100 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a9c:	4b1c      	ldr	r3, [pc, #112]	; (8005b10 <xTaskResumeAll+0x130>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d010      	beq.n	8005aca <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005aa8:	f000 f846 	bl	8005b38 <xTaskIncrementTick>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8005ab2:	4b16      	ldr	r3, [pc, #88]	; (8005b0c <xTaskResumeAll+0x12c>)
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1f1      	bne.n	8005aa8 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8005ac4:	4b12      	ldr	r3, [pc, #72]	; (8005b10 <xTaskResumeAll+0x130>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005aca:	4b10      	ldr	r3, [pc, #64]	; (8005b0c <xTaskResumeAll+0x12c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d009      	beq.n	8005ae6 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005ad6:	4b0f      	ldr	r3, [pc, #60]	; (8005b14 <xTaskResumeAll+0x134>)
 8005ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005ae6:	f001 f897 	bl	8006c18 <vPortExitCritical>

    return xAlreadyYielded;
 8005aea:	68bb      	ldr	r3, [r7, #8]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	20000410 	.word	0x20000410
 8005af8:	200003e8 	.word	0x200003e8
 8005afc:	200003a8 	.word	0x200003a8
 8005b00:	200003f0 	.word	0x200003f0
 8005b04:	20000314 	.word	0x20000314
 8005b08:	20000310 	.word	0x20000310
 8005b0c:	200003fc 	.word	0x200003fc
 8005b10:	200003f8 	.word	0x200003f8
 8005b14:	e000ed04 	.word	0xe000ed04

08005b18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005b1e:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <xTaskGetTickCount+0x1c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005b24:	687b      	ldr	r3, [r7, #4]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	200003ec 	.word	0x200003ec

08005b38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b42:	4b4e      	ldr	r3, [pc, #312]	; (8005c7c <xTaskIncrementTick+0x144>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f040 808e 	bne.w	8005c68 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b4c:	4b4c      	ldr	r3, [pc, #304]	; (8005c80 <xTaskIncrementTick+0x148>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	3301      	adds	r3, #1
 8005b52:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005b54:	4a4a      	ldr	r2, [pc, #296]	; (8005c80 <xTaskIncrementTick+0x148>)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d120      	bne.n	8005ba2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005b60:	4b48      	ldr	r3, [pc, #288]	; (8005c84 <xTaskIncrementTick+0x14c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <xTaskIncrementTick+0x48>
        __asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	603b      	str	r3, [r7, #0]
    }
 8005b7c:	bf00      	nop
 8005b7e:	e7fe      	b.n	8005b7e <xTaskIncrementTick+0x46>
 8005b80:	4b40      	ldr	r3, [pc, #256]	; (8005c84 <xTaskIncrementTick+0x14c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	4b40      	ldr	r3, [pc, #256]	; (8005c88 <xTaskIncrementTick+0x150>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a3e      	ldr	r2, [pc, #248]	; (8005c84 <xTaskIncrementTick+0x14c>)
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	4a3e      	ldr	r2, [pc, #248]	; (8005c88 <xTaskIncrementTick+0x150>)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6013      	str	r3, [r2, #0]
 8005b94:	4b3d      	ldr	r3, [pc, #244]	; (8005c8c <xTaskIncrementTick+0x154>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	4a3c      	ldr	r2, [pc, #240]	; (8005c8c <xTaskIncrementTick+0x154>)
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	f000 faaf 	bl	8006100 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005ba2:	4b3b      	ldr	r3, [pc, #236]	; (8005c90 <xTaskIncrementTick+0x158>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d348      	bcc.n	8005c3e <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bac:	4b35      	ldr	r3, [pc, #212]	; (8005c84 <xTaskIncrementTick+0x14c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d104      	bne.n	8005bc0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bb6:	4b36      	ldr	r3, [pc, #216]	; (8005c90 <xTaskIncrementTick+0x158>)
 8005bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bbc:	601a      	str	r2, [r3, #0]
                    break;
 8005bbe:	e03e      	b.n	8005c3e <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc0:	4b30      	ldr	r3, [pc, #192]	; (8005c84 <xTaskIncrementTick+0x14c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d203      	bcs.n	8005be0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005bd8:	4a2d      	ldr	r2, [pc, #180]	; (8005c90 <xTaskIncrementTick+0x158>)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005bde:	e02e      	b.n	8005c3e <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	3304      	adds	r3, #4
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7fe ffcd 	bl	8004b84 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d004      	beq.n	8005bfc <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	3318      	adds	r3, #24
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fe ffc4 	bl	8004b84 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	2201      	movs	r2, #1
 8005c02:	409a      	lsls	r2, r3
 8005c04:	4b23      	ldr	r3, [pc, #140]	; (8005c94 <xTaskIncrementTick+0x15c>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	4a22      	ldr	r2, [pc, #136]	; (8005c94 <xTaskIncrementTick+0x15c>)
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4a1f      	ldr	r2, [pc, #124]	; (8005c98 <xTaskIncrementTick+0x160>)
 8005c1c:	441a      	add	r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	3304      	adds	r3, #4
 8005c22:	4619      	mov	r1, r3
 8005c24:	4610      	mov	r0, r2
 8005c26:	f7fe ff50 	bl	8004aca <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2e:	4b1b      	ldr	r3, [pc, #108]	; (8005c9c <xTaskIncrementTick+0x164>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d3b9      	bcc.n	8005bac <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c3c:	e7b6      	b.n	8005bac <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c3e:	4b17      	ldr	r3, [pc, #92]	; (8005c9c <xTaskIncrementTick+0x164>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c44:	4914      	ldr	r1, [pc, #80]	; (8005c98 <xTaskIncrementTick+0x160>)
 8005c46:	4613      	mov	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	440b      	add	r3, r1
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d901      	bls.n	8005c5a <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8005c56:	2301      	movs	r3, #1
 8005c58:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005c5a:	4b11      	ldr	r3, [pc, #68]	; (8005ca0 <xTaskIncrementTick+0x168>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d007      	beq.n	8005c72 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8005c62:	2301      	movs	r3, #1
 8005c64:	617b      	str	r3, [r7, #20]
 8005c66:	e004      	b.n	8005c72 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005c68:	4b0e      	ldr	r3, [pc, #56]	; (8005ca4 <xTaskIncrementTick+0x16c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	4a0d      	ldr	r2, [pc, #52]	; (8005ca4 <xTaskIncrementTick+0x16c>)
 8005c70:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005c72:	697b      	ldr	r3, [r7, #20]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20000410 	.word	0x20000410
 8005c80:	200003ec 	.word	0x200003ec
 8005c84:	200003a0 	.word	0x200003a0
 8005c88:	200003a4 	.word	0x200003a4
 8005c8c:	20000400 	.word	0x20000400
 8005c90:	20000408 	.word	0x20000408
 8005c94:	200003f0 	.word	0x200003f0
 8005c98:	20000314 	.word	0x20000314
 8005c9c:	20000310 	.word	0x20000310
 8005ca0:	200003fc 	.word	0x200003fc
 8005ca4:	200003f8 	.word	0x200003f8

08005ca8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005cae:	4b27      	ldr	r3, [pc, #156]	; (8005d4c <vTaskSwitchContext+0xa4>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005cb6:	4b26      	ldr	r3, [pc, #152]	; (8005d50 <vTaskSwitchContext+0xa8>)
 8005cb8:	2201      	movs	r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005cbc:	e03f      	b.n	8005d3e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005cbe:	4b24      	ldr	r3, [pc, #144]	; (8005d50 <vTaskSwitchContext+0xa8>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cc4:	4b23      	ldr	r3, [pc, #140]	; (8005d54 <vTaskSwitchContext+0xac>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	fab3 f383 	clz	r3, r3
 8005cd0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005cd2:	7afb      	ldrb	r3, [r7, #11]
 8005cd4:	f1c3 031f 	rsb	r3, r3, #31
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	491f      	ldr	r1, [pc, #124]	; (8005d58 <vTaskSwitchContext+0xb0>)
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	440b      	add	r3, r1
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10a      	bne.n	8005d04 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	607b      	str	r3, [r7, #4]
    }
 8005d00:	bf00      	nop
 8005d02:	e7fe      	b.n	8005d02 <vTaskSwitchContext+0x5a>
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	4613      	mov	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4a12      	ldr	r2, [pc, #72]	; (8005d58 <vTaskSwitchContext+0xb0>)
 8005d10:	4413      	add	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	605a      	str	r2, [r3, #4]
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	3308      	adds	r3, #8
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d104      	bne.n	8005d34 <vTaskSwitchContext+0x8c>
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	605a      	str	r2, [r3, #4]
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	4a08      	ldr	r2, [pc, #32]	; (8005d5c <vTaskSwitchContext+0xb4>)
 8005d3c:	6013      	str	r3, [r2, #0]
}
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	20000410 	.word	0x20000410
 8005d50:	200003fc 	.word	0x200003fc
 8005d54:	200003f0 	.word	0x200003f0
 8005d58:	20000314 	.word	0x20000314
 8005d5c:	20000310 	.word	0x20000310

08005d60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	60fb      	str	r3, [r7, #12]
    }
 8005d82:	bf00      	nop
 8005d84:	e7fe      	b.n	8005d84 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d86:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <vTaskPlaceOnEventList+0x44>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3318      	adds	r3, #24
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7fe febf 	bl	8004b12 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d94:	2101      	movs	r1, #1
 8005d96:	6838      	ldr	r0, [r7, #0]
 8005d98:	f000 fa66 	bl	8006268 <prvAddCurrentTaskToDelayedList>
}
 8005d9c:	bf00      	nop
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	20000310 	.word	0x20000310

08005da8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10a      	bne.n	8005dd0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	617b      	str	r3, [r7, #20]
    }
 8005dcc:	bf00      	nop
 8005dce:	e7fe      	b.n	8005dce <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005dd0:	4b0a      	ldr	r3, [pc, #40]	; (8005dfc <vTaskPlaceOnEventListRestricted+0x54>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3318      	adds	r3, #24
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f7fe fe76 	bl	8004aca <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005de4:	f04f 33ff 	mov.w	r3, #4294967295
 8005de8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	68b8      	ldr	r0, [r7, #8]
 8005dee:	f000 fa3b 	bl	8006268 <prvAddCurrentTaskToDelayedList>
    }
 8005df2:	bf00      	nop
 8005df4:	3718      	adds	r7, #24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20000310 	.word	0x20000310

08005e00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10a      	bne.n	8005e2c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	60fb      	str	r3, [r7, #12]
    }
 8005e28:	bf00      	nop
 8005e2a:	e7fe      	b.n	8005e2a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	3318      	adds	r3, #24
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fe fea7 	bl	8004b84 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e36:	4b1d      	ldr	r3, [pc, #116]	; (8005eac <xTaskRemoveFromEventList+0xac>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d11c      	bne.n	8005e78 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	3304      	adds	r3, #4
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fe fe9e 	bl	8004b84 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	4b17      	ldr	r3, [pc, #92]	; (8005eb0 <xTaskRemoveFromEventList+0xb0>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	4a16      	ldr	r2, [pc, #88]	; (8005eb0 <xTaskRemoveFromEventList+0xb0>)
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5e:	4613      	mov	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4a13      	ldr	r2, [pc, #76]	; (8005eb4 <xTaskRemoveFromEventList+0xb4>)
 8005e68:	441a      	add	r2, r3
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	4619      	mov	r1, r3
 8005e70:	4610      	mov	r0, r2
 8005e72:	f7fe fe2a 	bl	8004aca <vListInsertEnd>
 8005e76:	e005      	b.n	8005e84 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	3318      	adds	r3, #24
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	480e      	ldr	r0, [pc, #56]	; (8005eb8 <xTaskRemoveFromEventList+0xb8>)
 8005e80:	f7fe fe23 	bl	8004aca <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e88:	4b0c      	ldr	r3, [pc, #48]	; (8005ebc <xTaskRemoveFromEventList+0xbc>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d905      	bls.n	8005e9e <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005e92:	2301      	movs	r3, #1
 8005e94:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005e96:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <xTaskRemoveFromEventList+0xc0>)
 8005e98:	2201      	movs	r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	e001      	b.n	8005ea2 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005ea2:	697b      	ldr	r3, [r7, #20]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	20000410 	.word	0x20000410
 8005eb0:	200003f0 	.word	0x200003f0
 8005eb4:	20000314 	.word	0x20000314
 8005eb8:	200003a8 	.word	0x200003a8
 8005ebc:	20000310 	.word	0x20000310
 8005ec0:	200003fc 	.word	0x200003fc

08005ec4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ecc:	4b06      	ldr	r3, [pc, #24]	; (8005ee8 <vTaskInternalSetTimeOutState+0x24>)
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005ed4:	4b05      	ldr	r3, [pc, #20]	; (8005eec <vTaskInternalSetTimeOutState+0x28>)
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	605a      	str	r2, [r3, #4]
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	20000400 	.word	0x20000400
 8005eec:	200003ec 	.word	0x200003ec

08005ef0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10a      	bne.n	8005f16 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	613b      	str	r3, [r7, #16]
    }
 8005f12:	bf00      	nop
 8005f14:	e7fe      	b.n	8005f14 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10a      	bne.n	8005f32 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	60fb      	str	r3, [r7, #12]
    }
 8005f2e:	bf00      	nop
 8005f30:	e7fe      	b.n	8005f30 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005f32:	f000 fe41 	bl	8006bb8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005f36:	4b1f      	ldr	r3, [pc, #124]	; (8005fb4 <xTaskCheckForTimeOut+0xc4>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4e:	d102      	bne.n	8005f56 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005f50:	2300      	movs	r3, #0
 8005f52:	61fb      	str	r3, [r7, #28]
 8005f54:	e026      	b.n	8005fa4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	4b17      	ldr	r3, [pc, #92]	; (8005fb8 <xTaskCheckForTimeOut+0xc8>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d00a      	beq.n	8005f78 <xTaskCheckForTimeOut+0x88>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d305      	bcc.n	8005f78 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	e015      	b.n	8005fa4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d20b      	bcs.n	8005f9a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	1ad2      	subs	r2, r2, r3
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7ff ff98 	bl	8005ec4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005f94:	2300      	movs	r3, #0
 8005f96:	61fb      	str	r3, [r7, #28]
 8005f98:	e004      	b.n	8005fa4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005fa4:	f000 fe38 	bl	8006c18 <vPortExitCritical>

    return xReturn;
 8005fa8:	69fb      	ldr	r3, [r7, #28]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3720      	adds	r7, #32
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	200003ec 	.word	0x200003ec
 8005fb8:	20000400 	.word	0x20000400

08005fbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005fc0:	4b03      	ldr	r3, [pc, #12]	; (8005fd0 <vTaskMissedYield+0x14>)
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]
}
 8005fc6:	bf00      	nop
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	200003fc 	.word	0x200003fc

08005fd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005fdc:	f000 f852 	bl	8006084 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005fe0:	4b06      	ldr	r3, [pc, #24]	; (8005ffc <prvIdleTask+0x28>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d9f9      	bls.n	8005fdc <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005fe8:	4b05      	ldr	r3, [pc, #20]	; (8006000 <prvIdleTask+0x2c>)
 8005fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005ff8:	e7f0      	b.n	8005fdc <prvIdleTask+0x8>
 8005ffa:	bf00      	nop
 8005ffc:	20000314 	.word	0x20000314
 8006000:	e000ed04 	.word	0xe000ed04

08006004 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800600a:	2300      	movs	r3, #0
 800600c:	607b      	str	r3, [r7, #4]
 800600e:	e00c      	b.n	800602a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	4613      	mov	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4a12      	ldr	r2, [pc, #72]	; (8006064 <prvInitialiseTaskLists+0x60>)
 800601c:	4413      	add	r3, r2
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe fd26 	bl	8004a70 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3301      	adds	r3, #1
 8006028:	607b      	str	r3, [r7, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b04      	cmp	r3, #4
 800602e:	d9ef      	bls.n	8006010 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006030:	480d      	ldr	r0, [pc, #52]	; (8006068 <prvInitialiseTaskLists+0x64>)
 8006032:	f7fe fd1d 	bl	8004a70 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006036:	480d      	ldr	r0, [pc, #52]	; (800606c <prvInitialiseTaskLists+0x68>)
 8006038:	f7fe fd1a 	bl	8004a70 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800603c:	480c      	ldr	r0, [pc, #48]	; (8006070 <prvInitialiseTaskLists+0x6c>)
 800603e:	f7fe fd17 	bl	8004a70 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8006042:	480c      	ldr	r0, [pc, #48]	; (8006074 <prvInitialiseTaskLists+0x70>)
 8006044:	f7fe fd14 	bl	8004a70 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006048:	480b      	ldr	r0, [pc, #44]	; (8006078 <prvInitialiseTaskLists+0x74>)
 800604a:	f7fe fd11 	bl	8004a70 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800604e:	4b0b      	ldr	r3, [pc, #44]	; (800607c <prvInitialiseTaskLists+0x78>)
 8006050:	4a05      	ldr	r2, [pc, #20]	; (8006068 <prvInitialiseTaskLists+0x64>)
 8006052:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006054:	4b0a      	ldr	r3, [pc, #40]	; (8006080 <prvInitialiseTaskLists+0x7c>)
 8006056:	4a05      	ldr	r2, [pc, #20]	; (800606c <prvInitialiseTaskLists+0x68>)
 8006058:	601a      	str	r2, [r3, #0]
}
 800605a:	bf00      	nop
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20000314 	.word	0x20000314
 8006068:	20000378 	.word	0x20000378
 800606c:	2000038c 	.word	0x2000038c
 8006070:	200003a8 	.word	0x200003a8
 8006074:	200003bc 	.word	0x200003bc
 8006078:	200003d4 	.word	0x200003d4
 800607c:	200003a0 	.word	0x200003a0
 8006080:	200003a4 	.word	0x200003a4

08006084 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800608a:	e019      	b.n	80060c0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800608c:	f000 fd94 	bl	8006bb8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006090:	4b10      	ldr	r3, [pc, #64]	; (80060d4 <prvCheckTasksWaitingTermination+0x50>)
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	3304      	adds	r3, #4
 800609c:	4618      	mov	r0, r3
 800609e:	f7fe fd71 	bl	8004b84 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80060a2:	4b0d      	ldr	r3, [pc, #52]	; (80060d8 <prvCheckTasksWaitingTermination+0x54>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	4a0b      	ldr	r2, [pc, #44]	; (80060d8 <prvCheckTasksWaitingTermination+0x54>)
 80060aa:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80060ac:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <prvCheckTasksWaitingTermination+0x58>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	4a0a      	ldr	r2, [pc, #40]	; (80060dc <prvCheckTasksWaitingTermination+0x58>)
 80060b4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80060b6:	f000 fdaf 	bl	8006c18 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f810 	bl	80060e0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060c0:	4b06      	ldr	r3, [pc, #24]	; (80060dc <prvCheckTasksWaitingTermination+0x58>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1e1      	bne.n	800608c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80060c8:	bf00      	nop
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	200003bc 	.word	0x200003bc
 80060d8:	200003e8 	.word	0x200003e8
 80060dc:	200003d0 	.word	0x200003d0

080060e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 ffab 	bl	8007048 <vPortFree>
                vPortFree( pxTCB );
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 ffa8 	bl	8007048 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80060f8:	bf00      	nop
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006104:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <prvResetNextTaskUnblockTime+0x30>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d104      	bne.n	8006118 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800610e:	4b09      	ldr	r3, [pc, #36]	; (8006134 <prvResetNextTaskUnblockTime+0x34>)
 8006110:	f04f 32ff 	mov.w	r2, #4294967295
 8006114:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006116:	e005      	b.n	8006124 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006118:	4b05      	ldr	r3, [pc, #20]	; (8006130 <prvResetNextTaskUnblockTime+0x30>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a04      	ldr	r2, [pc, #16]	; (8006134 <prvResetNextTaskUnblockTime+0x34>)
 8006122:	6013      	str	r3, [r2, #0]
}
 8006124:	bf00      	nop
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	200003a0 	.word	0x200003a0
 8006134:	20000408 	.word	0x20000408

08006138 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800613e:	4b0b      	ldr	r3, [pc, #44]	; (800616c <xTaskGetSchedulerState+0x34>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d102      	bne.n	800614c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006146:	2301      	movs	r3, #1
 8006148:	607b      	str	r3, [r7, #4]
 800614a:	e008      	b.n	800615e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800614c:	4b08      	ldr	r3, [pc, #32]	; (8006170 <xTaskGetSchedulerState+0x38>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d102      	bne.n	800615a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006154:	2302      	movs	r3, #2
 8006156:	607b      	str	r3, [r7, #4]
 8006158:	e001      	b.n	800615e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800615a:	2300      	movs	r3, #0
 800615c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800615e:	687b      	ldr	r3, [r7, #4]
    }
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	200003f4 	.word	0x200003f4
 8006170:	20000410 	.word	0x20000410

08006174 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006180:	2300      	movs	r3, #0
 8006182:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d063      	beq.n	8006252 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800618a:	4b34      	ldr	r3, [pc, #208]	; (800625c <xTaskPriorityDisinherit+0xe8>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	429a      	cmp	r2, r3
 8006192:	d00a      	beq.n	80061aa <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	60fb      	str	r3, [r7, #12]
    }
 80061a6:	bf00      	nop
 80061a8:	e7fe      	b.n	80061a8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10a      	bne.n	80061c8 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	60bb      	str	r3, [r7, #8]
    }
 80061c4:	bf00      	nop
 80061c6:	e7fe      	b.n	80061c6 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061cc:	1e5a      	subs	r2, r3, #1
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	661a      	str	r2, [r3, #96]	; 0x60

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061da:	429a      	cmp	r2, r3
 80061dc:	d039      	beq.n	8006252 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d135      	bne.n	8006252 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	3304      	adds	r3, #4
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fe fcca 	bl	8004b84 <uxListRemove>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10a      	bne.n	800620c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fa:	2201      	movs	r2, #1
 80061fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006200:	43da      	mvns	r2, r3
 8006202:	4b17      	ldr	r3, [pc, #92]	; (8006260 <xTaskPriorityDisinherit+0xec>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4013      	ands	r3, r2
 8006208:	4a15      	ldr	r2, [pc, #84]	; (8006260 <xTaskPriorityDisinherit+0xec>)
 800620a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	f1c3 0205 	rsb	r2, r3, #5
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006224:	2201      	movs	r2, #1
 8006226:	409a      	lsls	r2, r3
 8006228:	4b0d      	ldr	r3, [pc, #52]	; (8006260 <xTaskPriorityDisinherit+0xec>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4313      	orrs	r3, r2
 800622e:	4a0c      	ldr	r2, [pc, #48]	; (8006260 <xTaskPriorityDisinherit+0xec>)
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4a09      	ldr	r2, [pc, #36]	; (8006264 <xTaskPriorityDisinherit+0xf0>)
 8006240:	441a      	add	r2, r3
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	3304      	adds	r3, #4
 8006246:	4619      	mov	r1, r3
 8006248:	4610      	mov	r0, r2
 800624a:	f7fe fc3e 	bl	8004aca <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800624e:	2301      	movs	r3, #1
 8006250:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006252:	697b      	ldr	r3, [r7, #20]
    }
 8006254:	4618      	mov	r0, r3
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	20000310 	.word	0x20000310
 8006260:	200003f0 	.word	0x200003f0
 8006264:	20000314 	.word	0x20000314

08006268 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006272:	4b29      	ldr	r3, [pc, #164]	; (8006318 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006278:	4b28      	ldr	r3, [pc, #160]	; (800631c <prvAddCurrentTaskToDelayedList+0xb4>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3304      	adds	r3, #4
 800627e:	4618      	mov	r0, r3
 8006280:	f7fe fc80 	bl	8004b84 <uxListRemove>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10b      	bne.n	80062a2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800628a:	4b24      	ldr	r3, [pc, #144]	; (800631c <prvAddCurrentTaskToDelayedList+0xb4>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	2201      	movs	r2, #1
 8006292:	fa02 f303 	lsl.w	r3, r2, r3
 8006296:	43da      	mvns	r2, r3
 8006298:	4b21      	ldr	r3, [pc, #132]	; (8006320 <prvAddCurrentTaskToDelayedList+0xb8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4013      	ands	r3, r2
 800629e:	4a20      	ldr	r2, [pc, #128]	; (8006320 <prvAddCurrentTaskToDelayedList+0xb8>)
 80062a0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a8:	d10a      	bne.n	80062c0 <prvAddCurrentTaskToDelayedList+0x58>
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d007      	beq.n	80062c0 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062b0:	4b1a      	ldr	r3, [pc, #104]	; (800631c <prvAddCurrentTaskToDelayedList+0xb4>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3304      	adds	r3, #4
 80062b6:	4619      	mov	r1, r3
 80062b8:	481a      	ldr	r0, [pc, #104]	; (8006324 <prvAddCurrentTaskToDelayedList+0xbc>)
 80062ba:	f7fe fc06 	bl	8004aca <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80062be:	e026      	b.n	800630e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4413      	add	r3, r2
 80062c6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062c8:	4b14      	ldr	r3, [pc, #80]	; (800631c <prvAddCurrentTaskToDelayedList+0xb4>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d209      	bcs.n	80062ec <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062d8:	4b13      	ldr	r3, [pc, #76]	; (8006328 <prvAddCurrentTaskToDelayedList+0xc0>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	4b0f      	ldr	r3, [pc, #60]	; (800631c <prvAddCurrentTaskToDelayedList+0xb4>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	3304      	adds	r3, #4
 80062e2:	4619      	mov	r1, r3
 80062e4:	4610      	mov	r0, r2
 80062e6:	f7fe fc14 	bl	8004b12 <vListInsert>
}
 80062ea:	e010      	b.n	800630e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062ec:	4b0f      	ldr	r3, [pc, #60]	; (800632c <prvAddCurrentTaskToDelayedList+0xc4>)
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	4b0a      	ldr	r3, [pc, #40]	; (800631c <prvAddCurrentTaskToDelayedList+0xb4>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3304      	adds	r3, #4
 80062f6:	4619      	mov	r1, r3
 80062f8:	4610      	mov	r0, r2
 80062fa:	f7fe fc0a 	bl	8004b12 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80062fe:	4b0c      	ldr	r3, [pc, #48]	; (8006330 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	429a      	cmp	r2, r3
 8006306:	d202      	bcs.n	800630e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006308:	4a09      	ldr	r2, [pc, #36]	; (8006330 <prvAddCurrentTaskToDelayedList+0xc8>)
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6013      	str	r3, [r2, #0]
}
 800630e:	bf00      	nop
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	200003ec 	.word	0x200003ec
 800631c:	20000310 	.word	0x20000310
 8006320:	200003f0 	.word	0x200003f0
 8006324:	200003d4 	.word	0x200003d4
 8006328:	200003a4 	.word	0x200003a4
 800632c:	200003a0 	.word	0x200003a0
 8006330:	20000408 	.word	0x20000408

08006334 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800633a:	2300      	movs	r3, #0
 800633c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800633e:	f000 fad5 	bl	80068ec <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006342:	4b11      	ldr	r3, [pc, #68]	; (8006388 <xTimerCreateTimerTask+0x54>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00b      	beq.n	8006362 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800634a:	4b10      	ldr	r3, [pc, #64]	; (800638c <xTimerCreateTimerTask+0x58>)
 800634c:	9301      	str	r3, [sp, #4]
 800634e:	2304      	movs	r3, #4
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	2300      	movs	r3, #0
 8006354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006358:	490d      	ldr	r1, [pc, #52]	; (8006390 <xTimerCreateTimerTask+0x5c>)
 800635a:	480e      	ldr	r0, [pc, #56]	; (8006394 <xTimerCreateTimerTask+0x60>)
 800635c:	f7ff f91c 	bl	8005598 <xTaskCreate>
 8006360:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	603b      	str	r3, [r7, #0]
    }
 800637a:	bf00      	nop
 800637c:	e7fe      	b.n	800637c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800637e:	687b      	ldr	r3, [r7, #4]
    }
 8006380:	4618      	mov	r0, r3
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	20000444 	.word	0x20000444
 800638c:	20000448 	.word	0x20000448
 8006390:	08007538 	.word	0x08007538
 8006394:	080064cd 	.word	0x080064cd

08006398 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006398:	b580      	push	{r7, lr}
 800639a:	b08a      	sub	sp, #40	; 0x28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10a      	bne.n	80063c6 <xTimerGenericCommand+0x2e>
        __asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	623b      	str	r3, [r7, #32]
    }
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80063c6:	4b1a      	ldr	r3, [pc, #104]	; (8006430 <xTimerGenericCommand+0x98>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d02a      	beq.n	8006424 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2b05      	cmp	r3, #5
 80063de:	dc18      	bgt.n	8006412 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80063e0:	f7ff feaa 	bl	8006138 <xTaskGetSchedulerState>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d109      	bne.n	80063fe <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80063ea:	4b11      	ldr	r3, [pc, #68]	; (8006430 <xTimerGenericCommand+0x98>)
 80063ec:	6818      	ldr	r0, [r3, #0]
 80063ee:	f107 0114 	add.w	r1, r7, #20
 80063f2:	2300      	movs	r3, #0
 80063f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f6:	f7fe fcd9 	bl	8004dac <xQueueGenericSend>
 80063fa:	6278      	str	r0, [r7, #36]	; 0x24
 80063fc:	e012      	b.n	8006424 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80063fe:	4b0c      	ldr	r3, [pc, #48]	; (8006430 <xTimerGenericCommand+0x98>)
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	f107 0114 	add.w	r1, r7, #20
 8006406:	2300      	movs	r3, #0
 8006408:	2200      	movs	r2, #0
 800640a:	f7fe fccf 	bl	8004dac <xQueueGenericSend>
 800640e:	6278      	str	r0, [r7, #36]	; 0x24
 8006410:	e008      	b.n	8006424 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006412:	4b07      	ldr	r3, [pc, #28]	; (8006430 <xTimerGenericCommand+0x98>)
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	f107 0114 	add.w	r1, r7, #20
 800641a:	2300      	movs	r3, #0
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	f7fe fdc3 	bl	8004fa8 <xQueueGenericSendFromISR>
 8006422:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006426:	4618      	mov	r0, r3
 8006428:	3728      	adds	r7, #40	; 0x28
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20000444 	.word	0x20000444

08006434 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006434:	b580      	push	{r7, lr}
 8006436:	b088      	sub	sp, #32
 8006438:	af02      	add	r7, sp, #8
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800643e:	4b22      	ldr	r3, [pc, #136]	; (80064c8 <prvProcessExpiredTimer+0x94>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	3304      	adds	r3, #4
 800644c:	4618      	mov	r0, r3
 800644e:	f7fe fb99 	bl	8004b84 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006458:	f003 0304 	and.w	r3, r3, #4
 800645c:	2b00      	cmp	r3, #0
 800645e:	d022      	beq.n	80064a6 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	699a      	ldr	r2, [r3, #24]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	18d1      	adds	r1, r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	6978      	ldr	r0, [r7, #20]
 800646e:	f000 f8d1 	bl	8006614 <prvInsertTimerInActiveList>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d01f      	beq.n	80064b8 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006478:	2300      	movs	r3, #0
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	2300      	movs	r3, #0
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	2100      	movs	r1, #0
 8006482:	6978      	ldr	r0, [r7, #20]
 8006484:	f7ff ff88 	bl	8006398 <xTimerGenericCommand>
 8006488:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d113      	bne.n	80064b8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	60fb      	str	r3, [r7, #12]
    }
 80064a2:	bf00      	nop
 80064a4:	e7fe      	b.n	80064a4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064ac:	f023 0301 	bic.w	r3, r3, #1
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	6978      	ldr	r0, [r7, #20]
 80064be:	4798      	blx	r3
    }
 80064c0:	bf00      	nop
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	2000043c 	.word	0x2000043c

080064cc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064d4:	f107 0308 	add.w	r3, r7, #8
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 f857 	bl	800658c <prvGetNextExpireTime>
 80064de:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4619      	mov	r1, r3
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 f803 	bl	80064f0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80064ea:	f000 f8d5 	bl	8006698 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064ee:	e7f1      	b.n	80064d4 <prvTimerTask+0x8>

080064f0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80064fa:	f7ff fa63 	bl	80059c4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064fe:	f107 0308 	add.w	r3, r7, #8
 8006502:	4618      	mov	r0, r3
 8006504:	f000 f866 	bl	80065d4 <prvSampleTimeNow>
 8006508:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d130      	bne.n	8006572 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10a      	bne.n	800652c <prvProcessTimerOrBlockTask+0x3c>
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	429a      	cmp	r2, r3
 800651c:	d806      	bhi.n	800652c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800651e:	f7ff fa5f 	bl	80059e0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006522:	68f9      	ldr	r1, [r7, #12]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff ff85 	bl	8006434 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800652a:	e024      	b.n	8006576 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d008      	beq.n	8006544 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006532:	4b13      	ldr	r3, [pc, #76]	; (8006580 <prvProcessTimerOrBlockTask+0x90>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <prvProcessTimerOrBlockTask+0x50>
 800653c:	2301      	movs	r3, #1
 800653e:	e000      	b.n	8006542 <prvProcessTimerOrBlockTask+0x52>
 8006540:	2300      	movs	r3, #0
 8006542:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006544:	4b0f      	ldr	r3, [pc, #60]	; (8006584 <prvProcessTimerOrBlockTask+0x94>)
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	4619      	mov	r1, r3
 8006552:	f7fe ffed 	bl	8005530 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006556:	f7ff fa43 	bl	80059e0 <xTaskResumeAll>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10a      	bne.n	8006576 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006560:	4b09      	ldr	r3, [pc, #36]	; (8006588 <prvProcessTimerOrBlockTask+0x98>)
 8006562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	f3bf 8f6f 	isb	sy
    }
 8006570:	e001      	b.n	8006576 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006572:	f7ff fa35 	bl	80059e0 <xTaskResumeAll>
    }
 8006576:	bf00      	nop
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000440 	.word	0x20000440
 8006584:	20000444 	.word	0x20000444
 8006588:	e000ed04 	.word	0xe000ed04

0800658c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006594:	4b0e      	ldr	r3, [pc, #56]	; (80065d0 <prvGetNextExpireTime+0x44>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <prvGetNextExpireTime+0x16>
 800659e:	2201      	movs	r2, #1
 80065a0:	e000      	b.n	80065a4 <prvGetNextExpireTime+0x18>
 80065a2:	2200      	movs	r2, #0
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d105      	bne.n	80065bc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065b0:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <prvGetNextExpireTime+0x44>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	e001      	b.n	80065c0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80065c0:	68fb      	ldr	r3, [r7, #12]
    }
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	2000043c 	.word	0x2000043c

080065d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80065dc:	f7ff fa9c 	bl	8005b18 <xTaskGetTickCount>
 80065e0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80065e2:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <prvSampleTimeNow+0x3c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d205      	bcs.n	80065f8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80065ec:	f000 f91a 	bl	8006824 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	e002      	b.n	80065fe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80065fe:	4a04      	ldr	r2, [pc, #16]	; (8006610 <prvSampleTimeNow+0x3c>)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006604:	68fb      	ldr	r3, [r7, #12]
    }
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	2000044c 	.word	0x2000044c

08006614 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006622:	2300      	movs	r3, #0
 8006624:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	429a      	cmp	r2, r3
 8006638:	d812      	bhi.n	8006660 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	1ad2      	subs	r2, r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	429a      	cmp	r2, r3
 8006646:	d302      	bcc.n	800664e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006648:	2301      	movs	r3, #1
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	e01b      	b.n	8006686 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800664e:	4b10      	ldr	r3, [pc, #64]	; (8006690 <prvInsertTimerInActiveList+0x7c>)
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	3304      	adds	r3, #4
 8006656:	4619      	mov	r1, r3
 8006658:	4610      	mov	r0, r2
 800665a:	f7fe fa5a 	bl	8004b12 <vListInsert>
 800665e:	e012      	b.n	8006686 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	429a      	cmp	r2, r3
 8006666:	d206      	bcs.n	8006676 <prvInsertTimerInActiveList+0x62>
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	429a      	cmp	r2, r3
 800666e:	d302      	bcc.n	8006676 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006670:	2301      	movs	r3, #1
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	e007      	b.n	8006686 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006676:	4b07      	ldr	r3, [pc, #28]	; (8006694 <prvInsertTimerInActiveList+0x80>)
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	3304      	adds	r3, #4
 800667e:	4619      	mov	r1, r3
 8006680:	4610      	mov	r0, r2
 8006682:	f7fe fa46 	bl	8004b12 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006686:	697b      	ldr	r3, [r7, #20]
    }
 8006688:	4618      	mov	r0, r3
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	20000440 	.word	0x20000440
 8006694:	2000043c 	.word	0x2000043c

08006698 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006698:	b580      	push	{r7, lr}
 800669a:	b08c      	sub	sp, #48	; 0x30
 800669c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800669e:	e0ae      	b.n	80067fe <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f2c0 80aa 	blt.w	80067fc <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d004      	beq.n	80066be <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	3304      	adds	r3, #4
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fe fa63 	bl	8004b84 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066be:	1d3b      	adds	r3, r7, #4
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff ff87 	bl	80065d4 <prvSampleTimeNow>
 80066c6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b09      	cmp	r3, #9
 80066cc:	f200 8097 	bhi.w	80067fe <prvProcessReceivedCommands+0x166>
 80066d0:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <prvProcessReceivedCommands+0x40>)
 80066d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d6:	bf00      	nop
 80066d8:	08006701 	.word	0x08006701
 80066dc:	08006701 	.word	0x08006701
 80066e0:	08006701 	.word	0x08006701
 80066e4:	08006775 	.word	0x08006775
 80066e8:	08006789 	.word	0x08006789
 80066ec:	080067d3 	.word	0x080067d3
 80066f0:	08006701 	.word	0x08006701
 80066f4:	08006701 	.word	0x08006701
 80066f8:	08006775 	.word	0x08006775
 80066fc:	08006789 	.word	0x08006789
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006706:	f043 0301 	orr.w	r3, r3, #1
 800670a:	b2da      	uxtb	r2, r3
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	18d1      	adds	r1, r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a3a      	ldr	r2, [r7, #32]
 800671e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006720:	f7ff ff78 	bl	8006614 <prvInsertTimerInActiveList>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d069      	beq.n	80067fe <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006730:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	d05e      	beq.n	80067fe <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	441a      	add	r2, r3
 8006748:	2300      	movs	r3, #0
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	2300      	movs	r3, #0
 800674e:	2100      	movs	r1, #0
 8006750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006752:	f7ff fe21 	bl	8006398 <xTimerGenericCommand>
 8006756:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d14f      	bne.n	80067fe <prvProcessReceivedCommands+0x166>
        __asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	61bb      	str	r3, [r7, #24]
    }
 8006770:	bf00      	nop
 8006772:	e7fe      	b.n	8006772 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800677a:	f023 0301 	bic.w	r3, r3, #1
 800677e:	b2da      	uxtb	r2, r3
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006786:	e03a      	b.n	80067fe <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800678e:	f043 0301 	orr.w	r3, r3, #1
 8006792:	b2da      	uxtb	r2, r3
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10a      	bne.n	80067be <prvProcessReceivedCommands+0x126>
        __asm volatile
 80067a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	617b      	str	r3, [r7, #20]
    }
 80067ba:	bf00      	nop
 80067bc:	e7fe      	b.n	80067bc <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	699a      	ldr	r2, [r3, #24]
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	18d1      	adds	r1, r2, r3
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	6a3a      	ldr	r2, [r7, #32]
 80067ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067cc:	f7ff ff22 	bl	8006614 <prvInsertTimerInActiveList>
                        break;
 80067d0:	e015      	b.n	80067fe <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d103      	bne.n	80067e8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80067e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067e2:	f000 fc31 	bl	8007048 <vPortFree>
 80067e6:	e00a      	b.n	80067fe <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067ee:	f023 0301 	bic.w	r3, r3, #1
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80067fa:	e000      	b.n	80067fe <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80067fc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067fe:	4b08      	ldr	r3, [pc, #32]	; (8006820 <prvProcessReceivedCommands+0x188>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f107 0108 	add.w	r1, r7, #8
 8006806:	2200      	movs	r2, #0
 8006808:	4618      	mov	r0, r3
 800680a:	f7fe fc77 	bl	80050fc <xQueueReceive>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	f47f af45 	bne.w	80066a0 <prvProcessReceivedCommands+0x8>
        }
    }
 8006816:	bf00      	nop
 8006818:	bf00      	nop
 800681a:	3728      	adds	r7, #40	; 0x28
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	20000444 	.word	0x20000444

08006824 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800682a:	e048      	b.n	80068be <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800682c:	4b2d      	ldr	r3, [pc, #180]	; (80068e4 <prvSwitchTimerLists+0xc0>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006836:	4b2b      	ldr	r3, [pc, #172]	; (80068e4 <prvSwitchTimerLists+0xc0>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3304      	adds	r3, #4
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe f99d 	bl	8004b84 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	d02e      	beq.n	80068be <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	4413      	add	r3, r2
 8006868:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	429a      	cmp	r2, r3
 8006870:	d90e      	bls.n	8006890 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800687e:	4b19      	ldr	r3, [pc, #100]	; (80068e4 <prvSwitchTimerLists+0xc0>)
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3304      	adds	r3, #4
 8006886:	4619      	mov	r1, r3
 8006888:	4610      	mov	r0, r2
 800688a:	f7fe f942 	bl	8004b12 <vListInsert>
 800688e:	e016      	b.n	80068be <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006890:	2300      	movs	r3, #0
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	2300      	movs	r3, #0
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	2100      	movs	r1, #0
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f7ff fd7c 	bl	8006398 <xTimerGenericCommand>
 80068a0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10a      	bne.n	80068be <prvSwitchTimerLists+0x9a>
        __asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	603b      	str	r3, [r7, #0]
    }
 80068ba:	bf00      	nop
 80068bc:	e7fe      	b.n	80068bc <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068be:	4b09      	ldr	r3, [pc, #36]	; (80068e4 <prvSwitchTimerLists+0xc0>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1b1      	bne.n	800682c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80068c8:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <prvSwitchTimerLists+0xc0>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80068ce:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <prvSwitchTimerLists+0xc4>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a04      	ldr	r2, [pc, #16]	; (80068e4 <prvSwitchTimerLists+0xc0>)
 80068d4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80068d6:	4a04      	ldr	r2, [pc, #16]	; (80068e8 <prvSwitchTimerLists+0xc4>)
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	6013      	str	r3, [r2, #0]
    }
 80068dc:	bf00      	nop
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	2000043c 	.word	0x2000043c
 80068e8:	20000440 	.word	0x20000440

080068ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80068f0:	f000 f962 	bl	8006bb8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80068f4:	4b12      	ldr	r3, [pc, #72]	; (8006940 <prvCheckForValidListAndQueue+0x54>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d11d      	bne.n	8006938 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80068fc:	4811      	ldr	r0, [pc, #68]	; (8006944 <prvCheckForValidListAndQueue+0x58>)
 80068fe:	f7fe f8b7 	bl	8004a70 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006902:	4811      	ldr	r0, [pc, #68]	; (8006948 <prvCheckForValidListAndQueue+0x5c>)
 8006904:	f7fe f8b4 	bl	8004a70 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006908:	4b10      	ldr	r3, [pc, #64]	; (800694c <prvCheckForValidListAndQueue+0x60>)
 800690a:	4a0e      	ldr	r2, [pc, #56]	; (8006944 <prvCheckForValidListAndQueue+0x58>)
 800690c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800690e:	4b10      	ldr	r3, [pc, #64]	; (8006950 <prvCheckForValidListAndQueue+0x64>)
 8006910:	4a0d      	ldr	r2, [pc, #52]	; (8006948 <prvCheckForValidListAndQueue+0x5c>)
 8006912:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006914:	2200      	movs	r2, #0
 8006916:	210c      	movs	r1, #12
 8006918:	200a      	movs	r0, #10
 800691a:	f7fe f9c5 	bl	8004ca8 <xQueueGenericCreate>
 800691e:	4603      	mov	r3, r0
 8006920:	4a07      	ldr	r2, [pc, #28]	; (8006940 <prvCheckForValidListAndQueue+0x54>)
 8006922:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006924:	4b06      	ldr	r3, [pc, #24]	; (8006940 <prvCheckForValidListAndQueue+0x54>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d005      	beq.n	8006938 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800692c:	4b04      	ldr	r3, [pc, #16]	; (8006940 <prvCheckForValidListAndQueue+0x54>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4908      	ldr	r1, [pc, #32]	; (8006954 <prvCheckForValidListAndQueue+0x68>)
 8006932:	4618      	mov	r0, r3
 8006934:	f7fe fdd2 	bl	80054dc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006938:	f000 f96e 	bl	8006c18 <vPortExitCritical>
    }
 800693c:	bf00      	nop
 800693e:	bd80      	pop	{r7, pc}
 8006940:	20000444 	.word	0x20000444
 8006944:	20000414 	.word	0x20000414
 8006948:	20000428 	.word	0x20000428
 800694c:	2000043c 	.word	0x2000043c
 8006950:	20000440 	.word	0x20000440
 8006954:	08007540 	.word	0x08007540

08006958 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	3b04      	subs	r3, #4
 8006968:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006970:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3b04      	subs	r3, #4
 8006976:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f023 0201 	bic.w	r2, r3, #1
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3b04      	subs	r3, #4
 8006986:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006988:	4a0c      	ldr	r2, [pc, #48]	; (80069bc <pxPortInitialiseStack+0x64>)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3b14      	subs	r3, #20
 8006992:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	3b04      	subs	r3, #4
 800699e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f06f 0202 	mvn.w	r2, #2
 80069a6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3b20      	subs	r3, #32
 80069ac:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80069ae:	68fb      	ldr	r3, [r7, #12]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	080069c1 	.word	0x080069c1

080069c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80069ca:	4b12      	ldr	r3, [pc, #72]	; (8006a14 <prvTaskExitError+0x54>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d2:	d00a      	beq.n	80069ea <prvTaskExitError+0x2a>
        __asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	60fb      	str	r3, [r7, #12]
    }
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <prvTaskExitError+0x28>
        __asm volatile
 80069ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	60bb      	str	r3, [r7, #8]
    }
 80069fc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80069fe:	bf00      	nop
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d0fc      	beq.n	8006a00 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006a06:	bf00      	nop
 8006a08:	bf00      	nop
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	20000014 	.word	0x20000014
	...

08006a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006a20:	4b07      	ldr	r3, [pc, #28]	; (8006a40 <pxCurrentTCBConst2>)
 8006a22:	6819      	ldr	r1, [r3, #0]
 8006a24:	6808      	ldr	r0, [r1, #0]
 8006a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2a:	f380 8809 	msr	PSP, r0
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f04f 0000 	mov.w	r0, #0
 8006a36:	f380 8811 	msr	BASEPRI, r0
 8006a3a:	4770      	bx	lr
 8006a3c:	f3af 8000 	nop.w

08006a40 <pxCurrentTCBConst2>:
 8006a40:	20000310 	.word	0x20000310
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop

08006a48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006a48:	4808      	ldr	r0, [pc, #32]	; (8006a6c <prvPortStartFirstTask+0x24>)
 8006a4a:	6800      	ldr	r0, [r0, #0]
 8006a4c:	6800      	ldr	r0, [r0, #0]
 8006a4e:	f380 8808 	msr	MSP, r0
 8006a52:	f04f 0000 	mov.w	r0, #0
 8006a56:	f380 8814 	msr	CONTROL, r0
 8006a5a:	b662      	cpsie	i
 8006a5c:	b661      	cpsie	f
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	df00      	svc	0
 8006a68:	bf00      	nop
 8006a6a:	0000      	.short	0x0000
 8006a6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006a70:	bf00      	nop
 8006a72:	bf00      	nop

08006a74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a7a:	4b46      	ldr	r3, [pc, #280]	; (8006b94 <xPortStartScheduler+0x120>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a46      	ldr	r2, [pc, #280]	; (8006b98 <xPortStartScheduler+0x124>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d10a      	bne.n	8006a9a <xPortStartScheduler+0x26>
        __asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	613b      	str	r3, [r7, #16]
    }
 8006a96:	bf00      	nop
 8006a98:	e7fe      	b.n	8006a98 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a9a:	4b3e      	ldr	r3, [pc, #248]	; (8006b94 <xPortStartScheduler+0x120>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a3f      	ldr	r2, [pc, #252]	; (8006b9c <xPortStartScheduler+0x128>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d10a      	bne.n	8006aba <xPortStartScheduler+0x46>
        __asm volatile
 8006aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	60fb      	str	r3, [r7, #12]
    }
 8006ab6:	bf00      	nop
 8006ab8:	e7fe      	b.n	8006ab8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006aba:	4b39      	ldr	r3, [pc, #228]	; (8006ba0 <xPortStartScheduler+0x12c>)
 8006abc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	22ff      	movs	r2, #255	; 0xff
 8006aca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	4b31      	ldr	r3, [pc, #196]	; (8006ba4 <xPortStartScheduler+0x130>)
 8006ae0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ae2:	4b31      	ldr	r3, [pc, #196]	; (8006ba8 <xPortStartScheduler+0x134>)
 8006ae4:	2207      	movs	r2, #7
 8006ae6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ae8:	e009      	b.n	8006afe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8006aea:	4b2f      	ldr	r3, [pc, #188]	; (8006ba8 <xPortStartScheduler+0x134>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	4a2d      	ldr	r2, [pc, #180]	; (8006ba8 <xPortStartScheduler+0x134>)
 8006af2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006af4:	78fb      	ldrb	r3, [r7, #3]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	005b      	lsls	r3, r3, #1
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006afe:	78fb      	ldrb	r3, [r7, #3]
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b06:	2b80      	cmp	r3, #128	; 0x80
 8006b08:	d0ef      	beq.n	8006aea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b0a:	4b27      	ldr	r3, [pc, #156]	; (8006ba8 <xPortStartScheduler+0x134>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f1c3 0307 	rsb	r3, r3, #7
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	d00a      	beq.n	8006b2c <xPortStartScheduler+0xb8>
        __asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	60bb      	str	r3, [r7, #8]
    }
 8006b28:	bf00      	nop
 8006b2a:	e7fe      	b.n	8006b2a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ba8 <xPortStartScheduler+0x134>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	021b      	lsls	r3, r3, #8
 8006b32:	4a1d      	ldr	r2, [pc, #116]	; (8006ba8 <xPortStartScheduler+0x134>)
 8006b34:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b36:	4b1c      	ldr	r3, [pc, #112]	; (8006ba8 <xPortStartScheduler+0x134>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b3e:	4a1a      	ldr	r2, [pc, #104]	; (8006ba8 <xPortStartScheduler+0x134>)
 8006b40:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006b4a:	4b18      	ldr	r3, [pc, #96]	; (8006bac <xPortStartScheduler+0x138>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a17      	ldr	r2, [pc, #92]	; (8006bac <xPortStartScheduler+0x138>)
 8006b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b54:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006b56:	4b15      	ldr	r3, [pc, #84]	; (8006bac <xPortStartScheduler+0x138>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a14      	ldr	r2, [pc, #80]	; (8006bac <xPortStartScheduler+0x138>)
 8006b5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b60:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006b62:	f000 f8db 	bl	8006d1c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006b66:	4b12      	ldr	r3, [pc, #72]	; (8006bb0 <xPortStartScheduler+0x13c>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006b6c:	f000 f8fa 	bl	8006d64 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b70:	4b10      	ldr	r3, [pc, #64]	; (8006bb4 <xPortStartScheduler+0x140>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a0f      	ldr	r2, [pc, #60]	; (8006bb4 <xPortStartScheduler+0x140>)
 8006b76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b7a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006b7c:	f7ff ff64 	bl	8006a48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006b80:	f7ff f892 	bl	8005ca8 <vTaskSwitchContext>
    prvTaskExitError();
 8006b84:	f7ff ff1c 	bl	80069c0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	e000ed00 	.word	0xe000ed00
 8006b98:	410fc271 	.word	0x410fc271
 8006b9c:	410fc270 	.word	0x410fc270
 8006ba0:	e000e400 	.word	0xe000e400
 8006ba4:	20000450 	.word	0x20000450
 8006ba8:	20000454 	.word	0x20000454
 8006bac:	e000ed20 	.word	0xe000ed20
 8006bb0:	20000014 	.word	0x20000014
 8006bb4:	e000ef34 	.word	0xe000ef34

08006bb8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
        __asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	607b      	str	r3, [r7, #4]
    }
 8006bd0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006bd2:	4b0f      	ldr	r3, [pc, #60]	; (8006c10 <vPortEnterCritical+0x58>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	4a0d      	ldr	r2, [pc, #52]	; (8006c10 <vPortEnterCritical+0x58>)
 8006bda:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006bdc:	4b0c      	ldr	r3, [pc, #48]	; (8006c10 <vPortEnterCritical+0x58>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d10f      	bne.n	8006c04 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006be4:	4b0b      	ldr	r3, [pc, #44]	; (8006c14 <vPortEnterCritical+0x5c>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <vPortEnterCritical+0x4c>
        __asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	603b      	str	r3, [r7, #0]
    }
 8006c00:	bf00      	nop
 8006c02:	e7fe      	b.n	8006c02 <vPortEnterCritical+0x4a>
    }
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	20000014 	.word	0x20000014
 8006c14:	e000ed04 	.word	0xe000ed04

08006c18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006c1e:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <vPortExitCritical+0x50>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10a      	bne.n	8006c3c <vPortExitCritical+0x24>
        __asm volatile
 8006c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	607b      	str	r3, [r7, #4]
    }
 8006c38:	bf00      	nop
 8006c3a:	e7fe      	b.n	8006c3a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006c3c:	4b0a      	ldr	r3, [pc, #40]	; (8006c68 <vPortExitCritical+0x50>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	4a09      	ldr	r2, [pc, #36]	; (8006c68 <vPortExitCritical+0x50>)
 8006c44:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006c46:	4b08      	ldr	r3, [pc, #32]	; (8006c68 <vPortExitCritical+0x50>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d105      	bne.n	8006c5a <vPortExitCritical+0x42>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	f383 8811 	msr	BASEPRI, r3
    }
 8006c58:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006c5a:	bf00      	nop
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	20000014 	.word	0x20000014
 8006c6c:	00000000 	.word	0x00000000

08006c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006c70:	f3ef 8009 	mrs	r0, PSP
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	4b15      	ldr	r3, [pc, #84]	; (8006cd0 <pxCurrentTCBConst>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	f01e 0f10 	tst.w	lr, #16
 8006c80:	bf08      	it	eq
 8006c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8a:	6010      	str	r0, [r2, #0]
 8006c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c94:	f380 8811 	msr	BASEPRI, r0
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f7ff f802 	bl	8005ca8 <vTaskSwitchContext>
 8006ca4:	f04f 0000 	mov.w	r0, #0
 8006ca8:	f380 8811 	msr	BASEPRI, r0
 8006cac:	bc09      	pop	{r0, r3}
 8006cae:	6819      	ldr	r1, [r3, #0]
 8006cb0:	6808      	ldr	r0, [r1, #0]
 8006cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb6:	f01e 0f10 	tst.w	lr, #16
 8006cba:	bf08      	it	eq
 8006cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006cc0:	f380 8809 	msr	PSP, r0
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	f3af 8000 	nop.w

08006cd0 <pxCurrentTCBConst>:
 8006cd0:	20000310 	.word	0x20000310
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006cd4:	bf00      	nop
 8006cd6:	bf00      	nop

08006cd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
        __asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	607b      	str	r3, [r7, #4]
    }
 8006cf0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006cf2:	f7fe ff21 	bl	8005b38 <xTaskIncrementTick>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d003      	beq.n	8006d04 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cfc:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <SysTick_Handler+0x40>)
 8006cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	2300      	movs	r3, #0
 8006d06:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	f383 8811 	msr	BASEPRI, r3
    }
 8006d0e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8006d10:	bf00      	nop
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	e000ed04 	.word	0xe000ed04

08006d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d20:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <vPortSetupTimerInterrupt+0x34>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d26:	4b0b      	ldr	r3, [pc, #44]	; (8006d54 <vPortSetupTimerInterrupt+0x38>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d2c:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <vPortSetupTimerInterrupt+0x3c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a0a      	ldr	r2, [pc, #40]	; (8006d5c <vPortSetupTimerInterrupt+0x40>)
 8006d32:	fba2 2303 	umull	r2, r3, r2, r3
 8006d36:	099b      	lsrs	r3, r3, #6
 8006d38:	4a09      	ldr	r2, [pc, #36]	; (8006d60 <vPortSetupTimerInterrupt+0x44>)
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d3e:	4b04      	ldr	r3, [pc, #16]	; (8006d50 <vPortSetupTimerInterrupt+0x34>)
 8006d40:	2207      	movs	r2, #7
 8006d42:	601a      	str	r2, [r3, #0]
}
 8006d44:	bf00      	nop
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	e000e010 	.word	0xe000e010
 8006d54:	e000e018 	.word	0xe000e018
 8006d58:	20000004 	.word	0x20000004
 8006d5c:	10624dd3 	.word	0x10624dd3
 8006d60:	e000e014 	.word	0xe000e014

08006d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006d64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d74 <vPortEnableVFP+0x10>
 8006d68:	6801      	ldr	r1, [r0, #0]
 8006d6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d6e:	6001      	str	r1, [r0, #0]
 8006d70:	4770      	bx	lr
 8006d72:	0000      	.short	0x0000
 8006d74:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006d78:	bf00      	nop
 8006d7a:	bf00      	nop

08006d7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
    	vSetVarulMaxPRIGROUPValue();
 8006d82:	f000 f83b 	bl	8006dfc <vSetVarulMaxPRIGROUPValue>
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006d86:	f3ef 8305 	mrs	r3, IPSR
 8006d8a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b0f      	cmp	r3, #15
 8006d90:	d914      	bls.n	8006dbc <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d92:	4a16      	ldr	r2, [pc, #88]	; (8006dec <vPortValidateInterruptPriority+0x70>)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4413      	add	r3, r2
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d9c:	4b14      	ldr	r3, [pc, #80]	; (8006df0 <vPortValidateInterruptPriority+0x74>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	7afa      	ldrb	r2, [r7, #11]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d20a      	bcs.n	8006dbc <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	607b      	str	r3, [r7, #4]
    }
 8006db8:	bf00      	nop
 8006dba:	e7fe      	b.n	8006dba <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006dbc:	4b0d      	ldr	r3, [pc, #52]	; (8006df4 <vPortValidateInterruptPriority+0x78>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006dc4:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <vPortValidateInterruptPriority+0x7c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d90a      	bls.n	8006de2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	603b      	str	r3, [r7, #0]
    }
 8006dde:	bf00      	nop
 8006de0:	e7fe      	b.n	8006de0 <vPortValidateInterruptPriority+0x64>
    }
 8006de2:	bf00      	nop
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	e000e3f0 	.word	0xe000e3f0
 8006df0:	20000450 	.word	0x20000450
 8006df4:	e000ed0c 	.word	0xe000ed0c
 8006df8:	20000454 	.word	0x20000454

08006dfc <vSetVarulMaxPRIGROUPValue>:

    //###########################################################
    // Add function below in file port.c
    #if( configASSERT_DEFINED == 1 )
    void vSetVarulMaxPRIGROUPValue( void )
    {
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
    	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e02:	4b1f      	ldr	r3, [pc, #124]	; (8006e80 <vSetVarulMaxPRIGROUPValue+0x84>)
 8006e04:	60fb      	str	r3, [r7, #12]
    	volatile uint8_t ucMaxPriorityValue;
    	/* Determine the number of priority bits available.  First write to all
    	possible bits. */
    	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	22ff      	movs	r2, #255	; 0xff
 8006e0a:	701a      	strb	r2, [r3, #0]
    	/* Read the value back to see how many bits stuck. */
    	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	71fb      	strb	r3, [r7, #7]
    	/* Calculate the maximum acceptable priority group value for the number
    	of bits read back. */
    	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e14:	4b1b      	ldr	r3, [pc, #108]	; (8006e84 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006e16:	2207      	movs	r2, #7
 8006e18:	601a      	str	r2, [r3, #0]
    	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e1a:	e009      	b.n	8006e30 <vSetVarulMaxPRIGROUPValue+0x34>
    	{
    		ulMaxPRIGROUPValue--;
 8006e1c:	4b19      	ldr	r3, [pc, #100]	; (8006e84 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3b01      	subs	r3, #1
 8006e22:	4a18      	ldr	r2, [pc, #96]	; (8006e84 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006e24:	6013      	str	r3, [r2, #0]
    		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e26:	79fb      	ldrb	r3, [r7, #7]
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	71fb      	strb	r3, [r7, #7]
    	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e30:	79fb      	ldrb	r3, [r7, #7]
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e38:	2b80      	cmp	r3, #128	; 0x80
 8006e3a:	d0ef      	beq.n	8006e1c <vSetVarulMaxPRIGROUPValue+0x20>
    #ifdef configPRIO_BITS
    	{
    		/* Check the FreeRTOS configuration that defines the number of
    		priority bits matches the number of priority bits actually queried
    		from the hardware. */
    		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e3c:	4b11      	ldr	r3, [pc, #68]	; (8006e84 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f1c3 0307 	rsb	r3, r3, #7
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	d00a      	beq.n	8006e5e <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	60bb      	str	r3, [r7, #8]
    }
 8006e5a:	bf00      	nop
 8006e5c:	e7fe      	b.n	8006e5c <vSetVarulMaxPRIGROUPValue+0x60>
    	}
    #endif
    	/* Shift the priority group value back to its position within the AIRCR
    	register. */
    	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e5e:	4b09      	ldr	r3, [pc, #36]	; (8006e84 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	021b      	lsls	r3, r3, #8
 8006e64:	4a07      	ldr	r2, [pc, #28]	; (8006e84 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006e66:	6013      	str	r3, [r2, #0]
    	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e68:	4b06      	ldr	r3, [pc, #24]	; (8006e84 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e70:	4a04      	ldr	r2, [pc, #16]	; (8006e84 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006e72:	6013      	str	r3, [r2, #0]
    }
 8006e74:	bf00      	nop
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	e000e400 	.word	0xe000e400
 8006e84:	20000454 	.word	0x20000454

08006e88 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08a      	sub	sp, #40	; 0x28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006e90:	2300      	movs	r3, #0
 8006e92:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006e94:	f7fe fd96 	bl	80059c4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006e98:	4b65      	ldr	r3, [pc, #404]	; (8007030 <pvPortMalloc+0x1a8>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006ea0:	f000 f934 	bl	800710c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ea4:	4b63      	ldr	r3, [pc, #396]	; (8007034 <pvPortMalloc+0x1ac>)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f040 80a7 	bne.w	8007000 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d02d      	beq.n	8006f14 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8006eb8:	2208      	movs	r2, #8
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d227      	bcs.n	8006f14 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8006ec4:	2208      	movs	r2, #8
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4413      	add	r3, r2
 8006eca:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f003 0307 	and.w	r3, r3, #7
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d021      	beq.n	8006f1a <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f023 0307 	bic.w	r3, r3, #7
 8006edc:	3308      	adds	r3, #8
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d214      	bcs.n	8006f0e <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f023 0307 	bic.w	r3, r3, #7
 8006eea:	3308      	adds	r3, #8
 8006eec:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f003 0307 	and.w	r3, r3, #7
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d010      	beq.n	8006f1a <pvPortMalloc+0x92>
        __asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	617b      	str	r3, [r7, #20]
    }
 8006f0a:	bf00      	nop
 8006f0c:	e7fe      	b.n	8006f0c <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f12:	e002      	b.n	8006f1a <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8006f14:	2300      	movs	r3, #0
 8006f16:	607b      	str	r3, [r7, #4]
 8006f18:	e000      	b.n	8006f1c <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f1a:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d06e      	beq.n	8007000 <pvPortMalloc+0x178>
 8006f22:	4b45      	ldr	r3, [pc, #276]	; (8007038 <pvPortMalloc+0x1b0>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d869      	bhi.n	8007000 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006f2c:	4b43      	ldr	r3, [pc, #268]	; (800703c <pvPortMalloc+0x1b4>)
 8006f2e:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006f30:	4b42      	ldr	r3, [pc, #264]	; (800703c <pvPortMalloc+0x1b4>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f36:	e004      	b.n	8006f42 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d903      	bls.n	8006f54 <pvPortMalloc+0xcc>
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1f1      	bne.n	8006f38 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006f54:	4b36      	ldr	r3, [pc, #216]	; (8007030 <pvPortMalloc+0x1a8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d050      	beq.n	8007000 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2208      	movs	r2, #8
 8006f64:	4413      	add	r3, r2
 8006f66:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	1ad2      	subs	r2, r2, r3
 8006f78:	2308      	movs	r3, #8
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d91f      	bls.n	8006fc0 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4413      	add	r3, r2
 8006f86:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	f003 0307 	and.w	r3, r3, #7
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00a      	beq.n	8006fa8 <pvPortMalloc+0x120>
        __asm volatile
 8006f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	613b      	str	r3, [r7, #16]
    }
 8006fa4:	bf00      	nop
 8006fa6:	e7fe      	b.n	8006fa6 <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	1ad2      	subs	r2, r2, r3
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006fba:	69b8      	ldr	r0, [r7, #24]
 8006fbc:	f000 f908 	bl	80071d0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fc0:	4b1d      	ldr	r3, [pc, #116]	; (8007038 <pvPortMalloc+0x1b0>)
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	4a1b      	ldr	r2, [pc, #108]	; (8007038 <pvPortMalloc+0x1b0>)
 8006fcc:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fce:	4b1a      	ldr	r3, [pc, #104]	; (8007038 <pvPortMalloc+0x1b0>)
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	4b1b      	ldr	r3, [pc, #108]	; (8007040 <pvPortMalloc+0x1b8>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d203      	bcs.n	8006fe2 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fda:	4b17      	ldr	r3, [pc, #92]	; (8007038 <pvPortMalloc+0x1b0>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a18      	ldr	r2, [pc, #96]	; (8007040 <pvPortMalloc+0x1b8>)
 8006fe0:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	685a      	ldr	r2, [r3, #4]
 8006fe6:	4b13      	ldr	r3, [pc, #76]	; (8007034 <pvPortMalloc+0x1ac>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	431a      	orrs	r2, r3
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006ff6:	4b13      	ldr	r3, [pc, #76]	; (8007044 <pvPortMalloc+0x1bc>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	4a11      	ldr	r2, [pc, #68]	; (8007044 <pvPortMalloc+0x1bc>)
 8006ffe:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007000:	f7fe fcee 	bl	80059e0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00a      	beq.n	8007024 <pvPortMalloc+0x19c>
        __asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	60fb      	str	r3, [r7, #12]
    }
 8007020:	bf00      	nop
 8007022:	e7fe      	b.n	8007022 <pvPortMalloc+0x19a>
    return pvReturn;
 8007024:	69fb      	ldr	r3, [r7, #28]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3728      	adds	r7, #40	; 0x28
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	20004060 	.word	0x20004060
 8007034:	20004074 	.word	0x20004074
 8007038:	20004064 	.word	0x20004064
 800703c:	20004058 	.word	0x20004058
 8007040:	20004068 	.word	0x20004068
 8007044:	2000406c 	.word	0x2000406c

08007048 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d04d      	beq.n	80070f6 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800705a:	2308      	movs	r3, #8
 800705c:	425b      	negs	r3, r3
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	4413      	add	r3, r2
 8007062:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	4b24      	ldr	r3, [pc, #144]	; (8007100 <vPortFree+0xb8>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4013      	ands	r3, r2
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10a      	bne.n	800708c <vPortFree+0x44>
        __asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	60fb      	str	r3, [r7, #12]
    }
 8007088:	bf00      	nop
 800708a:	e7fe      	b.n	800708a <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00a      	beq.n	80070aa <vPortFree+0x62>
        __asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	60bb      	str	r3, [r7, #8]
    }
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	4b14      	ldr	r3, [pc, #80]	; (8007100 <vPortFree+0xb8>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4013      	ands	r3, r2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d01e      	beq.n	80070f6 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d11a      	bne.n	80070f6 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	4b0e      	ldr	r3, [pc, #56]	; (8007100 <vPortFree+0xb8>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	43db      	mvns	r3, r3
 80070ca:	401a      	ands	r2, r3
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80070d0:	f7fe fc78 	bl	80059c4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	4b0a      	ldr	r3, [pc, #40]	; (8007104 <vPortFree+0xbc>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4413      	add	r3, r2
 80070de:	4a09      	ldr	r2, [pc, #36]	; (8007104 <vPortFree+0xbc>)
 80070e0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070e2:	6938      	ldr	r0, [r7, #16]
 80070e4:	f000 f874 	bl	80071d0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80070e8:	4b07      	ldr	r3, [pc, #28]	; (8007108 <vPortFree+0xc0>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3301      	adds	r3, #1
 80070ee:	4a06      	ldr	r2, [pc, #24]	; (8007108 <vPortFree+0xc0>)
 80070f0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80070f2:	f7fe fc75 	bl	80059e0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80070f6:	bf00      	nop
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	20004074 	.word	0x20004074
 8007104:	20004064 	.word	0x20004064
 8007108:	20004070 	.word	0x20004070

0800710c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007112:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007116:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007118:	4b27      	ldr	r3, [pc, #156]	; (80071b8 <prvHeapInit+0xac>)
 800711a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00c      	beq.n	8007140 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3307      	adds	r3, #7
 800712a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0307 	bic.w	r3, r3, #7
 8007132:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	4a1f      	ldr	r2, [pc, #124]	; (80071b8 <prvHeapInit+0xac>)
 800713c:	4413      	add	r3, r2
 800713e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007144:	4a1d      	ldr	r2, [pc, #116]	; (80071bc <prvHeapInit+0xb0>)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800714a:	4b1c      	ldr	r3, [pc, #112]	; (80071bc <prvHeapInit+0xb0>)
 800714c:	2200      	movs	r2, #0
 800714e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	4413      	add	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007158:	2208      	movs	r2, #8
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	1a9b      	subs	r3, r3, r2
 800715e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0307 	bic.w	r3, r3, #7
 8007166:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4a15      	ldr	r2, [pc, #84]	; (80071c0 <prvHeapInit+0xb4>)
 800716c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800716e:	4b14      	ldr	r3, [pc, #80]	; (80071c0 <prvHeapInit+0xb4>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2200      	movs	r2, #0
 8007174:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007176:	4b12      	ldr	r3, [pc, #72]	; (80071c0 <prvHeapInit+0xb4>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2200      	movs	r2, #0
 800717c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	1ad2      	subs	r2, r2, r3
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800718c:	4b0c      	ldr	r3, [pc, #48]	; (80071c0 <prvHeapInit+0xb4>)
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	4a0a      	ldr	r2, [pc, #40]	; (80071c4 <prvHeapInit+0xb8>)
 800719a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	4a09      	ldr	r2, [pc, #36]	; (80071c8 <prvHeapInit+0xbc>)
 80071a2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071a4:	4b09      	ldr	r3, [pc, #36]	; (80071cc <prvHeapInit+0xc0>)
 80071a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80071aa:	601a      	str	r2, [r3, #0]
}
 80071ac:	bf00      	nop
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	20000458 	.word	0x20000458
 80071bc:	20004058 	.word	0x20004058
 80071c0:	20004060 	.word	0x20004060
 80071c4:	20004068 	.word	0x20004068
 80071c8:	20004064 	.word	0x20004064
 80071cc:	20004074 	.word	0x20004074

080071d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071d8:	4b28      	ldr	r3, [pc, #160]	; (800727c <prvInsertBlockIntoFreeList+0xac>)
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	e002      	b.n	80071e4 <prvInsertBlockIntoFreeList+0x14>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d8f7      	bhi.n	80071de <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	4413      	add	r3, r2
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d108      	bne.n	8007212 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	441a      	add	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	441a      	add	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	429a      	cmp	r2, r3
 8007224:	d118      	bne.n	8007258 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	4b15      	ldr	r3, [pc, #84]	; (8007280 <prvInsertBlockIntoFreeList+0xb0>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	429a      	cmp	r2, r3
 8007230:	d00d      	beq.n	800724e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	441a      	add	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	e008      	b.n	8007260 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800724e:	4b0c      	ldr	r3, [pc, #48]	; (8007280 <prvInsertBlockIntoFreeList+0xb0>)
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	e003      	b.n	8007260 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	429a      	cmp	r2, r3
 8007266:	d002      	beq.n	800726e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800726e:	bf00      	nop
 8007270:	3714      	adds	r7, #20
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	20004058 	.word	0x20004058
 8007280:	20004060 	.word	0x20004060

08007284 <atoi>:
 8007284:	220a      	movs	r2, #10
 8007286:	2100      	movs	r1, #0
 8007288:	f000 b8c4 	b.w	8007414 <strtol>

0800728c <__errno>:
 800728c:	4b01      	ldr	r3, [pc, #4]	; (8007294 <__errno+0x8>)
 800728e:	6818      	ldr	r0, [r3, #0]
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	20000018 	.word	0x20000018

08007298 <__libc_init_array>:
 8007298:	b570      	push	{r4, r5, r6, lr}
 800729a:	4d0d      	ldr	r5, [pc, #52]	; (80072d0 <__libc_init_array+0x38>)
 800729c:	4c0d      	ldr	r4, [pc, #52]	; (80072d4 <__libc_init_array+0x3c>)
 800729e:	1b64      	subs	r4, r4, r5
 80072a0:	10a4      	asrs	r4, r4, #2
 80072a2:	2600      	movs	r6, #0
 80072a4:	42a6      	cmp	r6, r4
 80072a6:	d109      	bne.n	80072bc <__libc_init_array+0x24>
 80072a8:	4d0b      	ldr	r5, [pc, #44]	; (80072d8 <__libc_init_array+0x40>)
 80072aa:	4c0c      	ldr	r4, [pc, #48]	; (80072dc <__libc_init_array+0x44>)
 80072ac:	f000 f8bc 	bl	8007428 <_init>
 80072b0:	1b64      	subs	r4, r4, r5
 80072b2:	10a4      	asrs	r4, r4, #2
 80072b4:	2600      	movs	r6, #0
 80072b6:	42a6      	cmp	r6, r4
 80072b8:	d105      	bne.n	80072c6 <__libc_init_array+0x2e>
 80072ba:	bd70      	pop	{r4, r5, r6, pc}
 80072bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80072c0:	4798      	blx	r3
 80072c2:	3601      	adds	r6, #1
 80072c4:	e7ee      	b.n	80072a4 <__libc_init_array+0xc>
 80072c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ca:	4798      	blx	r3
 80072cc:	3601      	adds	r6, #1
 80072ce:	e7f2      	b.n	80072b6 <__libc_init_array+0x1e>
 80072d0:	08007e40 	.word	0x08007e40
 80072d4:	08007e40 	.word	0x08007e40
 80072d8:	08007e40 	.word	0x08007e40
 80072dc:	08007e44 	.word	0x08007e44

080072e0 <memcpy>:
 80072e0:	440a      	add	r2, r1
 80072e2:	4291      	cmp	r1, r2
 80072e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80072e8:	d100      	bne.n	80072ec <memcpy+0xc>
 80072ea:	4770      	bx	lr
 80072ec:	b510      	push	{r4, lr}
 80072ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072f6:	4291      	cmp	r1, r2
 80072f8:	d1f9      	bne.n	80072ee <memcpy+0xe>
 80072fa:	bd10      	pop	{r4, pc}

080072fc <memset>:
 80072fc:	4402      	add	r2, r0
 80072fe:	4603      	mov	r3, r0
 8007300:	4293      	cmp	r3, r2
 8007302:	d100      	bne.n	8007306 <memset+0xa>
 8007304:	4770      	bx	lr
 8007306:	f803 1b01 	strb.w	r1, [r3], #1
 800730a:	e7f9      	b.n	8007300 <memset+0x4>

0800730c <_strtol_l.isra.0>:
 800730c:	2b01      	cmp	r3, #1
 800730e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007312:	d001      	beq.n	8007318 <_strtol_l.isra.0+0xc>
 8007314:	2b24      	cmp	r3, #36	; 0x24
 8007316:	d906      	bls.n	8007326 <_strtol_l.isra.0+0x1a>
 8007318:	f7ff ffb8 	bl	800728c <__errno>
 800731c:	2316      	movs	r3, #22
 800731e:	6003      	str	r3, [r0, #0]
 8007320:	2000      	movs	r0, #0
 8007322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007326:	4f3a      	ldr	r7, [pc, #232]	; (8007410 <_strtol_l.isra.0+0x104>)
 8007328:	468e      	mov	lr, r1
 800732a:	4676      	mov	r6, lr
 800732c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007330:	5de5      	ldrb	r5, [r4, r7]
 8007332:	f015 0508 	ands.w	r5, r5, #8
 8007336:	d1f8      	bne.n	800732a <_strtol_l.isra.0+0x1e>
 8007338:	2c2d      	cmp	r4, #45	; 0x2d
 800733a:	d134      	bne.n	80073a6 <_strtol_l.isra.0+0x9a>
 800733c:	f89e 4000 	ldrb.w	r4, [lr]
 8007340:	f04f 0801 	mov.w	r8, #1
 8007344:	f106 0e02 	add.w	lr, r6, #2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d05c      	beq.n	8007406 <_strtol_l.isra.0+0xfa>
 800734c:	2b10      	cmp	r3, #16
 800734e:	d10c      	bne.n	800736a <_strtol_l.isra.0+0x5e>
 8007350:	2c30      	cmp	r4, #48	; 0x30
 8007352:	d10a      	bne.n	800736a <_strtol_l.isra.0+0x5e>
 8007354:	f89e 4000 	ldrb.w	r4, [lr]
 8007358:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800735c:	2c58      	cmp	r4, #88	; 0x58
 800735e:	d14d      	bne.n	80073fc <_strtol_l.isra.0+0xf0>
 8007360:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007364:	2310      	movs	r3, #16
 8007366:	f10e 0e02 	add.w	lr, lr, #2
 800736a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800736e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007372:	2600      	movs	r6, #0
 8007374:	fbbc f9f3 	udiv	r9, ip, r3
 8007378:	4635      	mov	r5, r6
 800737a:	fb03 ca19 	mls	sl, r3, r9, ip
 800737e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007382:	2f09      	cmp	r7, #9
 8007384:	d818      	bhi.n	80073b8 <_strtol_l.isra.0+0xac>
 8007386:	463c      	mov	r4, r7
 8007388:	42a3      	cmp	r3, r4
 800738a:	dd24      	ble.n	80073d6 <_strtol_l.isra.0+0xca>
 800738c:	2e00      	cmp	r6, #0
 800738e:	db1f      	blt.n	80073d0 <_strtol_l.isra.0+0xc4>
 8007390:	45a9      	cmp	r9, r5
 8007392:	d31d      	bcc.n	80073d0 <_strtol_l.isra.0+0xc4>
 8007394:	d101      	bne.n	800739a <_strtol_l.isra.0+0x8e>
 8007396:	45a2      	cmp	sl, r4
 8007398:	db1a      	blt.n	80073d0 <_strtol_l.isra.0+0xc4>
 800739a:	fb05 4503 	mla	r5, r5, r3, r4
 800739e:	2601      	movs	r6, #1
 80073a0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80073a4:	e7eb      	b.n	800737e <_strtol_l.isra.0+0x72>
 80073a6:	2c2b      	cmp	r4, #43	; 0x2b
 80073a8:	bf08      	it	eq
 80073aa:	f89e 4000 	ldrbeq.w	r4, [lr]
 80073ae:	46a8      	mov	r8, r5
 80073b0:	bf08      	it	eq
 80073b2:	f106 0e02 	addeq.w	lr, r6, #2
 80073b6:	e7c7      	b.n	8007348 <_strtol_l.isra.0+0x3c>
 80073b8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80073bc:	2f19      	cmp	r7, #25
 80073be:	d801      	bhi.n	80073c4 <_strtol_l.isra.0+0xb8>
 80073c0:	3c37      	subs	r4, #55	; 0x37
 80073c2:	e7e1      	b.n	8007388 <_strtol_l.isra.0+0x7c>
 80073c4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80073c8:	2f19      	cmp	r7, #25
 80073ca:	d804      	bhi.n	80073d6 <_strtol_l.isra.0+0xca>
 80073cc:	3c57      	subs	r4, #87	; 0x57
 80073ce:	e7db      	b.n	8007388 <_strtol_l.isra.0+0x7c>
 80073d0:	f04f 36ff 	mov.w	r6, #4294967295
 80073d4:	e7e4      	b.n	80073a0 <_strtol_l.isra.0+0x94>
 80073d6:	2e00      	cmp	r6, #0
 80073d8:	da05      	bge.n	80073e6 <_strtol_l.isra.0+0xda>
 80073da:	2322      	movs	r3, #34	; 0x22
 80073dc:	6003      	str	r3, [r0, #0]
 80073de:	4665      	mov	r5, ip
 80073e0:	b942      	cbnz	r2, 80073f4 <_strtol_l.isra.0+0xe8>
 80073e2:	4628      	mov	r0, r5
 80073e4:	e79d      	b.n	8007322 <_strtol_l.isra.0+0x16>
 80073e6:	f1b8 0f00 	cmp.w	r8, #0
 80073ea:	d000      	beq.n	80073ee <_strtol_l.isra.0+0xe2>
 80073ec:	426d      	negs	r5, r5
 80073ee:	2a00      	cmp	r2, #0
 80073f0:	d0f7      	beq.n	80073e2 <_strtol_l.isra.0+0xd6>
 80073f2:	b10e      	cbz	r6, 80073f8 <_strtol_l.isra.0+0xec>
 80073f4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80073f8:	6011      	str	r1, [r2, #0]
 80073fa:	e7f2      	b.n	80073e2 <_strtol_l.isra.0+0xd6>
 80073fc:	2430      	movs	r4, #48	; 0x30
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1b3      	bne.n	800736a <_strtol_l.isra.0+0x5e>
 8007402:	2308      	movs	r3, #8
 8007404:	e7b1      	b.n	800736a <_strtol_l.isra.0+0x5e>
 8007406:	2c30      	cmp	r4, #48	; 0x30
 8007408:	d0a4      	beq.n	8007354 <_strtol_l.isra.0+0x48>
 800740a:	230a      	movs	r3, #10
 800740c:	e7ad      	b.n	800736a <_strtol_l.isra.0+0x5e>
 800740e:	bf00      	nop
 8007410:	08007d35 	.word	0x08007d35

08007414 <strtol>:
 8007414:	4613      	mov	r3, r2
 8007416:	460a      	mov	r2, r1
 8007418:	4601      	mov	r1, r0
 800741a:	4802      	ldr	r0, [pc, #8]	; (8007424 <strtol+0x10>)
 800741c:	6800      	ldr	r0, [r0, #0]
 800741e:	f7ff bf75 	b.w	800730c <_strtol_l.isra.0>
 8007422:	bf00      	nop
 8007424:	20000018 	.word	0x20000018

08007428 <_init>:
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742a:	bf00      	nop
 800742c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742e:	bc08      	pop	{r3}
 8007430:	469e      	mov	lr, r3
 8007432:	4770      	bx	lr

08007434 <_fini>:
 8007434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007436:	bf00      	nop
 8007438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743a:	bc08      	pop	{r3}
 800743c:	469e      	mov	lr, r3
 800743e:	4770      	bx	lr
