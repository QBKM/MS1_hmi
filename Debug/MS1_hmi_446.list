
MS1_hmi_446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053fc  080053fc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080053fc  080053fc  000153fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005404  08005404  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005404  08005404  00015404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005408  08005408  00015408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800540c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003eb8  20000014  08005420  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003ecc  08005420  00023ecc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d30  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034fb  00000000  00000000  00038d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  0003c270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  0003d5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003609  00000000  00000000  0003e818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179db  00000000  00000000  00041e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da9ba  00000000  00000000  000597fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001341b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050fc  00000000  00000000  0013420c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080053a8 	.word	0x080053a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	080053a8 	.word	0x080053a8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <handler_leds>:
 *              commands
 * 
 * @param       parameters 
 * ************************************************************* **/
static void handler_leds(void* parameters)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
    STRUCT_LEDS_t led;

    while(1)
    {
        /* check for new command */
        if(xQueueReceive(QueueHandle_leds_cmd, &led, (TickType_t)0)) 
 8000510:	4bc3      	ldr	r3, [pc, #780]	; (8000820 <handler_leds+0x318>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f107 010c 	add.w	r1, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f002 fec4 	bl	80032a8 <xQueueReceive>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	f000 81d0 	beq.w	80008c8 <handler_leds+0x3c0>
        {
            switch (led.list)
 8000528:	7b7b      	ldrb	r3, [r7, #13]
 800052a:	2b04      	cmp	r3, #4
 800052c:	f200 81ce 	bhi.w	80008cc <handler_leds+0x3c4>
 8000530:	a201      	add	r2, pc, #4	; (adr r2, 8000538 <handler_leds+0x30>)
 8000532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000536:	bf00      	nop
 8000538:	0800054d 	.word	0x0800054d
 800053c:	08000605 	.word	0x08000605
 8000540:	080006bd 	.word	0x080006bd
 8000544:	08000765 	.word	0x08000765
 8000548:	08000805 	.word	0x08000805
            {
                /* LED 1 */
                case E_LIST_LED1 :
                    switch (led.cmd)
 800054c:	7b3b      	ldrb	r3, [r7, #12]
 800054e:	2b03      	cmp	r3, #3
 8000550:	d856      	bhi.n	8000600 <handler_leds+0xf8>
 8000552:	a201      	add	r2, pc, #4	; (adr r2, 8000558 <handler_leds+0x50>)
 8000554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000558:	08000569 	.word	0x08000569
 800055c:	0800058f 	.word	0x0800058f
 8000560:	080005b5 	.word	0x080005b5
 8000564:	080005db 	.word	0x080005db
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056e:	48ad      	ldr	r0, [pc, #692]	; (8000824 <handler_leds+0x31c>)
 8000570:	f001 f852 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800057a:	48aa      	ldr	r0, [pc, #680]	; (8000824 <handler_leds+0x31c>)
 800057c:	f001 f84c 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000586:	48a7      	ldr	r0, [pc, #668]	; (8000824 <handler_leds+0x31c>)
 8000588:	f001 f846 	bl	8001618 <HAL_GPIO_WritePin>
                            break;
 800058c:	e039      	b.n	8000602 <handler_leds+0xfa>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000594:	48a3      	ldr	r0, [pc, #652]	; (8000824 <handler_leds+0x31c>)
 8000596:	f001 f83f 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a0:	48a0      	ldr	r0, [pc, #640]	; (8000824 <handler_leds+0x31c>)
 80005a2:	f001 f839 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ac:	489d      	ldr	r0, [pc, #628]	; (8000824 <handler_leds+0x31c>)
 80005ae:	f001 f833 	bl	8001618 <HAL_GPIO_WritePin>
                            break;
 80005b2:	e026      	b.n	8000602 <handler_leds+0xfa>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ba:	489a      	ldr	r0, [pc, #616]	; (8000824 <handler_leds+0x31c>)
 80005bc:	f001 f82c 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c6:	4897      	ldr	r0, [pc, #604]	; (8000824 <handler_leds+0x31c>)
 80005c8:	f001 f826 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d2:	4894      	ldr	r0, [pc, #592]	; (8000824 <handler_leds+0x31c>)
 80005d4:	f001 f820 	bl	8001618 <HAL_GPIO_WritePin>
                            break;
 80005d8:	e013      	b.n	8000602 <handler_leds+0xfa>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e0:	4890      	ldr	r0, [pc, #576]	; (8000824 <handler_leds+0x31c>)
 80005e2:	f001 f819 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ec:	488d      	ldr	r0, [pc, #564]	; (8000824 <handler_leds+0x31c>)
 80005ee:	f001 f813 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f8:	488a      	ldr	r0, [pc, #552]	; (8000824 <handler_leds+0x31c>)
 80005fa:	f001 f80d 	bl	8001618 <HAL_GPIO_WritePin>
                            break;
 80005fe:	e000      	b.n	8000602 <handler_leds+0xfa>

                        default:
                            break;
 8000600:	bf00      	nop
                    }
                    break;
 8000602:	e164      	b.n	80008ce <handler_leds+0x3c6>

                /* LED 2 */
                case E_LIST_LED2 :
                    switch (led.cmd)
 8000604:	7b3b      	ldrb	r3, [r7, #12]
 8000606:	2b03      	cmp	r3, #3
 8000608:	d856      	bhi.n	80006b8 <handler_leds+0x1b0>
 800060a:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <handler_leds+0x108>)
 800060c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000610:	08000621 	.word	0x08000621
 8000614:	08000647 	.word	0x08000647
 8000618:	0800066d 	.word	0x0800066d
 800061c:	08000693 	.word	0x08000693
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000626:	487f      	ldr	r0, [pc, #508]	; (8000824 <handler_leds+0x31c>)
 8000628:	f000 fff6 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000632:	487c      	ldr	r0, [pc, #496]	; (8000824 <handler_leds+0x31c>)
 8000634:	f000 fff0 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063e:	487a      	ldr	r0, [pc, #488]	; (8000828 <handler_leds+0x320>)
 8000640:	f000 ffea 	bl	8001618 <HAL_GPIO_WritePin>
                            break;
 8000644:	e039      	b.n	80006ba <handler_leds+0x1b2>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064c:	4875      	ldr	r0, [pc, #468]	; (8000824 <handler_leds+0x31c>)
 800064e:	f000 ffe3 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000658:	4873      	ldr	r0, [pc, #460]	; (8000828 <handler_leds+0x320>)
 800065a:	f000 ffdd 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000664:	486f      	ldr	r0, [pc, #444]	; (8000824 <handler_leds+0x31c>)
 8000666:	f000 ffd7 	bl	8001618 <HAL_GPIO_WritePin>
                            break;
 800066a:	e026      	b.n	80006ba <handler_leds+0x1b2>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000672:	486c      	ldr	r0, [pc, #432]	; (8000824 <handler_leds+0x31c>)
 8000674:	f000 ffd0 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067e:	486a      	ldr	r0, [pc, #424]	; (8000828 <handler_leds+0x320>)
 8000680:	f000 ffca 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068a:	4866      	ldr	r0, [pc, #408]	; (8000824 <handler_leds+0x31c>)
 800068c:	f000 ffc4 	bl	8001618 <HAL_GPIO_WritePin>
                            break;
 8000690:	e013      	b.n	80006ba <handler_leds+0x1b2>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000698:	4862      	ldr	r0, [pc, #392]	; (8000824 <handler_leds+0x31c>)
 800069a:	f000 ffbd 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a4:	485f      	ldr	r0, [pc, #380]	; (8000824 <handler_leds+0x31c>)
 80006a6:	f000 ffb7 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b0:	485d      	ldr	r0, [pc, #372]	; (8000828 <handler_leds+0x320>)
 80006b2:	f000 ffb1 	bl	8001618 <HAL_GPIO_WritePin>
                            break;
 80006b6:	e000      	b.n	80006ba <handler_leds+0x1b2>

                        default:
                            break;
 80006b8:	bf00      	nop
                    }
                    break;
 80006ba:	e108      	b.n	80008ce <handler_leds+0x3c6>

                /* LED 3 */
                case E_LIST_LED3 :
                    switch (led.cmd)
 80006bc:	7b3b      	ldrb	r3, [r7, #12]
 80006be:	2b03      	cmp	r3, #3
 80006c0:	d84e      	bhi.n	8000760 <handler_leds+0x258>
 80006c2:	a201      	add	r2, pc, #4	; (adr r2, 80006c8 <handler_leds+0x1c0>)
 80006c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c8:	080006d9 	.word	0x080006d9
 80006cc:	080006fb 	.word	0x080006fb
 80006d0:	0800071d 	.word	0x0800071d
 80006d4:	0800073f 	.word	0x0800073f
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006de:	4852      	ldr	r0, [pc, #328]	; (8000828 <handler_leds+0x320>)
 80006e0:	f000 ff9a 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2180      	movs	r1, #128	; 0x80
 80006e8:	484f      	ldr	r0, [pc, #316]	; (8000828 <handler_leds+0x320>)
 80006ea:	f000 ff95 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2140      	movs	r1, #64	; 0x40
 80006f2:	484d      	ldr	r0, [pc, #308]	; (8000828 <handler_leds+0x320>)
 80006f4:	f000 ff90 	bl	8001618 <HAL_GPIO_WritePin>
                            break;
 80006f8:	e033      	b.n	8000762 <handler_leds+0x25a>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	484a      	ldr	r0, [pc, #296]	; (8000828 <handler_leds+0x320>)
 8000700:	f000 ff8a 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2140      	movs	r1, #64	; 0x40
 8000708:	4847      	ldr	r0, [pc, #284]	; (8000828 <handler_leds+0x320>)
 800070a:	f000 ff85 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_SET);
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000714:	4844      	ldr	r0, [pc, #272]	; (8000828 <handler_leds+0x320>)
 8000716:	f000 ff7f 	bl	8001618 <HAL_GPIO_WritePin>
                            break;
 800071a:	e022      	b.n	8000762 <handler_leds+0x25a>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000722:	4841      	ldr	r0, [pc, #260]	; (8000828 <handler_leds+0x320>)
 8000724:	f000 ff78 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2140      	movs	r1, #64	; 0x40
 800072c:	483e      	ldr	r0, [pc, #248]	; (8000828 <handler_leds+0x320>)
 800072e:	f000 ff73 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	483c      	ldr	r0, [pc, #240]	; (8000828 <handler_leds+0x320>)
 8000738:	f000 ff6e 	bl	8001618 <HAL_GPIO_WritePin>
                            break;
 800073c:	e011      	b.n	8000762 <handler_leds+0x25a>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000744:	4838      	ldr	r0, [pc, #224]	; (8000828 <handler_leds+0x320>)
 8000746:	f000 ff67 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	4836      	ldr	r0, [pc, #216]	; (8000828 <handler_leds+0x320>)
 8000750:	f000 ff62 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	2140      	movs	r1, #64	; 0x40
 8000758:	4833      	ldr	r0, [pc, #204]	; (8000828 <handler_leds+0x320>)
 800075a:	f000 ff5d 	bl	8001618 <HAL_GPIO_WritePin>
                            break;
 800075e:	e000      	b.n	8000762 <handler_leds+0x25a>

                        default:
                            break;
 8000760:	bf00      	nop
                    }
                    break;
 8000762:	e0b4      	b.n	80008ce <handler_leds+0x3c6>

                /* LED 4 */
                case E_LIST_LED4 :
                    switch (led.cmd)
 8000764:	7b3b      	ldrb	r3, [r7, #12]
 8000766:	2b03      	cmp	r3, #3
 8000768:	d84a      	bhi.n	8000800 <handler_leds+0x2f8>
 800076a:	a201      	add	r2, pc, #4	; (adr r2, 8000770 <handler_leds+0x268>)
 800076c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000770:	08000781 	.word	0x08000781
 8000774:	080007a1 	.word	0x080007a1
 8000778:	080007c1 	.word	0x080007c1
 800077c:	080007e1 	.word	0x080007e1
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2104      	movs	r1, #4
 8000784:	4828      	ldr	r0, [pc, #160]	; (8000828 <handler_leds+0x320>)
 8000786:	f000 ff47 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2102      	movs	r1, #2
 800078e:	4826      	ldr	r0, [pc, #152]	; (8000828 <handler_leds+0x320>)
 8000790:	f000 ff42 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2101      	movs	r1, #1
 8000798:	4823      	ldr	r0, [pc, #140]	; (8000828 <handler_leds+0x320>)
 800079a:	f000 ff3d 	bl	8001618 <HAL_GPIO_WritePin>
                            break;
 800079e:	e030      	b.n	8000802 <handler_leds+0x2fa>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2102      	movs	r1, #2
 80007a4:	4820      	ldr	r0, [pc, #128]	; (8000828 <handler_leds+0x320>)
 80007a6:	f000 ff37 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2101      	movs	r1, #1
 80007ae:	481e      	ldr	r0, [pc, #120]	; (8000828 <handler_leds+0x320>)
 80007b0:	f000 ff32 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2104      	movs	r1, #4
 80007b8:	481b      	ldr	r0, [pc, #108]	; (8000828 <handler_leds+0x320>)
 80007ba:	f000 ff2d 	bl	8001618 <HAL_GPIO_WritePin>
                            break;
 80007be:	e020      	b.n	8000802 <handler_leds+0x2fa>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2104      	movs	r1, #4
 80007c4:	4818      	ldr	r0, [pc, #96]	; (8000828 <handler_leds+0x320>)
 80007c6:	f000 ff27 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2101      	movs	r1, #1
 80007ce:	4816      	ldr	r0, [pc, #88]	; (8000828 <handler_leds+0x320>)
 80007d0:	f000 ff22 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2102      	movs	r1, #2
 80007d8:	4813      	ldr	r0, [pc, #76]	; (8000828 <handler_leds+0x320>)
 80007da:	f000 ff1d 	bl	8001618 <HAL_GPIO_WritePin>
                            break;
 80007de:	e010      	b.n	8000802 <handler_leds+0x2fa>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2104      	movs	r1, #4
 80007e4:	4810      	ldr	r0, [pc, #64]	; (8000828 <handler_leds+0x320>)
 80007e6:	f000 ff17 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2102      	movs	r1, #2
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <handler_leds+0x320>)
 80007f0:	f000 ff12 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2101      	movs	r1, #1
 80007f8:	480b      	ldr	r0, [pc, #44]	; (8000828 <handler_leds+0x320>)
 80007fa:	f000 ff0d 	bl	8001618 <HAL_GPIO_WritePin>
                            break;
 80007fe:	e000      	b.n	8000802 <handler_leds+0x2fa>

                        default:
                            break;
 8000800:	bf00      	nop
                    }
                    break;
 8000802:	e064      	b.n	80008ce <handler_leds+0x3c6>

                /* LED 5 */
                case E_LIST_LED5 :
                    switch (led.cmd)
 8000804:	7b3b      	ldrb	r3, [r7, #12]
 8000806:	2b03      	cmp	r3, #3
 8000808:	d85c      	bhi.n	80008c4 <handler_leds+0x3bc>
 800080a:	a201      	add	r2, pc, #4	; (adr r2, 8000810 <handler_leds+0x308>)
 800080c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000810:	0800082d 	.word	0x0800082d
 8000814:	08000853 	.word	0x08000853
 8000818:	08000879 	.word	0x08000879
 800081c:	0800089f 	.word	0x0800089f
 8000820:	20003d9c 	.word	0x20003d9c
 8000824:	40020000 	.word	0x40020000
 8000828:	40020800 	.word	0x40020800
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000832:	4827      	ldr	r0, [pc, #156]	; (80008d0 <handler_leds+0x3c8>)
 8000834:	f000 fef0 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083e:	4824      	ldr	r0, [pc, #144]	; (80008d0 <handler_leds+0x3c8>)
 8000840:	f000 feea 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084a:	4821      	ldr	r0, [pc, #132]	; (80008d0 <handler_leds+0x3c8>)
 800084c:	f000 fee4 	bl	8001618 <HAL_GPIO_WritePin>
                            break;
 8000850:	e039      	b.n	80008c6 <handler_leds+0x3be>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000858:	481d      	ldr	r0, [pc, #116]	; (80008d0 <handler_leds+0x3c8>)
 800085a:	f000 fedd 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000864:	481a      	ldr	r0, [pc, #104]	; (80008d0 <handler_leds+0x3c8>)
 8000866:	f000 fed7 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_SET);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000870:	4817      	ldr	r0, [pc, #92]	; (80008d0 <handler_leds+0x3c8>)
 8000872:	f000 fed1 	bl	8001618 <HAL_GPIO_WritePin>
                            break;
 8000876:	e026      	b.n	80008c6 <handler_leds+0x3be>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800087e:	4814      	ldr	r0, [pc, #80]	; (80008d0 <handler_leds+0x3c8>)
 8000880:	f000 feca 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088a:	4811      	ldr	r0, [pc, #68]	; (80008d0 <handler_leds+0x3c8>)
 800088c:	f000 fec4 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000896:	480e      	ldr	r0, [pc, #56]	; (80008d0 <handler_leds+0x3c8>)
 8000898:	f000 febe 	bl	8001618 <HAL_GPIO_WritePin>
                            break;
 800089c:	e013      	b.n	80008c6 <handler_leds+0x3be>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008a4:	480a      	ldr	r0, [pc, #40]	; (80008d0 <handler_leds+0x3c8>)
 80008a6:	f000 feb7 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b0:	4807      	ldr	r0, [pc, #28]	; (80008d0 <handler_leds+0x3c8>)
 80008b2:	f000 feb1 	bl	8001618 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <handler_leds+0x3c8>)
 80008be:	f000 feab 	bl	8001618 <HAL_GPIO_WritePin>
                            break;
 80008c2:	e000      	b.n	80008c6 <handler_leds+0x3be>

                        default:
                            break;
 80008c4:	bf00      	nop
                    }
                    break;
 80008c6:	e002      	b.n	80008ce <handler_leds+0x3c6>
            
                default:
                    break;
            }
        }
 80008c8:	bf00      	nop
 80008ca:	e621      	b.n	8000510 <handler_leds+0x8>
                    break;
 80008cc:	bf00      	nop
        if(xQueueReceive(QueueHandle_leds_cmd, &led, (TickType_t)0)) 
 80008ce:	e61f      	b.n	8000510 <handler_leds+0x8>
 80008d0:	40020800 	.word	0x40020800

080008d4 <API_LEDS_START>:
/** ************************************************************* *
 * @brief       init and start the payload task
 * 
 * ************************************************************* **/
void API_LEDS_START(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af02      	add	r7, sp, #8
    BaseType_t status;

    HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e0:	485a      	ldr	r0, [pc, #360]	; (8000a4c <API_LEDS_START+0x178>)
 80008e2:	f000 fe99 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ec:	4857      	ldr	r0, [pc, #348]	; (8000a4c <API_LEDS_START+0x178>)
 80008ee:	f000 fe93 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f8:	4854      	ldr	r0, [pc, #336]	; (8000a4c <API_LEDS_START+0x178>)
 80008fa:	f000 fe8d 	bl	8001618 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000904:	4851      	ldr	r0, [pc, #324]	; (8000a4c <API_LEDS_START+0x178>)
 8000906:	f000 fe87 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000910:	484e      	ldr	r0, [pc, #312]	; (8000a4c <API_LEDS_START+0x178>)
 8000912:	f000 fe81 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 7100 	mov.w	r1, #512	; 0x200
 800091c:	484c      	ldr	r0, [pc, #304]	; (8000a50 <API_LEDS_START+0x17c>)
 800091e:	f000 fe7b 	bl	8001618 <HAL_GPIO_WritePin>
    
    HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000928:	4849      	ldr	r0, [pc, #292]	; (8000a50 <API_LEDS_START+0x17c>)
 800092a:	f000 fe75 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2180      	movs	r1, #128	; 0x80
 8000932:	4847      	ldr	r0, [pc, #284]	; (8000a50 <API_LEDS_START+0x17c>)
 8000934:	f000 fe70 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2140      	movs	r1, #64	; 0x40
 800093c:	4844      	ldr	r0, [pc, #272]	; (8000a50 <API_LEDS_START+0x17c>)
 800093e:	f000 fe6b 	bl	8001618 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2104      	movs	r1, #4
 8000946:	4842      	ldr	r0, [pc, #264]	; (8000a50 <API_LEDS_START+0x17c>)
 8000948:	f000 fe66 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2102      	movs	r1, #2
 8000950:	483f      	ldr	r0, [pc, #252]	; (8000a50 <API_LEDS_START+0x17c>)
 8000952:	f000 fe61 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2101      	movs	r1, #1
 800095a:	483d      	ldr	r0, [pc, #244]	; (8000a50 <API_LEDS_START+0x17c>)
 800095c:	f000 fe5c 	bl	8001618 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000966:	483a      	ldr	r0, [pc, #232]	; (8000a50 <API_LEDS_START+0x17c>)
 8000968:	f000 fe56 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000972:	4837      	ldr	r0, [pc, #220]	; (8000a50 <API_LEDS_START+0x17c>)
 8000974:	f000 fe50 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097e:	4834      	ldr	r0, [pc, #208]	; (8000a50 <API_LEDS_START+0x17c>)
 8000980:	f000 fe4a 	bl	8001618 <HAL_GPIO_WritePin>


    /* */ 
    HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098a:	4830      	ldr	r0, [pc, #192]	; (8000a4c <API_LEDS_START+0x178>)
 800098c:	f000 fe44 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000996:	482d      	ldr	r0, [pc, #180]	; (8000a4c <API_LEDS_START+0x178>)
 8000998:	f000 fe3e 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a2:	482b      	ldr	r0, [pc, #172]	; (8000a50 <API_LEDS_START+0x17c>)
 80009a4:	f000 fe38 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	2104      	movs	r1, #4
 80009ac:	4828      	ldr	r0, [pc, #160]	; (8000a50 <API_LEDS_START+0x17c>)
 80009ae:	f000 fe33 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009b8:	4825      	ldr	r0, [pc, #148]	; (8000a50 <API_LEDS_START+0x17c>)
 80009ba:	f000 fe2d 	bl	8001618 <HAL_GPIO_WritePin>

    HAL_Delay(1000);
 80009be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c2:	f000 fb8f 	bl	80010e4 <HAL_Delay>

    HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009cc:	481f      	ldr	r0, [pc, #124]	; (8000a4c <API_LEDS_START+0x178>)
 80009ce:	f000 fe23 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d8:	481c      	ldr	r0, [pc, #112]	; (8000a4c <API_LEDS_START+0x178>)
 80009da:	f000 fe1d 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e4:	481a      	ldr	r0, [pc, #104]	; (8000a50 <API_LEDS_START+0x17c>)
 80009e6:	f000 fe17 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2104      	movs	r1, #4
 80009ee:	4818      	ldr	r0, [pc, #96]	; (8000a50 <API_LEDS_START+0x17c>)
 80009f0:	f000 fe12 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009fa:	4815      	ldr	r0, [pc, #84]	; (8000a50 <API_LEDS_START+0x17c>)
 80009fc:	f000 fe0c 	bl	8001618 <HAL_GPIO_WritePin>

    /* create the queues */
    QueueHandle_leds_cmd  = xQueueCreate(5, sizeof(ENUM_LEDS_CMD_t));
 8000a00:	2200      	movs	r2, #0
 8000a02:	2101      	movs	r1, #1
 8000a04:	2005      	movs	r0, #5
 8000a06:	f002 fa25 	bl	8002e54 <xQueueGenericCreate>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <API_LEDS_START+0x180>)
 8000a0e:	6013      	str	r3, [r2, #0]
    
    /* create the task */
    status = xTaskCreate(handler_leds, "task_leds", configMINIMAL_STACK_SIZE, NULL, TASK_PRIORITY_APP_LEDS, &TaskHandle_leds);
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <API_LEDS_START+0x184>)
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	2305      	movs	r3, #5
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2300      	movs	r3, #0
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	490f      	ldr	r1, [pc, #60]	; (8000a5c <API_LEDS_START+0x188>)
 8000a1e:	4810      	ldr	r0, [pc, #64]	; (8000a60 <API_LEDS_START+0x18c>)
 8000a20:	f002 fe90 	bl	8003744 <xTaskCreate>
 8000a24:	6078      	str	r0, [r7, #4]
    configASSERT(status == pdPASS);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d00a      	beq.n	8000a42 <API_LEDS_START+0x16e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a30:	f383 8811 	msr	BASEPRI, r3
 8000a34:	f3bf 8f6f 	isb	sy
 8000a38:	f3bf 8f4f 	dsb	sy
 8000a3c:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000a3e:	bf00      	nop
 8000a40:	e7fe      	b.n	8000a40 <API_LEDS_START+0x16c>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40020800 	.word	0x40020800
 8000a54:	20003d9c 	.word	0x20003d9c
 8000a58:	20003da0 	.word	0x20003da0
 8000a5c:	080053c0 	.word	0x080053c0
 8000a60:	08000509 	.word	0x08000509

08000a64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	4b42      	ldr	r3, [pc, #264]	; (8000b88 <MX_GPIO_Init+0x124>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a41      	ldr	r2, [pc, #260]	; (8000b88 <MX_GPIO_Init+0x124>)
 8000a84:	f043 0304 	orr.w	r3, r3, #4
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b3f      	ldr	r3, [pc, #252]	; (8000b88 <MX_GPIO_Init+0x124>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0304 	and.w	r3, r3, #4
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b3b      	ldr	r3, [pc, #236]	; (8000b88 <MX_GPIO_Init+0x124>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a3a      	ldr	r2, [pc, #232]	; (8000b88 <MX_GPIO_Init+0x124>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b38      	ldr	r3, [pc, #224]	; (8000b88 <MX_GPIO_Init+0x124>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b34      	ldr	r3, [pc, #208]	; (8000b88 <MX_GPIO_Init+0x124>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a33      	ldr	r2, [pc, #204]	; (8000b88 <MX_GPIO_Init+0x124>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <MX_GPIO_Init+0x124>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB5_B_Pin|RGB5_G_Pin|RGB5_R_Pin|RGB4_B_Pin
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f24e 31d7 	movw	r1, #58327	; 0xe3d7
 8000ad4:	482d      	ldr	r0, [pc, #180]	; (8000b8c <MX_GPIO_Init+0x128>)
 8000ad6:	f000 fd9f 	bl	8001618 <HAL_GPIO_WritePin>
                          |RGB4_G_Pin|RGB4_R_Pin|SSD1351_NRST_Pin|RGB3_B_Pin
                          |RGB3_G_Pin|RGB3_R_Pin|RGB2_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEQ_RST_Pin|SSD1351_DC_Pin|RGB2_G_Pin|RGB2_R_Pin
 8000ada:	2200      	movs	r2, #0
 8000adc:	f641 7141 	movw	r1, #8001	; 0x1f41
 8000ae0:	482b      	ldr	r0, [pc, #172]	; (8000b90 <MX_GPIO_Init+0x12c>)
 8000ae2:	f000 fd99 	bl	8001618 <HAL_GPIO_WritePin>
                          |RGB1_B_Pin|RGB1_G_Pin|RGB1_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BTN1_Pin|BTN2_Pin|BTN3_Pin|BTN4_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	21f0      	movs	r1, #240	; 0xf0
 8000aea:	482a      	ldr	r0, [pc, #168]	; (8000b94 <MX_GPIO_Init+0x130>)
 8000aec:	f000 fd94 	bl	8001618 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = RGB5_B_Pin|RGB5_G_Pin|RGB5_R_Pin|RGB4_B_Pin
 8000af0:	f24e 33c7 	movw	r3, #58311	; 0xe3c7
 8000af4:	60fb      	str	r3, [r7, #12]
                          |RGB4_G_Pin|RGB4_R_Pin|RGB3_B_Pin|RGB3_G_Pin
                          |RGB3_R_Pin|RGB2_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	4619      	mov	r1, r3
 8000b08:	4820      	ldr	r0, [pc, #128]	; (8000b8c <MX_GPIO_Init+0x128>)
 8000b0a:	f000 fbf1 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SEQ_RST_Pin|RGB2_G_Pin|RGB2_R_Pin|RGB1_B_Pin
 8000b0e:	f641 7301 	movw	r3, #7937	; 0x1f01
 8000b12:	60fb      	str	r3, [r7, #12]
                          |RGB1_G_Pin|RGB1_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4619      	mov	r1, r3
 8000b26:	481a      	ldr	r0, [pc, #104]	; (8000b90 <MX_GPIO_Init+0x12c>)
 8000b28:	f000 fbe2 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1351_DC_Pin;
 8000b2c:	2340      	movs	r3, #64	; 0x40
 8000b2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSD1351_DC_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	4619      	mov	r1, r3
 8000b42:	4813      	ldr	r0, [pc, #76]	; (8000b90 <MX_GPIO_Init+0x12c>)
 8000b44:	f000 fbd4 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1351_NRST_Pin;
 8000b48:	2310      	movs	r3, #16
 8000b4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSD1351_NRST_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480b      	ldr	r0, [pc, #44]	; (8000b8c <MX_GPIO_Init+0x128>)
 8000b60:	f000 fbc6 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin|BTN4_Pin;
 8000b64:	23f0      	movs	r3, #240	; 0xf0
 8000b66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4806      	ldr	r0, [pc, #24]	; (8000b94 <MX_GPIO_Init+0x130>)
 8000b7c:	f000 fbb8 	bl	80012f0 <HAL_GPIO_Init>

}
 8000b80:	bf00      	nop
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020800 	.word	0x40020800
 8000b90:	40020000 	.word	0x40020000
 8000b94:	40020400 	.word	0x40020400

08000b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9c:	f000 fa60 	bl	8001060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba0:	f000 f80c 	bl	8000bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba4:	f7ff ff5e 	bl	8000a64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ba8:	f000 f9be 	bl	8000f28 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000bac:	f000 f88c 	bl	8000cc8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  API_LEDS_START();
 8000bb0:	f7ff fe90 	bl	80008d4 <API_LEDS_START>

  vTaskStartScheduler();
 8000bb4:	f002 ff0c 	bl	80039d0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <main+0x20>
	...

08000bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b094      	sub	sp, #80	; 0x50
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	2234      	movs	r2, #52	; 0x34
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f004 fbe4 	bl	8005398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <SystemClock_Config+0xd4>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	4a29      	ldr	r2, [pc, #164]	; (8000c90 <SystemClock_Config+0xd4>)
 8000bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bee:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf0:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <SystemClock_Config+0xd4>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <SystemClock_Config+0xd8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c08:	4a22      	ldr	r2, [pc, #136]	; (8000c94 <SystemClock_Config+0xd8>)
 8000c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <SystemClock_Config+0xd8>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c20:	2301      	movs	r3, #1
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c24:	2310      	movs	r3, #16
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c30:	2310      	movs	r3, #16
 8000c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c34:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c38:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c42:	2302      	movs	r3, #2
 8000c44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 fffc 	bl	8001c48 <HAL_RCC_OscConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c56:	f000 f831 	bl	8000cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5a:	230f      	movs	r3, #15
 8000c5c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	2102      	movs	r1, #2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 fce8 	bl	800164c <HAL_RCC_ClockConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c82:	f000 f81b 	bl	8000cbc <Error_Handler>
  }
}
 8000c86:	bf00      	nop
 8000c88:	3750      	adds	r7, #80	; 0x50
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40007000 	.word	0x40007000

08000c98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d101      	bne.n	8000cae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000caa:	f000 f9fb 	bl	80010a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40014800 	.word	0x40014800

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000cce:	4a18      	ldr	r2, [pc, #96]	; (8000d30 <MX_SPI1_Init+0x68>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000cd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000cf4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cf8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000d14:	220a      	movs	r2, #10
 8000d16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000d1a:	f001 fa33 	bl	8002184 <HAL_SPI_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d24:	f7ff ffca 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20003da4 	.word	0x20003da4
 8000d30:	40013000 	.word	0x40013000

08000d34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_SPI_MspInit+0x84>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d12b      	bne.n	8000dae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SSD1351_NSS_Pin|SSD1351_SCK_Pin|SSD1351_MOSI_Pin;
 8000d8e:	23b0      	movs	r3, #176	; 0xb0
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d9e:	2305      	movs	r3, #5
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_SPI_MspInit+0x8c>)
 8000daa:	f000 faa1 	bl	80012f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40013000 	.word	0x40013000
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <HAL_MspInit+0x4c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_MspInit+0x4c>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_MspInit+0x4c>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800

08000e14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	; 0x30
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	201a      	movs	r0, #26
 8000e2a:	f000 fa37 	bl	800129c <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000e2e:	201a      	movs	r0, #26
 8000e30:	f000 fa50 	bl	80012d4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <HAL_InitTick+0xa0>)
 8000e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3c:	4a1d      	ldr	r2, [pc, #116]	; (8000eb4 <HAL_InitTick+0xa0>)
 8000e3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e42:	6453      	str	r3, [r2, #68]	; 0x44
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_InitTick+0xa0>)
 8000e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e50:	f107 0210 	add.w	r2, r7, #16
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fd10 	bl	8001880 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e60:	f000 fcfa 	bl	8001858 <HAL_RCC_GetPCLK2Freq>
 8000e64:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e68:	4a13      	ldr	r2, [pc, #76]	; (8000eb8 <HAL_InitTick+0xa4>)
 8000e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6e:	0c9b      	lsrs	r3, r3, #18
 8000e70:	3b01      	subs	r3, #1
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <HAL_InitTick+0xa8>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <HAL_InitTick+0xac>)
 8000e78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <HAL_InitTick+0xa8>)
 8000e7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e80:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <HAL_InitTick+0xa8>)
 8000e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e86:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_InitTick+0xa8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_InitTick+0xa8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000e94:	4809      	ldr	r0, [pc, #36]	; (8000ebc <HAL_InitTick+0xa8>)
 8000e96:	f001 f9fe 	bl	8002296 <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d104      	bne.n	8000eaa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000ea0:	4806      	ldr	r0, [pc, #24]	; (8000ebc <HAL_InitTick+0xa8>)
 8000ea2:	f001 fa51 	bl	8002348 <HAL_TIM_Base_Start_IT>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3730      	adds	r7, #48	; 0x30
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	431bde83 	.word	0x431bde83
 8000ebc:	20003dfc 	.word	0x20003dfc
 8000ec0:	40014800 	.word	0x40014800

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000ef6:	f001 fa97 	bl	8002428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20003dfc 	.word	0x20003dfc

08000f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <SystemInit+0x20>)
 8000f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <SystemInit+0x20>)
 8000f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <MX_USART2_UART_Init+0x50>)
 8000f30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f4e:	220c      	movs	r2, #12
 8000f50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f60:	f001 fc46 	bl	80027f0 <HAL_UART_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f6a:	f7ff fea7 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20003e44 	.word	0x20003e44
 8000f78:	40004400 	.word	0x40004400

08000f7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a19      	ldr	r2, [pc, #100]	; (8001000 <HAL_UART_MspInit+0x84>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d12b      	bne.n	8000ff6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_UART_MspInit+0x88>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a17      	ldr	r2, [pc, #92]	; (8001004 <HAL_UART_MspInit+0x88>)
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_UART_MspInit+0x88>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_UART_MspInit+0x88>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a10      	ldr	r2, [pc, #64]	; (8001004 <HAL_UART_MspInit+0x88>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_UART_MspInit+0x88>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <HAL_UART_MspInit+0x8c>)
 8000ff2:	f000 f97d 	bl	80012f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40004400 	.word	0x40004400
 8001004:	40023800 	.word	0x40023800
 8001008:	40020000 	.word	0x40020000

0800100c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800100c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001044 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001010:	480d      	ldr	r0, [pc, #52]	; (8001048 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001012:	490e      	ldr	r1, [pc, #56]	; (800104c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001014:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001028:	4c0b      	ldr	r4, [pc, #44]	; (8001058 <LoopFillZerobss+0x26>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001036:	f7ff ff65 	bl	8000f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103a:	f004 f97b 	bl	8005334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103e:	f7ff fdab 	bl	8000b98 <main>
  bx  lr    
 8001042:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001044:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800104c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001050:	0800540c 	.word	0x0800540c
  ldr r2, =_sbss
 8001054:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001058:	20003ecc 	.word	0x20003ecc

0800105c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC_IRQHandler>
	...

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <HAL_Init+0x40>)
 800106a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800106e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <HAL_Init+0x40>)
 8001076:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800107a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_Init+0x40>)
 8001082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001086:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001088:	2003      	movs	r0, #3
 800108a:	f000 f8fc 	bl	8001286 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108e:	200f      	movs	r0, #15
 8001090:	f7ff fec0 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001094:	f7ff fe96 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023c00 	.word	0x40023c00

080010a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x20>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_IncTick+0x24>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <HAL_IncTick+0x24>)
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000008 	.word	0x20000008
 80010c8:	20003e88 	.word	0x20003e88

080010cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return uwTick;
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <HAL_GetTick+0x14>)
 80010d2:	681b      	ldr	r3, [r3, #0]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20003e88 	.word	0x20003e88

080010e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ec:	f7ff ffee 	bl	80010cc <HAL_GetTick>
 80010f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fc:	d005      	beq.n	800110a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_Delay+0x44>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800110a:	bf00      	nop
 800110c:	f7ff ffde 	bl	80010cc <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	429a      	cmp	r2, r3
 800111a:	d8f7      	bhi.n	800110c <HAL_Delay+0x28>
  {
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008

0800112c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001148:	4013      	ands	r3, r2
 800114a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115e:	4a04      	ldr	r2, [pc, #16]	; (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	60d3      	str	r3, [r2, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <__NVIC_GetPriorityGrouping+0x18>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	f003 0307 	and.w	r3, r3, #7
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	db0b      	blt.n	80011ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f003 021f 	and.w	r2, r3, #31
 80011a8:	4907      	ldr	r1, [pc, #28]	; (80011c8 <__NVIC_EnableIRQ+0x38>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	2001      	movs	r0, #1
 80011b2:	fa00 f202 	lsl.w	r2, r0, r2
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000e100 	.word	0xe000e100

080011cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	db0a      	blt.n	80011f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	490c      	ldr	r1, [pc, #48]	; (8001218 <__NVIC_SetPriority+0x4c>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	0112      	lsls	r2, r2, #4
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	440b      	add	r3, r1
 80011f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f4:	e00a      	b.n	800120c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4908      	ldr	r1, [pc, #32]	; (800121c <__NVIC_SetPriority+0x50>)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	3b04      	subs	r3, #4
 8001204:	0112      	lsls	r2, r2, #4
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	440b      	add	r3, r1
 800120a:	761a      	strb	r2, [r3, #24]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000e100 	.word	0xe000e100
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f1c3 0307 	rsb	r3, r3, #7
 800123a:	2b04      	cmp	r3, #4
 800123c:	bf28      	it	cs
 800123e:	2304      	movcs	r3, #4
 8001240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3304      	adds	r3, #4
 8001246:	2b06      	cmp	r3, #6
 8001248:	d902      	bls.n	8001250 <NVIC_EncodePriority+0x30>
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3b03      	subs	r3, #3
 800124e:	e000      	b.n	8001252 <NVIC_EncodePriority+0x32>
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	f04f 32ff 	mov.w	r2, #4294967295
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	401a      	ands	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001268:	f04f 31ff 	mov.w	r1, #4294967295
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	43d9      	mvns	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	4313      	orrs	r3, r2
         );
}
 800127a:	4618      	mov	r0, r3
 800127c:	3724      	adds	r7, #36	; 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ff4c 	bl	800112c <__NVIC_SetPriorityGrouping>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ae:	f7ff ff61 	bl	8001174 <__NVIC_GetPriorityGrouping>
 80012b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	68b9      	ldr	r1, [r7, #8]
 80012b8:	6978      	ldr	r0, [r7, #20]
 80012ba:	f7ff ffb1 	bl	8001220 <NVIC_EncodePriority>
 80012be:	4602      	mov	r2, r0
 80012c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff80 	bl	80011cc <__NVIC_SetPriority>
}
 80012cc:	bf00      	nop
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff54 	bl	8001190 <__NVIC_EnableIRQ>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
 800130a:	e165      	b.n	80015d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800130c:	2201      	movs	r2, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	429a      	cmp	r2, r3
 8001326:	f040 8154 	bne.w	80015d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b01      	cmp	r3, #1
 8001334:	d005      	beq.n	8001342 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800133e:	2b02      	cmp	r3, #2
 8001340:	d130      	bne.n	80013a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2203      	movs	r2, #3
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001378:	2201      	movs	r2, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	f003 0201 	and.w	r2, r3, #1
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d017      	beq.n	80013e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d123      	bne.n	8001434 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	08da      	lsrs	r2, r3, #3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3208      	adds	r2, #8
 80013f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	220f      	movs	r2, #15
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	08da      	lsrs	r2, r3, #3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3208      	adds	r2, #8
 800142e:	69b9      	ldr	r1, [r7, #24]
 8001430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	2203      	movs	r2, #3
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0203 	and.w	r2, r3, #3
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 80ae 	beq.w	80015d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b5d      	ldr	r3, [pc, #372]	; (80015f0 <HAL_GPIO_Init+0x300>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	4a5c      	ldr	r2, [pc, #368]	; (80015f0 <HAL_GPIO_Init+0x300>)
 8001480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001484:	6453      	str	r3, [r2, #68]	; 0x44
 8001486:	4b5a      	ldr	r3, [pc, #360]	; (80015f0 <HAL_GPIO_Init+0x300>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001492:	4a58      	ldr	r2, [pc, #352]	; (80015f4 <HAL_GPIO_Init+0x304>)
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	3302      	adds	r3, #2
 800149a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	220f      	movs	r2, #15
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4f      	ldr	r2, [pc, #316]	; (80015f8 <HAL_GPIO_Init+0x308>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d025      	beq.n	800150a <HAL_GPIO_Init+0x21a>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4e      	ldr	r2, [pc, #312]	; (80015fc <HAL_GPIO_Init+0x30c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d01f      	beq.n	8001506 <HAL_GPIO_Init+0x216>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4d      	ldr	r2, [pc, #308]	; (8001600 <HAL_GPIO_Init+0x310>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d019      	beq.n	8001502 <HAL_GPIO_Init+0x212>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4c      	ldr	r2, [pc, #304]	; (8001604 <HAL_GPIO_Init+0x314>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d013      	beq.n	80014fe <HAL_GPIO_Init+0x20e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4b      	ldr	r2, [pc, #300]	; (8001608 <HAL_GPIO_Init+0x318>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d00d      	beq.n	80014fa <HAL_GPIO_Init+0x20a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4a      	ldr	r2, [pc, #296]	; (800160c <HAL_GPIO_Init+0x31c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d007      	beq.n	80014f6 <HAL_GPIO_Init+0x206>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a49      	ldr	r2, [pc, #292]	; (8001610 <HAL_GPIO_Init+0x320>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d101      	bne.n	80014f2 <HAL_GPIO_Init+0x202>
 80014ee:	2306      	movs	r3, #6
 80014f0:	e00c      	b.n	800150c <HAL_GPIO_Init+0x21c>
 80014f2:	2307      	movs	r3, #7
 80014f4:	e00a      	b.n	800150c <HAL_GPIO_Init+0x21c>
 80014f6:	2305      	movs	r3, #5
 80014f8:	e008      	b.n	800150c <HAL_GPIO_Init+0x21c>
 80014fa:	2304      	movs	r3, #4
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x21c>
 80014fe:	2303      	movs	r3, #3
 8001500:	e004      	b.n	800150c <HAL_GPIO_Init+0x21c>
 8001502:	2302      	movs	r3, #2
 8001504:	e002      	b.n	800150c <HAL_GPIO_Init+0x21c>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_GPIO_Init+0x21c>
 800150a:	2300      	movs	r3, #0
 800150c:	69fa      	ldr	r2, [r7, #28]
 800150e:	f002 0203 	and.w	r2, r2, #3
 8001512:	0092      	lsls	r2, r2, #2
 8001514:	4093      	lsls	r3, r2
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800151c:	4935      	ldr	r1, [pc, #212]	; (80015f4 <HAL_GPIO_Init+0x304>)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	3302      	adds	r3, #2
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800152a:	4b3a      	ldr	r3, [pc, #232]	; (8001614 <HAL_GPIO_Init+0x324>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800154e:	4a31      	ldr	r2, [pc, #196]	; (8001614 <HAL_GPIO_Init+0x324>)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001554:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <HAL_GPIO_Init+0x324>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001578:	4a26      	ldr	r2, [pc, #152]	; (8001614 <HAL_GPIO_Init+0x324>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800157e:	4b25      	ldr	r3, [pc, #148]	; (8001614 <HAL_GPIO_Init+0x324>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015a2:	4a1c      	ldr	r2, [pc, #112]	; (8001614 <HAL_GPIO_Init+0x324>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015a8:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <HAL_GPIO_Init+0x324>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015cc:	4a11      	ldr	r2, [pc, #68]	; (8001614 <HAL_GPIO_Init+0x324>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3301      	adds	r3, #1
 80015d6:	61fb      	str	r3, [r7, #28]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	2b0f      	cmp	r3, #15
 80015dc:	f67f ae96 	bls.w	800130c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40013800 	.word	0x40013800
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020400 	.word	0x40020400
 8001600:	40020800 	.word	0x40020800
 8001604:	40020c00 	.word	0x40020c00
 8001608:	40021000 	.word	0x40021000
 800160c:	40021400 	.word	0x40021400
 8001610:	40021800 	.word	0x40021800
 8001614:	40013c00 	.word	0x40013c00

08001618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	807b      	strh	r3, [r7, #2]
 8001624:	4613      	mov	r3, r2
 8001626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001628:	787b      	ldrb	r3, [r7, #1]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800162e:	887a      	ldrh	r2, [r7, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001634:	e003      	b.n	800163e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001636:	887b      	ldrh	r3, [r7, #2]
 8001638:	041a      	lsls	r2, r3, #16
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	619a      	str	r2, [r3, #24]
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e0cc      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001660:	4b68      	ldr	r3, [pc, #416]	; (8001804 <HAL_RCC_ClockConfig+0x1b8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 030f 	and.w	r3, r3, #15
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d90c      	bls.n	8001688 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166e:	4b65      	ldr	r3, [pc, #404]	; (8001804 <HAL_RCC_ClockConfig+0x1b8>)
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001676:	4b63      	ldr	r3, [pc, #396]	; (8001804 <HAL_RCC_ClockConfig+0x1b8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	d001      	beq.n	8001688 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0b8      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d020      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016a0:	4b59      	ldr	r3, [pc, #356]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	4a58      	ldr	r2, [pc, #352]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016b8:	4b53      	ldr	r3, [pc, #332]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	4a52      	ldr	r2, [pc, #328]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c4:	4b50      	ldr	r3, [pc, #320]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	494d      	ldr	r1, [pc, #308]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d044      	beq.n	800176c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d107      	bne.n	80016fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ea:	4b47      	ldr	r3, [pc, #284]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d119      	bne.n	800172a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e07f      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d003      	beq.n	800170a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001706:	2b03      	cmp	r3, #3
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170a:	4b3f      	ldr	r3, [pc, #252]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d109      	bne.n	800172a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e06f      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171a:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e067      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800172a:	4b37      	ldr	r3, [pc, #220]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f023 0203 	bic.w	r2, r3, #3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	4934      	ldr	r1, [pc, #208]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	4313      	orrs	r3, r2
 800173a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800173c:	f7ff fcc6 	bl	80010cc <HAL_GetTick>
 8001740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001742:	e00a      	b.n	800175a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001744:	f7ff fcc2 	bl	80010cc <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e04f      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 020c 	and.w	r2, r3, #12
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	429a      	cmp	r2, r3
 800176a:	d1eb      	bne.n	8001744 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800176c:	4b25      	ldr	r3, [pc, #148]	; (8001804 <HAL_RCC_ClockConfig+0x1b8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 030f 	and.w	r3, r3, #15
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d20c      	bcs.n	8001794 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177a:	4b22      	ldr	r3, [pc, #136]	; (8001804 <HAL_RCC_ClockConfig+0x1b8>)
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <HAL_RCC_ClockConfig+0x1b8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e032      	b.n	80017fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4916      	ldr	r1, [pc, #88]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d009      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	490e      	ldr	r1, [pc, #56]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017d2:	f000 f887 	bl	80018e4 <HAL_RCC_GetSysClockFreq>
 80017d6:	4602      	mov	r2, r0
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	490a      	ldr	r1, [pc, #40]	; (800180c <HAL_RCC_ClockConfig+0x1c0>)
 80017e4:	5ccb      	ldrb	r3, [r1, r3]
 80017e6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ea:	4a09      	ldr	r2, [pc, #36]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_RCC_ClockConfig+0x1c8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fb0e 	bl	8000e14 <HAL_InitTick>

  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023c00 	.word	0x40023c00
 8001808:	40023800 	.word	0x40023800
 800180c:	080053e4 	.word	0x080053e4
 8001810:	20000000 	.word	0x20000000
 8001814:	20000004 	.word	0x20000004

08001818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <HAL_RCC_GetHCLKFreq+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000000 	.word	0x20000000

08001830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001834:	f7ff fff0 	bl	8001818 <HAL_RCC_GetHCLKFreq>
 8001838:	4602      	mov	r2, r0
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	0a9b      	lsrs	r3, r3, #10
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	4903      	ldr	r1, [pc, #12]	; (8001854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001846:	5ccb      	ldrb	r3, [r1, r3]
 8001848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800184c:	4618      	mov	r0, r3
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40023800 	.word	0x40023800
 8001854:	080053f4 	.word	0x080053f4

08001858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800185c:	f7ff ffdc 	bl	8001818 <HAL_RCC_GetHCLKFreq>
 8001860:	4602      	mov	r2, r0
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	0b5b      	lsrs	r3, r3, #13
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	4903      	ldr	r1, [pc, #12]	; (800187c <HAL_RCC_GetPCLK2Freq+0x24>)
 800186e:	5ccb      	ldrb	r3, [r1, r3]
 8001870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001874:	4618      	mov	r0, r3
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40023800 	.word	0x40023800
 800187c:	080053f4 	.word	0x080053f4

08001880 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	220f      	movs	r2, #15
 800188e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_RCC_GetClockConfig+0x5c>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 0203 	and.w	r2, r3, #3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_RCC_GetClockConfig+0x5c>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_RCC_GetClockConfig+0x5c>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_RCC_GetClockConfig+0x5c>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	08db      	lsrs	r3, r3, #3
 80018ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018c2:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <HAL_RCC_GetClockConfig+0x60>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 020f 	and.w	r2, r3, #15
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	601a      	str	r2, [r3, #0]
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40023c00 	.word	0x40023c00

080018e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e8:	b088      	sub	sp, #32
 80018ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001900:	4bce      	ldr	r3, [pc, #824]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b0c      	cmp	r3, #12
 800190a:	f200 818d 	bhi.w	8001c28 <HAL_RCC_GetSysClockFreq+0x344>
 800190e:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <HAL_RCC_GetSysClockFreq+0x30>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	08001949 	.word	0x08001949
 8001918:	08001c29 	.word	0x08001c29
 800191c:	08001c29 	.word	0x08001c29
 8001920:	08001c29 	.word	0x08001c29
 8001924:	0800194f 	.word	0x0800194f
 8001928:	08001c29 	.word	0x08001c29
 800192c:	08001c29 	.word	0x08001c29
 8001930:	08001c29 	.word	0x08001c29
 8001934:	08001955 	.word	0x08001955
 8001938:	08001c29 	.word	0x08001c29
 800193c:	08001c29 	.word	0x08001c29
 8001940:	08001c29 	.word	0x08001c29
 8001944:	08001ac9 	.word	0x08001ac9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001948:	4bbd      	ldr	r3, [pc, #756]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x35c>)
 800194a:	61bb      	str	r3, [r7, #24]
       break;
 800194c:	e16f      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800194e:	4bbd      	ldr	r3, [pc, #756]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x360>)
 8001950:	61bb      	str	r3, [r7, #24]
      break;
 8001952:	e16c      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001954:	4bb9      	ldr	r3, [pc, #740]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800195c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800195e:	4bb7      	ldr	r3, [pc, #732]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d053      	beq.n	8001a12 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800196a:	4bb4      	ldr	r3, [pc, #720]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x358>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	099b      	lsrs	r3, r3, #6
 8001970:	461a      	mov	r2, r3
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	f240 10ff 	movw	r0, #511	; 0x1ff
 800197a:	f04f 0100 	mov.w	r1, #0
 800197e:	ea02 0400 	and.w	r4, r2, r0
 8001982:	603c      	str	r4, [r7, #0]
 8001984:	400b      	ands	r3, r1
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	e9d7 4500 	ldrd	r4, r5, [r7]
 800198c:	4620      	mov	r0, r4
 800198e:	4629      	mov	r1, r5
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	014b      	lsls	r3, r1, #5
 800199a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800199e:	0142      	lsls	r2, r0, #5
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	4623      	mov	r3, r4
 80019a6:	1ac0      	subs	r0, r0, r3
 80019a8:	462b      	mov	r3, r5
 80019aa:	eb61 0103 	sbc.w	r1, r1, r3
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	018b      	lsls	r3, r1, #6
 80019b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019bc:	0182      	lsls	r2, r0, #6
 80019be:	1a12      	subs	r2, r2, r0
 80019c0:	eb63 0301 	sbc.w	r3, r3, r1
 80019c4:	f04f 0000 	mov.w	r0, #0
 80019c8:	f04f 0100 	mov.w	r1, #0
 80019cc:	00d9      	lsls	r1, r3, #3
 80019ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019d2:	00d0      	lsls	r0, r2, #3
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4621      	mov	r1, r4
 80019da:	1852      	adds	r2, r2, r1
 80019dc:	4629      	mov	r1, r5
 80019de:	eb43 0101 	adc.w	r1, r3, r1
 80019e2:	460b      	mov	r3, r1
 80019e4:	f04f 0000 	mov.w	r0, #0
 80019e8:	f04f 0100 	mov.w	r1, #0
 80019ec:	0259      	lsls	r1, r3, #9
 80019ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80019f2:	0250      	lsls	r0, r2, #9
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	461a      	mov	r2, r3
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	f7fe fc04 	bl	8000210 <__aeabi_uldivmod>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	e04c      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a12:	4b8a      	ldr	r3, [pc, #552]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	099b      	lsrs	r3, r3, #6
 8001a18:	461a      	mov	r2, r3
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a22:	f04f 0100 	mov.w	r1, #0
 8001a26:	ea02 0a00 	and.w	sl, r2, r0
 8001a2a:	ea03 0b01 	and.w	fp, r3, r1
 8001a2e:	4650      	mov	r0, sl
 8001a30:	4659      	mov	r1, fp
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	014b      	lsls	r3, r1, #5
 8001a3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a40:	0142      	lsls	r2, r0, #5
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	ebb0 000a 	subs.w	r0, r0, sl
 8001a4a:	eb61 010b 	sbc.w	r1, r1, fp
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	018b      	lsls	r3, r1, #6
 8001a58:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a5c:	0182      	lsls	r2, r0, #6
 8001a5e:	1a12      	subs	r2, r2, r0
 8001a60:	eb63 0301 	sbc.w	r3, r3, r1
 8001a64:	f04f 0000 	mov.w	r0, #0
 8001a68:	f04f 0100 	mov.w	r1, #0
 8001a6c:	00d9      	lsls	r1, r3, #3
 8001a6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a72:	00d0      	lsls	r0, r2, #3
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	eb12 020a 	adds.w	r2, r2, sl
 8001a7c:	eb43 030b 	adc.w	r3, r3, fp
 8001a80:	f04f 0000 	mov.w	r0, #0
 8001a84:	f04f 0100 	mov.w	r1, #0
 8001a88:	0299      	lsls	r1, r3, #10
 8001a8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a8e:	0290      	lsls	r0, r2, #10
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	f7fe fbb6 	bl	8000210 <__aeabi_uldivmod>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aac:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	0c1b      	lsrs	r3, r3, #16
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac4:	61bb      	str	r3, [r7, #24]
      break;
 8001ac6:	e0b2      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ac8:	4b5c      	ldr	r3, [pc, #368]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ad0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ad2:	4b5a      	ldr	r3, [pc, #360]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d04d      	beq.n	8001b7a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ade:	4b57      	ldr	r3, [pc, #348]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	099b      	lsrs	r3, r3, #6
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001aee:	f04f 0100 	mov.w	r1, #0
 8001af2:	ea02 0800 	and.w	r8, r2, r0
 8001af6:	ea03 0901 	and.w	r9, r3, r1
 8001afa:	4640      	mov	r0, r8
 8001afc:	4649      	mov	r1, r9
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	014b      	lsls	r3, r1, #5
 8001b08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b0c:	0142      	lsls	r2, r0, #5
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	ebb0 0008 	subs.w	r0, r0, r8
 8001b16:	eb61 0109 	sbc.w	r1, r1, r9
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	018b      	lsls	r3, r1, #6
 8001b24:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b28:	0182      	lsls	r2, r0, #6
 8001b2a:	1a12      	subs	r2, r2, r0
 8001b2c:	eb63 0301 	sbc.w	r3, r3, r1
 8001b30:	f04f 0000 	mov.w	r0, #0
 8001b34:	f04f 0100 	mov.w	r1, #0
 8001b38:	00d9      	lsls	r1, r3, #3
 8001b3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b3e:	00d0      	lsls	r0, r2, #3
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	eb12 0208 	adds.w	r2, r2, r8
 8001b48:	eb43 0309 	adc.w	r3, r3, r9
 8001b4c:	f04f 0000 	mov.w	r0, #0
 8001b50:	f04f 0100 	mov.w	r1, #0
 8001b54:	0259      	lsls	r1, r3, #9
 8001b56:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b5a:	0250      	lsls	r0, r2, #9
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	461a      	mov	r2, r3
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	f7fe fb50 	bl	8000210 <__aeabi_uldivmod>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4613      	mov	r3, r2
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	e04a      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7a:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	099b      	lsrs	r3, r3, #6
 8001b80:	461a      	mov	r2, r3
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b8a:	f04f 0100 	mov.w	r1, #0
 8001b8e:	ea02 0400 	and.w	r4, r2, r0
 8001b92:	ea03 0501 	and.w	r5, r3, r1
 8001b96:	4620      	mov	r0, r4
 8001b98:	4629      	mov	r1, r5
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	014b      	lsls	r3, r1, #5
 8001ba4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ba8:	0142      	lsls	r2, r0, #5
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	1b00      	subs	r0, r0, r4
 8001bb0:	eb61 0105 	sbc.w	r1, r1, r5
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	018b      	lsls	r3, r1, #6
 8001bbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bc2:	0182      	lsls	r2, r0, #6
 8001bc4:	1a12      	subs	r2, r2, r0
 8001bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8001bca:	f04f 0000 	mov.w	r0, #0
 8001bce:	f04f 0100 	mov.w	r1, #0
 8001bd2:	00d9      	lsls	r1, r3, #3
 8001bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bd8:	00d0      	lsls	r0, r2, #3
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	1912      	adds	r2, r2, r4
 8001be0:	eb45 0303 	adc.w	r3, r5, r3
 8001be4:	f04f 0000 	mov.w	r0, #0
 8001be8:	f04f 0100 	mov.w	r1, #0
 8001bec:	0299      	lsls	r1, r3, #10
 8001bee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001bf2:	0290      	lsls	r0, r2, #10
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	f7fe fb04 	bl	8000210 <__aeabi_uldivmod>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	0f1b      	lsrs	r3, r3, #28
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	61bb      	str	r3, [r7, #24]
      break;
 8001c26:	e002      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001c2a:	61bb      	str	r3, [r7, #24]
      break;
 8001c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c2e:	69bb      	ldr	r3, [r7, #24]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3720      	adds	r7, #32
 8001c34:	46bd      	mov	sp, r7
 8001c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	00f42400 	.word	0x00f42400
 8001c44:	007a1200 	.word	0x007a1200

08001c48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e28d      	b.n	8002176 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8083 	beq.w	8001d6e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c68:	4b94      	ldr	r3, [pc, #592]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d019      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c74:	4b91      	ldr	r3, [pc, #580]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d106      	bne.n	8001c8e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c80:	4b8e      	ldr	r3, [pc, #568]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c8c:	d00c      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8e:	4b8b      	ldr	r3, [pc, #556]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c96:	2b0c      	cmp	r3, #12
 8001c98:	d112      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c9a:	4b88      	ldr	r3, [pc, #544]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ca6:	d10b      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	4b84      	ldr	r3, [pc, #528]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d05b      	beq.n	8001d6c <HAL_RCC_OscConfig+0x124>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d157      	bne.n	8001d6c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e25a      	b.n	8002176 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc8:	d106      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x90>
 8001cca:	4b7c      	ldr	r3, [pc, #496]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a7b      	ldr	r2, [pc, #492]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e01d      	b.n	8001d14 <HAL_RCC_OscConfig+0xcc>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0xb4>
 8001ce2:	4b76      	ldr	r3, [pc, #472]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a75      	ldr	r2, [pc, #468]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b73      	ldr	r3, [pc, #460]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a72      	ldr	r2, [pc, #456]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCC_OscConfig+0xcc>
 8001cfc:	4b6f      	ldr	r3, [pc, #444]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a6e      	ldr	r2, [pc, #440]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b6c      	ldr	r3, [pc, #432]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a6b      	ldr	r2, [pc, #428]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d013      	beq.n	8001d44 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7ff f9d6 	bl	80010cc <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d24:	f7ff f9d2 	bl	80010cc <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	; 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e21f      	b.n	8002176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d36:	4b61      	ldr	r3, [pc, #388]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0xdc>
 8001d42:	e014      	b.n	8001d6e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7ff f9c2 	bl	80010cc <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff f9be 	bl	80010cc <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e20b      	b.n	8002176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5e:	4b57      	ldr	r3, [pc, #348]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x104>
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d06f      	beq.n	8001e5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d7a:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d017      	beq.n	8001db6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d86:	4b4d      	ldr	r3, [pc, #308]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d105      	bne.n	8001d9e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d92:	4b4a      	ldr	r3, [pc, #296]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00b      	beq.n	8001db6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001da6:	2b0c      	cmp	r3, #12
 8001da8:	d11c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001daa:	4b44      	ldr	r3, [pc, #272]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d116      	bne.n	8001de4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db6:	4b41      	ldr	r3, [pc, #260]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <HAL_RCC_OscConfig+0x186>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d001      	beq.n	8001dce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e1d3      	b.n	8002176 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dce:	4b3b      	ldr	r3, [pc, #236]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4937      	ldr	r1, [pc, #220]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de2:	e03a      	b.n	8001e5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d020      	beq.n	8001e2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dec:	4b34      	ldr	r3, [pc, #208]	; (8001ec0 <HAL_RCC_OscConfig+0x278>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df2:	f7ff f96b 	bl	80010cc <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfa:	f7ff f967 	bl	80010cc <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e1b4      	b.n	8002176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0c:	4b2b      	ldr	r3, [pc, #172]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e18:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4925      	ldr	r1, [pc, #148]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	600b      	str	r3, [r1, #0]
 8001e2c:	e015      	b.n	8001e5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e2e:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_RCC_OscConfig+0x278>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7ff f94a 	bl	80010cc <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e3c:	f7ff f946 	bl	80010cc <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e193      	b.n	8002176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d036      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d016      	beq.n	8001e9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_RCC_OscConfig+0x27c>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e74:	f7ff f92a 	bl	80010cc <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e7c:	f7ff f926 	bl	80010cc <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e173      	b.n	8002176 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x234>
 8001e9a:	e01b      	b.n	8001ed4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_RCC_OscConfig+0x27c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea2:	f7ff f913 	bl	80010cc <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea8:	e00e      	b.n	8001ec8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eaa:	f7ff f90f 	bl	80010cc <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d907      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e15c      	b.n	8002176 <HAL_RCC_OscConfig+0x52e>
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	42470000 	.word	0x42470000
 8001ec4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec8:	4b8a      	ldr	r3, [pc, #552]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 8001eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1ea      	bne.n	8001eaa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 8097 	beq.w	8002010 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee6:	4b83      	ldr	r3, [pc, #524]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10f      	bne.n	8001f12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	4b7f      	ldr	r3, [pc, #508]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a7e      	ldr	r2, [pc, #504]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
 8001f02:	4b7c      	ldr	r3, [pc, #496]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f12:	4b79      	ldr	r3, [pc, #484]	; (80020f8 <HAL_RCC_OscConfig+0x4b0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d118      	bne.n	8001f50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f1e:	4b76      	ldr	r3, [pc, #472]	; (80020f8 <HAL_RCC_OscConfig+0x4b0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a75      	ldr	r2, [pc, #468]	; (80020f8 <HAL_RCC_OscConfig+0x4b0>)
 8001f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f2a:	f7ff f8cf 	bl	80010cc <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f32:	f7ff f8cb 	bl	80010cc <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e118      	b.n	8002176 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	4b6c      	ldr	r3, [pc, #432]	; (80020f8 <HAL_RCC_OscConfig+0x4b0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d106      	bne.n	8001f66 <HAL_RCC_OscConfig+0x31e>
 8001f58:	4b66      	ldr	r3, [pc, #408]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5c:	4a65      	ldr	r2, [pc, #404]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6713      	str	r3, [r2, #112]	; 0x70
 8001f64:	e01c      	b.n	8001fa0 <HAL_RCC_OscConfig+0x358>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b05      	cmp	r3, #5
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x340>
 8001f6e:	4b61      	ldr	r3, [pc, #388]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f72:	4a60      	ldr	r2, [pc, #384]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7a:	4b5e      	ldr	r3, [pc, #376]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7e:	4a5d      	ldr	r2, [pc, #372]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6713      	str	r3, [r2, #112]	; 0x70
 8001f86:	e00b      	b.n	8001fa0 <HAL_RCC_OscConfig+0x358>
 8001f88:	4b5a      	ldr	r3, [pc, #360]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 8001f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8c:	4a59      	ldr	r2, [pc, #356]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	6713      	str	r3, [r2, #112]	; 0x70
 8001f94:	4b57      	ldr	r3, [pc, #348]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 8001f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f98:	4a56      	ldr	r2, [pc, #344]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 8001f9a:	f023 0304 	bic.w	r3, r3, #4
 8001f9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d015      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7ff f890 	bl	80010cc <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb0:	f7ff f88c 	bl	80010cc <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e0d7      	b.n	8002176 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc6:	4b4b      	ldr	r3, [pc, #300]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0ee      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x368>
 8001fd2:	e014      	b.n	8001ffe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd4:	f7ff f87a 	bl	80010cc <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fda:	e00a      	b.n	8001ff2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fdc:	f7ff f876 	bl	80010cc <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e0c1      	b.n	8002176 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff2:	4b40      	ldr	r3, [pc, #256]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1ee      	bne.n	8001fdc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ffe:	7dfb      	ldrb	r3, [r7, #23]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d105      	bne.n	8002010 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002004:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	4a3a      	ldr	r2, [pc, #232]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 800200a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80ad 	beq.w	8002174 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800201a:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b08      	cmp	r3, #8
 8002024:	d060      	beq.n	80020e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d145      	bne.n	80020ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202e:	4b33      	ldr	r3, [pc, #204]	; (80020fc <HAL_RCC_OscConfig+0x4b4>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7ff f84a 	bl	80010cc <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800203c:	f7ff f846 	bl	80010cc <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e093      	b.n	8002176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204e:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69da      	ldr	r2, [r3, #28]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	019b      	lsls	r3, r3, #6
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	085b      	lsrs	r3, r3, #1
 8002072:	3b01      	subs	r3, #1
 8002074:	041b      	lsls	r3, r3, #16
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	061b      	lsls	r3, r3, #24
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	071b      	lsls	r3, r3, #28
 8002086:	491b      	ldr	r1, [pc, #108]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800208c:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_RCC_OscConfig+0x4b4>)
 800208e:	2201      	movs	r2, #1
 8002090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002092:	f7ff f81b 	bl	80010cc <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209a:	f7ff f817 	bl	80010cc <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e064      	b.n	8002176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x452>
 80020b8:	e05c      	b.n	8002174 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <HAL_RCC_OscConfig+0x4b4>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7ff f804 	bl	80010cc <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c8:	f7ff f800 	bl	80010cc <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e04d      	b.n	8002176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_RCC_OscConfig+0x4ac>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x480>
 80020e6:	e045      	b.n	8002174 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e040      	b.n	8002176 <HAL_RCC_OscConfig+0x52e>
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40007000 	.word	0x40007000
 80020fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002100:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <HAL_RCC_OscConfig+0x538>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d030      	beq.n	8002170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d129      	bne.n	8002170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d122      	bne.n	8002170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002130:	4013      	ands	r3, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002138:	4293      	cmp	r3, r2
 800213a:	d119      	bne.n	8002170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	3b01      	subs	r3, #1
 800214a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800214c:	429a      	cmp	r2, r3
 800214e:	d10f      	bne.n	8002170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	d107      	bne.n	8002170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e000      	b.n	8002176 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800

08002184 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e07b      	b.n	800228e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	2b00      	cmp	r3, #0
 800219c:	d108      	bne.n	80021b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021a6:	d009      	beq.n	80021bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	61da      	str	r2, [r3, #28]
 80021ae:	e005      	b.n	80021bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7fe fdac 	bl	8000d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002240:	ea42 0103 	orr.w	r1, r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	0c1b      	lsrs	r3, r3, #16
 800225a:	f003 0104 	and.w	r1, r3, #4
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	f003 0210 	and.w	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	69da      	ldr	r2, [r3, #28]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800227c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e041      	b.n	800232c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d106      	bne.n	80022c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f839 	bl	8002334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2202      	movs	r2, #2
 80022c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3304      	adds	r3, #4
 80022d2:	4619      	mov	r1, r3
 80022d4:	4610      	mov	r0, r2
 80022d6:	f000 f9d7 	bl	8002688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b01      	cmp	r3, #1
 800235a:	d001      	beq.n	8002360 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e04e      	b.n	80023fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a23      	ldr	r2, [pc, #140]	; (800240c <HAL_TIM_Base_Start_IT+0xc4>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d022      	beq.n	80023c8 <HAL_TIM_Base_Start_IT+0x80>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800238a:	d01d      	beq.n	80023c8 <HAL_TIM_Base_Start_IT+0x80>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1f      	ldr	r2, [pc, #124]	; (8002410 <HAL_TIM_Base_Start_IT+0xc8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d018      	beq.n	80023c8 <HAL_TIM_Base_Start_IT+0x80>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a1e      	ldr	r2, [pc, #120]	; (8002414 <HAL_TIM_Base_Start_IT+0xcc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d013      	beq.n	80023c8 <HAL_TIM_Base_Start_IT+0x80>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a1c      	ldr	r2, [pc, #112]	; (8002418 <HAL_TIM_Base_Start_IT+0xd0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00e      	beq.n	80023c8 <HAL_TIM_Base_Start_IT+0x80>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a1b      	ldr	r2, [pc, #108]	; (800241c <HAL_TIM_Base_Start_IT+0xd4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d009      	beq.n	80023c8 <HAL_TIM_Base_Start_IT+0x80>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a19      	ldr	r2, [pc, #100]	; (8002420 <HAL_TIM_Base_Start_IT+0xd8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d004      	beq.n	80023c8 <HAL_TIM_Base_Start_IT+0x80>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a18      	ldr	r2, [pc, #96]	; (8002424 <HAL_TIM_Base_Start_IT+0xdc>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d111      	bne.n	80023ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d010      	beq.n	80023fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0201 	orr.w	r2, r2, #1
 80023e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ea:	e007      	b.n	80023fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40010000 	.word	0x40010000
 8002410:	40000400 	.word	0x40000400
 8002414:	40000800 	.word	0x40000800
 8002418:	40000c00 	.word	0x40000c00
 800241c:	40010400 	.word	0x40010400
 8002420:	40014000 	.word	0x40014000
 8002424:	40001800 	.word	0x40001800

08002428 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b02      	cmp	r3, #2
 800243c:	d122      	bne.n	8002484 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b02      	cmp	r3, #2
 800244a:	d11b      	bne.n	8002484 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0202 	mvn.w	r2, #2
 8002454:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f8ee 	bl	800264c <HAL_TIM_IC_CaptureCallback>
 8002470:	e005      	b.n	800247e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f8e0 	bl	8002638 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f8f1 	bl	8002660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b04      	cmp	r3, #4
 8002490:	d122      	bne.n	80024d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b04      	cmp	r3, #4
 800249e:	d11b      	bne.n	80024d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0204 	mvn.w	r2, #4
 80024a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2202      	movs	r2, #2
 80024ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f8c4 	bl	800264c <HAL_TIM_IC_CaptureCallback>
 80024c4:	e005      	b.n	80024d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f8b6 	bl	8002638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f8c7 	bl	8002660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d122      	bne.n	800252c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d11b      	bne.n	800252c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0208 	mvn.w	r2, #8
 80024fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2204      	movs	r2, #4
 8002502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f89a 	bl	800264c <HAL_TIM_IC_CaptureCallback>
 8002518:	e005      	b.n	8002526 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f88c 	bl	8002638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f89d 	bl	8002660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	2b10      	cmp	r3, #16
 8002538:	d122      	bne.n	8002580 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b10      	cmp	r3, #16
 8002546:	d11b      	bne.n	8002580 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0210 	mvn.w	r2, #16
 8002550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2208      	movs	r2, #8
 8002556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f870 	bl	800264c <HAL_TIM_IC_CaptureCallback>
 800256c:	e005      	b.n	800257a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f862 	bl	8002638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f873 	bl	8002660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b01      	cmp	r3, #1
 800258c:	d10e      	bne.n	80025ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b01      	cmp	r3, #1
 800259a:	d107      	bne.n	80025ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0201 	mvn.w	r2, #1
 80025a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fe fb76 	bl	8000c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b6:	2b80      	cmp	r3, #128	; 0x80
 80025b8:	d10e      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c4:	2b80      	cmp	r3, #128	; 0x80
 80025c6:	d107      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f902 	bl	80027dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e2:	2b40      	cmp	r3, #64	; 0x40
 80025e4:	d10e      	bne.n	8002604 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f0:	2b40      	cmp	r3, #64	; 0x40
 80025f2:	d107      	bne.n	8002604 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f838 	bl	8002674 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b20      	cmp	r3, #32
 8002610:	d10e      	bne.n	8002630 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	2b20      	cmp	r3, #32
 800261e:	d107      	bne.n	8002630 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0220 	mvn.w	r2, #32
 8002628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f8cc 	bl	80027c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a40      	ldr	r2, [pc, #256]	; (800279c <TIM_Base_SetConfig+0x114>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d013      	beq.n	80026c8 <TIM_Base_SetConfig+0x40>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a6:	d00f      	beq.n	80026c8 <TIM_Base_SetConfig+0x40>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a3d      	ldr	r2, [pc, #244]	; (80027a0 <TIM_Base_SetConfig+0x118>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d00b      	beq.n	80026c8 <TIM_Base_SetConfig+0x40>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a3c      	ldr	r2, [pc, #240]	; (80027a4 <TIM_Base_SetConfig+0x11c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d007      	beq.n	80026c8 <TIM_Base_SetConfig+0x40>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a3b      	ldr	r2, [pc, #236]	; (80027a8 <TIM_Base_SetConfig+0x120>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d003      	beq.n	80026c8 <TIM_Base_SetConfig+0x40>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a3a      	ldr	r2, [pc, #232]	; (80027ac <TIM_Base_SetConfig+0x124>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d108      	bne.n	80026da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a2f      	ldr	r2, [pc, #188]	; (800279c <TIM_Base_SetConfig+0x114>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d02b      	beq.n	800273a <TIM_Base_SetConfig+0xb2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e8:	d027      	beq.n	800273a <TIM_Base_SetConfig+0xb2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a2c      	ldr	r2, [pc, #176]	; (80027a0 <TIM_Base_SetConfig+0x118>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d023      	beq.n	800273a <TIM_Base_SetConfig+0xb2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a2b      	ldr	r2, [pc, #172]	; (80027a4 <TIM_Base_SetConfig+0x11c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d01f      	beq.n	800273a <TIM_Base_SetConfig+0xb2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a2a      	ldr	r2, [pc, #168]	; (80027a8 <TIM_Base_SetConfig+0x120>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d01b      	beq.n	800273a <TIM_Base_SetConfig+0xb2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a29      	ldr	r2, [pc, #164]	; (80027ac <TIM_Base_SetConfig+0x124>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d017      	beq.n	800273a <TIM_Base_SetConfig+0xb2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a28      	ldr	r2, [pc, #160]	; (80027b0 <TIM_Base_SetConfig+0x128>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d013      	beq.n	800273a <TIM_Base_SetConfig+0xb2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <TIM_Base_SetConfig+0x12c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d00f      	beq.n	800273a <TIM_Base_SetConfig+0xb2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a26      	ldr	r2, [pc, #152]	; (80027b8 <TIM_Base_SetConfig+0x130>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00b      	beq.n	800273a <TIM_Base_SetConfig+0xb2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a25      	ldr	r2, [pc, #148]	; (80027bc <TIM_Base_SetConfig+0x134>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d007      	beq.n	800273a <TIM_Base_SetConfig+0xb2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a24      	ldr	r2, [pc, #144]	; (80027c0 <TIM_Base_SetConfig+0x138>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d003      	beq.n	800273a <TIM_Base_SetConfig+0xb2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a23      	ldr	r2, [pc, #140]	; (80027c4 <TIM_Base_SetConfig+0x13c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d108      	bne.n	800274c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4313      	orrs	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	4313      	orrs	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a0a      	ldr	r2, [pc, #40]	; (800279c <TIM_Base_SetConfig+0x114>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d003      	beq.n	8002780 <TIM_Base_SetConfig+0xf8>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a0c      	ldr	r2, [pc, #48]	; (80027ac <TIM_Base_SetConfig+0x124>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d103      	bne.n	8002788 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	615a      	str	r2, [r3, #20]
}
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40010000 	.word	0x40010000
 80027a0:	40000400 	.word	0x40000400
 80027a4:	40000800 	.word	0x40000800
 80027a8:	40000c00 	.word	0x40000c00
 80027ac:	40010400 	.word	0x40010400
 80027b0:	40014000 	.word	0x40014000
 80027b4:	40014400 	.word	0x40014400
 80027b8:	40014800 	.word	0x40014800
 80027bc:	40001800 	.word	0x40001800
 80027c0:	40001c00 	.word	0x40001c00
 80027c4:	40002000 	.word	0x40002000

080027c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e03f      	b.n	8002882 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d106      	bne.n	800281c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fe fbb0 	bl	8000f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2224      	movs	r2, #36	; 0x24
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002832:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f829 	bl	800288c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002848:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002858:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002868:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800288c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002890:	b09f      	sub	sp, #124	; 0x7c
 8002892:	af00      	add	r7, sp, #0
 8002894:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a2:	68d9      	ldr	r1, [r3, #12]
 80028a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	ea40 0301 	orr.w	r3, r0, r1
 80028ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	431a      	orrs	r2, r3
 80028be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80028c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028d0:	f021 010c 	bic.w	r1, r1, #12
 80028d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028da:	430b      	orrs	r3, r1
 80028dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ea:	6999      	ldr	r1, [r3, #24]
 80028ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	ea40 0301 	orr.w	r3, r0, r1
 80028f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4bc5      	ldr	r3, [pc, #788]	; (8002c10 <UART_SetConfig+0x384>)
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d004      	beq.n	800290a <UART_SetConfig+0x7e>
 8002900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4bc3      	ldr	r3, [pc, #780]	; (8002c14 <UART_SetConfig+0x388>)
 8002906:	429a      	cmp	r2, r3
 8002908:	d103      	bne.n	8002912 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800290a:	f7fe ffa5 	bl	8001858 <HAL_RCC_GetPCLK2Freq>
 800290e:	6778      	str	r0, [r7, #116]	; 0x74
 8002910:	e002      	b.n	8002918 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002912:	f7fe ff8d 	bl	8001830 <HAL_RCC_GetPCLK1Freq>
 8002916:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002920:	f040 80b6 	bne.w	8002a90 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002926:	461c      	mov	r4, r3
 8002928:	f04f 0500 	mov.w	r5, #0
 800292c:	4622      	mov	r2, r4
 800292e:	462b      	mov	r3, r5
 8002930:	1891      	adds	r1, r2, r2
 8002932:	6439      	str	r1, [r7, #64]	; 0x40
 8002934:	415b      	adcs	r3, r3
 8002936:	647b      	str	r3, [r7, #68]	; 0x44
 8002938:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800293c:	1912      	adds	r2, r2, r4
 800293e:	eb45 0303 	adc.w	r3, r5, r3
 8002942:	f04f 0000 	mov.w	r0, #0
 8002946:	f04f 0100 	mov.w	r1, #0
 800294a:	00d9      	lsls	r1, r3, #3
 800294c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002950:	00d0      	lsls	r0, r2, #3
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	1911      	adds	r1, r2, r4
 8002958:	6639      	str	r1, [r7, #96]	; 0x60
 800295a:	416b      	adcs	r3, r5
 800295c:	667b      	str	r3, [r7, #100]	; 0x64
 800295e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	461a      	mov	r2, r3
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	1891      	adds	r1, r2, r2
 800296a:	63b9      	str	r1, [r7, #56]	; 0x38
 800296c:	415b      	adcs	r3, r3
 800296e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002970:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002974:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002978:	f7fd fc4a 	bl	8000210 <__aeabi_uldivmod>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4ba5      	ldr	r3, [pc, #660]	; (8002c18 <UART_SetConfig+0x38c>)
 8002982:	fba3 2302 	umull	r2, r3, r3, r2
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	011e      	lsls	r6, r3, #4
 800298a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800298c:	461c      	mov	r4, r3
 800298e:	f04f 0500 	mov.w	r5, #0
 8002992:	4622      	mov	r2, r4
 8002994:	462b      	mov	r3, r5
 8002996:	1891      	adds	r1, r2, r2
 8002998:	6339      	str	r1, [r7, #48]	; 0x30
 800299a:	415b      	adcs	r3, r3
 800299c:	637b      	str	r3, [r7, #52]	; 0x34
 800299e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80029a2:	1912      	adds	r2, r2, r4
 80029a4:	eb45 0303 	adc.w	r3, r5, r3
 80029a8:	f04f 0000 	mov.w	r0, #0
 80029ac:	f04f 0100 	mov.w	r1, #0
 80029b0:	00d9      	lsls	r1, r3, #3
 80029b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029b6:	00d0      	lsls	r0, r2, #3
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	1911      	adds	r1, r2, r4
 80029be:	65b9      	str	r1, [r7, #88]	; 0x58
 80029c0:	416b      	adcs	r3, r5
 80029c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	461a      	mov	r2, r3
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	1891      	adds	r1, r2, r2
 80029d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80029d2:	415b      	adcs	r3, r3
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80029de:	f7fd fc17 	bl	8000210 <__aeabi_uldivmod>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4b8c      	ldr	r3, [pc, #560]	; (8002c18 <UART_SetConfig+0x38c>)
 80029e8:	fba3 1302 	umull	r1, r3, r3, r2
 80029ec:	095b      	lsrs	r3, r3, #5
 80029ee:	2164      	movs	r1, #100	; 0x64
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	3332      	adds	r3, #50	; 0x32
 80029fa:	4a87      	ldr	r2, [pc, #540]	; (8002c18 <UART_SetConfig+0x38c>)
 80029fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002a00:	095b      	lsrs	r3, r3, #5
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a08:	441e      	add	r6, r3
 8002a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f04f 0100 	mov.w	r1, #0
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	1894      	adds	r4, r2, r2
 8002a18:	623c      	str	r4, [r7, #32]
 8002a1a:	415b      	adcs	r3, r3
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a22:	1812      	adds	r2, r2, r0
 8002a24:	eb41 0303 	adc.w	r3, r1, r3
 8002a28:	f04f 0400 	mov.w	r4, #0
 8002a2c:	f04f 0500 	mov.w	r5, #0
 8002a30:	00dd      	lsls	r5, r3, #3
 8002a32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a36:	00d4      	lsls	r4, r2, #3
 8002a38:	4622      	mov	r2, r4
 8002a3a:	462b      	mov	r3, r5
 8002a3c:	1814      	adds	r4, r2, r0
 8002a3e:	653c      	str	r4, [r7, #80]	; 0x50
 8002a40:	414b      	adcs	r3, r1
 8002a42:	657b      	str	r3, [r7, #84]	; 0x54
 8002a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	1891      	adds	r1, r2, r2
 8002a50:	61b9      	str	r1, [r7, #24]
 8002a52:	415b      	adcs	r3, r3
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002a5e:	f7fd fbd7 	bl	8000210 <__aeabi_uldivmod>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4b6c      	ldr	r3, [pc, #432]	; (8002c18 <UART_SetConfig+0x38c>)
 8002a68:	fba3 1302 	umull	r1, r3, r3, r2
 8002a6c:	095b      	lsrs	r3, r3, #5
 8002a6e:	2164      	movs	r1, #100	; 0x64
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	3332      	adds	r3, #50	; 0x32
 8002a7a:	4a67      	ldr	r2, [pc, #412]	; (8002c18 <UART_SetConfig+0x38c>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	f003 0207 	and.w	r2, r3, #7
 8002a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4432      	add	r2, r6
 8002a8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a8e:	e0b9      	b.n	8002c04 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a92:	461c      	mov	r4, r3
 8002a94:	f04f 0500 	mov.w	r5, #0
 8002a98:	4622      	mov	r2, r4
 8002a9a:	462b      	mov	r3, r5
 8002a9c:	1891      	adds	r1, r2, r2
 8002a9e:	6139      	str	r1, [r7, #16]
 8002aa0:	415b      	adcs	r3, r3
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002aa8:	1912      	adds	r2, r2, r4
 8002aaa:	eb45 0303 	adc.w	r3, r5, r3
 8002aae:	f04f 0000 	mov.w	r0, #0
 8002ab2:	f04f 0100 	mov.w	r1, #0
 8002ab6:	00d9      	lsls	r1, r3, #3
 8002ab8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002abc:	00d0      	lsls	r0, r2, #3
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	eb12 0804 	adds.w	r8, r2, r4
 8002ac6:	eb43 0905 	adc.w	r9, r3, r5
 8002aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f04f 0100 	mov.w	r1, #0
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	008b      	lsls	r3, r1, #2
 8002ade:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ae2:	0082      	lsls	r2, r0, #2
 8002ae4:	4640      	mov	r0, r8
 8002ae6:	4649      	mov	r1, r9
 8002ae8:	f7fd fb92 	bl	8000210 <__aeabi_uldivmod>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4b49      	ldr	r3, [pc, #292]	; (8002c18 <UART_SetConfig+0x38c>)
 8002af2:	fba3 2302 	umull	r2, r3, r3, r2
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	011e      	lsls	r6, r3, #4
 8002afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002afc:	4618      	mov	r0, r3
 8002afe:	f04f 0100 	mov.w	r1, #0
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	1894      	adds	r4, r2, r2
 8002b08:	60bc      	str	r4, [r7, #8]
 8002b0a:	415b      	adcs	r3, r3
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b12:	1812      	adds	r2, r2, r0
 8002b14:	eb41 0303 	adc.w	r3, r1, r3
 8002b18:	f04f 0400 	mov.w	r4, #0
 8002b1c:	f04f 0500 	mov.w	r5, #0
 8002b20:	00dd      	lsls	r5, r3, #3
 8002b22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b26:	00d4      	lsls	r4, r2, #3
 8002b28:	4622      	mov	r2, r4
 8002b2a:	462b      	mov	r3, r5
 8002b2c:	1814      	adds	r4, r2, r0
 8002b2e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002b30:	414b      	adcs	r3, r1
 8002b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f04f 0100 	mov.w	r1, #0
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	008b      	lsls	r3, r1, #2
 8002b48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b4c:	0082      	lsls	r2, r0, #2
 8002b4e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002b52:	f7fd fb5d 	bl	8000210 <__aeabi_uldivmod>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4b2f      	ldr	r3, [pc, #188]	; (8002c18 <UART_SetConfig+0x38c>)
 8002b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	2164      	movs	r1, #100	; 0x64
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	3332      	adds	r3, #50	; 0x32
 8002b6e:	4a2a      	ldr	r2, [pc, #168]	; (8002c18 <UART_SetConfig+0x38c>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b7a:	441e      	add	r6, r3
 8002b7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f04f 0100 	mov.w	r1, #0
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	1894      	adds	r4, r2, r2
 8002b8a:	603c      	str	r4, [r7, #0]
 8002b8c:	415b      	adcs	r3, r3
 8002b8e:	607b      	str	r3, [r7, #4]
 8002b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b94:	1812      	adds	r2, r2, r0
 8002b96:	eb41 0303 	adc.w	r3, r1, r3
 8002b9a:	f04f 0400 	mov.w	r4, #0
 8002b9e:	f04f 0500 	mov.w	r5, #0
 8002ba2:	00dd      	lsls	r5, r3, #3
 8002ba4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ba8:	00d4      	lsls	r4, r2, #3
 8002baa:	4622      	mov	r2, r4
 8002bac:	462b      	mov	r3, r5
 8002bae:	eb12 0a00 	adds.w	sl, r2, r0
 8002bb2:	eb43 0b01 	adc.w	fp, r3, r1
 8002bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f04f 0100 	mov.w	r1, #0
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	008b      	lsls	r3, r1, #2
 8002bca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002bce:	0082      	lsls	r2, r0, #2
 8002bd0:	4650      	mov	r0, sl
 8002bd2:	4659      	mov	r1, fp
 8002bd4:	f7fd fb1c 	bl	8000210 <__aeabi_uldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <UART_SetConfig+0x38c>)
 8002bde:	fba3 1302 	umull	r1, r3, r3, r2
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	2164      	movs	r1, #100	; 0x64
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	3332      	adds	r3, #50	; 0x32
 8002bf0:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <UART_SetConfig+0x38c>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	f003 020f 	and.w	r2, r3, #15
 8002bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4432      	add	r2, r6
 8002c02:	609a      	str	r2, [r3, #8]
}
 8002c04:	bf00      	nop
 8002c06:	377c      	adds	r7, #124	; 0x7c
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c0e:	bf00      	nop
 8002c10:	40011000 	.word	0x40011000
 8002c14:	40011400 	.word	0x40011400
 8002c18:	51eb851f 	.word	0x51eb851f

08002c1c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f103 0208 	add.w	r2, r3, #8
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f04f 32ff 	mov.w	r2, #4294967295
 8002c34:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f103 0208 	add.w	r2, r3, #8
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f103 0208 	add.w	r2, r3, #8
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002c76:	b480      	push	{r7}
 8002c78:	b085      	sub	sp, #20
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	601a      	str	r2, [r3, #0]
}
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b085      	sub	sp, #20
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd4:	d103      	bne.n	8002cde <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	e00c      	b.n	8002cf8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3308      	adds	r3, #8
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	e002      	b.n	8002cec <vListInsert+0x2e>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d2f6      	bcs.n	8002ce6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	601a      	str	r2, [r3, #0]
}
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6892      	ldr	r2, [r2, #8]
 8002d46:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6852      	ldr	r2, [r2, #4]
 8002d50:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d103      	bne.n	8002d64 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	1e5a      	subs	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <xQueueGenericReset+0x2a>
        __asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	60bb      	str	r3, [r7, #8]
    }
 8002daa:	bf00      	nop
 8002dac:	e7fe      	b.n	8002dac <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002dae:	f001 ff5b 	bl	8004c68 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	68f9      	ldr	r1, [r7, #12]
 8002dbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	441a      	add	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	3b01      	subs	r3, #1
 8002de0:	68f9      	ldr	r1, [r7, #12]
 8002de2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	441a      	add	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	22ff      	movs	r2, #255	; 0xff
 8002df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	22ff      	movs	r2, #255	; 0xff
 8002dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d114      	bne.n	8002e2e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01a      	beq.n	8002e42 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	3310      	adds	r3, #16
 8002e10:	4618      	mov	r0, r3
 8002e12:	f001 f84d 	bl	8003eb0 <xTaskRemoveFromEventList>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d012      	beq.n	8002e42 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <xQueueGenericReset+0xcc>)
 8002e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	e009      	b.n	8002e42 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	3310      	adds	r3, #16
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fef2 	bl	8002c1c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	3324      	adds	r3, #36	; 0x24
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff feed 	bl	8002c1c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002e42:	f001 ff41 	bl	8004cc8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002e46:	2301      	movs	r3, #1
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	e000ed04 	.word	0xe000ed04

08002e54 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08c      	sub	sp, #48	; 0x30
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10a      	bne.n	8002e7e <xQueueGenericCreate+0x2a>
        __asm volatile
 8002e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	61bb      	str	r3, [r7, #24]
    }
 8002e7a:	bf00      	nop
 8002e7c:	e7fe      	b.n	8002e7c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	fb02 f303 	mul.w	r3, r2, r3
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d006      	beq.n	8002e9c <xQueueGenericCreate+0x48>
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d101      	bne.n	8002ea0 <xQueueGenericCreate+0x4c>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <xQueueGenericCreate+0x4e>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10a      	bne.n	8002ebc <xQueueGenericCreate+0x68>
        __asm volatile
 8002ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	617b      	str	r3, [r7, #20]
    }
 8002eb8:	bf00      	nop
 8002eba:	e7fe      	b.n	8002eba <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002ec2:	d90a      	bls.n	8002eda <xQueueGenericCreate+0x86>
        __asm volatile
 8002ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	613b      	str	r3, [r7, #16]
    }
 8002ed6:	bf00      	nop
 8002ed8:	e7fe      	b.n	8002ed8 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	3350      	adds	r3, #80	; 0x50
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f002 f82a 	bl	8004f38 <pvPortMalloc>
 8002ee4:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00d      	beq.n	8002f08 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	3350      	adds	r3, #80	; 0x50
 8002ef4:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ef6:	79fa      	ldrb	r2, [r7, #7]
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	4613      	mov	r3, r2
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	68b9      	ldr	r1, [r7, #8]
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f805 	bl	8002f12 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002f08:	6a3b      	ldr	r3, [r7, #32]
    }
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3728      	adds	r7, #40	; 0x28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	607a      	str	r2, [r7, #4]
 8002f1e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d103      	bne.n	8002f2e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e002      	b.n	8002f34 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f40:	2101      	movs	r1, #1
 8002f42:	69b8      	ldr	r0, [r7, #24]
 8002f44:	f7ff ff1e 	bl	8002d84 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08e      	sub	sp, #56	; 0x38
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f66:	2300      	movs	r3, #0
 8002f68:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10a      	bne.n	8002f8a <xQueueGenericSend+0x32>
        __asm volatile
 8002f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002f86:	bf00      	nop
 8002f88:	e7fe      	b.n	8002f88 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d103      	bne.n	8002f98 <xQueueGenericSend+0x40>
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <xQueueGenericSend+0x44>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <xQueueGenericSend+0x46>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10a      	bne.n	8002fb8 <xQueueGenericSend+0x60>
        __asm volatile
 8002fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa6:	f383 8811 	msr	BASEPRI, r3
 8002faa:	f3bf 8f6f 	isb	sy
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002fb4:	bf00      	nop
 8002fb6:	e7fe      	b.n	8002fb6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d103      	bne.n	8002fc6 <xQueueGenericSend+0x6e>
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <xQueueGenericSend+0x72>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <xQueueGenericSend+0x74>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10a      	bne.n	8002fe6 <xQueueGenericSend+0x8e>
        __asm volatile
 8002fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd4:	f383 8811 	msr	BASEPRI, r3
 8002fd8:	f3bf 8f6f 	isb	sy
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	623b      	str	r3, [r7, #32]
    }
 8002fe2:	bf00      	nop
 8002fe4:	e7fe      	b.n	8002fe4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fe6:	f001 f8ff 	bl	80041e8 <xTaskGetSchedulerState>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <xQueueGenericSend+0x9e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <xQueueGenericSend+0xa2>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <xQueueGenericSend+0xa4>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <xQueueGenericSend+0xbe>
        __asm volatile
 8003000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	61fb      	str	r3, [r7, #28]
    }
 8003012:	bf00      	nop
 8003014:	e7fe      	b.n	8003014 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003016:	f001 fe27 	bl	8004c68 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003022:	429a      	cmp	r2, r3
 8003024:	d302      	bcc.n	800302c <xQueueGenericSend+0xd4>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d129      	bne.n	8003080 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003032:	f000 fa19 	bl	8003468 <prvCopyDataToQueue>
 8003036:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	2b00      	cmp	r3, #0
 800303e:	d010      	beq.n	8003062 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003042:	3324      	adds	r3, #36	; 0x24
 8003044:	4618      	mov	r0, r3
 8003046:	f000 ff33 	bl	8003eb0 <xTaskRemoveFromEventList>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d013      	beq.n	8003078 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003050:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <xQueueGenericSend+0x1f8>)
 8003052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	e00a      	b.n	8003078 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003064:	2b00      	cmp	r3, #0
 8003066:	d007      	beq.n	8003078 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003068:	4b39      	ldr	r3, [pc, #228]	; (8003150 <xQueueGenericSend+0x1f8>)
 800306a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003078:	f001 fe26 	bl	8004cc8 <vPortExitCritical>
                return pdPASS;
 800307c:	2301      	movs	r3, #1
 800307e:	e063      	b.n	8003148 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d103      	bne.n	800308e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003086:	f001 fe1f 	bl	8004cc8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800308a:	2300      	movs	r3, #0
 800308c:	e05c      	b.n	8003148 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800308e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003090:	2b00      	cmp	r3, #0
 8003092:	d106      	bne.n	80030a2 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	4618      	mov	r0, r3
 800309a:	f000 ff6b 	bl	8003f74 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800309e:	2301      	movs	r3, #1
 80030a0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80030a2:	f001 fe11 	bl	8004cc8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80030a6:	f000 fce5 	bl	8003a74 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80030aa:	f001 fddd 	bl	8004c68 <vPortEnterCritical>
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030b4:	b25b      	sxtb	r3, r3
 80030b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ba:	d103      	bne.n	80030c4 <xQueueGenericSend+0x16c>
 80030bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030ca:	b25b      	sxtb	r3, r3
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d0:	d103      	bne.n	80030da <xQueueGenericSend+0x182>
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030da:	f001 fdf5 	bl	8004cc8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030de:	1d3a      	adds	r2, r7, #4
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	4611      	mov	r1, r2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 ff5a 	bl	8003fa0 <xTaskCheckForTimeOut>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d124      	bne.n	800313c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030f4:	f000 fab0 	bl	8003658 <prvIsQueueFull>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d018      	beq.n	8003130 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003100:	3310      	adds	r3, #16
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fe82 	bl	8003e10 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800310c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800310e:	f000 fa3b 	bl	8003588 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003112:	f000 fcbd 	bl	8003a90 <xTaskResumeAll>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	f47f af7c 	bne.w	8003016 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800311e:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <xQueueGenericSend+0x1f8>)
 8003120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	e772      	b.n	8003016 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003132:	f000 fa29 	bl	8003588 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003136:	f000 fcab 	bl	8003a90 <xTaskResumeAll>
 800313a:	e76c      	b.n	8003016 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800313c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800313e:	f000 fa23 	bl	8003588 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003142:	f000 fca5 	bl	8003a90 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003146:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003148:	4618      	mov	r0, r3
 800314a:	3738      	adds	r7, #56	; 0x38
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	e000ed04 	.word	0xe000ed04

08003154 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b090      	sub	sp, #64	; 0x40
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10a      	bne.n	8003182 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800317e:	bf00      	nop
 8003180:	e7fe      	b.n	8003180 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d103      	bne.n	8003190 <xQueueGenericSendFromISR+0x3c>
 8003188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <xQueueGenericSendFromISR+0x40>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <xQueueGenericSendFromISR+0x42>
 8003194:	2300      	movs	r3, #0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10a      	bne.n	80031b0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800319a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319e:	f383 8811 	msr	BASEPRI, r3
 80031a2:	f3bf 8f6f 	isb	sy
 80031a6:	f3bf 8f4f 	dsb	sy
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80031ac:	bf00      	nop
 80031ae:	e7fe      	b.n	80031ae <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d103      	bne.n	80031be <xQueueGenericSendFromISR+0x6a>
 80031b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <xQueueGenericSendFromISR+0x6e>
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <xQueueGenericSendFromISR+0x70>
 80031c2:	2300      	movs	r3, #0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10a      	bne.n	80031de <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80031c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	623b      	str	r3, [r7, #32]
    }
 80031da:	bf00      	nop
 80031dc:	e7fe      	b.n	80031dc <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031de:	f001 fe25 	bl	8004e2c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80031e2:	f3ef 8211 	mrs	r2, BASEPRI
 80031e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	61fa      	str	r2, [r7, #28]
 80031f8:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80031fa:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031fc:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003206:	429a      	cmp	r2, r3
 8003208:	d302      	bcc.n	8003210 <xQueueGenericSendFromISR+0xbc>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d13e      	bne.n	800328e <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	68b9      	ldr	r1, [r7, #8]
 8003224:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003226:	f000 f91f 	bl	8003468 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800322a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800322e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003232:	d112      	bne.n	800325a <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	2b00      	cmp	r3, #0
 800323a:	d025      	beq.n	8003288 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323e:	3324      	adds	r3, #36	; 0x24
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fe35 	bl	8003eb0 <xTaskRemoveFromEventList>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01d      	beq.n	8003288 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01a      	beq.n	8003288 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e016      	b.n	8003288 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800325a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800325e:	2b7f      	cmp	r3, #127	; 0x7f
 8003260:	d10a      	bne.n	8003278 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8003262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003266:	f383 8811 	msr	BASEPRI, r3
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	617b      	str	r3, [r7, #20]
    }
 8003274:	bf00      	nop
 8003276:	e7fe      	b.n	8003276 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003278:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800327c:	3301      	adds	r3, #1
 800327e:	b2db      	uxtb	r3, r3
 8003280:	b25a      	sxtb	r2, r3
 8003282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003288:	2301      	movs	r3, #1
 800328a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800328c:	e001      	b.n	8003292 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800328e:	2300      	movs	r3, #0
 8003290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003294:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800329c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800329e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3740      	adds	r7, #64	; 0x40
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08c      	sub	sp, #48	; 0x30
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80032b4:	2300      	movs	r3, #0
 80032b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80032bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10a      	bne.n	80032d8 <xQueueReceive+0x30>
        __asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	623b      	str	r3, [r7, #32]
    }
 80032d4:	bf00      	nop
 80032d6:	e7fe      	b.n	80032d6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d103      	bne.n	80032e6 <xQueueReceive+0x3e>
 80032de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <xQueueReceive+0x42>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <xQueueReceive+0x44>
 80032ea:	2300      	movs	r3, #0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10a      	bne.n	8003306 <xQueueReceive+0x5e>
        __asm volatile
 80032f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	61fb      	str	r3, [r7, #28]
    }
 8003302:	bf00      	nop
 8003304:	e7fe      	b.n	8003304 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003306:	f000 ff6f 	bl	80041e8 <xTaskGetSchedulerState>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d102      	bne.n	8003316 <xQueueReceive+0x6e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <xQueueReceive+0x72>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <xQueueReceive+0x74>
 800331a:	2300      	movs	r3, #0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10a      	bne.n	8003336 <xQueueReceive+0x8e>
        __asm volatile
 8003320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	61bb      	str	r3, [r7, #24]
    }
 8003332:	bf00      	nop
 8003334:	e7fe      	b.n	8003334 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003336:	f001 fc97 	bl	8004c68 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	2b00      	cmp	r3, #0
 8003344:	d01f      	beq.n	8003386 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003346:	68b9      	ldr	r1, [r7, #8]
 8003348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800334a:	f000 f8f7 	bl	800353c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	1e5a      	subs	r2, r3, #1
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00f      	beq.n	800337e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	3310      	adds	r3, #16
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fda4 	bl	8003eb0 <xTaskRemoveFromEventList>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d007      	beq.n	800337e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800336e:	4b3d      	ldr	r3, [pc, #244]	; (8003464 <xQueueReceive+0x1bc>)
 8003370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800337e:	f001 fca3 	bl	8004cc8 <vPortExitCritical>
                return pdPASS;
 8003382:	2301      	movs	r3, #1
 8003384:	e069      	b.n	800345a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d103      	bne.n	8003394 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800338c:	f001 fc9c 	bl	8004cc8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003390:	2300      	movs	r3, #0
 8003392:	e062      	b.n	800345a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800339a:	f107 0310 	add.w	r3, r7, #16
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fde8 	bl	8003f74 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80033a4:	2301      	movs	r3, #1
 80033a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80033a8:	f001 fc8e 	bl	8004cc8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80033ac:	f000 fb62 	bl	8003a74 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80033b0:	f001 fc5a 	bl	8004c68 <vPortEnterCritical>
 80033b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033ba:	b25b      	sxtb	r3, r3
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c0:	d103      	bne.n	80033ca <xQueueReceive+0x122>
 80033c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033d0:	b25b      	sxtb	r3, r3
 80033d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d6:	d103      	bne.n	80033e0 <xQueueReceive+0x138>
 80033d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033e0:	f001 fc72 	bl	8004cc8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033e4:	1d3a      	adds	r2, r7, #4
 80033e6:	f107 0310 	add.w	r3, r7, #16
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fdd7 	bl	8003fa0 <xTaskCheckForTimeOut>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d123      	bne.n	8003440 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033fa:	f000 f917 	bl	800362c <prvIsQueueEmpty>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d017      	beq.n	8003434 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	3324      	adds	r3, #36	; 0x24
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	4611      	mov	r1, r2
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fcff 	bl	8003e10 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003414:	f000 f8b8 	bl	8003588 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003418:	f000 fb3a 	bl	8003a90 <xTaskResumeAll>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d189      	bne.n	8003336 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003422:	4b10      	ldr	r3, [pc, #64]	; (8003464 <xQueueReceive+0x1bc>)
 8003424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	e780      	b.n	8003336 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003436:	f000 f8a7 	bl	8003588 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800343a:	f000 fb29 	bl	8003a90 <xTaskResumeAll>
 800343e:	e77a      	b.n	8003336 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003442:	f000 f8a1 	bl	8003588 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003446:	f000 fb23 	bl	8003a90 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800344a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800344c:	f000 f8ee 	bl	800362c <prvIsQueueEmpty>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	f43f af6f 	beq.w	8003336 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003458:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800345a:	4618      	mov	r0, r3
 800345c:	3730      	adds	r7, #48	; 0x30
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	e000ed04 	.word	0xe000ed04

08003468 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10d      	bne.n	80034a2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d14d      	bne.n	800352a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fec6 	bl	8004224 <xTaskPriorityDisinherit>
 8003498:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	e043      	b.n	800352a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d119      	bne.n	80034dc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6858      	ldr	r0, [r3, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	461a      	mov	r2, r3
 80034b2:	68b9      	ldr	r1, [r7, #8]
 80034b4:	f001 ff62 	bl	800537c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	441a      	add	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d32b      	bcc.n	800352a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	e026      	b.n	800352a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	68d8      	ldr	r0, [r3, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	461a      	mov	r2, r3
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	f001 ff48 	bl	800537c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	425b      	negs	r3, r3
 80034f6:	441a      	add	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d207      	bcs.n	8003518 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	425b      	negs	r3, r3
 8003512:	441a      	add	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d105      	bne.n	800352a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	3b01      	subs	r3, #1
 8003528:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003532:	697b      	ldr	r3, [r7, #20]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d018      	beq.n	8003580 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	441a      	add	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	429a      	cmp	r2, r3
 8003566:	d303      	bcc.n	8003570 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68d9      	ldr	r1, [r3, #12]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	461a      	mov	r2, r3
 800357a:	6838      	ldr	r0, [r7, #0]
 800357c:	f001 fefe 	bl	800537c <memcpy>
    }
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003590:	f001 fb6a 	bl	8004c68 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800359a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800359c:	e011      	b.n	80035c2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d012      	beq.n	80035cc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3324      	adds	r3, #36	; 0x24
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fc80 	bl	8003eb0 <xTaskRemoveFromEventList>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80035b6:	f000 fd59 	bl	800406c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
 80035bc:	3b01      	subs	r3, #1
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80035c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	dce9      	bgt.n	800359e <prvUnlockQueue+0x16>
 80035ca:	e000      	b.n	80035ce <prvUnlockQueue+0x46>
                        break;
 80035cc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	22ff      	movs	r2, #255	; 0xff
 80035d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80035d6:	f001 fb77 	bl	8004cc8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80035da:	f001 fb45 	bl	8004c68 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035e4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80035e6:	e011      	b.n	800360c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d012      	beq.n	8003616 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3310      	adds	r3, #16
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fc5b 	bl	8003eb0 <xTaskRemoveFromEventList>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003600:	f000 fd34 	bl	800406c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003604:	7bbb      	ldrb	r3, [r7, #14]
 8003606:	3b01      	subs	r3, #1
 8003608:	b2db      	uxtb	r3, r3
 800360a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800360c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003610:	2b00      	cmp	r3, #0
 8003612:	dce9      	bgt.n	80035e8 <prvUnlockQueue+0x60>
 8003614:	e000      	b.n	8003618 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003616:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	22ff      	movs	r2, #255	; 0xff
 800361c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003620:	f001 fb52 	bl	8004cc8 <vPortExitCritical>
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003634:	f001 fb18 	bl	8004c68 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	2b00      	cmp	r3, #0
 800363e:	d102      	bne.n	8003646 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003640:	2301      	movs	r3, #1
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	e001      	b.n	800364a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800364a:	f001 fb3d 	bl	8004cc8 <vPortExitCritical>

    return xReturn;
 800364e:	68fb      	ldr	r3, [r7, #12]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003660:	f001 fb02 	bl	8004c68 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	429a      	cmp	r2, r3
 800366e:	d102      	bne.n	8003676 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003670:	2301      	movs	r3, #1
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	e001      	b.n	800367a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800367a:	f001 fb25 	bl	8004cc8 <vPortExitCritical>

    return xReturn;
 800367e:	68fb      	ldr	r3, [r7, #12]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	e014      	b.n	80036c2 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003698:	4a0f      	ldr	r2, [pc, #60]	; (80036d8 <vQueueAddToRegistry+0x50>)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10b      	bne.n	80036bc <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80036a4:	490c      	ldr	r1, [pc, #48]	; (80036d8 <vQueueAddToRegistry+0x50>)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80036ae:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <vQueueAddToRegistry+0x50>)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4413      	add	r3, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80036ba:	e006      	b.n	80036ca <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3301      	adds	r3, #1
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b07      	cmp	r3, #7
 80036c6:	d9e7      	bls.n	8003698 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	20003e8c 	.word	0x20003e8c

080036dc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80036ec:	f001 fabc 	bl	8004c68 <vPortEnterCritical>
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036f6:	b25b      	sxtb	r3, r3
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d103      	bne.n	8003706 <vQueueWaitForMessageRestricted+0x2a>
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800370c:	b25b      	sxtb	r3, r3
 800370e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003712:	d103      	bne.n	800371c <vQueueWaitForMessageRestricted+0x40>
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800371c:	f001 fad4 	bl	8004cc8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	2b00      	cmp	r3, #0
 8003726:	d106      	bne.n	8003736 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	3324      	adds	r3, #36	; 0x24
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	4618      	mov	r0, r3
 8003732:	f000 fb91 	bl	8003e58 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003736:	6978      	ldr	r0, [r7, #20]
 8003738:	f7ff ff26 	bl	8003588 <prvUnlockQueue>
    }
 800373c:	bf00      	nop
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003744:	b580      	push	{r7, lr}
 8003746:	b08c      	sub	sp, #48	; 0x30
 8003748:	af04      	add	r7, sp, #16
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	4613      	mov	r3, r2
 8003752:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4618      	mov	r0, r3
 800375a:	f001 fbed 	bl	8004f38 <pvPortMalloc>
 800375e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00e      	beq.n	8003784 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003766:	206c      	movs	r0, #108	; 0x6c
 8003768:	f001 fbe6 	bl	8004f38 <pvPortMalloc>
 800376c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	631a      	str	r2, [r3, #48]	; 0x30
 800377a:	e005      	b.n	8003788 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800377c:	6978      	ldr	r0, [r7, #20]
 800377e:	f001 fcbb 	bl	80050f8 <vPortFree>
 8003782:	e001      	b.n	8003788 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003784:	2300      	movs	r3, #0
 8003786:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d013      	beq.n	80037b6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	2300      	movs	r3, #0
 8003792:	9303      	str	r3, [sp, #12]
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	9302      	str	r3, [sp, #8]
 8003798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f80e 	bl	80037c6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80037aa:	69f8      	ldr	r0, [r7, #28]
 80037ac:	f000 f8a2 	bl	80038f4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80037b0:	2301      	movs	r3, #1
 80037b2:	61bb      	str	r3, [r7, #24]
 80037b4:	e002      	b.n	80037bc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037b6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ba:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80037bc:	69bb      	ldr	r3, [r7, #24]
    }
 80037be:	4618      	mov	r0, r3
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b088      	sub	sp, #32
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	607a      	str	r2, [r7, #4]
 80037d2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	461a      	mov	r2, r3
 80037de:	21a5      	movs	r1, #165	; 0xa5
 80037e0:	f001 fdda 	bl	8005398 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037ee:	3b01      	subs	r3, #1
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	f023 0307 	bic.w	r3, r3, #7
 80037fc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <prvInitialiseNewTask+0x58>
        __asm volatile
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	617b      	str	r3, [r7, #20]
    }
 800381a:	bf00      	nop
 800381c:	e7fe      	b.n	800381c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01f      	beq.n	8003864 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003824:	2300      	movs	r3, #0
 8003826:	61fb      	str	r3, [r7, #28]
 8003828:	e012      	b.n	8003850 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	4413      	add	r3, r2
 8003830:	7819      	ldrb	r1, [r3, #0]
 8003832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4413      	add	r3, r2
 8003838:	3334      	adds	r3, #52	; 0x34
 800383a:	460a      	mov	r2, r1
 800383c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	4413      	add	r3, r2
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d006      	beq.n	8003858 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	3301      	adds	r3, #1
 800384e:	61fb      	str	r3, [r7, #28]
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	2b1d      	cmp	r3, #29
 8003854:	d9e9      	bls.n	800382a <prvInitialiseNewTask+0x64>
 8003856:	e000      	b.n	800385a <prvInitialiseNewTask+0x94>
            {
                break;
 8003858:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003862:	e003      	b.n	800386c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800386c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386e:	2b04      	cmp	r3, #4
 8003870:	d901      	bls.n	8003876 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003872:	2304      	movs	r3, #4
 8003874:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800387a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003880:	65da      	str	r2, [r3, #92]	; 0x5c
            pxNewTCB->uxMutexesHeld = 0;
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	2200      	movs	r2, #0
 8003886:	661a      	str	r2, [r3, #96]	; 0x60
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388a:	3304      	adds	r3, #4
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff f9e5 	bl	8002c5c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	3318      	adds	r3, #24
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff f9e0 	bl	8002c5c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038a0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	f1c3 0205 	rsb	r2, r3, #5
 80038a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038aa:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80038b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b4:	3364      	adds	r3, #100	; 0x64
 80038b6:	2204      	movs	r2, #4
 80038b8:	2100      	movs	r1, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 fd6c 	bl	8005398 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80038c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c2:	3368      	adds	r3, #104	; 0x68
 80038c4:	2201      	movs	r2, #1
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f001 fd65 	bl	8005398 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	68f9      	ldr	r1, [r7, #12]
 80038d2:	69b8      	ldr	r0, [r7, #24]
 80038d4:	f001 f898 	bl	8004a08 <pxPortInitialiseStack>
 80038d8:	4602      	mov	r2, r0
 80038da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038dc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80038de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038e8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80038ea:	bf00      	nop
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80038fc:	f001 f9b4 	bl	8004c68 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003900:	4b2c      	ldr	r3, [pc, #176]	; (80039b4 <prvAddNewTaskToReadyList+0xc0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3301      	adds	r3, #1
 8003906:	4a2b      	ldr	r2, [pc, #172]	; (80039b4 <prvAddNewTaskToReadyList+0xc0>)
 8003908:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800390a:	4b2b      	ldr	r3, [pc, #172]	; (80039b8 <prvAddNewTaskToReadyList+0xc4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003912:	4a29      	ldr	r2, [pc, #164]	; (80039b8 <prvAddNewTaskToReadyList+0xc4>)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003918:	4b26      	ldr	r3, [pc, #152]	; (80039b4 <prvAddNewTaskToReadyList+0xc0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d110      	bne.n	8003942 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003920:	f000 fbc8 	bl	80040b4 <prvInitialiseTaskLists>
 8003924:	e00d      	b.n	8003942 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003926:	4b25      	ldr	r3, [pc, #148]	; (80039bc <prvAddNewTaskToReadyList+0xc8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800392e:	4b22      	ldr	r3, [pc, #136]	; (80039b8 <prvAddNewTaskToReadyList+0xc4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	429a      	cmp	r2, r3
 800393a:	d802      	bhi.n	8003942 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800393c:	4a1e      	ldr	r2, [pc, #120]	; (80039b8 <prvAddNewTaskToReadyList+0xc4>)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003942:	4b1f      	ldr	r3, [pc, #124]	; (80039c0 <prvAddNewTaskToReadyList+0xcc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3301      	adds	r3, #1
 8003948:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <prvAddNewTaskToReadyList+0xcc>)
 800394a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800394c:	4b1c      	ldr	r3, [pc, #112]	; (80039c0 <prvAddNewTaskToReadyList+0xcc>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	655a      	str	r2, [r3, #84]	; 0x54
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	2201      	movs	r2, #1
 800395a:	409a      	lsls	r2, r3
 800395c:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <prvAddNewTaskToReadyList+0xd0>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4313      	orrs	r3, r2
 8003962:	4a18      	ldr	r2, [pc, #96]	; (80039c4 <prvAddNewTaskToReadyList+0xd0>)
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4a15      	ldr	r2, [pc, #84]	; (80039c8 <prvAddNewTaskToReadyList+0xd4>)
 8003974:	441a      	add	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3304      	adds	r3, #4
 800397a:	4619      	mov	r1, r3
 800397c:	4610      	mov	r0, r2
 800397e:	f7ff f97a 	bl	8002c76 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003982:	f001 f9a1 	bl	8004cc8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003986:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <prvAddNewTaskToReadyList+0xc8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00e      	beq.n	80039ac <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800398e:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <prvAddNewTaskToReadyList+0xc4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	429a      	cmp	r2, r3
 800399a:	d207      	bcs.n	80039ac <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <prvAddNewTaskToReadyList+0xd8>)
 800399e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80039ac:	bf00      	nop
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20000108 	.word	0x20000108
 80039b8:	20000030 	.word	0x20000030
 80039bc:	20000114 	.word	0x20000114
 80039c0:	20000124 	.word	0x20000124
 80039c4:	20000110 	.word	0x20000110
 80039c8:	20000034 	.word	0x20000034
 80039cc:	e000ed04 	.word	0xe000ed04

080039d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80039d6:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <vTaskStartScheduler+0x88>)
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	2300      	movs	r3, #0
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	2300      	movs	r3, #0
 80039e0:	2280      	movs	r2, #128	; 0x80
 80039e2:	491e      	ldr	r1, [pc, #120]	; (8003a5c <vTaskStartScheduler+0x8c>)
 80039e4:	481e      	ldr	r0, [pc, #120]	; (8003a60 <vTaskStartScheduler+0x90>)
 80039e6:	f7ff fead 	bl	8003744 <xTaskCreate>
 80039ea:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d102      	bne.n	80039f8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80039f2:	f000 fcf7 	bl	80043e4 <xTimerCreateTimerTask>
 80039f6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d116      	bne.n	8003a2c <vTaskStartScheduler+0x5c>
        __asm volatile
 80039fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	60bb      	str	r3, [r7, #8]
    }
 8003a10:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003a12:	4b14      	ldr	r3, [pc, #80]	; (8003a64 <vTaskStartScheduler+0x94>)
 8003a14:	f04f 32ff 	mov.w	r2, #4294967295
 8003a18:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003a1a:	4b13      	ldr	r3, [pc, #76]	; (8003a68 <vTaskStartScheduler+0x98>)
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a20:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <vTaskStartScheduler+0x9c>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003a26:	f001 f87d 	bl	8004b24 <xPortStartScheduler>
 8003a2a:	e00e      	b.n	8003a4a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a32:	d10a      	bne.n	8003a4a <vTaskStartScheduler+0x7a>
        __asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	607b      	str	r3, [r7, #4]
    }
 8003a46:	bf00      	nop
 8003a48:	e7fe      	b.n	8003a48 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003a4a:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <vTaskStartScheduler+0xa0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
}
 8003a4e:	bf00      	nop
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	2000012c 	.word	0x2000012c
 8003a5c:	080053cc 	.word	0x080053cc
 8003a60:	08004085 	.word	0x08004085
 8003a64:	20000128 	.word	0x20000128
 8003a68:	20000114 	.word	0x20000114
 8003a6c:	2000010c 	.word	0x2000010c
 8003a70:	2000000c 	.word	0x2000000c

08003a74 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003a78:	4b04      	ldr	r3, [pc, #16]	; (8003a8c <vTaskSuspendAll+0x18>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	4a03      	ldr	r2, [pc, #12]	; (8003a8c <vTaskSuspendAll+0x18>)
 8003a80:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003a82:	bf00      	nop
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	20000130 	.word	0x20000130

08003a90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003a9e:	4b41      	ldr	r3, [pc, #260]	; (8003ba4 <xTaskResumeAll+0x114>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <xTaskResumeAll+0x2c>
        __asm volatile
 8003aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	603b      	str	r3, [r7, #0]
    }
 8003ab8:	bf00      	nop
 8003aba:	e7fe      	b.n	8003aba <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003abc:	f001 f8d4 	bl	8004c68 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003ac0:	4b38      	ldr	r3, [pc, #224]	; (8003ba4 <xTaskResumeAll+0x114>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	4a37      	ldr	r2, [pc, #220]	; (8003ba4 <xTaskResumeAll+0x114>)
 8003ac8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aca:	4b36      	ldr	r3, [pc, #216]	; (8003ba4 <xTaskResumeAll+0x114>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d161      	bne.n	8003b96 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ad2:	4b35      	ldr	r3, [pc, #212]	; (8003ba8 <xTaskResumeAll+0x118>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d05d      	beq.n	8003b96 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ada:	e02e      	b.n	8003b3a <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003adc:	4b33      	ldr	r3, [pc, #204]	; (8003bac <xTaskResumeAll+0x11c>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3318      	adds	r3, #24
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff f921 	bl	8002d30 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3304      	adds	r3, #4
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff f91c 	bl	8002d30 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	2201      	movs	r2, #1
 8003afe:	409a      	lsls	r2, r3
 8003b00:	4b2b      	ldr	r3, [pc, #172]	; (8003bb0 <xTaskResumeAll+0x120>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	4a2a      	ldr	r2, [pc, #168]	; (8003bb0 <xTaskResumeAll+0x120>)
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4a27      	ldr	r2, [pc, #156]	; (8003bb4 <xTaskResumeAll+0x124>)
 8003b18:	441a      	add	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4610      	mov	r0, r2
 8003b22:	f7ff f8a8 	bl	8002c76 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2a:	4b23      	ldr	r3, [pc, #140]	; (8003bb8 <xTaskResumeAll+0x128>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d302      	bcc.n	8003b3a <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8003b34:	4b21      	ldr	r3, [pc, #132]	; (8003bbc <xTaskResumeAll+0x12c>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b3a:	4b1c      	ldr	r3, [pc, #112]	; (8003bac <xTaskResumeAll+0x11c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1cc      	bne.n	8003adc <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003b48:	f000 fb32 	bl	80041b0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b4c:	4b1c      	ldr	r3, [pc, #112]	; (8003bc0 <xTaskResumeAll+0x130>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d010      	beq.n	8003b7a <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003b58:	f000 f846 	bl	8003be8 <xTaskIncrementTick>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8003b62:	4b16      	ldr	r3, [pc, #88]	; (8003bbc <xTaskResumeAll+0x12c>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f1      	bne.n	8003b58 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8003b74:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <xTaskResumeAll+0x130>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003b7a:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <xTaskResumeAll+0x12c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003b82:	2301      	movs	r3, #1
 8003b84:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003b86:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <xTaskResumeAll+0x134>)
 8003b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003b96:	f001 f897 	bl	8004cc8 <vPortExitCritical>

    return xAlreadyYielded;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	20000130 	.word	0x20000130
 8003ba8:	20000108 	.word	0x20000108
 8003bac:	200000c8 	.word	0x200000c8
 8003bb0:	20000110 	.word	0x20000110
 8003bb4:	20000034 	.word	0x20000034
 8003bb8:	20000030 	.word	0x20000030
 8003bbc:	2000011c 	.word	0x2000011c
 8003bc0:	20000118 	.word	0x20000118
 8003bc4:	e000ed04 	.word	0xe000ed04

08003bc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <xTaskGetTickCount+0x1c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003bd4:	687b      	ldr	r3, [r7, #4]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	2000010c 	.word	0x2000010c

08003be8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bf2:	4b4e      	ldr	r3, [pc, #312]	; (8003d2c <xTaskIncrementTick+0x144>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f040 808e 	bne.w	8003d18 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bfc:	4b4c      	ldr	r3, [pc, #304]	; (8003d30 <xTaskIncrementTick+0x148>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003c04:	4a4a      	ldr	r2, [pc, #296]	; (8003d30 <xTaskIncrementTick+0x148>)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d120      	bne.n	8003c52 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003c10:	4b48      	ldr	r3, [pc, #288]	; (8003d34 <xTaskIncrementTick+0x14c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <xTaskIncrementTick+0x48>
        __asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	603b      	str	r3, [r7, #0]
    }
 8003c2c:	bf00      	nop
 8003c2e:	e7fe      	b.n	8003c2e <xTaskIncrementTick+0x46>
 8003c30:	4b40      	ldr	r3, [pc, #256]	; (8003d34 <xTaskIncrementTick+0x14c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	4b40      	ldr	r3, [pc, #256]	; (8003d38 <xTaskIncrementTick+0x150>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a3e      	ldr	r2, [pc, #248]	; (8003d34 <xTaskIncrementTick+0x14c>)
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	4a3e      	ldr	r2, [pc, #248]	; (8003d38 <xTaskIncrementTick+0x150>)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	4b3d      	ldr	r3, [pc, #244]	; (8003d3c <xTaskIncrementTick+0x154>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	4a3c      	ldr	r2, [pc, #240]	; (8003d3c <xTaskIncrementTick+0x154>)
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	f000 faaf 	bl	80041b0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003c52:	4b3b      	ldr	r3, [pc, #236]	; (8003d40 <xTaskIncrementTick+0x158>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d348      	bcc.n	8003cee <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c5c:	4b35      	ldr	r3, [pc, #212]	; (8003d34 <xTaskIncrementTick+0x14c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d104      	bne.n	8003c70 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c66:	4b36      	ldr	r3, [pc, #216]	; (8003d40 <xTaskIncrementTick+0x158>)
 8003c68:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6c:	601a      	str	r2, [r3, #0]
                    break;
 8003c6e:	e03e      	b.n	8003cee <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c70:	4b30      	ldr	r3, [pc, #192]	; (8003d34 <xTaskIncrementTick+0x14c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d203      	bcs.n	8003c90 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003c88:	4a2d      	ldr	r2, [pc, #180]	; (8003d40 <xTaskIncrementTick+0x158>)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c8e:	e02e      	b.n	8003cee <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	3304      	adds	r3, #4
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff f84b 	bl	8002d30 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d004      	beq.n	8003cac <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	3318      	adds	r3, #24
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff f842 	bl	8002d30 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	409a      	lsls	r2, r3
 8003cb4:	4b23      	ldr	r3, [pc, #140]	; (8003d44 <xTaskIncrementTick+0x15c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	4a22      	ldr	r2, [pc, #136]	; (8003d44 <xTaskIncrementTick+0x15c>)
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4a1f      	ldr	r2, [pc, #124]	; (8003d48 <xTaskIncrementTick+0x160>)
 8003ccc:	441a      	add	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	f7fe ffce 	bl	8002c76 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cde:	4b1b      	ldr	r3, [pc, #108]	; (8003d4c <xTaskIncrementTick+0x164>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d3b9      	bcc.n	8003c5c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cec:	e7b6      	b.n	8003c5c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cee:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <xTaskIncrementTick+0x164>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf4:	4914      	ldr	r1, [pc, #80]	; (8003d48 <xTaskIncrementTick+0x160>)
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	440b      	add	r3, r1
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d901      	bls.n	8003d0a <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8003d06:	2301      	movs	r3, #1
 8003d08:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003d0a:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <xTaskIncrementTick+0x168>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d007      	beq.n	8003d22 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8003d12:	2301      	movs	r3, #1
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	e004      	b.n	8003d22 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003d18:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <xTaskIncrementTick+0x16c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	4a0d      	ldr	r2, [pc, #52]	; (8003d54 <xTaskIncrementTick+0x16c>)
 8003d20:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003d22:	697b      	ldr	r3, [r7, #20]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20000130 	.word	0x20000130
 8003d30:	2000010c 	.word	0x2000010c
 8003d34:	200000c0 	.word	0x200000c0
 8003d38:	200000c4 	.word	0x200000c4
 8003d3c:	20000120 	.word	0x20000120
 8003d40:	20000128 	.word	0x20000128
 8003d44:	20000110 	.word	0x20000110
 8003d48:	20000034 	.word	0x20000034
 8003d4c:	20000030 	.word	0x20000030
 8003d50:	2000011c 	.word	0x2000011c
 8003d54:	20000118 	.word	0x20000118

08003d58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d5e:	4b27      	ldr	r3, [pc, #156]	; (8003dfc <vTaskSwitchContext+0xa4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003d66:	4b26      	ldr	r3, [pc, #152]	; (8003e00 <vTaskSwitchContext+0xa8>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003d6c:	e03f      	b.n	8003dee <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003d6e:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <vTaskSwitchContext+0xa8>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d74:	4b23      	ldr	r3, [pc, #140]	; (8003e04 <vTaskSwitchContext+0xac>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	fab3 f383 	clz	r3, r3
 8003d80:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003d82:	7afb      	ldrb	r3, [r7, #11]
 8003d84:	f1c3 031f 	rsb	r3, r3, #31
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	491f      	ldr	r1, [pc, #124]	; (8003e08 <vTaskSwitchContext+0xb0>)
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10a      	bne.n	8003db4 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	607b      	str	r3, [r7, #4]
    }
 8003db0:	bf00      	nop
 8003db2:	e7fe      	b.n	8003db2 <vTaskSwitchContext+0x5a>
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4613      	mov	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <vTaskSwitchContext+0xb0>)
 8003dc0:	4413      	add	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	3308      	adds	r3, #8
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d104      	bne.n	8003de4 <vTaskSwitchContext+0x8c>
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	605a      	str	r2, [r3, #4]
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	4a08      	ldr	r2, [pc, #32]	; (8003e0c <vTaskSwitchContext+0xb4>)
 8003dec:	6013      	str	r3, [r2, #0]
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20000130 	.word	0x20000130
 8003e00:	2000011c 	.word	0x2000011c
 8003e04:	20000110 	.word	0x20000110
 8003e08:	20000034 	.word	0x20000034
 8003e0c:	20000030 	.word	0x20000030

08003e10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	60fb      	str	r3, [r7, #12]
    }
 8003e32:	bf00      	nop
 8003e34:	e7fe      	b.n	8003e34 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e36:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <vTaskPlaceOnEventList+0x44>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3318      	adds	r3, #24
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fe ff3d 	bl	8002cbe <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e44:	2101      	movs	r1, #1
 8003e46:	6838      	ldr	r0, [r7, #0]
 8003e48:	f000 fa66 	bl	8004318 <prvAddCurrentTaskToDelayedList>
}
 8003e4c:	bf00      	nop
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20000030 	.word	0x20000030

08003e58 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10a      	bne.n	8003e80 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	617b      	str	r3, [r7, #20]
    }
 8003e7c:	bf00      	nop
 8003e7e:	e7fe      	b.n	8003e7e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e80:	4b0a      	ldr	r3, [pc, #40]	; (8003eac <vTaskPlaceOnEventListRestricted+0x54>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3318      	adds	r3, #24
 8003e86:	4619      	mov	r1, r3
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7fe fef4 	bl	8002c76 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003e94:	f04f 33ff 	mov.w	r3, #4294967295
 8003e98:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	68b8      	ldr	r0, [r7, #8]
 8003e9e:	f000 fa3b 	bl	8004318 <prvAddCurrentTaskToDelayedList>
    }
 8003ea2:	bf00      	nop
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20000030 	.word	0x20000030

08003eb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10a      	bne.n	8003edc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	60fb      	str	r3, [r7, #12]
    }
 8003ed8:	bf00      	nop
 8003eda:	e7fe      	b.n	8003eda <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	3318      	adds	r3, #24
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fe ff25 	bl	8002d30 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ee6:	4b1d      	ldr	r3, [pc, #116]	; (8003f5c <xTaskRemoveFromEventList+0xac>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d11c      	bne.n	8003f28 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe ff1c 	bl	8002d30 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	2201      	movs	r2, #1
 8003efe:	409a      	lsls	r2, r3
 8003f00:	4b17      	ldr	r3, [pc, #92]	; (8003f60 <xTaskRemoveFromEventList+0xb0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	4a16      	ldr	r2, [pc, #88]	; (8003f60 <xTaskRemoveFromEventList+0xb0>)
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4a13      	ldr	r2, [pc, #76]	; (8003f64 <xTaskRemoveFromEventList+0xb4>)
 8003f18:	441a      	add	r2, r3
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4610      	mov	r0, r2
 8003f22:	f7fe fea8 	bl	8002c76 <vListInsertEnd>
 8003f26:	e005      	b.n	8003f34 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	3318      	adds	r3, #24
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	480e      	ldr	r0, [pc, #56]	; (8003f68 <xTaskRemoveFromEventList+0xb8>)
 8003f30:	f7fe fea1 	bl	8002c76 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <xTaskRemoveFromEventList+0xbc>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d905      	bls.n	8003f4e <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003f42:	2301      	movs	r3, #1
 8003f44:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003f46:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <xTaskRemoveFromEventList+0xc0>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	e001      	b.n	8003f52 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003f52:	697b      	ldr	r3, [r7, #20]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	20000130 	.word	0x20000130
 8003f60:	20000110 	.word	0x20000110
 8003f64:	20000034 	.word	0x20000034
 8003f68:	200000c8 	.word	0x200000c8
 8003f6c:	20000030 	.word	0x20000030
 8003f70:	2000011c 	.word	0x2000011c

08003f74 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f7c:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <vTaskInternalSetTimeOutState+0x24>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <vTaskInternalSetTimeOutState+0x28>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	605a      	str	r2, [r3, #4]
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	20000120 	.word	0x20000120
 8003f9c:	2000010c 	.word	0x2000010c

08003fa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	613b      	str	r3, [r7, #16]
    }
 8003fc2:	bf00      	nop
 8003fc4:	e7fe      	b.n	8003fc4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	60fb      	str	r3, [r7, #12]
    }
 8003fde:	bf00      	nop
 8003fe0:	e7fe      	b.n	8003fe0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003fe2:	f000 fe41 	bl	8004c68 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003fe6:	4b1f      	ldr	r3, [pc, #124]	; (8004064 <xTaskCheckForTimeOut+0xc4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffe:	d102      	bne.n	8004006 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004000:	2300      	movs	r3, #0
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	e026      	b.n	8004054 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	4b17      	ldr	r3, [pc, #92]	; (8004068 <xTaskCheckForTimeOut+0xc8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	429a      	cmp	r2, r3
 8004010:	d00a      	beq.n	8004028 <xTaskCheckForTimeOut+0x88>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	429a      	cmp	r2, r3
 800401a:	d305      	bcc.n	8004028 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800401c:	2301      	movs	r3, #1
 800401e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	e015      	b.n	8004054 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	429a      	cmp	r2, r3
 8004030:	d20b      	bcs.n	800404a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	1ad2      	subs	r2, r2, r3
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff ff98 	bl	8003f74 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004044:	2300      	movs	r3, #0
 8004046:	61fb      	str	r3, [r7, #28]
 8004048:	e004      	b.n	8004054 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004050:	2301      	movs	r3, #1
 8004052:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004054:	f000 fe38 	bl	8004cc8 <vPortExitCritical>

    return xReturn;
 8004058:	69fb      	ldr	r3, [r7, #28]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	2000010c 	.word	0x2000010c
 8004068:	20000120 	.word	0x20000120

0800406c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004070:	4b03      	ldr	r3, [pc, #12]	; (8004080 <vTaskMissedYield+0x14>)
 8004072:	2201      	movs	r2, #1
 8004074:	601a      	str	r2, [r3, #0]
}
 8004076:	bf00      	nop
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	2000011c 	.word	0x2000011c

08004084 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800408c:	f000 f852 	bl	8004134 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004090:	4b06      	ldr	r3, [pc, #24]	; (80040ac <prvIdleTask+0x28>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d9f9      	bls.n	800408c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <prvIdleTask+0x2c>)
 800409a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80040a8:	e7f0      	b.n	800408c <prvIdleTask+0x8>
 80040aa:	bf00      	nop
 80040ac:	20000034 	.word	0x20000034
 80040b0:	e000ed04 	.word	0xe000ed04

080040b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040ba:	2300      	movs	r3, #0
 80040bc:	607b      	str	r3, [r7, #4]
 80040be:	e00c      	b.n	80040da <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4a12      	ldr	r2, [pc, #72]	; (8004114 <prvInitialiseTaskLists+0x60>)
 80040cc:	4413      	add	r3, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fe fda4 	bl	8002c1c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3301      	adds	r3, #1
 80040d8:	607b      	str	r3, [r7, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d9ef      	bls.n	80040c0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80040e0:	480d      	ldr	r0, [pc, #52]	; (8004118 <prvInitialiseTaskLists+0x64>)
 80040e2:	f7fe fd9b 	bl	8002c1c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80040e6:	480d      	ldr	r0, [pc, #52]	; (800411c <prvInitialiseTaskLists+0x68>)
 80040e8:	f7fe fd98 	bl	8002c1c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80040ec:	480c      	ldr	r0, [pc, #48]	; (8004120 <prvInitialiseTaskLists+0x6c>)
 80040ee:	f7fe fd95 	bl	8002c1c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80040f2:	480c      	ldr	r0, [pc, #48]	; (8004124 <prvInitialiseTaskLists+0x70>)
 80040f4:	f7fe fd92 	bl	8002c1c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80040f8:	480b      	ldr	r0, [pc, #44]	; (8004128 <prvInitialiseTaskLists+0x74>)
 80040fa:	f7fe fd8f 	bl	8002c1c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80040fe:	4b0b      	ldr	r3, [pc, #44]	; (800412c <prvInitialiseTaskLists+0x78>)
 8004100:	4a05      	ldr	r2, [pc, #20]	; (8004118 <prvInitialiseTaskLists+0x64>)
 8004102:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004104:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <prvInitialiseTaskLists+0x7c>)
 8004106:	4a05      	ldr	r2, [pc, #20]	; (800411c <prvInitialiseTaskLists+0x68>)
 8004108:	601a      	str	r2, [r3, #0]
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000034 	.word	0x20000034
 8004118:	20000098 	.word	0x20000098
 800411c:	200000ac 	.word	0x200000ac
 8004120:	200000c8 	.word	0x200000c8
 8004124:	200000dc 	.word	0x200000dc
 8004128:	200000f4 	.word	0x200000f4
 800412c:	200000c0 	.word	0x200000c0
 8004130:	200000c4 	.word	0x200000c4

08004134 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800413a:	e019      	b.n	8004170 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800413c:	f000 fd94 	bl	8004c68 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004140:	4b10      	ldr	r3, [pc, #64]	; (8004184 <prvCheckTasksWaitingTermination+0x50>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	4618      	mov	r0, r3
 800414e:	f7fe fdef 	bl	8002d30 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004152:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <prvCheckTasksWaitingTermination+0x54>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3b01      	subs	r3, #1
 8004158:	4a0b      	ldr	r2, [pc, #44]	; (8004188 <prvCheckTasksWaitingTermination+0x54>)
 800415a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <prvCheckTasksWaitingTermination+0x58>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3b01      	subs	r3, #1
 8004162:	4a0a      	ldr	r2, [pc, #40]	; (800418c <prvCheckTasksWaitingTermination+0x58>)
 8004164:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004166:	f000 fdaf 	bl	8004cc8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f810 	bl	8004190 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004170:	4b06      	ldr	r3, [pc, #24]	; (800418c <prvCheckTasksWaitingTermination+0x58>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1e1      	bne.n	800413c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	200000dc 	.word	0x200000dc
 8004188:	20000108 	.word	0x20000108
 800418c:	200000f0 	.word	0x200000f0

08004190 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	4618      	mov	r0, r3
 800419e:	f000 ffab 	bl	80050f8 <vPortFree>
                vPortFree( pxTCB );
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 ffa8 	bl	80050f8 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80041a8:	bf00      	nop
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041b4:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <prvResetNextTaskUnblockTime+0x30>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d104      	bne.n	80041c8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80041be:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <prvResetNextTaskUnblockTime+0x34>)
 80041c0:	f04f 32ff 	mov.w	r2, #4294967295
 80041c4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80041c6:	e005      	b.n	80041d4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <prvResetNextTaskUnblockTime+0x30>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <prvResetNextTaskUnblockTime+0x34>)
 80041d2:	6013      	str	r3, [r2, #0]
}
 80041d4:	bf00      	nop
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	200000c0 	.word	0x200000c0
 80041e4:	20000128 	.word	0x20000128

080041e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80041ee:	4b0b      	ldr	r3, [pc, #44]	; (800421c <xTaskGetSchedulerState+0x34>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80041f6:	2301      	movs	r3, #1
 80041f8:	607b      	str	r3, [r7, #4]
 80041fa:	e008      	b.n	800420e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041fc:	4b08      	ldr	r3, [pc, #32]	; (8004220 <xTaskGetSchedulerState+0x38>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d102      	bne.n	800420a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004204:	2302      	movs	r3, #2
 8004206:	607b      	str	r3, [r7, #4]
 8004208:	e001      	b.n	800420e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800420a:	2300      	movs	r3, #0
 800420c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800420e:	687b      	ldr	r3, [r7, #4]
    }
 8004210:	4618      	mov	r0, r3
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	20000114 	.word	0x20000114
 8004220:	20000130 	.word	0x20000130

08004224 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004230:	2300      	movs	r3, #0
 8004232:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d063      	beq.n	8004302 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800423a:	4b34      	ldr	r3, [pc, #208]	; (800430c <xTaskPriorityDisinherit+0xe8>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	429a      	cmp	r2, r3
 8004242:	d00a      	beq.n	800425a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	60fb      	str	r3, [r7, #12]
    }
 8004256:	bf00      	nop
 8004258:	e7fe      	b.n	8004258 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	60bb      	str	r3, [r7, #8]
    }
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800427c:	1e5a      	subs	r2, r3, #1
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	661a      	str	r2, [r3, #96]	; 0x60

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428a:	429a      	cmp	r2, r3
 800428c:	d039      	beq.n	8004302 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004292:	2b00      	cmp	r3, #0
 8004294:	d135      	bne.n	8004302 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	3304      	adds	r3, #4
 800429a:	4618      	mov	r0, r3
 800429c:	f7fe fd48 	bl	8002d30 <uxListRemove>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	2201      	movs	r2, #1
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43da      	mvns	r2, r3
 80042b2:	4b17      	ldr	r3, [pc, #92]	; (8004310 <xTaskPriorityDisinherit+0xec>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4013      	ands	r3, r2
 80042b8:	4a15      	ldr	r2, [pc, #84]	; (8004310 <xTaskPriorityDisinherit+0xec>)
 80042ba:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	f1c3 0205 	rsb	r2, r3, #5
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	2201      	movs	r2, #1
 80042d6:	409a      	lsls	r2, r3
 80042d8:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <xTaskPriorityDisinherit+0xec>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4313      	orrs	r3, r2
 80042de:	4a0c      	ldr	r2, [pc, #48]	; (8004310 <xTaskPriorityDisinherit+0xec>)
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e6:	4613      	mov	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4a09      	ldr	r2, [pc, #36]	; (8004314 <xTaskPriorityDisinherit+0xf0>)
 80042f0:	441a      	add	r2, r3
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	3304      	adds	r3, #4
 80042f6:	4619      	mov	r1, r3
 80042f8:	4610      	mov	r0, r2
 80042fa:	f7fe fcbc 	bl	8002c76 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80042fe:	2301      	movs	r3, #1
 8004300:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004302:	697b      	ldr	r3, [r7, #20]
    }
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000030 	.word	0x20000030
 8004310:	20000110 	.word	0x20000110
 8004314:	20000034 	.word	0x20000034

08004318 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004322:	4b29      	ldr	r3, [pc, #164]	; (80043c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004328:	4b28      	ldr	r3, [pc, #160]	; (80043cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3304      	adds	r3, #4
 800432e:	4618      	mov	r0, r3
 8004330:	f7fe fcfe 	bl	8002d30 <uxListRemove>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10b      	bne.n	8004352 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800433a:	4b24      	ldr	r3, [pc, #144]	; (80043cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	2201      	movs	r2, #1
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	43da      	mvns	r2, r3
 8004348:	4b21      	ldr	r3, [pc, #132]	; (80043d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4013      	ands	r3, r2
 800434e:	4a20      	ldr	r2, [pc, #128]	; (80043d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004350:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004358:	d10a      	bne.n	8004370 <prvAddCurrentTaskToDelayedList+0x58>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d007      	beq.n	8004370 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004360:	4b1a      	ldr	r3, [pc, #104]	; (80043cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3304      	adds	r3, #4
 8004366:	4619      	mov	r1, r3
 8004368:	481a      	ldr	r0, [pc, #104]	; (80043d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800436a:	f7fe fc84 	bl	8002c76 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800436e:	e026      	b.n	80043be <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4413      	add	r3, r2
 8004376:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004378:	4b14      	ldr	r3, [pc, #80]	; (80043cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	429a      	cmp	r2, r3
 8004386:	d209      	bcs.n	800439c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004388:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3304      	adds	r3, #4
 8004392:	4619      	mov	r1, r3
 8004394:	4610      	mov	r0, r2
 8004396:	f7fe fc92 	bl	8002cbe <vListInsert>
}
 800439a:	e010      	b.n	80043be <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800439c:	4b0f      	ldr	r3, [pc, #60]	; (80043dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3304      	adds	r3, #4
 80043a6:	4619      	mov	r1, r3
 80043a8:	4610      	mov	r0, r2
 80043aa:	f7fe fc88 	bl	8002cbe <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80043ae:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d202      	bcs.n	80043be <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80043b8:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	6013      	str	r3, [r2, #0]
}
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	2000010c 	.word	0x2000010c
 80043cc:	20000030 	.word	0x20000030
 80043d0:	20000110 	.word	0x20000110
 80043d4:	200000f4 	.word	0x200000f4
 80043d8:	200000c4 	.word	0x200000c4
 80043dc:	200000c0 	.word	0x200000c0
 80043e0:	20000128 	.word	0x20000128

080043e4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80043ee:	f000 fad5 	bl	800499c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80043f2:	4b11      	ldr	r3, [pc, #68]	; (8004438 <xTimerCreateTimerTask+0x54>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00b      	beq.n	8004412 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80043fa:	4b10      	ldr	r3, [pc, #64]	; (800443c <xTimerCreateTimerTask+0x58>)
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	2304      	movs	r3, #4
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	2300      	movs	r3, #0
 8004404:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004408:	490d      	ldr	r1, [pc, #52]	; (8004440 <xTimerCreateTimerTask+0x5c>)
 800440a:	480e      	ldr	r0, [pc, #56]	; (8004444 <xTimerCreateTimerTask+0x60>)
 800440c:	f7ff f99a 	bl	8003744 <xTaskCreate>
 8004410:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10a      	bne.n	800442e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	603b      	str	r3, [r7, #0]
    }
 800442a:	bf00      	nop
 800442c:	e7fe      	b.n	800442c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800442e:	687b      	ldr	r3, [r7, #4]
    }
 8004430:	4618      	mov	r0, r3
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20000164 	.word	0x20000164
 800443c:	20000168 	.word	0x20000168
 8004440:	080053d4 	.word	0x080053d4
 8004444:	0800457d 	.word	0x0800457d

08004448 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	; 0x28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004456:	2300      	movs	r3, #0
 8004458:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <xTimerGenericCommand+0x2e>
        __asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	623b      	str	r3, [r7, #32]
    }
 8004472:	bf00      	nop
 8004474:	e7fe      	b.n	8004474 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004476:	4b1a      	ldr	r3, [pc, #104]	; (80044e0 <xTimerGenericCommand+0x98>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d02a      	beq.n	80044d4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b05      	cmp	r3, #5
 800448e:	dc18      	bgt.n	80044c2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004490:	f7ff feaa 	bl	80041e8 <xTaskGetSchedulerState>
 8004494:	4603      	mov	r3, r0
 8004496:	2b02      	cmp	r3, #2
 8004498:	d109      	bne.n	80044ae <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800449a:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <xTimerGenericCommand+0x98>)
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	f107 0114 	add.w	r1, r7, #20
 80044a2:	2300      	movs	r3, #0
 80044a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044a6:	f7fe fd57 	bl	8002f58 <xQueueGenericSend>
 80044aa:	6278      	str	r0, [r7, #36]	; 0x24
 80044ac:	e012      	b.n	80044d4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80044ae:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <xTimerGenericCommand+0x98>)
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	f107 0114 	add.w	r1, r7, #20
 80044b6:	2300      	movs	r3, #0
 80044b8:	2200      	movs	r2, #0
 80044ba:	f7fe fd4d 	bl	8002f58 <xQueueGenericSend>
 80044be:	6278      	str	r0, [r7, #36]	; 0x24
 80044c0:	e008      	b.n	80044d4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80044c2:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <xTimerGenericCommand+0x98>)
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	f107 0114 	add.w	r1, r7, #20
 80044ca:	2300      	movs	r3, #0
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	f7fe fe41 	bl	8003154 <xQueueGenericSendFromISR>
 80044d2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80044d6:	4618      	mov	r0, r3
 80044d8:	3728      	adds	r7, #40	; 0x28
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20000164 	.word	0x20000164

080044e4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044ee:	4b22      	ldr	r3, [pc, #136]	; (8004578 <prvProcessExpiredTimer+0x94>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	3304      	adds	r3, #4
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fe fc17 	bl	8002d30 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	d022      	beq.n	8004556 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	699a      	ldr	r2, [r3, #24]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	18d1      	adds	r1, r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	6978      	ldr	r0, [r7, #20]
 800451e:	f000 f8d1 	bl	80046c4 <prvInsertTimerInActiveList>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01f      	beq.n	8004568 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004528:	2300      	movs	r3, #0
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	2300      	movs	r3, #0
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	2100      	movs	r1, #0
 8004532:	6978      	ldr	r0, [r7, #20]
 8004534:	f7ff ff88 	bl	8004448 <xTimerGenericCommand>
 8004538:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d113      	bne.n	8004568 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	60fb      	str	r3, [r7, #12]
    }
 8004552:	bf00      	nop
 8004554:	e7fe      	b.n	8004554 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800455c:	f023 0301 	bic.w	r3, r3, #1
 8004560:	b2da      	uxtb	r2, r3
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	6978      	ldr	r0, [r7, #20]
 800456e:	4798      	blx	r3
    }
 8004570:	bf00      	nop
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	2000015c 	.word	0x2000015c

0800457c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004584:	f107 0308 	add.w	r3, r7, #8
 8004588:	4618      	mov	r0, r3
 800458a:	f000 f857 	bl	800463c <prvGetNextExpireTime>
 800458e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4619      	mov	r1, r3
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f803 	bl	80045a0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800459a:	f000 f8d5 	bl	8004748 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800459e:	e7f1      	b.n	8004584 <prvTimerTask+0x8>

080045a0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80045aa:	f7ff fa63 	bl	8003a74 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045ae:	f107 0308 	add.w	r3, r7, #8
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 f866 	bl	8004684 <prvSampleTimeNow>
 80045b8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d130      	bne.n	8004622 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10a      	bne.n	80045dc <prvProcessTimerOrBlockTask+0x3c>
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d806      	bhi.n	80045dc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80045ce:	f7ff fa5f 	bl	8003a90 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80045d2:	68f9      	ldr	r1, [r7, #12]
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7ff ff85 	bl	80044e4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80045da:	e024      	b.n	8004626 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d008      	beq.n	80045f4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80045e2:	4b13      	ldr	r3, [pc, #76]	; (8004630 <prvProcessTimerOrBlockTask+0x90>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <prvProcessTimerOrBlockTask+0x50>
 80045ec:	2301      	movs	r3, #1
 80045ee:	e000      	b.n	80045f2 <prvProcessTimerOrBlockTask+0x52>
 80045f0:	2300      	movs	r3, #0
 80045f2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80045f4:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <prvProcessTimerOrBlockTask+0x94>)
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	4619      	mov	r1, r3
 8004602:	f7ff f86b 	bl	80036dc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004606:	f7ff fa43 	bl	8003a90 <xTaskResumeAll>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10a      	bne.n	8004626 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004610:	4b09      	ldr	r3, [pc, #36]	; (8004638 <prvProcessTimerOrBlockTask+0x98>)
 8004612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	f3bf 8f6f 	isb	sy
    }
 8004620:	e001      	b.n	8004626 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004622:	f7ff fa35 	bl	8003a90 <xTaskResumeAll>
    }
 8004626:	bf00      	nop
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	20000160 	.word	0x20000160
 8004634:	20000164 	.word	0x20000164
 8004638:	e000ed04 	.word	0xe000ed04

0800463c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004644:	4b0e      	ldr	r3, [pc, #56]	; (8004680 <prvGetNextExpireTime+0x44>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <prvGetNextExpireTime+0x16>
 800464e:	2201      	movs	r2, #1
 8004650:	e000      	b.n	8004654 <prvGetNextExpireTime+0x18>
 8004652:	2200      	movs	r2, #0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d105      	bne.n	800466c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004660:	4b07      	ldr	r3, [pc, #28]	; (8004680 <prvGetNextExpireTime+0x44>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	e001      	b.n	8004670 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004670:	68fb      	ldr	r3, [r7, #12]
    }
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	2000015c 	.word	0x2000015c

08004684 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800468c:	f7ff fa9c 	bl	8003bc8 <xTaskGetTickCount>
 8004690:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004692:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <prvSampleTimeNow+0x3c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	429a      	cmp	r2, r3
 800469a:	d205      	bcs.n	80046a8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800469c:	f000 f91a 	bl	80048d4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e002      	b.n	80046ae <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80046ae:	4a04      	ldr	r2, [pc, #16]	; (80046c0 <prvSampleTimeNow+0x3c>)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80046b4:	68fb      	ldr	r3, [r7, #12]
    }
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	2000016c 	.word	0x2000016c

080046c4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80046d2:	2300      	movs	r3, #0
 80046d4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d812      	bhi.n	8004710 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	1ad2      	subs	r2, r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d302      	bcc.n	80046fe <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80046f8:	2301      	movs	r3, #1
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	e01b      	b.n	8004736 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80046fe:	4b10      	ldr	r3, [pc, #64]	; (8004740 <prvInsertTimerInActiveList+0x7c>)
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	3304      	adds	r3, #4
 8004706:	4619      	mov	r1, r3
 8004708:	4610      	mov	r0, r2
 800470a:	f7fe fad8 	bl	8002cbe <vListInsert>
 800470e:	e012      	b.n	8004736 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d206      	bcs.n	8004726 <prvInsertTimerInActiveList+0x62>
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d302      	bcc.n	8004726 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004720:	2301      	movs	r3, #1
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	e007      	b.n	8004736 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004726:	4b07      	ldr	r3, [pc, #28]	; (8004744 <prvInsertTimerInActiveList+0x80>)
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	3304      	adds	r3, #4
 800472e:	4619      	mov	r1, r3
 8004730:	4610      	mov	r0, r2
 8004732:	f7fe fac4 	bl	8002cbe <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004736:	697b      	ldr	r3, [r7, #20]
    }
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	20000160 	.word	0x20000160
 8004744:	2000015c 	.word	0x2000015c

08004748 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004748:	b580      	push	{r7, lr}
 800474a:	b08c      	sub	sp, #48	; 0x30
 800474c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800474e:	e0ae      	b.n	80048ae <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	f2c0 80aa 	blt.w	80048ac <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d004      	beq.n	800476e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	3304      	adds	r3, #4
 8004768:	4618      	mov	r0, r3
 800476a:	f7fe fae1 	bl	8002d30 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800476e:	1d3b      	adds	r3, r7, #4
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff ff87 	bl	8004684 <prvSampleTimeNow>
 8004776:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b09      	cmp	r3, #9
 800477c:	f200 8097 	bhi.w	80048ae <prvProcessReceivedCommands+0x166>
 8004780:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <prvProcessReceivedCommands+0x40>)
 8004782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004786:	bf00      	nop
 8004788:	080047b1 	.word	0x080047b1
 800478c:	080047b1 	.word	0x080047b1
 8004790:	080047b1 	.word	0x080047b1
 8004794:	08004825 	.word	0x08004825
 8004798:	08004839 	.word	0x08004839
 800479c:	08004883 	.word	0x08004883
 80047a0:	080047b1 	.word	0x080047b1
 80047a4:	080047b1 	.word	0x080047b1
 80047a8:	08004825 	.word	0x08004825
 80047ac:	08004839 	.word	0x08004839
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	18d1      	adds	r1, r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a3a      	ldr	r2, [r7, #32]
 80047ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047d0:	f7ff ff78 	bl	80046c4 <prvInsertTimerInActiveList>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d069      	beq.n	80048ae <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047e0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d05e      	beq.n	80048ae <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	441a      	add	r2, r3
 80047f8:	2300      	movs	r3, #0
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	2300      	movs	r3, #0
 80047fe:	2100      	movs	r1, #0
 8004800:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004802:	f7ff fe21 	bl	8004448 <xTimerGenericCommand>
 8004806:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d14f      	bne.n	80048ae <prvProcessReceivedCommands+0x166>
        __asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	61bb      	str	r3, [r7, #24]
    }
 8004820:	bf00      	nop
 8004822:	e7fe      	b.n	8004822 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800482a:	f023 0301 	bic.w	r3, r3, #1
 800482e:	b2da      	uxtb	r2, r3
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004836:	e03a      	b.n	80048ae <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800483e:	f043 0301 	orr.w	r3, r3, #1
 8004842:	b2da      	uxtb	r2, r3
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10a      	bne.n	800486e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	617b      	str	r3, [r7, #20]
    }
 800486a:	bf00      	nop
 800486c:	e7fe      	b.n	800486c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	18d1      	adds	r1, r2, r3
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	6a3a      	ldr	r2, [r7, #32]
 800487a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800487c:	f7ff ff22 	bl	80046c4 <prvInsertTimerInActiveList>
                        break;
 8004880:	e015      	b.n	80048ae <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d103      	bne.n	8004898 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004892:	f000 fc31 	bl	80050f8 <vPortFree>
 8004896:	e00a      	b.n	80048ae <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800489e:	f023 0301 	bic.w	r3, r3, #1
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80048aa:	e000      	b.n	80048ae <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80048ac:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048ae:	4b08      	ldr	r3, [pc, #32]	; (80048d0 <prvProcessReceivedCommands+0x188>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f107 0108 	add.w	r1, r7, #8
 80048b6:	2200      	movs	r2, #0
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fe fcf5 	bl	80032a8 <xQueueReceive>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f47f af45 	bne.w	8004750 <prvProcessReceivedCommands+0x8>
        }
    }
 80048c6:	bf00      	nop
 80048c8:	bf00      	nop
 80048ca:	3728      	adds	r7, #40	; 0x28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000164 	.word	0x20000164

080048d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b088      	sub	sp, #32
 80048d8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048da:	e048      	b.n	800496e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048dc:	4b2d      	ldr	r3, [pc, #180]	; (8004994 <prvSwitchTimerLists+0xc0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048e6:	4b2b      	ldr	r3, [pc, #172]	; (8004994 <prvSwitchTimerLists+0xc0>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3304      	adds	r3, #4
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fe fa1b 	bl	8002d30 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d02e      	beq.n	800496e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	4413      	add	r3, r2
 8004918:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	429a      	cmp	r2, r3
 8004920:	d90e      	bls.n	8004940 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800492e:	4b19      	ldr	r3, [pc, #100]	; (8004994 <prvSwitchTimerLists+0xc0>)
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3304      	adds	r3, #4
 8004936:	4619      	mov	r1, r3
 8004938:	4610      	mov	r0, r2
 800493a:	f7fe f9c0 	bl	8002cbe <vListInsert>
 800493e:	e016      	b.n	800496e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004940:	2300      	movs	r3, #0
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	2300      	movs	r3, #0
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	2100      	movs	r1, #0
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f7ff fd7c 	bl	8004448 <xTimerGenericCommand>
 8004950:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10a      	bne.n	800496e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	603b      	str	r3, [r7, #0]
    }
 800496a:	bf00      	nop
 800496c:	e7fe      	b.n	800496c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800496e:	4b09      	ldr	r3, [pc, #36]	; (8004994 <prvSwitchTimerLists+0xc0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1b1      	bne.n	80048dc <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004978:	4b06      	ldr	r3, [pc, #24]	; (8004994 <prvSwitchTimerLists+0xc0>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800497e:	4b06      	ldr	r3, [pc, #24]	; (8004998 <prvSwitchTimerLists+0xc4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a04      	ldr	r2, [pc, #16]	; (8004994 <prvSwitchTimerLists+0xc0>)
 8004984:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004986:	4a04      	ldr	r2, [pc, #16]	; (8004998 <prvSwitchTimerLists+0xc4>)
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	6013      	str	r3, [r2, #0]
    }
 800498c:	bf00      	nop
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	2000015c 	.word	0x2000015c
 8004998:	20000160 	.word	0x20000160

0800499c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80049a0:	f000 f962 	bl	8004c68 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80049a4:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <prvCheckForValidListAndQueue+0x54>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d11d      	bne.n	80049e8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80049ac:	4811      	ldr	r0, [pc, #68]	; (80049f4 <prvCheckForValidListAndQueue+0x58>)
 80049ae:	f7fe f935 	bl	8002c1c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80049b2:	4811      	ldr	r0, [pc, #68]	; (80049f8 <prvCheckForValidListAndQueue+0x5c>)
 80049b4:	f7fe f932 	bl	8002c1c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80049b8:	4b10      	ldr	r3, [pc, #64]	; (80049fc <prvCheckForValidListAndQueue+0x60>)
 80049ba:	4a0e      	ldr	r2, [pc, #56]	; (80049f4 <prvCheckForValidListAndQueue+0x58>)
 80049bc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80049be:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <prvCheckForValidListAndQueue+0x64>)
 80049c0:	4a0d      	ldr	r2, [pc, #52]	; (80049f8 <prvCheckForValidListAndQueue+0x5c>)
 80049c2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80049c4:	2200      	movs	r2, #0
 80049c6:	210c      	movs	r1, #12
 80049c8:	200a      	movs	r0, #10
 80049ca:	f7fe fa43 	bl	8002e54 <xQueueGenericCreate>
 80049ce:	4603      	mov	r3, r0
 80049d0:	4a07      	ldr	r2, [pc, #28]	; (80049f0 <prvCheckForValidListAndQueue+0x54>)
 80049d2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80049d4:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <prvCheckForValidListAndQueue+0x54>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80049dc:	4b04      	ldr	r3, [pc, #16]	; (80049f0 <prvCheckForValidListAndQueue+0x54>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4908      	ldr	r1, [pc, #32]	; (8004a04 <prvCheckForValidListAndQueue+0x68>)
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe fe50 	bl	8003688 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80049e8:	f000 f96e 	bl	8004cc8 <vPortExitCritical>
    }
 80049ec:	bf00      	nop
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	20000164 	.word	0x20000164
 80049f4:	20000134 	.word	0x20000134
 80049f8:	20000148 	.word	0x20000148
 80049fc:	2000015c 	.word	0x2000015c
 8004a00:	20000160 	.word	0x20000160
 8004a04:	080053dc 	.word	0x080053dc

08004a08 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	3b04      	subs	r3, #4
 8004a18:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a20:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3b04      	subs	r3, #4
 8004a26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f023 0201 	bic.w	r2, r3, #1
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3b04      	subs	r3, #4
 8004a36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004a38:	4a0c      	ldr	r2, [pc, #48]	; (8004a6c <pxPortInitialiseStack+0x64>)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3b14      	subs	r3, #20
 8004a42:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3b04      	subs	r3, #4
 8004a4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f06f 0202 	mvn.w	r2, #2
 8004a56:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	3b20      	subs	r3, #32
 8004a5c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	08004a71 	.word	0x08004a71

08004a70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004a76:	2300      	movs	r3, #0
 8004a78:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004a7a:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <prvTaskExitError+0x54>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a82:	d00a      	beq.n	8004a9a <prvTaskExitError+0x2a>
        __asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	60fb      	str	r3, [r7, #12]
    }
 8004a96:	bf00      	nop
 8004a98:	e7fe      	b.n	8004a98 <prvTaskExitError+0x28>
        __asm volatile
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	60bb      	str	r3, [r7, #8]
    }
 8004aac:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004aae:	bf00      	nop
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0fc      	beq.n	8004ab0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004ab6:	bf00      	nop
 8004ab8:	bf00      	nop
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	20000010 	.word	0x20000010
	...

08004ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004ad0:	4b07      	ldr	r3, [pc, #28]	; (8004af0 <pxCurrentTCBConst2>)
 8004ad2:	6819      	ldr	r1, [r3, #0]
 8004ad4:	6808      	ldr	r0, [r1, #0]
 8004ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ada:	f380 8809 	msr	PSP, r0
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f04f 0000 	mov.w	r0, #0
 8004ae6:	f380 8811 	msr	BASEPRI, r0
 8004aea:	4770      	bx	lr
 8004aec:	f3af 8000 	nop.w

08004af0 <pxCurrentTCBConst2>:
 8004af0:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop

08004af8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004af8:	4808      	ldr	r0, [pc, #32]	; (8004b1c <prvPortStartFirstTask+0x24>)
 8004afa:	6800      	ldr	r0, [r0, #0]
 8004afc:	6800      	ldr	r0, [r0, #0]
 8004afe:	f380 8808 	msr	MSP, r0
 8004b02:	f04f 0000 	mov.w	r0, #0
 8004b06:	f380 8814 	msr	CONTROL, r0
 8004b0a:	b662      	cpsie	i
 8004b0c:	b661      	cpsie	f
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	df00      	svc	0
 8004b18:	bf00      	nop
 8004b1a:	0000      	.short	0x0000
 8004b1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004b20:	bf00      	nop
 8004b22:	bf00      	nop

08004b24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b2a:	4b46      	ldr	r3, [pc, #280]	; (8004c44 <xPortStartScheduler+0x120>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a46      	ldr	r2, [pc, #280]	; (8004c48 <xPortStartScheduler+0x124>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d10a      	bne.n	8004b4a <xPortStartScheduler+0x26>
        __asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	613b      	str	r3, [r7, #16]
    }
 8004b46:	bf00      	nop
 8004b48:	e7fe      	b.n	8004b48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b4a:	4b3e      	ldr	r3, [pc, #248]	; (8004c44 <xPortStartScheduler+0x120>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a3f      	ldr	r2, [pc, #252]	; (8004c4c <xPortStartScheduler+0x128>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d10a      	bne.n	8004b6a <xPortStartScheduler+0x46>
        __asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	60fb      	str	r3, [r7, #12]
    }
 8004b66:	bf00      	nop
 8004b68:	e7fe      	b.n	8004b68 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b6a:	4b39      	ldr	r3, [pc, #228]	; (8004c50 <xPortStartScheduler+0x12c>)
 8004b6c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	22ff      	movs	r2, #255	; 0xff
 8004b7a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	4b31      	ldr	r3, [pc, #196]	; (8004c54 <xPortStartScheduler+0x130>)
 8004b90:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b92:	4b31      	ldr	r3, [pc, #196]	; (8004c58 <xPortStartScheduler+0x134>)
 8004b94:	2207      	movs	r2, #7
 8004b96:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b98:	e009      	b.n	8004bae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004b9a:	4b2f      	ldr	r3, [pc, #188]	; (8004c58 <xPortStartScheduler+0x134>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	4a2d      	ldr	r2, [pc, #180]	; (8004c58 <xPortStartScheduler+0x134>)
 8004ba2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bae:	78fb      	ldrb	r3, [r7, #3]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb6:	2b80      	cmp	r3, #128	; 0x80
 8004bb8:	d0ef      	beq.n	8004b9a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004bba:	4b27      	ldr	r3, [pc, #156]	; (8004c58 <xPortStartScheduler+0x134>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f1c3 0307 	rsb	r3, r3, #7
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d00a      	beq.n	8004bdc <xPortStartScheduler+0xb8>
        __asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	60bb      	str	r3, [r7, #8]
    }
 8004bd8:	bf00      	nop
 8004bda:	e7fe      	b.n	8004bda <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bdc:	4b1e      	ldr	r3, [pc, #120]	; (8004c58 <xPortStartScheduler+0x134>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	021b      	lsls	r3, r3, #8
 8004be2:	4a1d      	ldr	r2, [pc, #116]	; (8004c58 <xPortStartScheduler+0x134>)
 8004be4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004be6:	4b1c      	ldr	r3, [pc, #112]	; (8004c58 <xPortStartScheduler+0x134>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bee:	4a1a      	ldr	r2, [pc, #104]	; (8004c58 <xPortStartScheduler+0x134>)
 8004bf0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004bfa:	4b18      	ldr	r3, [pc, #96]	; (8004c5c <xPortStartScheduler+0x138>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a17      	ldr	r2, [pc, #92]	; (8004c5c <xPortStartScheduler+0x138>)
 8004c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c04:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004c06:	4b15      	ldr	r3, [pc, #84]	; (8004c5c <xPortStartScheduler+0x138>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a14      	ldr	r2, [pc, #80]	; (8004c5c <xPortStartScheduler+0x138>)
 8004c0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c10:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004c12:	f000 f8db 	bl	8004dcc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004c16:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <xPortStartScheduler+0x13c>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004c1c:	f000 f8fa 	bl	8004e14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c20:	4b10      	ldr	r3, [pc, #64]	; (8004c64 <xPortStartScheduler+0x140>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a0f      	ldr	r2, [pc, #60]	; (8004c64 <xPortStartScheduler+0x140>)
 8004c26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c2a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004c2c:	f7ff ff64 	bl	8004af8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004c30:	f7ff f892 	bl	8003d58 <vTaskSwitchContext>
    prvTaskExitError();
 8004c34:	f7ff ff1c 	bl	8004a70 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	e000ed00 	.word	0xe000ed00
 8004c48:	410fc271 	.word	0x410fc271
 8004c4c:	410fc270 	.word	0x410fc270
 8004c50:	e000e400 	.word	0xe000e400
 8004c54:	20000170 	.word	0x20000170
 8004c58:	20000174 	.word	0x20000174
 8004c5c:	e000ed20 	.word	0xe000ed20
 8004c60:	20000010 	.word	0x20000010
 8004c64:	e000ef34 	.word	0xe000ef34

08004c68 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
        __asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	607b      	str	r3, [r7, #4]
    }
 8004c80:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004c82:	4b0f      	ldr	r3, [pc, #60]	; (8004cc0 <vPortEnterCritical+0x58>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3301      	adds	r3, #1
 8004c88:	4a0d      	ldr	r2, [pc, #52]	; (8004cc0 <vPortEnterCritical+0x58>)
 8004c8a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004c8c:	4b0c      	ldr	r3, [pc, #48]	; (8004cc0 <vPortEnterCritical+0x58>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d10f      	bne.n	8004cb4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c94:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <vPortEnterCritical+0x5c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <vPortEnterCritical+0x4c>
        __asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	603b      	str	r3, [r7, #0]
    }
 8004cb0:	bf00      	nop
 8004cb2:	e7fe      	b.n	8004cb2 <vPortEnterCritical+0x4a>
    }
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	20000010 	.word	0x20000010
 8004cc4:	e000ed04 	.word	0xe000ed04

08004cc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004cce:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <vPortExitCritical+0x50>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10a      	bne.n	8004cec <vPortExitCritical+0x24>
        __asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	607b      	str	r3, [r7, #4]
    }
 8004ce8:	bf00      	nop
 8004cea:	e7fe      	b.n	8004cea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004cec:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <vPortExitCritical+0x50>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	4a09      	ldr	r2, [pc, #36]	; (8004d18 <vPortExitCritical+0x50>)
 8004cf4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004cf6:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <vPortExitCritical+0x50>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d105      	bne.n	8004d0a <vPortExitCritical+0x42>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	f383 8811 	msr	BASEPRI, r3
    }
 8004d08:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	20000010 	.word	0x20000010
 8004d1c:	00000000 	.word	0x00000000

08004d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004d20:	f3ef 8009 	mrs	r0, PSP
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	4b15      	ldr	r3, [pc, #84]	; (8004d80 <pxCurrentTCBConst>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	f01e 0f10 	tst.w	lr, #16
 8004d30:	bf08      	it	eq
 8004d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3a:	6010      	str	r0, [r2, #0]
 8004d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d44:	f380 8811 	msr	BASEPRI, r0
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f7ff f802 	bl	8003d58 <vTaskSwitchContext>
 8004d54:	f04f 0000 	mov.w	r0, #0
 8004d58:	f380 8811 	msr	BASEPRI, r0
 8004d5c:	bc09      	pop	{r0, r3}
 8004d5e:	6819      	ldr	r1, [r3, #0]
 8004d60:	6808      	ldr	r0, [r1, #0]
 8004d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d66:	f01e 0f10 	tst.w	lr, #16
 8004d6a:	bf08      	it	eq
 8004d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d70:	f380 8809 	msr	PSP, r0
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	f3af 8000 	nop.w

08004d80 <pxCurrentTCBConst>:
 8004d80:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop

08004d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
        __asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	607b      	str	r3, [r7, #4]
    }
 8004da0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004da2:	f7fe ff21 	bl	8003be8 <xTaskIncrementTick>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004dac:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <SysTick_Handler+0x40>)
 8004dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	2300      	movs	r3, #0
 8004db6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	f383 8811 	msr	BASEPRI, r3
    }
 8004dbe:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8004dc0:	bf00      	nop
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	e000ed04 	.word	0xe000ed04

08004dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <vPortSetupTimerInterrupt+0x34>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <vPortSetupTimerInterrupt+0x38>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <vPortSetupTimerInterrupt+0x3c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a0a      	ldr	r2, [pc, #40]	; (8004e0c <vPortSetupTimerInterrupt+0x40>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	099b      	lsrs	r3, r3, #6
 8004de8:	4a09      	ldr	r2, [pc, #36]	; (8004e10 <vPortSetupTimerInterrupt+0x44>)
 8004dea:	3b01      	subs	r3, #1
 8004dec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dee:	4b04      	ldr	r3, [pc, #16]	; (8004e00 <vPortSetupTimerInterrupt+0x34>)
 8004df0:	2207      	movs	r2, #7
 8004df2:	601a      	str	r2, [r3, #0]
}
 8004df4:	bf00      	nop
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	e000e010 	.word	0xe000e010
 8004e04:	e000e018 	.word	0xe000e018
 8004e08:	20000000 	.word	0x20000000
 8004e0c:	10624dd3 	.word	0x10624dd3
 8004e10:	e000e014 	.word	0xe000e014

08004e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004e14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e24 <vPortEnableVFP+0x10>
 8004e18:	6801      	ldr	r1, [r0, #0]
 8004e1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e1e:	6001      	str	r1, [r0, #0]
 8004e20:	4770      	bx	lr
 8004e22:	0000      	.short	0x0000
 8004e24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop

08004e2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
    	vSetVarulMaxPRIGROUPValue();
 8004e32:	f000 f83b 	bl	8004eac <vSetVarulMaxPRIGROUPValue>
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004e36:	f3ef 8305 	mrs	r3, IPSR
 8004e3a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b0f      	cmp	r3, #15
 8004e40:	d914      	bls.n	8004e6c <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e42:	4a16      	ldr	r2, [pc, #88]	; (8004e9c <vPortValidateInterruptPriority+0x70>)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e4c:	4b14      	ldr	r3, [pc, #80]	; (8004ea0 <vPortValidateInterruptPriority+0x74>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	7afa      	ldrb	r2, [r7, #11]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d20a      	bcs.n	8004e6c <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8004e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5a:	f383 8811 	msr	BASEPRI, r3
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	607b      	str	r3, [r7, #4]
    }
 8004e68:	bf00      	nop
 8004e6a:	e7fe      	b.n	8004e6a <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ea4 <vPortValidateInterruptPriority+0x78>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e74:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <vPortValidateInterruptPriority+0x7c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d90a      	bls.n	8004e92 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	603b      	str	r3, [r7, #0]
    }
 8004e8e:	bf00      	nop
 8004e90:	e7fe      	b.n	8004e90 <vPortValidateInterruptPriority+0x64>
    }
 8004e92:	bf00      	nop
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	e000e3f0 	.word	0xe000e3f0
 8004ea0:	20000170 	.word	0x20000170
 8004ea4:	e000ed0c 	.word	0xe000ed0c
 8004ea8:	20000174 	.word	0x20000174

08004eac <vSetVarulMaxPRIGROUPValue>:

    //###########################################################
    // Add function below in file port.c
    #if( configASSERT_DEFINED == 1 )
    void vSetVarulMaxPRIGROUPValue( void )
    {
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
    	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004eb2:	4b1f      	ldr	r3, [pc, #124]	; (8004f30 <vSetVarulMaxPRIGROUPValue+0x84>)
 8004eb4:	60fb      	str	r3, [r7, #12]
    	volatile uint8_t ucMaxPriorityValue;
    	/* Determine the number of priority bits available.  First write to all
    	possible bits. */
    	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	22ff      	movs	r2, #255	; 0xff
 8004eba:	701a      	strb	r2, [r3, #0]
    	/* Read the value back to see how many bits stuck. */
    	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	71fb      	strb	r3, [r7, #7]
    	/* Calculate the maximum acceptable priority group value for the number
    	of bits read back. */
    	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ec4:	4b1b      	ldr	r3, [pc, #108]	; (8004f34 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004ec6:	2207      	movs	r2, #7
 8004ec8:	601a      	str	r2, [r3, #0]
    	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004eca:	e009      	b.n	8004ee0 <vSetVarulMaxPRIGROUPValue+0x34>
    	{
    		ulMaxPRIGROUPValue--;
 8004ecc:	4b19      	ldr	r3, [pc, #100]	; (8004f34 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	4a18      	ldr	r2, [pc, #96]	; (8004f34 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004ed4:	6013      	str	r3, [r2, #0]
    		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	71fb      	strb	r3, [r7, #7]
    	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ee0:	79fb      	ldrb	r3, [r7, #7]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee8:	2b80      	cmp	r3, #128	; 0x80
 8004eea:	d0ef      	beq.n	8004ecc <vSetVarulMaxPRIGROUPValue+0x20>
    #ifdef configPRIO_BITS
    	{
    		/* Check the FreeRTOS configuration that defines the number of
    		priority bits matches the number of priority bits actually queried
    		from the hardware. */
    		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004eec:	4b11      	ldr	r3, [pc, #68]	; (8004f34 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f1c3 0307 	rsb	r3, r3, #7
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d00a      	beq.n	8004f0e <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	60bb      	str	r3, [r7, #8]
    }
 8004f0a:	bf00      	nop
 8004f0c:	e7fe      	b.n	8004f0c <vSetVarulMaxPRIGROUPValue+0x60>
    	}
    #endif
    	/* Shift the priority group value back to its position within the AIRCR
    	register. */
    	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f0e:	4b09      	ldr	r3, [pc, #36]	; (8004f34 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	021b      	lsls	r3, r3, #8
 8004f14:	4a07      	ldr	r2, [pc, #28]	; (8004f34 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004f16:	6013      	str	r3, [r2, #0]
    	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f18:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f20:	4a04      	ldr	r2, [pc, #16]	; (8004f34 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004f22:	6013      	str	r3, [r2, #0]
    }
 8004f24:	bf00      	nop
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	e000e400 	.word	0xe000e400
 8004f34:	20000174 	.word	0x20000174

08004f38 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08a      	sub	sp, #40	; 0x28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004f40:	2300      	movs	r3, #0
 8004f42:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004f44:	f7fe fd96 	bl	8003a74 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004f48:	4b65      	ldr	r3, [pc, #404]	; (80050e0 <pvPortMalloc+0x1a8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004f50:	f000 f934 	bl	80051bc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f54:	4b63      	ldr	r3, [pc, #396]	; (80050e4 <pvPortMalloc+0x1ac>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f040 80a7 	bne.w	80050b0 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d02d      	beq.n	8004fc4 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004f68:	2208      	movs	r2, #8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d227      	bcs.n	8004fc4 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004f74:	2208      	movs	r2, #8
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4413      	add	r3, r2
 8004f7a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d021      	beq.n	8004fca <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f023 0307 	bic.w	r3, r3, #7
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d214      	bcs.n	8004fbe <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f023 0307 	bic.w	r3, r3, #7
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d010      	beq.n	8004fca <pvPortMalloc+0x92>
        __asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	617b      	str	r3, [r7, #20]
    }
 8004fba:	bf00      	nop
 8004fbc:	e7fe      	b.n	8004fbc <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fc2:	e002      	b.n	8004fca <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	607b      	str	r3, [r7, #4]
 8004fc8:	e000      	b.n	8004fcc <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fca:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d06e      	beq.n	80050b0 <pvPortMalloc+0x178>
 8004fd2:	4b45      	ldr	r3, [pc, #276]	; (80050e8 <pvPortMalloc+0x1b0>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d869      	bhi.n	80050b0 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004fdc:	4b43      	ldr	r3, [pc, #268]	; (80050ec <pvPortMalloc+0x1b4>)
 8004fde:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004fe0:	4b42      	ldr	r3, [pc, #264]	; (80050ec <pvPortMalloc+0x1b4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fe6:	e004      	b.n	8004ff2 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d903      	bls.n	8005004 <pvPortMalloc+0xcc>
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1f1      	bne.n	8004fe8 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005004:	4b36      	ldr	r3, [pc, #216]	; (80050e0 <pvPortMalloc+0x1a8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500a:	429a      	cmp	r2, r3
 800500c:	d050      	beq.n	80050b0 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2208      	movs	r2, #8
 8005014:	4413      	add	r3, r2
 8005016:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	1ad2      	subs	r2, r2, r3
 8005028:	2308      	movs	r3, #8
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	429a      	cmp	r2, r3
 800502e:	d91f      	bls.n	8005070 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4413      	add	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <pvPortMalloc+0x120>
        __asm volatile
 8005042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	613b      	str	r3, [r7, #16]
    }
 8005054:	bf00      	nop
 8005056:	e7fe      	b.n	8005056 <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	1ad2      	subs	r2, r2, r3
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800506a:	69b8      	ldr	r0, [r7, #24]
 800506c:	f000 f908 	bl	8005280 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005070:	4b1d      	ldr	r3, [pc, #116]	; (80050e8 <pvPortMalloc+0x1b0>)
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	4a1b      	ldr	r2, [pc, #108]	; (80050e8 <pvPortMalloc+0x1b0>)
 800507c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800507e:	4b1a      	ldr	r3, [pc, #104]	; (80050e8 <pvPortMalloc+0x1b0>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4b1b      	ldr	r3, [pc, #108]	; (80050f0 <pvPortMalloc+0x1b8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d203      	bcs.n	8005092 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800508a:	4b17      	ldr	r3, [pc, #92]	; (80050e8 <pvPortMalloc+0x1b0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a18      	ldr	r2, [pc, #96]	; (80050f0 <pvPortMalloc+0x1b8>)
 8005090:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	4b13      	ldr	r3, [pc, #76]	; (80050e4 <pvPortMalloc+0x1ac>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	431a      	orrs	r2, r3
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80050a6:	4b13      	ldr	r3, [pc, #76]	; (80050f4 <pvPortMalloc+0x1bc>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3301      	adds	r3, #1
 80050ac:	4a11      	ldr	r2, [pc, #68]	; (80050f4 <pvPortMalloc+0x1bc>)
 80050ae:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80050b0:	f7fe fcee 	bl	8003a90 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <pvPortMalloc+0x19c>
        __asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	60fb      	str	r3, [r7, #12]
    }
 80050d0:	bf00      	nop
 80050d2:	e7fe      	b.n	80050d2 <pvPortMalloc+0x19a>
    return pvReturn;
 80050d4:	69fb      	ldr	r3, [r7, #28]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3728      	adds	r7, #40	; 0x28
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20003d80 	.word	0x20003d80
 80050e4:	20003d94 	.word	0x20003d94
 80050e8:	20003d84 	.word	0x20003d84
 80050ec:	20003d78 	.word	0x20003d78
 80050f0:	20003d88 	.word	0x20003d88
 80050f4:	20003d8c 	.word	0x20003d8c

080050f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d04d      	beq.n	80051a6 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800510a:	2308      	movs	r3, #8
 800510c:	425b      	negs	r3, r3
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4413      	add	r3, r2
 8005112:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	4b24      	ldr	r3, [pc, #144]	; (80051b0 <vPortFree+0xb8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4013      	ands	r3, r2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10a      	bne.n	800513c <vPortFree+0x44>
        __asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	60fb      	str	r3, [r7, #12]
    }
 8005138:	bf00      	nop
 800513a:	e7fe      	b.n	800513a <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <vPortFree+0x62>
        __asm volatile
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	60bb      	str	r3, [r7, #8]
    }
 8005156:	bf00      	nop
 8005158:	e7fe      	b.n	8005158 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	4b14      	ldr	r3, [pc, #80]	; (80051b0 <vPortFree+0xb8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4013      	ands	r3, r2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01e      	beq.n	80051a6 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d11a      	bne.n	80051a6 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	4b0e      	ldr	r3, [pc, #56]	; (80051b0 <vPortFree+0xb8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	43db      	mvns	r3, r3
 800517a:	401a      	ands	r2, r3
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005180:	f7fe fc78 	bl	8003a74 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <vPortFree+0xbc>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4413      	add	r3, r2
 800518e:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <vPortFree+0xbc>)
 8005190:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005192:	6938      	ldr	r0, [r7, #16]
 8005194:	f000 f874 	bl	8005280 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005198:	4b07      	ldr	r3, [pc, #28]	; (80051b8 <vPortFree+0xc0>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3301      	adds	r3, #1
 800519e:	4a06      	ldr	r2, [pc, #24]	; (80051b8 <vPortFree+0xc0>)
 80051a0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80051a2:	f7fe fc75 	bl	8003a90 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80051a6:	bf00      	nop
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20003d94 	.word	0x20003d94
 80051b4:	20003d84 	.word	0x20003d84
 80051b8:	20003d90 	.word	0x20003d90

080051bc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051c2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80051c6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80051c8:	4b27      	ldr	r3, [pc, #156]	; (8005268 <prvHeapInit+0xac>)
 80051ca:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00c      	beq.n	80051f0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3307      	adds	r3, #7
 80051da:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0307 	bic.w	r3, r3, #7
 80051e2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	4a1f      	ldr	r2, [pc, #124]	; (8005268 <prvHeapInit+0xac>)
 80051ec:	4413      	add	r3, r2
 80051ee:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051f4:	4a1d      	ldr	r2, [pc, #116]	; (800526c <prvHeapInit+0xb0>)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80051fa:	4b1c      	ldr	r3, [pc, #112]	; (800526c <prvHeapInit+0xb0>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	4413      	add	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005208:	2208      	movs	r2, #8
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	1a9b      	subs	r3, r3, r2
 800520e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0307 	bic.w	r3, r3, #7
 8005216:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4a15      	ldr	r2, [pc, #84]	; (8005270 <prvHeapInit+0xb4>)
 800521c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800521e:	4b14      	ldr	r3, [pc, #80]	; (8005270 <prvHeapInit+0xb4>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2200      	movs	r2, #0
 8005224:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005226:	4b12      	ldr	r3, [pc, #72]	; (8005270 <prvHeapInit+0xb4>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2200      	movs	r2, #0
 800522c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	1ad2      	subs	r2, r2, r3
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800523c:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <prvHeapInit+0xb4>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	4a0a      	ldr	r2, [pc, #40]	; (8005274 <prvHeapInit+0xb8>)
 800524a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	4a09      	ldr	r2, [pc, #36]	; (8005278 <prvHeapInit+0xbc>)
 8005252:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005254:	4b09      	ldr	r3, [pc, #36]	; (800527c <prvHeapInit+0xc0>)
 8005256:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800525a:	601a      	str	r2, [r3, #0]
}
 800525c:	bf00      	nop
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	20000178 	.word	0x20000178
 800526c:	20003d78 	.word	0x20003d78
 8005270:	20003d80 	.word	0x20003d80
 8005274:	20003d88 	.word	0x20003d88
 8005278:	20003d84 	.word	0x20003d84
 800527c:	20003d94 	.word	0x20003d94

08005280 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005288:	4b28      	ldr	r3, [pc, #160]	; (800532c <prvInsertBlockIntoFreeList+0xac>)
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	e002      	b.n	8005294 <prvInsertBlockIntoFreeList+0x14>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	429a      	cmp	r2, r3
 800529c:	d8f7      	bhi.n	800528e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	4413      	add	r3, r2
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d108      	bne.n	80052c2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	441a      	add	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	441a      	add	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d118      	bne.n	8005308 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	4b15      	ldr	r3, [pc, #84]	; (8005330 <prvInsertBlockIntoFreeList+0xb0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d00d      	beq.n	80052fe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	441a      	add	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	e008      	b.n	8005310 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052fe:	4b0c      	ldr	r3, [pc, #48]	; (8005330 <prvInsertBlockIntoFreeList+0xb0>)
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	e003      	b.n	8005310 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	429a      	cmp	r2, r3
 8005316:	d002      	beq.n	800531e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800531e:	bf00      	nop
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20003d78 	.word	0x20003d78
 8005330:	20003d80 	.word	0x20003d80

08005334 <__libc_init_array>:
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	4d0d      	ldr	r5, [pc, #52]	; (800536c <__libc_init_array+0x38>)
 8005338:	4c0d      	ldr	r4, [pc, #52]	; (8005370 <__libc_init_array+0x3c>)
 800533a:	1b64      	subs	r4, r4, r5
 800533c:	10a4      	asrs	r4, r4, #2
 800533e:	2600      	movs	r6, #0
 8005340:	42a6      	cmp	r6, r4
 8005342:	d109      	bne.n	8005358 <__libc_init_array+0x24>
 8005344:	4d0b      	ldr	r5, [pc, #44]	; (8005374 <__libc_init_array+0x40>)
 8005346:	4c0c      	ldr	r4, [pc, #48]	; (8005378 <__libc_init_array+0x44>)
 8005348:	f000 f82e 	bl	80053a8 <_init>
 800534c:	1b64      	subs	r4, r4, r5
 800534e:	10a4      	asrs	r4, r4, #2
 8005350:	2600      	movs	r6, #0
 8005352:	42a6      	cmp	r6, r4
 8005354:	d105      	bne.n	8005362 <__libc_init_array+0x2e>
 8005356:	bd70      	pop	{r4, r5, r6, pc}
 8005358:	f855 3b04 	ldr.w	r3, [r5], #4
 800535c:	4798      	blx	r3
 800535e:	3601      	adds	r6, #1
 8005360:	e7ee      	b.n	8005340 <__libc_init_array+0xc>
 8005362:	f855 3b04 	ldr.w	r3, [r5], #4
 8005366:	4798      	blx	r3
 8005368:	3601      	adds	r6, #1
 800536a:	e7f2      	b.n	8005352 <__libc_init_array+0x1e>
 800536c:	08005404 	.word	0x08005404
 8005370:	08005404 	.word	0x08005404
 8005374:	08005404 	.word	0x08005404
 8005378:	08005408 	.word	0x08005408

0800537c <memcpy>:
 800537c:	440a      	add	r2, r1
 800537e:	4291      	cmp	r1, r2
 8005380:	f100 33ff 	add.w	r3, r0, #4294967295
 8005384:	d100      	bne.n	8005388 <memcpy+0xc>
 8005386:	4770      	bx	lr
 8005388:	b510      	push	{r4, lr}
 800538a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800538e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005392:	4291      	cmp	r1, r2
 8005394:	d1f9      	bne.n	800538a <memcpy+0xe>
 8005396:	bd10      	pop	{r4, pc}

08005398 <memset>:
 8005398:	4402      	add	r2, r0
 800539a:	4603      	mov	r3, r0
 800539c:	4293      	cmp	r3, r2
 800539e:	d100      	bne.n	80053a2 <memset+0xa>
 80053a0:	4770      	bx	lr
 80053a2:	f803 1b01 	strb.w	r1, [r3], #1
 80053a6:	e7f9      	b.n	800539c <memset+0x4>

080053a8 <_init>:
 80053a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053aa:	bf00      	nop
 80053ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ae:	bc08      	pop	{r3}
 80053b0:	469e      	mov	lr, r3
 80053b2:	4770      	bx	lr

080053b4 <_fini>:
 80053b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b6:	bf00      	nop
 80053b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ba:	bc08      	pop	{r3}
 80053bc:	469e      	mov	lr, r3
 80053be:	4770      	bx	lr
