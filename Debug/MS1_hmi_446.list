
MS1_hmi_446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005880  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08005a50  08005a50  00015a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a94  08005a94  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005a94  08005a94  00015a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a9c  08005a9c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a9c  08005a9c  00015a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005aa0  08005aa0  00015aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f18  20000014  08005ab8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003f2c  08005ab8  00023f2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d81  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003882  00000000  00000000  00039dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  0003d648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003ea88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039c1  00000000  00000000  0003fd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019040  00000000  00000000  00043711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dad2a  00000000  00000000  0005c751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013747b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053c0  00000000  00000000  001374d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a38 	.word	0x08005a38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08005a38 	.word	0x08005a38

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <handler_leds>:
 *              commands
 * 
 * @param       parameters 
 * ************************************************************* **/
static void handler_leds(void* parameters)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
    STRUCT_LEDS_t led;

    while(1)
    {
        /* check for new command */
        if(xQueueReceive(QueueHandle_leds_cmd, &led, portMAX_DELAY)) 
 8000510:	4bc3      	ldr	r3, [pc, #780]	; (8000820 <handler_leds+0x318>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f107 010c 	add.w	r1, r7, #12
 8000518:	f04f 32ff 	mov.w	r2, #4294967295
 800051c:	4618      	mov	r0, r3
 800051e:	f003 fa0b 	bl	8003938 <xQueueReceive>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	f000 81cf 	beq.w	80008c8 <handler_leds+0x3c0>
        {
            switch (led.list)
 800052a:	7b7b      	ldrb	r3, [r7, #13]
 800052c:	2b04      	cmp	r3, #4
 800052e:	f200 81cd 	bhi.w	80008cc <handler_leds+0x3c4>
 8000532:	a201      	add	r2, pc, #4	; (adr r2, 8000538 <handler_leds+0x30>)
 8000534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000538:	0800054d 	.word	0x0800054d
 800053c:	08000605 	.word	0x08000605
 8000540:	080006bd 	.word	0x080006bd
 8000544:	08000765 	.word	0x08000765
 8000548:	08000805 	.word	0x08000805
            {
                /* LED 1 */
                case E_LIST_LED1 :
                    switch (led.cmd)
 800054c:	7b3b      	ldrb	r3, [r7, #12]
 800054e:	2b03      	cmp	r3, #3
 8000550:	d856      	bhi.n	8000600 <handler_leds+0xf8>
 8000552:	a201      	add	r2, pc, #4	; (adr r2, 8000558 <handler_leds+0x50>)
 8000554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000558:	08000569 	.word	0x08000569
 800055c:	0800058f 	.word	0x0800058f
 8000560:	080005b5 	.word	0x080005b5
 8000564:	080005db 	.word	0x080005db
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056e:	48ad      	ldr	r0, [pc, #692]	; (8000824 <handler_leds+0x31c>)
 8000570:	f001 fb9a 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800057a:	48aa      	ldr	r0, [pc, #680]	; (8000824 <handler_leds+0x31c>)
 800057c:	f001 fb94 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000586:	48a7      	ldr	r0, [pc, #668]	; (8000824 <handler_leds+0x31c>)
 8000588:	f001 fb8e 	bl	8001ca8 <HAL_GPIO_WritePin>
                            break;
 800058c:	e039      	b.n	8000602 <handler_leds+0xfa>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000594:	48a3      	ldr	r0, [pc, #652]	; (8000824 <handler_leds+0x31c>)
 8000596:	f001 fb87 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a0:	48a0      	ldr	r0, [pc, #640]	; (8000824 <handler_leds+0x31c>)
 80005a2:	f001 fb81 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ac:	489d      	ldr	r0, [pc, #628]	; (8000824 <handler_leds+0x31c>)
 80005ae:	f001 fb7b 	bl	8001ca8 <HAL_GPIO_WritePin>
                            break;
 80005b2:	e026      	b.n	8000602 <handler_leds+0xfa>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ba:	489a      	ldr	r0, [pc, #616]	; (8000824 <handler_leds+0x31c>)
 80005bc:	f001 fb74 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c6:	4897      	ldr	r0, [pc, #604]	; (8000824 <handler_leds+0x31c>)
 80005c8:	f001 fb6e 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d2:	4894      	ldr	r0, [pc, #592]	; (8000824 <handler_leds+0x31c>)
 80005d4:	f001 fb68 	bl	8001ca8 <HAL_GPIO_WritePin>
                            break;
 80005d8:	e013      	b.n	8000602 <handler_leds+0xfa>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e0:	4890      	ldr	r0, [pc, #576]	; (8000824 <handler_leds+0x31c>)
 80005e2:	f001 fb61 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ec:	488d      	ldr	r0, [pc, #564]	; (8000824 <handler_leds+0x31c>)
 80005ee:	f001 fb5b 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f8:	488a      	ldr	r0, [pc, #552]	; (8000824 <handler_leds+0x31c>)
 80005fa:	f001 fb55 	bl	8001ca8 <HAL_GPIO_WritePin>
                            break;
 80005fe:	e000      	b.n	8000602 <handler_leds+0xfa>

                        default:
                            break;
 8000600:	bf00      	nop
                    }
                    break;
 8000602:	e164      	b.n	80008ce <handler_leds+0x3c6>

                /* LED 2 */
                case E_LIST_LED2 :
                    switch (led.cmd)
 8000604:	7b3b      	ldrb	r3, [r7, #12]
 8000606:	2b03      	cmp	r3, #3
 8000608:	d856      	bhi.n	80006b8 <handler_leds+0x1b0>
 800060a:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <handler_leds+0x108>)
 800060c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000610:	08000621 	.word	0x08000621
 8000614:	08000647 	.word	0x08000647
 8000618:	0800066d 	.word	0x0800066d
 800061c:	08000693 	.word	0x08000693
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000626:	487f      	ldr	r0, [pc, #508]	; (8000824 <handler_leds+0x31c>)
 8000628:	f001 fb3e 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000632:	487c      	ldr	r0, [pc, #496]	; (8000824 <handler_leds+0x31c>)
 8000634:	f001 fb38 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063e:	487a      	ldr	r0, [pc, #488]	; (8000828 <handler_leds+0x320>)
 8000640:	f001 fb32 	bl	8001ca8 <HAL_GPIO_WritePin>
                            break;
 8000644:	e039      	b.n	80006ba <handler_leds+0x1b2>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064c:	4875      	ldr	r0, [pc, #468]	; (8000824 <handler_leds+0x31c>)
 800064e:	f001 fb2b 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000658:	4873      	ldr	r0, [pc, #460]	; (8000828 <handler_leds+0x320>)
 800065a:	f001 fb25 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000664:	486f      	ldr	r0, [pc, #444]	; (8000824 <handler_leds+0x31c>)
 8000666:	f001 fb1f 	bl	8001ca8 <HAL_GPIO_WritePin>
                            break;
 800066a:	e026      	b.n	80006ba <handler_leds+0x1b2>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000672:	486c      	ldr	r0, [pc, #432]	; (8000824 <handler_leds+0x31c>)
 8000674:	f001 fb18 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067e:	486a      	ldr	r0, [pc, #424]	; (8000828 <handler_leds+0x320>)
 8000680:	f001 fb12 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068a:	4866      	ldr	r0, [pc, #408]	; (8000824 <handler_leds+0x31c>)
 800068c:	f001 fb0c 	bl	8001ca8 <HAL_GPIO_WritePin>
                            break;
 8000690:	e013      	b.n	80006ba <handler_leds+0x1b2>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000698:	4862      	ldr	r0, [pc, #392]	; (8000824 <handler_leds+0x31c>)
 800069a:	f001 fb05 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a4:	485f      	ldr	r0, [pc, #380]	; (8000824 <handler_leds+0x31c>)
 80006a6:	f001 faff 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b0:	485d      	ldr	r0, [pc, #372]	; (8000828 <handler_leds+0x320>)
 80006b2:	f001 faf9 	bl	8001ca8 <HAL_GPIO_WritePin>
                            break;
 80006b6:	e000      	b.n	80006ba <handler_leds+0x1b2>

                        default:
                            break;
 80006b8:	bf00      	nop
                    }
                    break;
 80006ba:	e108      	b.n	80008ce <handler_leds+0x3c6>

                /* LED 3 */
                case E_LIST_LED3 :
                    switch (led.cmd)
 80006bc:	7b3b      	ldrb	r3, [r7, #12]
 80006be:	2b03      	cmp	r3, #3
 80006c0:	d84e      	bhi.n	8000760 <handler_leds+0x258>
 80006c2:	a201      	add	r2, pc, #4	; (adr r2, 80006c8 <handler_leds+0x1c0>)
 80006c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c8:	080006d9 	.word	0x080006d9
 80006cc:	080006fb 	.word	0x080006fb
 80006d0:	0800071d 	.word	0x0800071d
 80006d4:	0800073f 	.word	0x0800073f
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006de:	4852      	ldr	r0, [pc, #328]	; (8000828 <handler_leds+0x320>)
 80006e0:	f001 fae2 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2180      	movs	r1, #128	; 0x80
 80006e8:	484f      	ldr	r0, [pc, #316]	; (8000828 <handler_leds+0x320>)
 80006ea:	f001 fadd 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2140      	movs	r1, #64	; 0x40
 80006f2:	484d      	ldr	r0, [pc, #308]	; (8000828 <handler_leds+0x320>)
 80006f4:	f001 fad8 	bl	8001ca8 <HAL_GPIO_WritePin>
                            break;
 80006f8:	e033      	b.n	8000762 <handler_leds+0x25a>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	484a      	ldr	r0, [pc, #296]	; (8000828 <handler_leds+0x320>)
 8000700:	f001 fad2 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2140      	movs	r1, #64	; 0x40
 8000708:	4847      	ldr	r0, [pc, #284]	; (8000828 <handler_leds+0x320>)
 800070a:	f001 facd 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_SET);
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000714:	4844      	ldr	r0, [pc, #272]	; (8000828 <handler_leds+0x320>)
 8000716:	f001 fac7 	bl	8001ca8 <HAL_GPIO_WritePin>
                            break;
 800071a:	e022      	b.n	8000762 <handler_leds+0x25a>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000722:	4841      	ldr	r0, [pc, #260]	; (8000828 <handler_leds+0x320>)
 8000724:	f001 fac0 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2140      	movs	r1, #64	; 0x40
 800072c:	483e      	ldr	r0, [pc, #248]	; (8000828 <handler_leds+0x320>)
 800072e:	f001 fabb 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	483c      	ldr	r0, [pc, #240]	; (8000828 <handler_leds+0x320>)
 8000738:	f001 fab6 	bl	8001ca8 <HAL_GPIO_WritePin>
                            break;
 800073c:	e011      	b.n	8000762 <handler_leds+0x25a>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000744:	4838      	ldr	r0, [pc, #224]	; (8000828 <handler_leds+0x320>)
 8000746:	f001 faaf 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	4836      	ldr	r0, [pc, #216]	; (8000828 <handler_leds+0x320>)
 8000750:	f001 faaa 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	2140      	movs	r1, #64	; 0x40
 8000758:	4833      	ldr	r0, [pc, #204]	; (8000828 <handler_leds+0x320>)
 800075a:	f001 faa5 	bl	8001ca8 <HAL_GPIO_WritePin>
                            break;
 800075e:	e000      	b.n	8000762 <handler_leds+0x25a>

                        default:
                            break;
 8000760:	bf00      	nop
                    }
                    break;
 8000762:	e0b4      	b.n	80008ce <handler_leds+0x3c6>

                /* LED 4 */
                case E_LIST_LED4 :
                    switch (led.cmd)
 8000764:	7b3b      	ldrb	r3, [r7, #12]
 8000766:	2b03      	cmp	r3, #3
 8000768:	d84a      	bhi.n	8000800 <handler_leds+0x2f8>
 800076a:	a201      	add	r2, pc, #4	; (adr r2, 8000770 <handler_leds+0x268>)
 800076c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000770:	08000781 	.word	0x08000781
 8000774:	080007a1 	.word	0x080007a1
 8000778:	080007c1 	.word	0x080007c1
 800077c:	080007e1 	.word	0x080007e1
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2104      	movs	r1, #4
 8000784:	4828      	ldr	r0, [pc, #160]	; (8000828 <handler_leds+0x320>)
 8000786:	f001 fa8f 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2102      	movs	r1, #2
 800078e:	4826      	ldr	r0, [pc, #152]	; (8000828 <handler_leds+0x320>)
 8000790:	f001 fa8a 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2101      	movs	r1, #1
 8000798:	4823      	ldr	r0, [pc, #140]	; (8000828 <handler_leds+0x320>)
 800079a:	f001 fa85 	bl	8001ca8 <HAL_GPIO_WritePin>
                            break;
 800079e:	e030      	b.n	8000802 <handler_leds+0x2fa>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2102      	movs	r1, #2
 80007a4:	4820      	ldr	r0, [pc, #128]	; (8000828 <handler_leds+0x320>)
 80007a6:	f001 fa7f 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2101      	movs	r1, #1
 80007ae:	481e      	ldr	r0, [pc, #120]	; (8000828 <handler_leds+0x320>)
 80007b0:	f001 fa7a 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2104      	movs	r1, #4
 80007b8:	481b      	ldr	r0, [pc, #108]	; (8000828 <handler_leds+0x320>)
 80007ba:	f001 fa75 	bl	8001ca8 <HAL_GPIO_WritePin>
                            break;
 80007be:	e020      	b.n	8000802 <handler_leds+0x2fa>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2104      	movs	r1, #4
 80007c4:	4818      	ldr	r0, [pc, #96]	; (8000828 <handler_leds+0x320>)
 80007c6:	f001 fa6f 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2101      	movs	r1, #1
 80007ce:	4816      	ldr	r0, [pc, #88]	; (8000828 <handler_leds+0x320>)
 80007d0:	f001 fa6a 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2102      	movs	r1, #2
 80007d8:	4813      	ldr	r0, [pc, #76]	; (8000828 <handler_leds+0x320>)
 80007da:	f001 fa65 	bl	8001ca8 <HAL_GPIO_WritePin>
                            break;
 80007de:	e010      	b.n	8000802 <handler_leds+0x2fa>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2104      	movs	r1, #4
 80007e4:	4810      	ldr	r0, [pc, #64]	; (8000828 <handler_leds+0x320>)
 80007e6:	f001 fa5f 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2102      	movs	r1, #2
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <handler_leds+0x320>)
 80007f0:	f001 fa5a 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2101      	movs	r1, #1
 80007f8:	480b      	ldr	r0, [pc, #44]	; (8000828 <handler_leds+0x320>)
 80007fa:	f001 fa55 	bl	8001ca8 <HAL_GPIO_WritePin>
                            break;
 80007fe:	e000      	b.n	8000802 <handler_leds+0x2fa>

                        default:
                            break;
 8000800:	bf00      	nop
                    }
                    break;
 8000802:	e064      	b.n	80008ce <handler_leds+0x3c6>

                /* LED 5 */
                case E_LIST_LED5 :
                    switch (led.cmd)
 8000804:	7b3b      	ldrb	r3, [r7, #12]
 8000806:	2b03      	cmp	r3, #3
 8000808:	d85c      	bhi.n	80008c4 <handler_leds+0x3bc>
 800080a:	a201      	add	r2, pc, #4	; (adr r2, 8000810 <handler_leds+0x308>)
 800080c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000810:	0800082d 	.word	0x0800082d
 8000814:	08000853 	.word	0x08000853
 8000818:	08000879 	.word	0x08000879
 800081c:	0800089f 	.word	0x0800089f
 8000820:	20003d9c 	.word	0x20003d9c
 8000824:	40020000 	.word	0x40020000
 8000828:	40020800 	.word	0x40020800
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000832:	4827      	ldr	r0, [pc, #156]	; (80008d0 <handler_leds+0x3c8>)
 8000834:	f001 fa38 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083e:	4824      	ldr	r0, [pc, #144]	; (80008d0 <handler_leds+0x3c8>)
 8000840:	f001 fa32 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084a:	4821      	ldr	r0, [pc, #132]	; (80008d0 <handler_leds+0x3c8>)
 800084c:	f001 fa2c 	bl	8001ca8 <HAL_GPIO_WritePin>
                            break;
 8000850:	e039      	b.n	80008c6 <handler_leds+0x3be>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000858:	481d      	ldr	r0, [pc, #116]	; (80008d0 <handler_leds+0x3c8>)
 800085a:	f001 fa25 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000864:	481a      	ldr	r0, [pc, #104]	; (80008d0 <handler_leds+0x3c8>)
 8000866:	f001 fa1f 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_SET);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000870:	4817      	ldr	r0, [pc, #92]	; (80008d0 <handler_leds+0x3c8>)
 8000872:	f001 fa19 	bl	8001ca8 <HAL_GPIO_WritePin>
                            break;
 8000876:	e026      	b.n	80008c6 <handler_leds+0x3be>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800087e:	4814      	ldr	r0, [pc, #80]	; (80008d0 <handler_leds+0x3c8>)
 8000880:	f001 fa12 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088a:	4811      	ldr	r0, [pc, #68]	; (80008d0 <handler_leds+0x3c8>)
 800088c:	f001 fa0c 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000896:	480e      	ldr	r0, [pc, #56]	; (80008d0 <handler_leds+0x3c8>)
 8000898:	f001 fa06 	bl	8001ca8 <HAL_GPIO_WritePin>
                            break;
 800089c:	e013      	b.n	80008c6 <handler_leds+0x3be>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008a4:	480a      	ldr	r0, [pc, #40]	; (80008d0 <handler_leds+0x3c8>)
 80008a6:	f001 f9ff 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b0:	4807      	ldr	r0, [pc, #28]	; (80008d0 <handler_leds+0x3c8>)
 80008b2:	f001 f9f9 	bl	8001ca8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <handler_leds+0x3c8>)
 80008be:	f001 f9f3 	bl	8001ca8 <HAL_GPIO_WritePin>
                            break;
 80008c2:	e000      	b.n	80008c6 <handler_leds+0x3be>

                        default:
                            break;
 80008c4:	bf00      	nop
                    }
                    break;
 80008c6:	e002      	b.n	80008ce <handler_leds+0x3c6>
            
                default:
                    break;
            }
        }
 80008c8:	bf00      	nop
 80008ca:	e621      	b.n	8000510 <handler_leds+0x8>
                    break;
 80008cc:	bf00      	nop
        if(xQueueReceive(QueueHandle_leds_cmd, &led, portMAX_DELAY)) 
 80008ce:	e61f      	b.n	8000510 <handler_leds+0x8>
 80008d0:	40020800 	.word	0x40020800

080008d4 <API_LEDS_START>:
/** ************************************************************* *
 * @brief       init and start the payload task
 * 
 * ************************************************************* **/
void API_LEDS_START(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af02      	add	r7, sp, #8
    BaseType_t status;

    HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e0:	485a      	ldr	r0, [pc, #360]	; (8000a4c <API_LEDS_START+0x178>)
 80008e2:	f001 f9e1 	bl	8001ca8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ec:	4857      	ldr	r0, [pc, #348]	; (8000a4c <API_LEDS_START+0x178>)
 80008ee:	f001 f9db 	bl	8001ca8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f8:	4854      	ldr	r0, [pc, #336]	; (8000a4c <API_LEDS_START+0x178>)
 80008fa:	f001 f9d5 	bl	8001ca8 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000904:	4851      	ldr	r0, [pc, #324]	; (8000a4c <API_LEDS_START+0x178>)
 8000906:	f001 f9cf 	bl	8001ca8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000910:	484e      	ldr	r0, [pc, #312]	; (8000a4c <API_LEDS_START+0x178>)
 8000912:	f001 f9c9 	bl	8001ca8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 7100 	mov.w	r1, #512	; 0x200
 800091c:	484c      	ldr	r0, [pc, #304]	; (8000a50 <API_LEDS_START+0x17c>)
 800091e:	f001 f9c3 	bl	8001ca8 <HAL_GPIO_WritePin>
    
    HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000928:	4849      	ldr	r0, [pc, #292]	; (8000a50 <API_LEDS_START+0x17c>)
 800092a:	f001 f9bd 	bl	8001ca8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2180      	movs	r1, #128	; 0x80
 8000932:	4847      	ldr	r0, [pc, #284]	; (8000a50 <API_LEDS_START+0x17c>)
 8000934:	f001 f9b8 	bl	8001ca8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2140      	movs	r1, #64	; 0x40
 800093c:	4844      	ldr	r0, [pc, #272]	; (8000a50 <API_LEDS_START+0x17c>)
 800093e:	f001 f9b3 	bl	8001ca8 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2104      	movs	r1, #4
 8000946:	4842      	ldr	r0, [pc, #264]	; (8000a50 <API_LEDS_START+0x17c>)
 8000948:	f001 f9ae 	bl	8001ca8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2102      	movs	r1, #2
 8000950:	483f      	ldr	r0, [pc, #252]	; (8000a50 <API_LEDS_START+0x17c>)
 8000952:	f001 f9a9 	bl	8001ca8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2101      	movs	r1, #1
 800095a:	483d      	ldr	r0, [pc, #244]	; (8000a50 <API_LEDS_START+0x17c>)
 800095c:	f001 f9a4 	bl	8001ca8 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000966:	483a      	ldr	r0, [pc, #232]	; (8000a50 <API_LEDS_START+0x17c>)
 8000968:	f001 f99e 	bl	8001ca8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000972:	4837      	ldr	r0, [pc, #220]	; (8000a50 <API_LEDS_START+0x17c>)
 8000974:	f001 f998 	bl	8001ca8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097e:	4834      	ldr	r0, [pc, #208]	; (8000a50 <API_LEDS_START+0x17c>)
 8000980:	f001 f992 	bl	8001ca8 <HAL_GPIO_WritePin>


    /* */ 
    HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098a:	4830      	ldr	r0, [pc, #192]	; (8000a4c <API_LEDS_START+0x178>)
 800098c:	f001 f98c 	bl	8001ca8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000996:	482d      	ldr	r0, [pc, #180]	; (8000a4c <API_LEDS_START+0x178>)
 8000998:	f001 f986 	bl	8001ca8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a2:	482b      	ldr	r0, [pc, #172]	; (8000a50 <API_LEDS_START+0x17c>)
 80009a4:	f001 f980 	bl	8001ca8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	2104      	movs	r1, #4
 80009ac:	4828      	ldr	r0, [pc, #160]	; (8000a50 <API_LEDS_START+0x17c>)
 80009ae:	f001 f97b 	bl	8001ca8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009b8:	4825      	ldr	r0, [pc, #148]	; (8000a50 <API_LEDS_START+0x17c>)
 80009ba:	f001 f975 	bl	8001ca8 <HAL_GPIO_WritePin>

    HAL_Delay(1000);
 80009be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c2:	f000 fbed 	bl	80011a0 <HAL_Delay>

    HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009cc:	481f      	ldr	r0, [pc, #124]	; (8000a4c <API_LEDS_START+0x178>)
 80009ce:	f001 f96b 	bl	8001ca8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d8:	481c      	ldr	r0, [pc, #112]	; (8000a4c <API_LEDS_START+0x178>)
 80009da:	f001 f965 	bl	8001ca8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e4:	481a      	ldr	r0, [pc, #104]	; (8000a50 <API_LEDS_START+0x17c>)
 80009e6:	f001 f95f 	bl	8001ca8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2104      	movs	r1, #4
 80009ee:	4818      	ldr	r0, [pc, #96]	; (8000a50 <API_LEDS_START+0x17c>)
 80009f0:	f001 f95a 	bl	8001ca8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009fa:	4815      	ldr	r0, [pc, #84]	; (8000a50 <API_LEDS_START+0x17c>)
 80009fc:	f001 f954 	bl	8001ca8 <HAL_GPIO_WritePin>

    /* create the queues */
    QueueHandle_leds_cmd  = xQueueCreate(32, sizeof(ENUM_LEDS_CMD_t));
 8000a00:	2200      	movs	r2, #0
 8000a02:	2101      	movs	r1, #1
 8000a04:	2020      	movs	r0, #32
 8000a06:	f002 fd6d 	bl	80034e4 <xQueueGenericCreate>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <API_LEDS_START+0x180>)
 8000a0e:	6013      	str	r3, [r2, #0]
    
    /* create the task */
    status = xTaskCreate(handler_leds, "task_leds", configMINIMAL_STACK_SIZE, NULL, TASK_PRIORITY_APP_LEDS, &TaskHandle_leds);
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <API_LEDS_START+0x184>)
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	2305      	movs	r3, #5
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2300      	movs	r3, #0
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	490f      	ldr	r1, [pc, #60]	; (8000a5c <API_LEDS_START+0x188>)
 8000a1e:	4810      	ldr	r0, [pc, #64]	; (8000a60 <API_LEDS_START+0x18c>)
 8000a20:	f003 f9d8 	bl	8003dd4 <xTaskCreate>
 8000a24:	6078      	str	r0, [r7, #4]
    configASSERT(status == pdPASS);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d00a      	beq.n	8000a42 <API_LEDS_START+0x16e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a30:	f383 8811 	msr	BASEPRI, r3
 8000a34:	f3bf 8f6f 	isb	sy
 8000a38:	f3bf 8f4f 	dsb	sy
 8000a3c:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000a3e:	bf00      	nop
 8000a40:	e7fe      	b.n	8000a40 <API_LEDS_START+0x16c>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40020800 	.word	0x40020800
 8000a54:	20003d9c 	.word	0x20003d9c
 8000a58:	20003da0 	.word	0x20003da0
 8000a5c:	08005a50 	.word	0x08005a50
 8000a60:	08000509 	.word	0x08000509

08000a64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_DMA_Init+0x3c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <MX_DMA_Init+0x3c>)
 8000a74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_DMA_Init+0x3c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2010      	movs	r0, #16
 8000a8c:	f000 fc64 	bl	8001358 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a90:	2010      	movs	r0, #16
 8000a92:	f000 fc7d 	bl	8001390 <HAL_NVIC_EnableIRQ>

}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b088      	sub	sp, #32
 8000aa8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b42      	ldr	r3, [pc, #264]	; (8000bc8 <MX_GPIO_Init+0x124>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a41      	ldr	r2, [pc, #260]	; (8000bc8 <MX_GPIO_Init+0x124>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b3f      	ldr	r3, [pc, #252]	; (8000bc8 <MX_GPIO_Init+0x124>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <MX_GPIO_Init+0x124>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a3a      	ldr	r2, [pc, #232]	; (8000bc8 <MX_GPIO_Init+0x124>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b38      	ldr	r3, [pc, #224]	; (8000bc8 <MX_GPIO_Init+0x124>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b34      	ldr	r3, [pc, #208]	; (8000bc8 <MX_GPIO_Init+0x124>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a33      	ldr	r2, [pc, #204]	; (8000bc8 <MX_GPIO_Init+0x124>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b31      	ldr	r3, [pc, #196]	; (8000bc8 <MX_GPIO_Init+0x124>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB5_B_Pin|RGB5_G_Pin|RGB5_R_Pin|RGB4_B_Pin
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f24e 31d7 	movw	r1, #58327	; 0xe3d7
 8000b14:	482d      	ldr	r0, [pc, #180]	; (8000bcc <MX_GPIO_Init+0x128>)
 8000b16:	f001 f8c7 	bl	8001ca8 <HAL_GPIO_WritePin>
                          |RGB4_G_Pin|RGB4_R_Pin|SSD1351_NRST_Pin|RGB3_B_Pin
                          |RGB3_G_Pin|RGB3_R_Pin|RGB2_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEQ_RST_Pin|SSD1351_DC_Pin|RGB2_G_Pin|RGB2_R_Pin
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f641 7141 	movw	r1, #8001	; 0x1f41
 8000b20:	482b      	ldr	r0, [pc, #172]	; (8000bd0 <MX_GPIO_Init+0x12c>)
 8000b22:	f001 f8c1 	bl	8001ca8 <HAL_GPIO_WritePin>
                          |RGB1_B_Pin|RGB1_G_Pin|RGB1_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BTN1_Pin|BTN2_Pin|BTN3_Pin|BTN4_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	21f0      	movs	r1, #240	; 0xf0
 8000b2a:	482a      	ldr	r0, [pc, #168]	; (8000bd4 <MX_GPIO_Init+0x130>)
 8000b2c:	f001 f8bc 	bl	8001ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = RGB5_B_Pin|RGB5_G_Pin|RGB5_R_Pin|RGB4_B_Pin
 8000b30:	f24e 33c7 	movw	r3, #58311	; 0xe3c7
 8000b34:	60fb      	str	r3, [r7, #12]
                          |RGB4_G_Pin|RGB4_R_Pin|RGB3_B_Pin|RGB3_G_Pin
                          |RGB3_R_Pin|RGB2_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	4619      	mov	r1, r3
 8000b48:	4820      	ldr	r0, [pc, #128]	; (8000bcc <MX_GPIO_Init+0x128>)
 8000b4a:	f000 ff19 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SEQ_RST_Pin|RGB2_G_Pin|RGB2_R_Pin|RGB1_B_Pin
 8000b4e:	f641 7301 	movw	r3, #7937	; 0x1f01
 8000b52:	60fb      	str	r3, [r7, #12]
                          |RGB1_G_Pin|RGB1_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	4619      	mov	r1, r3
 8000b66:	481a      	ldr	r0, [pc, #104]	; (8000bd0 <MX_GPIO_Init+0x12c>)
 8000b68:	f000 ff0a 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1351_DC_Pin;
 8000b6c:	2340      	movs	r3, #64	; 0x40
 8000b6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSD1351_DC_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	4619      	mov	r1, r3
 8000b82:	4813      	ldr	r0, [pc, #76]	; (8000bd0 <MX_GPIO_Init+0x12c>)
 8000b84:	f000 fefc 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1351_NRST_Pin;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSD1351_NRST_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	480b      	ldr	r0, [pc, #44]	; (8000bcc <MX_GPIO_Init+0x128>)
 8000ba0:	f000 feee 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin|BTN4_Pin;
 8000ba4:	23f0      	movs	r3, #240	; 0xf0
 8000ba6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <MX_GPIO_Init+0x130>)
 8000bbc:	f000 fee0 	bl	8001980 <HAL_GPIO_Init>

}
 8000bc0:	bf00      	nop
 8000bc2:	3720      	adds	r7, #32
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020800 	.word	0x40020800
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	40020400 	.word	0x40020400

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bdc:	f000 fa9e 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be0:	f000 f80e 	bl	8000c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be4:	f7ff ff5e 	bl	8000aa4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000be8:	f000 f9ca 	bl	8000f80 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000bec:	f7ff ff3a 	bl	8000a64 <MX_DMA_Init>
  MX_SPI1_Init();
 8000bf0:	f000 f88c 	bl	8000d0c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  API_LEDS_START();
 8000bf4:	f7ff fe6e 	bl	80008d4 <API_LEDS_START>

  vTaskStartScheduler();
 8000bf8:	f003 fa32 	bl	8004060 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <main+0x24>
	...

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b094      	sub	sp, #80	; 0x50
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	2234      	movs	r2, #52	; 0x34
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f004 ff0a 	bl	8005a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	f107 0308 	add.w	r3, r7, #8
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c24:	2300      	movs	r3, #0
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <SystemClock_Config+0xd4>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	4a29      	ldr	r2, [pc, #164]	; (8000cd4 <SystemClock_Config+0xd4>)
 8000c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c32:	6413      	str	r3, [r2, #64]	; 0x40
 8000c34:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <SystemClock_Config+0xd4>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c40:	2300      	movs	r3, #0
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <SystemClock_Config+0xd8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c4c:	4a22      	ldr	r2, [pc, #136]	; (8000cd8 <SystemClock_Config+0xd8>)
 8000c4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c52:	6013      	str	r3, [r2, #0]
 8000c54:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <SystemClock_Config+0xd8>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c60:	2302      	movs	r3, #2
 8000c62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c64:	2301      	movs	r3, #1
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c68:	2310      	movs	r3, #16
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c70:	2300      	movs	r3, #0
 8000c72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c74:	2310      	movs	r3, #16
 8000c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c78:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c7c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c82:	2302      	movs	r3, #2
 8000c84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c86:	2302      	movs	r3, #2
 8000c88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 fb22 	bl	80022d8 <HAL_RCC_OscConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c9a:	f000 f831 	bl	8000d00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9e:	230f      	movs	r3, #15
 8000ca0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cb4:	f107 0308 	add.w	r3, r7, #8
 8000cb8:	2102      	movs	r1, #2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 f80e 	bl	8001cdc <HAL_RCC_ClockConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000cc6:	f000 f81b 	bl	8000d00 <Error_Handler>
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3750      	adds	r7, #80	; 0x50
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40007000 	.word	0x40007000

08000cdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d101      	bne.n	8000cf2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cee:	f000 fa37 	bl	8001160 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40014800 	.word	0x40014800

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <Error_Handler+0x8>
	...

08000d0c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d12:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <MX_SPI1_Init+0x68>)
 8000d14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d38:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d58:	220a      	movs	r2, #10
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d5c:	4804      	ldr	r0, [pc, #16]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d5e:	f001 fd59 	bl	8002814 <HAL_SPI_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d68:	f7ff ffca 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20003da4 	.word	0x20003da4
 8000d74:	40013000 	.word	0x40013000

08000d78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a19      	ldr	r2, [pc, #100]	; (8000dfc <HAL_SPI_MspInit+0x84>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d12b      	bne.n	8000df2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <HAL_SPI_MspInit+0x88>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <HAL_SPI_MspInit+0x88>)
 8000da4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <HAL_SPI_MspInit+0x88>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <HAL_SPI_MspInit+0x88>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a10      	ldr	r2, [pc, #64]	; (8000e00 <HAL_SPI_MspInit+0x88>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_SPI_MspInit+0x88>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SSD1351_NSS_Pin|SSD1351_SCK_Pin|SSD1351_MOSI_Pin;
 8000dd2:	23b0      	movs	r3, #176	; 0xb0
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000de2:	2305      	movs	r3, #5
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4805      	ldr	r0, [pc, #20]	; (8000e04 <HAL_SPI_MspInit+0x8c>)
 8000dee:	f000 fdc7 	bl	8001980 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	; 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40013000 	.word	0x40013000
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020000 	.word	0x40020000

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800

08000e58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08c      	sub	sp, #48	; 0x30
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	201a      	movs	r0, #26
 8000e6e:	f000 fa73 	bl	8001358 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000e72:	201a      	movs	r0, #26
 8000e74:	f000 fa8c 	bl	8001390 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <HAL_InitTick+0xa0>)
 8000e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e80:	4a1d      	ldr	r2, [pc, #116]	; (8000ef8 <HAL_InitTick+0xa0>)
 8000e82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e86:	6453      	str	r3, [r2, #68]	; 0x44
 8000e88:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <HAL_InitTick+0xa0>)
 8000e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e94:	f107 0210 	add.w	r2, r7, #16
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f001 f836 	bl	8001f10 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ea4:	f001 f820 	bl	8001ee8 <HAL_RCC_GetPCLK2Freq>
 8000ea8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eac:	4a13      	ldr	r2, [pc, #76]	; (8000efc <HAL_InitTick+0xa4>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	0c9b      	lsrs	r3, r3, #18
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <HAL_InitTick+0xa8>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <HAL_InitTick+0xac>)
 8000ebc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <HAL_InitTick+0xa8>)
 8000ec0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ec4:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <HAL_InitTick+0xa8>)
 8000ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eca:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_InitTick+0xa8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_InitTick+0xa8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000ed8:	4809      	ldr	r0, [pc, #36]	; (8000f00 <HAL_InitTick+0xa8>)
 8000eda:	f001 fd24 	bl	8002926 <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d104      	bne.n	8000eee <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000ee4:	4806      	ldr	r0, [pc, #24]	; (8000f00 <HAL_InitTick+0xa8>)
 8000ee6:	f001 fd77 	bl	80029d8 <HAL_TIM_Base_Start_IT>
 8000eea:	4603      	mov	r3, r0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3730      	adds	r7, #48	; 0x30
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	431bde83 	.word	0x431bde83
 8000f00:	20003dfc 	.word	0x20003dfc
 8000f04:	40014800 	.word	0x40014800

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <NMI_Handler+0x4>

08000f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <DMA1_Stream5_IRQHandler+0x10>)
 8000f3a:	f000 fae5 	bl	8001508 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20003e44 	.word	0x20003e44

08000f48 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000f4e:	f001 fdb3 	bl	8002ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20003dfc 	.word	0x20003dfc

08000f5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <SystemInit+0x20>)
 8000f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <SystemInit+0x20>)
 8000f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000f86:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <MX_USART2_UART_Init+0x50>)
 8000f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000f8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000fb8:	f001 ff62 	bl	8002e80 <HAL_UART_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fc2:	f7ff fe9d 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20003ea4 	.word	0x20003ea4
 8000fd0:	40004400 	.word	0x40004400

08000fd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a30      	ldr	r2, [pc, #192]	; (80010b4 <HAL_UART_MspInit+0xe0>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d159      	bne.n	80010aa <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	4b2f      	ldr	r3, [pc, #188]	; (80010b8 <HAL_UART_MspInit+0xe4>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	4a2e      	ldr	r2, [pc, #184]	; (80010b8 <HAL_UART_MspInit+0xe4>)
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	6413      	str	r3, [r2, #64]	; 0x40
 8001006:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <HAL_UART_MspInit+0xe4>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <HAL_UART_MspInit+0xe4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a27      	ldr	r2, [pc, #156]	; (80010b8 <HAL_UART_MspInit+0xe4>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <HAL_UART_MspInit+0xe4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800102e:	230c      	movs	r3, #12
 8001030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103a:	2303      	movs	r3, #3
 800103c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800103e:	2307      	movs	r3, #7
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	481c      	ldr	r0, [pc, #112]	; (80010bc <HAL_UART_MspInit+0xe8>)
 800104a:	f000 fc99 	bl	8001980 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <HAL_UART_MspInit+0xec>)
 8001050:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <HAL_UART_MspInit+0xf0>)
 8001052:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <HAL_UART_MspInit+0xec>)
 8001056:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800105a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_UART_MspInit+0xec>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_UART_MspInit+0xec>)
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_UART_MspInit+0xec>)
 800106a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800106e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_UART_MspInit+0xec>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_UART_MspInit+0xec>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_UART_MspInit+0xec>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <HAL_UART_MspInit+0xec>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_UART_MspInit+0xec>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800108e:	480c      	ldr	r0, [pc, #48]	; (80010c0 <HAL_UART_MspInit+0xec>)
 8001090:	f000 f98c 	bl	80013ac <HAL_DMA_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800109a:	f7ff fe31 	bl	8000d00 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <HAL_UART_MspInit+0xec>)
 80010a2:	639a      	str	r2, [r3, #56]	; 0x38
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <HAL_UART_MspInit+0xec>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010aa:	bf00      	nop
 80010ac:	3728      	adds	r7, #40	; 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40004400 	.word	0x40004400
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	20003e44 	.word	0x20003e44
 80010c4:	40026088 	.word	0x40026088

080010c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001100 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010cc:	480d      	ldr	r0, [pc, #52]	; (8001104 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ce:	490e      	ldr	r1, [pc, #56]	; (8001108 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d0:	4a0e      	ldr	r2, [pc, #56]	; (800110c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e2:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010e4:	4c0b      	ldr	r4, [pc, #44]	; (8001114 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010f2:	f7ff ff33 	bl	8000f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f6:	f004 fc65 	bl	80059c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fa:	f7ff fd6d 	bl	8000bd8 <main>
  bx  lr    
 80010fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001100:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001108:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800110c:	08005aa4 	.word	0x08005aa4
  ldr r2, =_sbss
 8001110:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001114:	20003f2c 	.word	0x20003f2c

08001118 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC_IRQHandler>
	...

0800111c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <HAL_Init+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <HAL_Init+0x40>)
 8001126:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_Init+0x40>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0a      	ldr	r2, [pc, #40]	; (800115c <HAL_Init+0x40>)
 8001132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001136:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a07      	ldr	r2, [pc, #28]	; (800115c <HAL_Init+0x40>)
 800113e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001144:	2003      	movs	r0, #3
 8001146:	f000 f8fc 	bl	8001342 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114a:	200f      	movs	r0, #15
 800114c:	f7ff fe84 	bl	8000e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001150:	f7ff fe5a 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023c00 	.word	0x40023c00

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008
 8001184:	20003ee8 	.word	0x20003ee8

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20003ee8 	.word	0x20003ee8

080011a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff ffee 	bl	8001188 <HAL_GetTick>
 80011ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b8:	d005      	beq.n	80011c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_Delay+0x44>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c6:	bf00      	nop
 80011c8:	f7ff ffde 	bl	8001188 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d8f7      	bhi.n	80011c8 <HAL_Delay+0x28>
  {
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008

080011e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121a:	4a04      	ldr	r2, [pc, #16]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	60d3      	str	r3, [r2, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	db0b      	blt.n	8001276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 021f 	and.w	r2, r3, #31
 8001264:	4907      	ldr	r1, [pc, #28]	; (8001284 <__NVIC_EnableIRQ+0x38>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	2001      	movs	r0, #1
 800126e:	fa00 f202 	lsl.w	r2, r0, r2
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	; (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	; (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	bf28      	it	cs
 80012fa:	2304      	movcs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3304      	adds	r3, #4
 8001302:	2b06      	cmp	r3, #6
 8001304:	d902      	bls.n	800130c <NVIC_EncodePriority+0x30>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3b03      	subs	r3, #3
 800130a:	e000      	b.n	800130e <NVIC_EncodePriority+0x32>
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 32ff 	mov.w	r2, #4294967295
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001324:	f04f 31ff 	mov.w	r1, #4294967295
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43d9      	mvns	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	4313      	orrs	r3, r2
         );
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ff4c 	bl	80011e8 <__NVIC_SetPriorityGrouping>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800136a:	f7ff ff61 	bl	8001230 <__NVIC_GetPriorityGrouping>
 800136e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	68b9      	ldr	r1, [r7, #8]
 8001374:	6978      	ldr	r0, [r7, #20]
 8001376:	f7ff ffb1 	bl	80012dc <NVIC_EncodePriority>
 800137a:	4602      	mov	r2, r0
 800137c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff80 	bl	8001288 <__NVIC_SetPriority>
}
 8001388:	bf00      	nop
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff54 	bl	800124c <__NVIC_EnableIRQ>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff fee6 	bl	8001188 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e099      	b.n	80014fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2202      	movs	r2, #2
 80013cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0201 	bic.w	r2, r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e8:	e00f      	b.n	800140a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ea:	f7ff fecd 	bl	8001188 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d908      	bls.n	800140a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2220      	movs	r2, #32
 80013fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2203      	movs	r2, #3
 8001402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e078      	b.n	80014fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1e8      	bne.n	80013ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	4b38      	ldr	r3, [pc, #224]	; (8001504 <HAL_DMA_Init+0x158>)
 8001424:	4013      	ands	r3, r2
 8001426:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001436:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001442:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	4313      	orrs	r3, r2
 800145a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	2b04      	cmp	r3, #4
 8001462:	d107      	bne.n	8001474 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	4313      	orrs	r3, r2
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	4313      	orrs	r3, r2
 8001472:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	f023 0307 	bic.w	r3, r3, #7
 800148a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	4313      	orrs	r3, r2
 8001494:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	2b04      	cmp	r3, #4
 800149c:	d117      	bne.n	80014ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00e      	beq.n	80014ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f9e9 	bl	8001888 <DMA_CheckFifoParam>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d008      	beq.n	80014ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2240      	movs	r2, #64	; 0x40
 80014c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014ca:	2301      	movs	r3, #1
 80014cc:	e016      	b.n	80014fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 f9a0 	bl	800181c <DMA_CalcBaseAndBitshift>
 80014dc:	4603      	mov	r3, r0
 80014de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e4:	223f      	movs	r2, #63	; 0x3f
 80014e6:	409a      	lsls	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	f010803f 	.word	0xf010803f

08001508 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001510:	2300      	movs	r3, #0
 8001512:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001514:	4b92      	ldr	r3, [pc, #584]	; (8001760 <HAL_DMA_IRQHandler+0x258>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a92      	ldr	r2, [pc, #584]	; (8001764 <HAL_DMA_IRQHandler+0x25c>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	0a9b      	lsrs	r3, r3, #10
 8001520:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001532:	2208      	movs	r2, #8
 8001534:	409a      	lsls	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d01a      	beq.n	8001574 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d013      	beq.n	8001574 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0204 	bic.w	r2, r2, #4
 800155a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001560:	2208      	movs	r2, #8
 8001562:	409a      	lsls	r2, r3
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156c:	f043 0201 	orr.w	r2, r3, #1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001578:	2201      	movs	r2, #1
 800157a:	409a      	lsls	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4013      	ands	r3, r2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d012      	beq.n	80015aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001596:	2201      	movs	r2, #1
 8001598:	409a      	lsls	r2, r3
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a2:	f043 0202 	orr.w	r2, r3, #2
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ae:	2204      	movs	r2, #4
 80015b0:	409a      	lsls	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d012      	beq.n	80015e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00b      	beq.n	80015e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015cc:	2204      	movs	r2, #4
 80015ce:	409a      	lsls	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d8:	f043 0204 	orr.w	r2, r3, #4
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e4:	2210      	movs	r2, #16
 80015e6:	409a      	lsls	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d043      	beq.n	8001678 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d03c      	beq.n	8001678 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001602:	2210      	movs	r2, #16
 8001604:	409a      	lsls	r2, r3
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d018      	beq.n	800164a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d108      	bne.n	8001638 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	2b00      	cmp	r3, #0
 800162c:	d024      	beq.n	8001678 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	4798      	blx	r3
 8001636:	e01f      	b.n	8001678 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800163c:	2b00      	cmp	r3, #0
 800163e:	d01b      	beq.n	8001678 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	4798      	blx	r3
 8001648:	e016      	b.n	8001678 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001654:	2b00      	cmp	r3, #0
 8001656:	d107      	bne.n	8001668 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0208 	bic.w	r2, r2, #8
 8001666:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167c:	2220      	movs	r2, #32
 800167e:	409a      	lsls	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4013      	ands	r3, r2
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 808e 	beq.w	80017a6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 8086 	beq.w	80017a6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169e:	2220      	movs	r2, #32
 80016a0:	409a      	lsls	r2, r3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d136      	bne.n	8001720 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0216 	bic.w	r2, r2, #22
 80016c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	695a      	ldr	r2, [r3, #20]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d103      	bne.n	80016e2 <HAL_DMA_IRQHandler+0x1da>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d007      	beq.n	80016f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0208 	bic.w	r2, r2, #8
 80016f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f6:	223f      	movs	r2, #63	; 0x3f
 80016f8:	409a      	lsls	r2, r3
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001712:	2b00      	cmp	r3, #0
 8001714:	d07d      	beq.n	8001812 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	4798      	blx	r3
        }
        return;
 800171e:	e078      	b.n	8001812 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d01c      	beq.n	8001768 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d108      	bne.n	800174e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001740:	2b00      	cmp	r3, #0
 8001742:	d030      	beq.n	80017a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	4798      	blx	r3
 800174c:	e02b      	b.n	80017a6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001752:	2b00      	cmp	r3, #0
 8001754:	d027      	beq.n	80017a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	4798      	blx	r3
 800175e:	e022      	b.n	80017a6 <HAL_DMA_IRQHandler+0x29e>
 8001760:	20000000 	.word	0x20000000
 8001764:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10f      	bne.n	8001796 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0210 	bic.w	r2, r2, #16
 8001784:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d032      	beq.n	8001814 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d022      	beq.n	8001800 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2205      	movs	r2, #5
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0201 	bic.w	r2, r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	3301      	adds	r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d307      	bcc.n	80017ee <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f2      	bne.n	80017d2 <HAL_DMA_IRQHandler+0x2ca>
 80017ec:	e000      	b.n	80017f0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80017ee:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	4798      	blx	r3
 8001810:	e000      	b.n	8001814 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001812:	bf00      	nop
    }
  }
}
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop

0800181c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	3b10      	subs	r3, #16
 800182c:	4a14      	ldr	r2, [pc, #80]	; (8001880 <DMA_CalcBaseAndBitshift+0x64>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001836:	4a13      	ldr	r2, [pc, #76]	; (8001884 <DMA_CalcBaseAndBitshift+0x68>)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b03      	cmp	r3, #3
 8001848:	d909      	bls.n	800185e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001852:	f023 0303 	bic.w	r3, r3, #3
 8001856:	1d1a      	adds	r2, r3, #4
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	659a      	str	r2, [r3, #88]	; 0x58
 800185c:	e007      	b.n	800186e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001866:	f023 0303 	bic.w	r3, r3, #3
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	aaaaaaab 	.word	0xaaaaaaab
 8001884:	08005a8c 	.word	0x08005a8c

08001888 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d11f      	bne.n	80018e2 <DMA_CheckFifoParam+0x5a>
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d856      	bhi.n	8001956 <DMA_CheckFifoParam+0xce>
 80018a8:	a201      	add	r2, pc, #4	; (adr r2, 80018b0 <DMA_CheckFifoParam+0x28>)
 80018aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ae:	bf00      	nop
 80018b0:	080018c1 	.word	0x080018c1
 80018b4:	080018d3 	.word	0x080018d3
 80018b8:	080018c1 	.word	0x080018c1
 80018bc:	08001957 	.word	0x08001957
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d046      	beq.n	800195a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018d0:	e043      	b.n	800195a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018da:	d140      	bne.n	800195e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018e0:	e03d      	b.n	800195e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ea:	d121      	bne.n	8001930 <DMA_CheckFifoParam+0xa8>
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d837      	bhi.n	8001962 <DMA_CheckFifoParam+0xda>
 80018f2:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <DMA_CheckFifoParam+0x70>)
 80018f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f8:	08001909 	.word	0x08001909
 80018fc:	0800190f 	.word	0x0800190f
 8001900:	08001909 	.word	0x08001909
 8001904:	08001921 	.word	0x08001921
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
      break;
 800190c:	e030      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d025      	beq.n	8001966 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800191e:	e022      	b.n	8001966 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001924:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001928:	d11f      	bne.n	800196a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800192e:	e01c      	b.n	800196a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d903      	bls.n	800193e <DMA_CheckFifoParam+0xb6>
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b03      	cmp	r3, #3
 800193a:	d003      	beq.n	8001944 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800193c:	e018      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	73fb      	strb	r3, [r7, #15]
      break;
 8001942:	e015      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00e      	beq.n	800196e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
      break;
 8001954:	e00b      	b.n	800196e <DMA_CheckFifoParam+0xe6>
      break;
 8001956:	bf00      	nop
 8001958:	e00a      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      break;
 800195a:	bf00      	nop
 800195c:	e008      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      break;
 800195e:	bf00      	nop
 8001960:	e006      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      break;
 8001962:	bf00      	nop
 8001964:	e004      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      break;
 8001966:	bf00      	nop
 8001968:	e002      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      break;   
 800196a:	bf00      	nop
 800196c:	e000      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      break;
 800196e:	bf00      	nop
    }
  } 
  
  return status; 
 8001970:	7bfb      	ldrb	r3, [r7, #15]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop

08001980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	e165      	b.n	8001c68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800199c:	2201      	movs	r2, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	f040 8154 	bne.w	8001c62 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d005      	beq.n	80019d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d130      	bne.n	8001a34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 0201 	and.w	r2, r3, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d017      	beq.n	8001a70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d123      	bne.n	8001ac4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	08da      	lsrs	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3208      	adds	r2, #8
 8001a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	220f      	movs	r2, #15
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	691a      	ldr	r2, [r3, #16]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	08da      	lsrs	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3208      	adds	r2, #8
 8001abe:	69b9      	ldr	r1, [r7, #24]
 8001ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0203 	and.w	r2, r3, #3
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80ae 	beq.w	8001c62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b5d      	ldr	r3, [pc, #372]	; (8001c80 <HAL_GPIO_Init+0x300>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	4a5c      	ldr	r2, [pc, #368]	; (8001c80 <HAL_GPIO_Init+0x300>)
 8001b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b14:	6453      	str	r3, [r2, #68]	; 0x44
 8001b16:	4b5a      	ldr	r3, [pc, #360]	; (8001c80 <HAL_GPIO_Init+0x300>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b22:	4a58      	ldr	r2, [pc, #352]	; (8001c84 <HAL_GPIO_Init+0x304>)
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	3302      	adds	r3, #2
 8001b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	220f      	movs	r2, #15
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4f      	ldr	r2, [pc, #316]	; (8001c88 <HAL_GPIO_Init+0x308>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d025      	beq.n	8001b9a <HAL_GPIO_Init+0x21a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a4e      	ldr	r2, [pc, #312]	; (8001c8c <HAL_GPIO_Init+0x30c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d01f      	beq.n	8001b96 <HAL_GPIO_Init+0x216>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a4d      	ldr	r2, [pc, #308]	; (8001c90 <HAL_GPIO_Init+0x310>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d019      	beq.n	8001b92 <HAL_GPIO_Init+0x212>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4c      	ldr	r2, [pc, #304]	; (8001c94 <HAL_GPIO_Init+0x314>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <HAL_GPIO_Init+0x20e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4b      	ldr	r2, [pc, #300]	; (8001c98 <HAL_GPIO_Init+0x318>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00d      	beq.n	8001b8a <HAL_GPIO_Init+0x20a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4a      	ldr	r2, [pc, #296]	; (8001c9c <HAL_GPIO_Init+0x31c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d007      	beq.n	8001b86 <HAL_GPIO_Init+0x206>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a49      	ldr	r2, [pc, #292]	; (8001ca0 <HAL_GPIO_Init+0x320>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d101      	bne.n	8001b82 <HAL_GPIO_Init+0x202>
 8001b7e:	2306      	movs	r3, #6
 8001b80:	e00c      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b82:	2307      	movs	r3, #7
 8001b84:	e00a      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b86:	2305      	movs	r3, #5
 8001b88:	e008      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	e006      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e004      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e002      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	69fa      	ldr	r2, [r7, #28]
 8001b9e:	f002 0203 	and.w	r2, r2, #3
 8001ba2:	0092      	lsls	r2, r2, #2
 8001ba4:	4093      	lsls	r3, r2
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bac:	4935      	ldr	r1, [pc, #212]	; (8001c84 <HAL_GPIO_Init+0x304>)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	089b      	lsrs	r3, r3, #2
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bba:	4b3a      	ldr	r3, [pc, #232]	; (8001ca4 <HAL_GPIO_Init+0x324>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bde:	4a31      	ldr	r2, [pc, #196]	; (8001ca4 <HAL_GPIO_Init+0x324>)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001be4:	4b2f      	ldr	r3, [pc, #188]	; (8001ca4 <HAL_GPIO_Init+0x324>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c08:	4a26      	ldr	r2, [pc, #152]	; (8001ca4 <HAL_GPIO_Init+0x324>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c0e:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <HAL_GPIO_Init+0x324>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c32:	4a1c      	ldr	r2, [pc, #112]	; (8001ca4 <HAL_GPIO_Init+0x324>)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c38:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <HAL_GPIO_Init+0x324>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c5c:	4a11      	ldr	r2, [pc, #68]	; (8001ca4 <HAL_GPIO_Init+0x324>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3301      	adds	r3, #1
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	2b0f      	cmp	r3, #15
 8001c6c:	f67f ae96 	bls.w	800199c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	3724      	adds	r7, #36	; 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40013800 	.word	0x40013800
 8001c88:	40020000 	.word	0x40020000
 8001c8c:	40020400 	.word	0x40020400
 8001c90:	40020800 	.word	0x40020800
 8001c94:	40020c00 	.word	0x40020c00
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40021400 	.word	0x40021400
 8001ca0:	40021800 	.word	0x40021800
 8001ca4:	40013c00 	.word	0x40013c00

08001ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	807b      	strh	r3, [r7, #2]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cb8:	787b      	ldrb	r3, [r7, #1]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cbe:	887a      	ldrh	r2, [r7, #2]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cc4:	e003      	b.n	8001cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cc6:	887b      	ldrh	r3, [r7, #2]
 8001cc8:	041a      	lsls	r2, r3, #16
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	619a      	str	r2, [r3, #24]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0cc      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf0:	4b68      	ldr	r3, [pc, #416]	; (8001e94 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d90c      	bls.n	8001d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfe:	4b65      	ldr	r3, [pc, #404]	; (8001e94 <HAL_RCC_ClockConfig+0x1b8>)
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d06:	4b63      	ldr	r3, [pc, #396]	; (8001e94 <HAL_RCC_ClockConfig+0x1b8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0b8      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d020      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d30:	4b59      	ldr	r3, [pc, #356]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4a58      	ldr	r2, [pc, #352]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d48:	4b53      	ldr	r3, [pc, #332]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	4a52      	ldr	r2, [pc, #328]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d54:	4b50      	ldr	r3, [pc, #320]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	494d      	ldr	r1, [pc, #308]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d044      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d107      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7a:	4b47      	ldr	r3, [pc, #284]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d119      	bne.n	8001dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e07f      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d003      	beq.n	8001d9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d107      	bne.n	8001daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9a:	4b3f      	ldr	r3, [pc, #252]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d109      	bne.n	8001dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e06f      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001daa:	4b3b      	ldr	r3, [pc, #236]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e067      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dba:	4b37      	ldr	r3, [pc, #220]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f023 0203 	bic.w	r2, r3, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4934      	ldr	r1, [pc, #208]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dcc:	f7ff f9dc 	bl	8001188 <HAL_GetTick>
 8001dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd4:	f7ff f9d8 	bl	8001188 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e04f      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 020c 	and.w	r2, r3, #12
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d1eb      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <HAL_RCC_ClockConfig+0x1b8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d20c      	bcs.n	8001e24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <HAL_RCC_ClockConfig+0x1b8>)
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <HAL_RCC_ClockConfig+0x1b8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e032      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	4916      	ldr	r1, [pc, #88]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d009      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	490e      	ldr	r1, [pc, #56]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e62:	f000 f887 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001e66:	4602      	mov	r2, r0
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	490a      	ldr	r1, [pc, #40]	; (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e74:	5ccb      	ldrb	r3, [r1, r3]
 8001e76:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7a:	4a09      	ldr	r2, [pc, #36]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe ffe8 	bl	8000e58 <HAL_InitTick>

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40023c00 	.word	0x40023c00
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	08005a74 	.word	0x08005a74
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	20000004 	.word	0x20000004

08001ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eac:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000000 	.word	0x20000000

08001ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ec4:	f7ff fff0 	bl	8001ea8 <HAL_RCC_GetHCLKFreq>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	0a9b      	lsrs	r3, r3, #10
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	4903      	ldr	r1, [pc, #12]	; (8001ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ed6:	5ccb      	ldrb	r3, [r1, r3]
 8001ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	08005a84 	.word	0x08005a84

08001ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001eec:	f7ff ffdc 	bl	8001ea8 <HAL_RCC_GetHCLKFreq>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	0b5b      	lsrs	r3, r3, #13
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	4903      	ldr	r1, [pc, #12]	; (8001f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001efe:	5ccb      	ldrb	r3, [r1, r3]
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	08005a84 	.word	0x08005a84

08001f10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f20:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_RCC_GetClockConfig+0x5c>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0203 	and.w	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <HAL_RCC_GetClockConfig+0x5c>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <HAL_RCC_GetClockConfig+0x5c>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_RCC_GetClockConfig+0x5c>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	08db      	lsrs	r3, r3, #3
 8001f4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <HAL_RCC_GetClockConfig+0x60>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 020f 	and.w	r2, r3, #15
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	601a      	str	r2, [r3, #0]
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40023c00 	.word	0x40023c00

08001f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f78:	b088      	sub	sp, #32
 8001f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f90:	4bce      	ldr	r3, [pc, #824]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b0c      	cmp	r3, #12
 8001f9a:	f200 818d 	bhi.w	80022b8 <HAL_RCC_GetSysClockFreq+0x344>
 8001f9e:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <HAL_RCC_GetSysClockFreq+0x30>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	08001fd9 	.word	0x08001fd9
 8001fa8:	080022b9 	.word	0x080022b9
 8001fac:	080022b9 	.word	0x080022b9
 8001fb0:	080022b9 	.word	0x080022b9
 8001fb4:	08001fdf 	.word	0x08001fdf
 8001fb8:	080022b9 	.word	0x080022b9
 8001fbc:	080022b9 	.word	0x080022b9
 8001fc0:	080022b9 	.word	0x080022b9
 8001fc4:	08001fe5 	.word	0x08001fe5
 8001fc8:	080022b9 	.word	0x080022b9
 8001fcc:	080022b9 	.word	0x080022b9
 8001fd0:	080022b9 	.word	0x080022b9
 8001fd4:	08002159 	.word	0x08002159
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fd8:	4bbd      	ldr	r3, [pc, #756]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001fda:	61bb      	str	r3, [r7, #24]
       break;
 8001fdc:	e16f      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fde:	4bbd      	ldr	r3, [pc, #756]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x360>)
 8001fe0:	61bb      	str	r3, [r7, #24]
      break;
 8001fe2:	e16c      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fe4:	4bb9      	ldr	r3, [pc, #740]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fec:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fee:	4bb7      	ldr	r3, [pc, #732]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d053      	beq.n	80020a2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ffa:	4bb4      	ldr	r3, [pc, #720]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	099b      	lsrs	r3, r3, #6
 8002000:	461a      	mov	r2, r3
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	f240 10ff 	movw	r0, #511	; 0x1ff
 800200a:	f04f 0100 	mov.w	r1, #0
 800200e:	ea02 0400 	and.w	r4, r2, r0
 8002012:	603c      	str	r4, [r7, #0]
 8002014:	400b      	ands	r3, r1
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	e9d7 4500 	ldrd	r4, r5, [r7]
 800201c:	4620      	mov	r0, r4
 800201e:	4629      	mov	r1, r5
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	014b      	lsls	r3, r1, #5
 800202a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800202e:	0142      	lsls	r2, r0, #5
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	4623      	mov	r3, r4
 8002036:	1ac0      	subs	r0, r0, r3
 8002038:	462b      	mov	r3, r5
 800203a:	eb61 0103 	sbc.w	r1, r1, r3
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	018b      	lsls	r3, r1, #6
 8002048:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800204c:	0182      	lsls	r2, r0, #6
 800204e:	1a12      	subs	r2, r2, r0
 8002050:	eb63 0301 	sbc.w	r3, r3, r1
 8002054:	f04f 0000 	mov.w	r0, #0
 8002058:	f04f 0100 	mov.w	r1, #0
 800205c:	00d9      	lsls	r1, r3, #3
 800205e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002062:	00d0      	lsls	r0, r2, #3
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4621      	mov	r1, r4
 800206a:	1852      	adds	r2, r2, r1
 800206c:	4629      	mov	r1, r5
 800206e:	eb43 0101 	adc.w	r1, r3, r1
 8002072:	460b      	mov	r3, r1
 8002074:	f04f 0000 	mov.w	r0, #0
 8002078:	f04f 0100 	mov.w	r1, #0
 800207c:	0259      	lsls	r1, r3, #9
 800207e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002082:	0250      	lsls	r0, r2, #9
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	461a      	mov	r2, r3
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	f7fe f8bc 	bl	8000210 <__aeabi_uldivmod>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4613      	mov	r3, r2
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	e04c      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a2:	4b8a      	ldr	r3, [pc, #552]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	099b      	lsrs	r3, r3, #6
 80020a8:	461a      	mov	r2, r3
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020b2:	f04f 0100 	mov.w	r1, #0
 80020b6:	ea02 0a00 	and.w	sl, r2, r0
 80020ba:	ea03 0b01 	and.w	fp, r3, r1
 80020be:	4650      	mov	r0, sl
 80020c0:	4659      	mov	r1, fp
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	f04f 0300 	mov.w	r3, #0
 80020ca:	014b      	lsls	r3, r1, #5
 80020cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020d0:	0142      	lsls	r2, r0, #5
 80020d2:	4610      	mov	r0, r2
 80020d4:	4619      	mov	r1, r3
 80020d6:	ebb0 000a 	subs.w	r0, r0, sl
 80020da:	eb61 010b 	sbc.w	r1, r1, fp
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	018b      	lsls	r3, r1, #6
 80020e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020ec:	0182      	lsls	r2, r0, #6
 80020ee:	1a12      	subs	r2, r2, r0
 80020f0:	eb63 0301 	sbc.w	r3, r3, r1
 80020f4:	f04f 0000 	mov.w	r0, #0
 80020f8:	f04f 0100 	mov.w	r1, #0
 80020fc:	00d9      	lsls	r1, r3, #3
 80020fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002102:	00d0      	lsls	r0, r2, #3
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	eb12 020a 	adds.w	r2, r2, sl
 800210c:	eb43 030b 	adc.w	r3, r3, fp
 8002110:	f04f 0000 	mov.w	r0, #0
 8002114:	f04f 0100 	mov.w	r1, #0
 8002118:	0299      	lsls	r1, r3, #10
 800211a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800211e:	0290      	lsls	r0, r2, #10
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4610      	mov	r0, r2
 8002126:	4619      	mov	r1, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	461a      	mov	r2, r3
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	f7fe f86e 	bl	8000210 <__aeabi_uldivmod>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4613      	mov	r3, r2
 800213a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800213c:	4b63      	ldr	r3, [pc, #396]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	0c1b      	lsrs	r3, r3, #16
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	3301      	adds	r3, #1
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800214c:	69fa      	ldr	r2, [r7, #28]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	fbb2 f3f3 	udiv	r3, r2, r3
 8002154:	61bb      	str	r3, [r7, #24]
      break;
 8002156:	e0b2      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002158:	4b5c      	ldr	r3, [pc, #368]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002160:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002162:	4b5a      	ldr	r3, [pc, #360]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d04d      	beq.n	800220a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800216e:	4b57      	ldr	r3, [pc, #348]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	099b      	lsrs	r3, r3, #6
 8002174:	461a      	mov	r2, r3
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800217e:	f04f 0100 	mov.w	r1, #0
 8002182:	ea02 0800 	and.w	r8, r2, r0
 8002186:	ea03 0901 	and.w	r9, r3, r1
 800218a:	4640      	mov	r0, r8
 800218c:	4649      	mov	r1, r9
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	014b      	lsls	r3, r1, #5
 8002198:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800219c:	0142      	lsls	r2, r0, #5
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	ebb0 0008 	subs.w	r0, r0, r8
 80021a6:	eb61 0109 	sbc.w	r1, r1, r9
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	018b      	lsls	r3, r1, #6
 80021b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021b8:	0182      	lsls	r2, r0, #6
 80021ba:	1a12      	subs	r2, r2, r0
 80021bc:	eb63 0301 	sbc.w	r3, r3, r1
 80021c0:	f04f 0000 	mov.w	r0, #0
 80021c4:	f04f 0100 	mov.w	r1, #0
 80021c8:	00d9      	lsls	r1, r3, #3
 80021ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021ce:	00d0      	lsls	r0, r2, #3
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	eb12 0208 	adds.w	r2, r2, r8
 80021d8:	eb43 0309 	adc.w	r3, r3, r9
 80021dc:	f04f 0000 	mov.w	r0, #0
 80021e0:	f04f 0100 	mov.w	r1, #0
 80021e4:	0259      	lsls	r1, r3, #9
 80021e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80021ea:	0250      	lsls	r0, r2, #9
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	461a      	mov	r2, r3
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	f7fe f808 	bl	8000210 <__aeabi_uldivmod>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4613      	mov	r3, r2
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	e04a      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800220a:	4b30      	ldr	r3, [pc, #192]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	099b      	lsrs	r3, r3, #6
 8002210:	461a      	mov	r2, r3
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	f240 10ff 	movw	r0, #511	; 0x1ff
 800221a:	f04f 0100 	mov.w	r1, #0
 800221e:	ea02 0400 	and.w	r4, r2, r0
 8002222:	ea03 0501 	and.w	r5, r3, r1
 8002226:	4620      	mov	r0, r4
 8002228:	4629      	mov	r1, r5
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	014b      	lsls	r3, r1, #5
 8002234:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002238:	0142      	lsls	r2, r0, #5
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	1b00      	subs	r0, r0, r4
 8002240:	eb61 0105 	sbc.w	r1, r1, r5
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	018b      	lsls	r3, r1, #6
 800224e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002252:	0182      	lsls	r2, r0, #6
 8002254:	1a12      	subs	r2, r2, r0
 8002256:	eb63 0301 	sbc.w	r3, r3, r1
 800225a:	f04f 0000 	mov.w	r0, #0
 800225e:	f04f 0100 	mov.w	r1, #0
 8002262:	00d9      	lsls	r1, r3, #3
 8002264:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002268:	00d0      	lsls	r0, r2, #3
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	1912      	adds	r2, r2, r4
 8002270:	eb45 0303 	adc.w	r3, r5, r3
 8002274:	f04f 0000 	mov.w	r0, #0
 8002278:	f04f 0100 	mov.w	r1, #0
 800227c:	0299      	lsls	r1, r3, #10
 800227e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002282:	0290      	lsls	r0, r2, #10
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4610      	mov	r0, r2
 800228a:	4619      	mov	r1, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	461a      	mov	r2, r3
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	f7fd ffbc 	bl	8000210 <__aeabi_uldivmod>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4613      	mov	r3, r2
 800229e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022a0:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_RCC_GetSysClockFreq+0x358>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	0f1b      	lsrs	r3, r3, #28
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b4:	61bb      	str	r3, [r7, #24]
      break;
 80022b6:	e002      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80022ba:	61bb      	str	r3, [r7, #24]
      break;
 80022bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022be:	69bb      	ldr	r3, [r7, #24]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3720      	adds	r7, #32
 80022c4:	46bd      	mov	sp, r7
 80022c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800
 80022d0:	00f42400 	.word	0x00f42400
 80022d4:	007a1200 	.word	0x007a1200

080022d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e28d      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 8083 	beq.w	80023fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022f8:	4b94      	ldr	r3, [pc, #592]	; (800254c <HAL_RCC_OscConfig+0x274>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b04      	cmp	r3, #4
 8002302:	d019      	beq.n	8002338 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002304:	4b91      	ldr	r3, [pc, #580]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800230c:	2b08      	cmp	r3, #8
 800230e:	d106      	bne.n	800231e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002310:	4b8e      	ldr	r3, [pc, #568]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800231c:	d00c      	beq.n	8002338 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231e:	4b8b      	ldr	r3, [pc, #556]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d112      	bne.n	8002350 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800232a:	4b88      	ldr	r3, [pc, #544]	; (800254c <HAL_RCC_OscConfig+0x274>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002336:	d10b      	bne.n	8002350 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	4b84      	ldr	r3, [pc, #528]	; (800254c <HAL_RCC_OscConfig+0x274>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d05b      	beq.n	80023fc <HAL_RCC_OscConfig+0x124>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d157      	bne.n	80023fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e25a      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002358:	d106      	bne.n	8002368 <HAL_RCC_OscConfig+0x90>
 800235a:	4b7c      	ldr	r3, [pc, #496]	; (800254c <HAL_RCC_OscConfig+0x274>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a7b      	ldr	r2, [pc, #492]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e01d      	b.n	80023a4 <HAL_RCC_OscConfig+0xcc>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0xb4>
 8002372:	4b76      	ldr	r3, [pc, #472]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a75      	ldr	r2, [pc, #468]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b73      	ldr	r3, [pc, #460]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a72      	ldr	r2, [pc, #456]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_OscConfig+0xcc>
 800238c:	4b6f      	ldr	r3, [pc, #444]	; (800254c <HAL_RCC_OscConfig+0x274>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a6e      	ldr	r2, [pc, #440]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	4b6c      	ldr	r3, [pc, #432]	; (800254c <HAL_RCC_OscConfig+0x274>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a6b      	ldr	r2, [pc, #428]	; (800254c <HAL_RCC_OscConfig+0x274>)
 800239e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d013      	beq.n	80023d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7fe feec 	bl	8001188 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b4:	f7fe fee8 	bl	8001188 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	; 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e21f      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	4b61      	ldr	r3, [pc, #388]	; (800254c <HAL_RCC_OscConfig+0x274>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0xdc>
 80023d2:	e014      	b.n	80023fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7fe fed8 	bl	8001188 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023dc:	f7fe fed4 	bl	8001188 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	; 0x64
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e20b      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ee:	4b57      	ldr	r3, [pc, #348]	; (800254c <HAL_RCC_OscConfig+0x274>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x104>
 80023fa:	e000      	b.n	80023fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d06f      	beq.n	80024ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800240a:	4b50      	ldr	r3, [pc, #320]	; (800254c <HAL_RCC_OscConfig+0x274>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b00      	cmp	r3, #0
 8002414:	d017      	beq.n	8002446 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002416:	4b4d      	ldr	r3, [pc, #308]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800241e:	2b08      	cmp	r3, #8
 8002420:	d105      	bne.n	800242e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002422:	4b4a      	ldr	r3, [pc, #296]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00b      	beq.n	8002446 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d11c      	bne.n	8002474 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800243a:	4b44      	ldr	r3, [pc, #272]	; (800254c <HAL_RCC_OscConfig+0x274>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d116      	bne.n	8002474 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002446:	4b41      	ldr	r3, [pc, #260]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_RCC_OscConfig+0x186>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d001      	beq.n	800245e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e1d3      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245e:	4b3b      	ldr	r3, [pc, #236]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4937      	ldr	r1, [pc, #220]	; (800254c <HAL_RCC_OscConfig+0x274>)
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	e03a      	b.n	80024ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d020      	beq.n	80024be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800247c:	4b34      	ldr	r3, [pc, #208]	; (8002550 <HAL_RCC_OscConfig+0x278>)
 800247e:	2201      	movs	r2, #1
 8002480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002482:	f7fe fe81 	bl	8001188 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248a:	f7fe fe7d 	bl	8001188 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e1b4      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249c:	4b2b      	ldr	r3, [pc, #172]	; (800254c <HAL_RCC_OscConfig+0x274>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a8:	4b28      	ldr	r3, [pc, #160]	; (800254c <HAL_RCC_OscConfig+0x274>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4925      	ldr	r1, [pc, #148]	; (800254c <HAL_RCC_OscConfig+0x274>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]
 80024bc:	e015      	b.n	80024ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024be:	4b24      	ldr	r3, [pc, #144]	; (8002550 <HAL_RCC_OscConfig+0x278>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7fe fe60 	bl	8001188 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024cc:	f7fe fe5c 	bl	8001188 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e193      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024de:	4b1b      	ldr	r3, [pc, #108]	; (800254c <HAL_RCC_OscConfig+0x274>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d036      	beq.n	8002564 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d016      	beq.n	800252c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_RCC_OscConfig+0x27c>)
 8002500:	2201      	movs	r2, #1
 8002502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002504:	f7fe fe40 	bl	8001188 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800250c:	f7fe fe3c 	bl	8001188 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e173      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251e:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x234>
 800252a:	e01b      	b.n	8002564 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_OscConfig+0x27c>)
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002532:	f7fe fe29 	bl	8001188 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002538:	e00e      	b.n	8002558 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253a:	f7fe fe25 	bl	8001188 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d907      	bls.n	8002558 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e15c      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
 800254c:	40023800 	.word	0x40023800
 8002550:	42470000 	.word	0x42470000
 8002554:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002558:	4b8a      	ldr	r3, [pc, #552]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 800255a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1ea      	bne.n	800253a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 8097 	beq.w	80026a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002576:	4b83      	ldr	r3, [pc, #524]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10f      	bne.n	80025a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	4b7f      	ldr	r3, [pc, #508]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	4a7e      	ldr	r2, [pc, #504]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 800258c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002590:	6413      	str	r3, [r2, #64]	; 0x40
 8002592:	4b7c      	ldr	r3, [pc, #496]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800259e:	2301      	movs	r3, #1
 80025a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a2:	4b79      	ldr	r3, [pc, #484]	; (8002788 <HAL_RCC_OscConfig+0x4b0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d118      	bne.n	80025e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ae:	4b76      	ldr	r3, [pc, #472]	; (8002788 <HAL_RCC_OscConfig+0x4b0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a75      	ldr	r2, [pc, #468]	; (8002788 <HAL_RCC_OscConfig+0x4b0>)
 80025b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ba:	f7fe fde5 	bl	8001188 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c2:	f7fe fde1 	bl	8001188 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e118      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d4:	4b6c      	ldr	r3, [pc, #432]	; (8002788 <HAL_RCC_OscConfig+0x4b0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d106      	bne.n	80025f6 <HAL_RCC_OscConfig+0x31e>
 80025e8:	4b66      	ldr	r3, [pc, #408]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ec:	4a65      	ldr	r2, [pc, #404]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6713      	str	r3, [r2, #112]	; 0x70
 80025f4:	e01c      	b.n	8002630 <HAL_RCC_OscConfig+0x358>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b05      	cmp	r3, #5
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0x340>
 80025fe:	4b61      	ldr	r3, [pc, #388]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002602:	4a60      	ldr	r2, [pc, #384]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	6713      	str	r3, [r2, #112]	; 0x70
 800260a:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	4a5d      	ldr	r2, [pc, #372]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6713      	str	r3, [r2, #112]	; 0x70
 8002616:	e00b      	b.n	8002630 <HAL_RCC_OscConfig+0x358>
 8002618:	4b5a      	ldr	r3, [pc, #360]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	4a59      	ldr	r2, [pc, #356]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 800261e:	f023 0301 	bic.w	r3, r3, #1
 8002622:	6713      	str	r3, [r2, #112]	; 0x70
 8002624:	4b57      	ldr	r3, [pc, #348]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	4a56      	ldr	r2, [pc, #344]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 800262a:	f023 0304 	bic.w	r3, r3, #4
 800262e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d015      	beq.n	8002664 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002638:	f7fe fda6 	bl	8001188 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263e:	e00a      	b.n	8002656 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002640:	f7fe fda2 	bl	8001188 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	; 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e0d7      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002656:	4b4b      	ldr	r3, [pc, #300]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0ee      	beq.n	8002640 <HAL_RCC_OscConfig+0x368>
 8002662:	e014      	b.n	800268e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002664:	f7fe fd90 	bl	8001188 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266a:	e00a      	b.n	8002682 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800266c:	f7fe fd8c 	bl	8001188 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	; 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e0c1      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002682:	4b40      	ldr	r3, [pc, #256]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1ee      	bne.n	800266c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800268e:	7dfb      	ldrb	r3, [r7, #23]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d105      	bne.n	80026a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002694:	4b3b      	ldr	r3, [pc, #236]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	4a3a      	ldr	r2, [pc, #232]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 800269a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80ad 	beq.w	8002804 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026aa:	4b36      	ldr	r3, [pc, #216]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d060      	beq.n	8002778 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d145      	bne.n	800274a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026be:	4b33      	ldr	r3, [pc, #204]	; (800278c <HAL_RCC_OscConfig+0x4b4>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe fd60 	bl	8001188 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026cc:	f7fe fd5c 	bl	8001188 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e093      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026de:	4b29      	ldr	r3, [pc, #164]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69da      	ldr	r2, [r3, #28]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	019b      	lsls	r3, r3, #6
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	085b      	lsrs	r3, r3, #1
 8002702:	3b01      	subs	r3, #1
 8002704:	041b      	lsls	r3, r3, #16
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	061b      	lsls	r3, r3, #24
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	071b      	lsls	r3, r3, #28
 8002716:	491b      	ldr	r1, [pc, #108]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_RCC_OscConfig+0x4b4>)
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002722:	f7fe fd31 	bl	8001188 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272a:	f7fe fd2d 	bl	8001188 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e064      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273c:	4b11      	ldr	r3, [pc, #68]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x452>
 8002748:	e05c      	b.n	8002804 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <HAL_RCC_OscConfig+0x4b4>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe fd1a 	bl	8001188 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002758:	f7fe fd16 	bl	8001188 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e04d      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_RCC_OscConfig+0x4ac>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x480>
 8002776:	e045      	b.n	8002804 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d107      	bne.n	8002790 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e040      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
 8002784:	40023800 	.word	0x40023800
 8002788:	40007000 	.word	0x40007000
 800278c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002790:	4b1f      	ldr	r3, [pc, #124]	; (8002810 <HAL_RCC_OscConfig+0x538>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d030      	beq.n	8002800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d129      	bne.n	8002800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d122      	bne.n	8002800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027c0:	4013      	ands	r3, r2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d119      	bne.n	8002800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	085b      	lsrs	r3, r3, #1
 80027d8:	3b01      	subs	r3, #1
 80027da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d10f      	bne.n	8002800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800

08002814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e07b      	b.n	800291e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	2b00      	cmp	r3, #0
 800282c:	d108      	bne.n	8002840 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002836:	d009      	beq.n	800284c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	61da      	str	r2, [r3, #28]
 800283e:	e005      	b.n	800284c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe fa86 	bl	8000d78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002882:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d0:	ea42 0103 	orr.w	r1, r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	0c1b      	lsrs	r3, r3, #16
 80028ea:	f003 0104 	and.w	r1, r3, #4
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	f003 0210 	and.w	r2, r3, #16
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	69da      	ldr	r2, [r3, #28]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e041      	b.n	80029bc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d106      	bne.n	8002952 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f839 	bl	80029c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2202      	movs	r2, #2
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3304      	adds	r3, #4
 8002962:	4619      	mov	r1, r3
 8002964:	4610      	mov	r0, r2
 8002966:	f000 f9d7 	bl	8002d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d001      	beq.n	80029f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e04e      	b.n	8002a8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <HAL_TIM_Base_Start_IT+0xc4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d022      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1a:	d01d      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d018      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1e      	ldr	r2, [pc, #120]	; (8002aa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d013      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1c      	ldr	r2, [pc, #112]	; (8002aa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00e      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <HAL_TIM_Base_Start_IT+0xd4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d009      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a19      	ldr	r2, [pc, #100]	; (8002ab0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d004      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d111      	bne.n	8002a7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b06      	cmp	r3, #6
 8002a68:	d010      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 0201 	orr.w	r2, r2, #1
 8002a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7a:	e007      	b.n	8002a8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	40000c00 	.word	0x40000c00
 8002aac:	40010400 	.word	0x40010400
 8002ab0:	40014000 	.word	0x40014000
 8002ab4:	40001800 	.word	0x40001800

08002ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d122      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d11b      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0202 	mvn.w	r2, #2
 8002ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f8ee 	bl	8002cdc <HAL_TIM_IC_CaptureCallback>
 8002b00:	e005      	b.n	8002b0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f8e0 	bl	8002cc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f8f1 	bl	8002cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d122      	bne.n	8002b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d11b      	bne.n	8002b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0204 	mvn.w	r2, #4
 8002b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f8c4 	bl	8002cdc <HAL_TIM_IC_CaptureCallback>
 8002b54:	e005      	b.n	8002b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f8b6 	bl	8002cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f8c7 	bl	8002cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d122      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d11b      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0208 	mvn.w	r2, #8
 8002b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2204      	movs	r2, #4
 8002b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f89a 	bl	8002cdc <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f88c 	bl	8002cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f89d 	bl	8002cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	2b10      	cmp	r3, #16
 8002bc8:	d122      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d11b      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0210 	mvn.w	r2, #16
 8002be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2208      	movs	r2, #8
 8002be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f870 	bl	8002cdc <HAL_TIM_IC_CaptureCallback>
 8002bfc:	e005      	b.n	8002c0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f862 	bl	8002cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f873 	bl	8002cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d10e      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d107      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0201 	mvn.w	r2, #1
 8002c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fe f850 	bl	8000cdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c46:	2b80      	cmp	r3, #128	; 0x80
 8002c48:	d10e      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c54:	2b80      	cmp	r3, #128	; 0x80
 8002c56:	d107      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f902 	bl	8002e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	d10e      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c80:	2b40      	cmp	r3, #64	; 0x40
 8002c82:	d107      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f838 	bl	8002d04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d107      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0220 	mvn.w	r2, #32
 8002cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f8cc 	bl	8002e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a40      	ldr	r2, [pc, #256]	; (8002e2c <TIM_Base_SetConfig+0x114>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d013      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d36:	d00f      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a3d      	ldr	r2, [pc, #244]	; (8002e30 <TIM_Base_SetConfig+0x118>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00b      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a3c      	ldr	r2, [pc, #240]	; (8002e34 <TIM_Base_SetConfig+0x11c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d007      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a3b      	ldr	r2, [pc, #236]	; (8002e38 <TIM_Base_SetConfig+0x120>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d003      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a3a      	ldr	r2, [pc, #232]	; (8002e3c <TIM_Base_SetConfig+0x124>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d108      	bne.n	8002d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a2f      	ldr	r2, [pc, #188]	; (8002e2c <TIM_Base_SetConfig+0x114>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d02b      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d78:	d027      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a2c      	ldr	r2, [pc, #176]	; (8002e30 <TIM_Base_SetConfig+0x118>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d023      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a2b      	ldr	r2, [pc, #172]	; (8002e34 <TIM_Base_SetConfig+0x11c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01f      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a2a      	ldr	r2, [pc, #168]	; (8002e38 <TIM_Base_SetConfig+0x120>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d01b      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <TIM_Base_SetConfig+0x124>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d017      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a28      	ldr	r2, [pc, #160]	; (8002e40 <TIM_Base_SetConfig+0x128>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d013      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a27      	ldr	r2, [pc, #156]	; (8002e44 <TIM_Base_SetConfig+0x12c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00f      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <TIM_Base_SetConfig+0x130>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00b      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a25      	ldr	r2, [pc, #148]	; (8002e4c <TIM_Base_SetConfig+0x134>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d007      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a24      	ldr	r2, [pc, #144]	; (8002e50 <TIM_Base_SetConfig+0x138>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d003      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a23      	ldr	r2, [pc, #140]	; (8002e54 <TIM_Base_SetConfig+0x13c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d108      	bne.n	8002ddc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <TIM_Base_SetConfig+0x114>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d003      	beq.n	8002e10 <TIM_Base_SetConfig+0xf8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a0c      	ldr	r2, [pc, #48]	; (8002e3c <TIM_Base_SetConfig+0x124>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d103      	bne.n	8002e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	615a      	str	r2, [r3, #20]
}
 8002e1e:	bf00      	nop
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	40000400 	.word	0x40000400
 8002e34:	40000800 	.word	0x40000800
 8002e38:	40000c00 	.word	0x40000c00
 8002e3c:	40010400 	.word	0x40010400
 8002e40:	40014000 	.word	0x40014000
 8002e44:	40014400 	.word	0x40014400
 8002e48:	40014800 	.word	0x40014800
 8002e4c:	40001800 	.word	0x40001800
 8002e50:	40001c00 	.word	0x40001c00
 8002e54:	40002000 	.word	0x40002000

08002e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e03f      	b.n	8002f12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7fe f894 	bl	8000fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2224      	movs	r2, #36	; 0x24
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f829 	bl	8002f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f20:	b09f      	sub	sp, #124	; 0x7c
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f32:	68d9      	ldr	r1, [r3, #12]
 8002f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	ea40 0301 	orr.w	r3, r0, r1
 8002f3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f60:	f021 010c 	bic.w	r1, r1, #12
 8002f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7a:	6999      	ldr	r1, [r3, #24]
 8002f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	ea40 0301 	orr.w	r3, r0, r1
 8002f84:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4bc5      	ldr	r3, [pc, #788]	; (80032a0 <UART_SetConfig+0x384>)
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d004      	beq.n	8002f9a <UART_SetConfig+0x7e>
 8002f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4bc3      	ldr	r3, [pc, #780]	; (80032a4 <UART_SetConfig+0x388>)
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d103      	bne.n	8002fa2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f9a:	f7fe ffa5 	bl	8001ee8 <HAL_RCC_GetPCLK2Freq>
 8002f9e:	6778      	str	r0, [r7, #116]	; 0x74
 8002fa0:	e002      	b.n	8002fa8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fa2:	f7fe ff8d 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 8002fa6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb0:	f040 80b6 	bne.w	8003120 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb6:	461c      	mov	r4, r3
 8002fb8:	f04f 0500 	mov.w	r5, #0
 8002fbc:	4622      	mov	r2, r4
 8002fbe:	462b      	mov	r3, r5
 8002fc0:	1891      	adds	r1, r2, r2
 8002fc2:	6439      	str	r1, [r7, #64]	; 0x40
 8002fc4:	415b      	adcs	r3, r3
 8002fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fc8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fcc:	1912      	adds	r2, r2, r4
 8002fce:	eb45 0303 	adc.w	r3, r5, r3
 8002fd2:	f04f 0000 	mov.w	r0, #0
 8002fd6:	f04f 0100 	mov.w	r1, #0
 8002fda:	00d9      	lsls	r1, r3, #3
 8002fdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fe0:	00d0      	lsls	r0, r2, #3
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	1911      	adds	r1, r2, r4
 8002fe8:	6639      	str	r1, [r7, #96]	; 0x60
 8002fea:	416b      	adcs	r3, r5
 8002fec:	667b      	str	r3, [r7, #100]	; 0x64
 8002fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	1891      	adds	r1, r2, r2
 8002ffa:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ffc:	415b      	adcs	r3, r3
 8002ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003000:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003004:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003008:	f7fd f902 	bl	8000210 <__aeabi_uldivmod>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4ba5      	ldr	r3, [pc, #660]	; (80032a8 <UART_SetConfig+0x38c>)
 8003012:	fba3 2302 	umull	r2, r3, r3, r2
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	011e      	lsls	r6, r3, #4
 800301a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800301c:	461c      	mov	r4, r3
 800301e:	f04f 0500 	mov.w	r5, #0
 8003022:	4622      	mov	r2, r4
 8003024:	462b      	mov	r3, r5
 8003026:	1891      	adds	r1, r2, r2
 8003028:	6339      	str	r1, [r7, #48]	; 0x30
 800302a:	415b      	adcs	r3, r3
 800302c:	637b      	str	r3, [r7, #52]	; 0x34
 800302e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003032:	1912      	adds	r2, r2, r4
 8003034:	eb45 0303 	adc.w	r3, r5, r3
 8003038:	f04f 0000 	mov.w	r0, #0
 800303c:	f04f 0100 	mov.w	r1, #0
 8003040:	00d9      	lsls	r1, r3, #3
 8003042:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003046:	00d0      	lsls	r0, r2, #3
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	1911      	adds	r1, r2, r4
 800304e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003050:	416b      	adcs	r3, r5
 8003052:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	461a      	mov	r2, r3
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	1891      	adds	r1, r2, r2
 8003060:	62b9      	str	r1, [r7, #40]	; 0x28
 8003062:	415b      	adcs	r3, r3
 8003064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003066:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800306a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800306e:	f7fd f8cf 	bl	8000210 <__aeabi_uldivmod>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4b8c      	ldr	r3, [pc, #560]	; (80032a8 <UART_SetConfig+0x38c>)
 8003078:	fba3 1302 	umull	r1, r3, r3, r2
 800307c:	095b      	lsrs	r3, r3, #5
 800307e:	2164      	movs	r1, #100	; 0x64
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	3332      	adds	r3, #50	; 0x32
 800308a:	4a87      	ldr	r2, [pc, #540]	; (80032a8 <UART_SetConfig+0x38c>)
 800308c:	fba2 2303 	umull	r2, r3, r2, r3
 8003090:	095b      	lsrs	r3, r3, #5
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003098:	441e      	add	r6, r3
 800309a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800309c:	4618      	mov	r0, r3
 800309e:	f04f 0100 	mov.w	r1, #0
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	1894      	adds	r4, r2, r2
 80030a8:	623c      	str	r4, [r7, #32]
 80030aa:	415b      	adcs	r3, r3
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
 80030ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030b2:	1812      	adds	r2, r2, r0
 80030b4:	eb41 0303 	adc.w	r3, r1, r3
 80030b8:	f04f 0400 	mov.w	r4, #0
 80030bc:	f04f 0500 	mov.w	r5, #0
 80030c0:	00dd      	lsls	r5, r3, #3
 80030c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030c6:	00d4      	lsls	r4, r2, #3
 80030c8:	4622      	mov	r2, r4
 80030ca:	462b      	mov	r3, r5
 80030cc:	1814      	adds	r4, r2, r0
 80030ce:	653c      	str	r4, [r7, #80]	; 0x50
 80030d0:	414b      	adcs	r3, r1
 80030d2:	657b      	str	r3, [r7, #84]	; 0x54
 80030d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	461a      	mov	r2, r3
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	1891      	adds	r1, r2, r2
 80030e0:	61b9      	str	r1, [r7, #24]
 80030e2:	415b      	adcs	r3, r3
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80030ee:	f7fd f88f 	bl	8000210 <__aeabi_uldivmod>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4b6c      	ldr	r3, [pc, #432]	; (80032a8 <UART_SetConfig+0x38c>)
 80030f8:	fba3 1302 	umull	r1, r3, r3, r2
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	2164      	movs	r1, #100	; 0x64
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	3332      	adds	r3, #50	; 0x32
 800310a:	4a67      	ldr	r2, [pc, #412]	; (80032a8 <UART_SetConfig+0x38c>)
 800310c:	fba2 2303 	umull	r2, r3, r2, r3
 8003110:	095b      	lsrs	r3, r3, #5
 8003112:	f003 0207 	and.w	r2, r3, #7
 8003116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4432      	add	r2, r6
 800311c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800311e:	e0b9      	b.n	8003294 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003122:	461c      	mov	r4, r3
 8003124:	f04f 0500 	mov.w	r5, #0
 8003128:	4622      	mov	r2, r4
 800312a:	462b      	mov	r3, r5
 800312c:	1891      	adds	r1, r2, r2
 800312e:	6139      	str	r1, [r7, #16]
 8003130:	415b      	adcs	r3, r3
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003138:	1912      	adds	r2, r2, r4
 800313a:	eb45 0303 	adc.w	r3, r5, r3
 800313e:	f04f 0000 	mov.w	r0, #0
 8003142:	f04f 0100 	mov.w	r1, #0
 8003146:	00d9      	lsls	r1, r3, #3
 8003148:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800314c:	00d0      	lsls	r0, r2, #3
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	eb12 0804 	adds.w	r8, r2, r4
 8003156:	eb43 0905 	adc.w	r9, r3, r5
 800315a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4618      	mov	r0, r3
 8003160:	f04f 0100 	mov.w	r1, #0
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	008b      	lsls	r3, r1, #2
 800316e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003172:	0082      	lsls	r2, r0, #2
 8003174:	4640      	mov	r0, r8
 8003176:	4649      	mov	r1, r9
 8003178:	f7fd f84a 	bl	8000210 <__aeabi_uldivmod>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4b49      	ldr	r3, [pc, #292]	; (80032a8 <UART_SetConfig+0x38c>)
 8003182:	fba3 2302 	umull	r2, r3, r3, r2
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	011e      	lsls	r6, r3, #4
 800318a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800318c:	4618      	mov	r0, r3
 800318e:	f04f 0100 	mov.w	r1, #0
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	1894      	adds	r4, r2, r2
 8003198:	60bc      	str	r4, [r7, #8]
 800319a:	415b      	adcs	r3, r3
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031a2:	1812      	adds	r2, r2, r0
 80031a4:	eb41 0303 	adc.w	r3, r1, r3
 80031a8:	f04f 0400 	mov.w	r4, #0
 80031ac:	f04f 0500 	mov.w	r5, #0
 80031b0:	00dd      	lsls	r5, r3, #3
 80031b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031b6:	00d4      	lsls	r4, r2, #3
 80031b8:	4622      	mov	r2, r4
 80031ba:	462b      	mov	r3, r5
 80031bc:	1814      	adds	r4, r2, r0
 80031be:	64bc      	str	r4, [r7, #72]	; 0x48
 80031c0:	414b      	adcs	r3, r1
 80031c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f04f 0100 	mov.w	r1, #0
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	008b      	lsls	r3, r1, #2
 80031d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80031dc:	0082      	lsls	r2, r0, #2
 80031de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80031e2:	f7fd f815 	bl	8000210 <__aeabi_uldivmod>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4b2f      	ldr	r3, [pc, #188]	; (80032a8 <UART_SetConfig+0x38c>)
 80031ec:	fba3 1302 	umull	r1, r3, r3, r2
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	2164      	movs	r1, #100	; 0x64
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	3332      	adds	r3, #50	; 0x32
 80031fe:	4a2a      	ldr	r2, [pc, #168]	; (80032a8 <UART_SetConfig+0x38c>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800320a:	441e      	add	r6, r3
 800320c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800320e:	4618      	mov	r0, r3
 8003210:	f04f 0100 	mov.w	r1, #0
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	1894      	adds	r4, r2, r2
 800321a:	603c      	str	r4, [r7, #0]
 800321c:	415b      	adcs	r3, r3
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003224:	1812      	adds	r2, r2, r0
 8003226:	eb41 0303 	adc.w	r3, r1, r3
 800322a:	f04f 0400 	mov.w	r4, #0
 800322e:	f04f 0500 	mov.w	r5, #0
 8003232:	00dd      	lsls	r5, r3, #3
 8003234:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003238:	00d4      	lsls	r4, r2, #3
 800323a:	4622      	mov	r2, r4
 800323c:	462b      	mov	r3, r5
 800323e:	eb12 0a00 	adds.w	sl, r2, r0
 8003242:	eb43 0b01 	adc.w	fp, r3, r1
 8003246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4618      	mov	r0, r3
 800324c:	f04f 0100 	mov.w	r1, #0
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	008b      	lsls	r3, r1, #2
 800325a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800325e:	0082      	lsls	r2, r0, #2
 8003260:	4650      	mov	r0, sl
 8003262:	4659      	mov	r1, fp
 8003264:	f7fc ffd4 	bl	8000210 <__aeabi_uldivmod>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <UART_SetConfig+0x38c>)
 800326e:	fba3 1302 	umull	r1, r3, r3, r2
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2164      	movs	r1, #100	; 0x64
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	3332      	adds	r3, #50	; 0x32
 8003280:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <UART_SetConfig+0x38c>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	f003 020f 	and.w	r2, r3, #15
 800328c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4432      	add	r2, r6
 8003292:	609a      	str	r2, [r3, #8]
}
 8003294:	bf00      	nop
 8003296:	377c      	adds	r7, #124	; 0x7c
 8003298:	46bd      	mov	sp, r7
 800329a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800329e:	bf00      	nop
 80032a0:	40011000 	.word	0x40011000
 80032a4:	40011400 	.word	0x40011400
 80032a8:	51eb851f 	.word	0x51eb851f

080032ac <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f103 0208 	add.w	r2, r3, #8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f04f 32ff 	mov.w	r2, #4294967295
 80032c4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f103 0208 	add.w	r2, r3, #8
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f103 0208 	add.w	r2, r3, #8
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003306:	b480      	push	{r7}
 8003308:	b085      	sub	sp, #20
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	601a      	str	r2, [r3, #0]
}
 8003342:	bf00      	nop
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800334e:	b480      	push	{r7}
 8003350:	b085      	sub	sp, #20
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d103      	bne.n	800336e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	e00c      	b.n	8003388 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3308      	adds	r3, #8
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	e002      	b.n	800337c <vListInsert+0x2e>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	429a      	cmp	r2, r3
 8003386:	d2f6      	bcs.n	8003376 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	601a      	str	r2, [r3, #0]
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6892      	ldr	r2, [r2, #8]
 80033d6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6852      	ldr	r2, [r2, #4]
 80033e0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d103      	bne.n	80033f4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	1e5a      	subs	r2, r3, #1
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10a      	bne.n	800343e <xQueueGenericReset+0x2a>
        __asm volatile
 8003428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342c:	f383 8811 	msr	BASEPRI, r3
 8003430:	f3bf 8f6f 	isb	sy
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	60bb      	str	r3, [r7, #8]
    }
 800343a:	bf00      	nop
 800343c:	e7fe      	b.n	800343c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800343e:	f001 ff5b 	bl	80052f8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	68f9      	ldr	r1, [r7, #12]
 800344c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	441a      	add	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346e:	3b01      	subs	r3, #1
 8003470:	68f9      	ldr	r1, [r7, #12]
 8003472:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	441a      	add	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	22ff      	movs	r2, #255	; 0xff
 8003482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	22ff      	movs	r2, #255	; 0xff
 800348a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d114      	bne.n	80034be <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01a      	beq.n	80034d2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	3310      	adds	r3, #16
 80034a0:	4618      	mov	r0, r3
 80034a2:	f001 f84d 	bl	8004540 <xTaskRemoveFromEventList>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d012      	beq.n	80034d2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80034ac:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <xQueueGenericReset+0xcc>)
 80034ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	e009      	b.n	80034d2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3310      	adds	r3, #16
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff fef2 	bl	80032ac <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3324      	adds	r3, #36	; 0x24
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff feed 	bl	80032ac <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80034d2:	f001 ff41 	bl	8005358 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80034d6:	2301      	movs	r3, #1
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	e000ed04 	.word	0xe000ed04

080034e4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08c      	sub	sp, #48	; 0x30
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	4613      	mov	r3, r2
 80034f0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <xQueueGenericCreate+0x2a>
        __asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	61bb      	str	r3, [r7, #24]
    }
 800350a:	bf00      	nop
 800350c:	e7fe      	b.n	800350c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	fb02 f303 	mul.w	r3, r2, r3
 8003516:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d006      	beq.n	800352c <xQueueGenericCreate+0x48>
 800351e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	fbb2 f3f3 	udiv	r3, r2, r3
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	429a      	cmp	r2, r3
 800352a:	d101      	bne.n	8003530 <xQueueGenericCreate+0x4c>
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <xQueueGenericCreate+0x4e>
 8003530:	2300      	movs	r3, #0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10a      	bne.n	800354c <xQueueGenericCreate+0x68>
        __asm volatile
 8003536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	617b      	str	r3, [r7, #20]
    }
 8003548:	bf00      	nop
 800354a:	e7fe      	b.n	800354a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003552:	d90a      	bls.n	800356a <xQueueGenericCreate+0x86>
        __asm volatile
 8003554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	613b      	str	r3, [r7, #16]
    }
 8003566:	bf00      	nop
 8003568:	e7fe      	b.n	8003568 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	3350      	adds	r3, #80	; 0x50
 800356e:	4618      	mov	r0, r3
 8003570:	f002 f82a 	bl	80055c8 <pvPortMalloc>
 8003574:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00d      	beq.n	8003598 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	3350      	adds	r3, #80	; 0x50
 8003584:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003586:	79fa      	ldrb	r2, [r7, #7]
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	69fa      	ldr	r2, [r7, #28]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f805 	bl	80035a2 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003598:	6a3b      	ldr	r3, [r7, #32]
    }
 800359a:	4618      	mov	r0, r3
 800359c:	3728      	adds	r7, #40	; 0x28
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d103      	bne.n	80035be <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	e002      	b.n	80035c4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035d0:	2101      	movs	r1, #1
 80035d2:	69b8      	ldr	r0, [r7, #24]
 80035d4:	f7ff ff1e 	bl	8003414 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	78fa      	ldrb	r2, [r7, #3]
 80035dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80035e0:	bf00      	nop
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08e      	sub	sp, #56	; 0x38
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035f6:	2300      	movs	r3, #0
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <xQueueGenericSend+0x32>
        __asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003616:	bf00      	nop
 8003618:	e7fe      	b.n	8003618 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d103      	bne.n	8003628 <xQueueGenericSend+0x40>
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <xQueueGenericSend+0x44>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <xQueueGenericSend+0x46>
 800362c:	2300      	movs	r3, #0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10a      	bne.n	8003648 <xQueueGenericSend+0x60>
        __asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003644:	bf00      	nop
 8003646:	e7fe      	b.n	8003646 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d103      	bne.n	8003656 <xQueueGenericSend+0x6e>
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <xQueueGenericSend+0x72>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <xQueueGenericSend+0x74>
 800365a:	2300      	movs	r3, #0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <xQueueGenericSend+0x8e>
        __asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	623b      	str	r3, [r7, #32]
    }
 8003672:	bf00      	nop
 8003674:	e7fe      	b.n	8003674 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003676:	f001 f8ff 	bl	8004878 <xTaskGetSchedulerState>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d102      	bne.n	8003686 <xQueueGenericSend+0x9e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <xQueueGenericSend+0xa2>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <xQueueGenericSend+0xa4>
 800368a:	2300      	movs	r3, #0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10a      	bne.n	80036a6 <xQueueGenericSend+0xbe>
        __asm volatile
 8003690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	61fb      	str	r3, [r7, #28]
    }
 80036a2:	bf00      	nop
 80036a4:	e7fe      	b.n	80036a4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80036a6:	f001 fe27 	bl	80052f8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d302      	bcc.n	80036bc <xQueueGenericSend+0xd4>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d129      	bne.n	8003710 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	68b9      	ldr	r1, [r7, #8]
 80036c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036c2:	f000 fa19 	bl	8003af8 <prvCopyDataToQueue>
 80036c6:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d010      	beq.n	80036f2 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	3324      	adds	r3, #36	; 0x24
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 ff33 	bl	8004540 <xTaskRemoveFromEventList>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d013      	beq.n	8003708 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80036e0:	4b3f      	ldr	r3, [pc, #252]	; (80037e0 <xQueueGenericSend+0x1f8>)
 80036e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	e00a      	b.n	8003708 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d007      	beq.n	8003708 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80036f8:	4b39      	ldr	r3, [pc, #228]	; (80037e0 <xQueueGenericSend+0x1f8>)
 80036fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003708:	f001 fe26 	bl	8005358 <vPortExitCritical>
                return pdPASS;
 800370c:	2301      	movs	r3, #1
 800370e:	e063      	b.n	80037d8 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d103      	bne.n	800371e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003716:	f001 fe1f 	bl	8005358 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800371a:	2300      	movs	r3, #0
 800371c:	e05c      	b.n	80037d8 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800371e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003720:	2b00      	cmp	r3, #0
 8003722:	d106      	bne.n	8003732 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003724:	f107 0314 	add.w	r3, r7, #20
 8003728:	4618      	mov	r0, r3
 800372a:	f000 ff6b 	bl	8004604 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800372e:	2301      	movs	r3, #1
 8003730:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003732:	f001 fe11 	bl	8005358 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003736:	f000 fce5 	bl	8004104 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800373a:	f001 fddd 	bl	80052f8 <vPortEnterCritical>
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003744:	b25b      	sxtb	r3, r3
 8003746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374a:	d103      	bne.n	8003754 <xQueueGenericSend+0x16c>
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800375a:	b25b      	sxtb	r3, r3
 800375c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003760:	d103      	bne.n	800376a <xQueueGenericSend+0x182>
 8003762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800376a:	f001 fdf5 	bl	8005358 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800376e:	1d3a      	adds	r2, r7, #4
 8003770:	f107 0314 	add.w	r3, r7, #20
 8003774:	4611      	mov	r1, r2
 8003776:	4618      	mov	r0, r3
 8003778:	f000 ff5a 	bl	8004630 <xTaskCheckForTimeOut>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d124      	bne.n	80037cc <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003782:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003784:	f000 fab0 	bl	8003ce8 <prvIsQueueFull>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d018      	beq.n	80037c0 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800378e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003790:	3310      	adds	r3, #16
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	4611      	mov	r1, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fe82 	bl	80044a0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800379c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800379e:	f000 fa3b 	bl	8003c18 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80037a2:	f000 fcbd 	bl	8004120 <xTaskResumeAll>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f47f af7c 	bne.w	80036a6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80037ae:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <xQueueGenericSend+0x1f8>)
 80037b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	e772      	b.n	80036a6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80037c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037c2:	f000 fa29 	bl	8003c18 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80037c6:	f000 fcab 	bl	8004120 <xTaskResumeAll>
 80037ca:	e76c      	b.n	80036a6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80037cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037ce:	f000 fa23 	bl	8003c18 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80037d2:	f000 fca5 	bl	8004120 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80037d6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3738      	adds	r7, #56	; 0x38
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	e000ed04 	.word	0xe000ed04

080037e4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b090      	sub	sp, #64	; 0x40
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d103      	bne.n	8003820 <xQueueGenericSendFromISR+0x3c>
 8003818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <xQueueGenericSendFromISR+0x40>
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <xQueueGenericSendFromISR+0x42>
 8003824:	2300      	movs	r3, #0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800383c:	bf00      	nop
 800383e:	e7fe      	b.n	800383e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d103      	bne.n	800384e <xQueueGenericSendFromISR+0x6a>
 8003846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <xQueueGenericSendFromISR+0x6e>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <xQueueGenericSendFromISR+0x70>
 8003852:	2300      	movs	r3, #0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	623b      	str	r3, [r7, #32]
    }
 800386a:	bf00      	nop
 800386c:	e7fe      	b.n	800386c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800386e:	f001 fe25 	bl	80054bc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003872:	f3ef 8211 	mrs	r2, BASEPRI
 8003876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	61fa      	str	r2, [r7, #28]
 8003888:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800388a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800388c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800388e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <xQueueGenericSendFromISR+0xbc>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d13e      	bne.n	800391e <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80038a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	68b9      	ldr	r1, [r7, #8]
 80038b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038b6:	f000 f91f 	bl	8003af8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80038ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c2:	d112      	bne.n	80038ea <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d025      	beq.n	8003918 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ce:	3324      	adds	r3, #36	; 0x24
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 fe35 	bl	8004540 <xTaskRemoveFromEventList>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01d      	beq.n	8003918 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d01a      	beq.n	8003918 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	e016      	b.n	8003918 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80038ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80038ee:	2b7f      	cmp	r3, #127	; 0x7f
 80038f0:	d10a      	bne.n	8003908 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80038f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	617b      	str	r3, [r7, #20]
    }
 8003904:	bf00      	nop
 8003906:	e7fe      	b.n	8003906 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003908:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800390c:	3301      	adds	r3, #1
 800390e:	b2db      	uxtb	r3, r3
 8003910:	b25a      	sxtb	r2, r3
 8003912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003918:	2301      	movs	r3, #1
 800391a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800391c:	e001      	b.n	8003922 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800391e:	2300      	movs	r3, #0
 8003920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003924:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800392c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800392e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003930:	4618      	mov	r0, r3
 8003932:	3740      	adds	r7, #64	; 0x40
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08c      	sub	sp, #48	; 0x30
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003944:	2300      	movs	r3, #0
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10a      	bne.n	8003968 <xQueueReceive+0x30>
        __asm volatile
 8003952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003956:	f383 8811 	msr	BASEPRI, r3
 800395a:	f3bf 8f6f 	isb	sy
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	623b      	str	r3, [r7, #32]
    }
 8003964:	bf00      	nop
 8003966:	e7fe      	b.n	8003966 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d103      	bne.n	8003976 <xQueueReceive+0x3e>
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <xQueueReceive+0x42>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <xQueueReceive+0x44>
 800397a:	2300      	movs	r3, #0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10a      	bne.n	8003996 <xQueueReceive+0x5e>
        __asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	61fb      	str	r3, [r7, #28]
    }
 8003992:	bf00      	nop
 8003994:	e7fe      	b.n	8003994 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003996:	f000 ff6f 	bl	8004878 <xTaskGetSchedulerState>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d102      	bne.n	80039a6 <xQueueReceive+0x6e>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <xQueueReceive+0x72>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <xQueueReceive+0x74>
 80039aa:	2300      	movs	r3, #0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10a      	bne.n	80039c6 <xQueueReceive+0x8e>
        __asm volatile
 80039b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	61bb      	str	r3, [r7, #24]
    }
 80039c2:	bf00      	nop
 80039c4:	e7fe      	b.n	80039c4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80039c6:	f001 fc97 	bl	80052f8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01f      	beq.n	8003a16 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039d6:	68b9      	ldr	r1, [r7, #8]
 80039d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039da:	f000 f8f7 	bl	8003bcc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	1e5a      	subs	r2, r3, #1
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00f      	beq.n	8003a0e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f0:	3310      	adds	r3, #16
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fda4 	bl	8004540 <xTaskRemoveFromEventList>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d007      	beq.n	8003a0e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80039fe:	4b3d      	ldr	r3, [pc, #244]	; (8003af4 <xQueueReceive+0x1bc>)
 8003a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003a0e:	f001 fca3 	bl	8005358 <vPortExitCritical>
                return pdPASS;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e069      	b.n	8003aea <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d103      	bne.n	8003a24 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003a1c:	f001 fc9c 	bl	8005358 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003a20:	2300      	movs	r3, #0
 8003a22:	e062      	b.n	8003aea <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003a2a:	f107 0310 	add.w	r3, r7, #16
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fde8 	bl	8004604 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003a34:	2301      	movs	r3, #1
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003a38:	f001 fc8e 	bl	8005358 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003a3c:	f000 fb62 	bl	8004104 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003a40:	f001 fc5a 	bl	80052f8 <vPortEnterCritical>
 8003a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a4a:	b25b      	sxtb	r3, r3
 8003a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a50:	d103      	bne.n	8003a5a <xQueueReceive+0x122>
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a60:	b25b      	sxtb	r3, r3
 8003a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a66:	d103      	bne.n	8003a70 <xQueueReceive+0x138>
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a70:	f001 fc72 	bl	8005358 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a74:	1d3a      	adds	r2, r7, #4
 8003a76:	f107 0310 	add.w	r3, r7, #16
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fdd7 	bl	8004630 <xTaskCheckForTimeOut>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d123      	bne.n	8003ad0 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a8a:	f000 f917 	bl	8003cbc <prvIsQueueEmpty>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d017      	beq.n	8003ac4 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	3324      	adds	r3, #36	; 0x24
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fcff 	bl	80044a0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003aa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aa4:	f000 f8b8 	bl	8003c18 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003aa8:	f000 fb3a 	bl	8004120 <xTaskResumeAll>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d189      	bne.n	80039c6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003ab2:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <xQueueReceive+0x1bc>)
 8003ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	e780      	b.n	80039c6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ac6:	f000 f8a7 	bl	8003c18 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003aca:	f000 fb29 	bl	8004120 <xTaskResumeAll>
 8003ace:	e77a      	b.n	80039c6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ad2:	f000 f8a1 	bl	8003c18 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003ad6:	f000 fb23 	bl	8004120 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003adc:	f000 f8ee 	bl	8003cbc <prvIsQueueEmpty>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f43f af6f 	beq.w	80039c6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003ae8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3730      	adds	r7, #48	; 0x30
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	e000ed04 	.word	0xe000ed04

08003af8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10d      	bne.n	8003b32 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d14d      	bne.n	8003bba <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fec6 	bl	80048b4 <xTaskPriorityDisinherit>
 8003b28:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	609a      	str	r2, [r3, #8]
 8003b30:	e043      	b.n	8003bba <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d119      	bne.n	8003b6c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6858      	ldr	r0, [r3, #4]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	461a      	mov	r2, r3
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	f001 ff62 	bl	8005a0c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	441a      	add	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d32b      	bcc.n	8003bba <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	e026      	b.n	8003bba <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	68d8      	ldr	r0, [r3, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	461a      	mov	r2, r3
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	f001 ff48 	bl	8005a0c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	425b      	negs	r3, r3
 8003b86:	441a      	add	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d207      	bcs.n	8003ba8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	425b      	negs	r3, r3
 8003ba2:	441a      	add	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d105      	bne.n	8003bba <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003bc2:	697b      	ldr	r3, [r7, #20]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d018      	beq.n	8003c10 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	441a      	add	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d303      	bcc.n	8003c00 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68d9      	ldr	r1, [r3, #12]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	461a      	mov	r2, r3
 8003c0a:	6838      	ldr	r0, [r7, #0]
 8003c0c:	f001 fefe 	bl	8005a0c <memcpy>
    }
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003c20:	f001 fb6a 	bl	80052f8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c2a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c2c:	e011      	b.n	8003c52 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d012      	beq.n	8003c5c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3324      	adds	r3, #36	; 0x24
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fc80 	bl	8004540 <xTaskRemoveFromEventList>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003c46:	f000 fd59 	bl	80046fc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	dce9      	bgt.n	8003c2e <prvUnlockQueue+0x16>
 8003c5a:	e000      	b.n	8003c5e <prvUnlockQueue+0x46>
                        break;
 8003c5c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	22ff      	movs	r2, #255	; 0xff
 8003c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003c66:	f001 fb77 	bl	8005358 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003c6a:	f001 fb45 	bl	80052f8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c74:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c76:	e011      	b.n	8003c9c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d012      	beq.n	8003ca6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3310      	adds	r3, #16
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fc5b 	bl	8004540 <xTaskRemoveFromEventList>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003c90:	f000 fd34 	bl	80046fc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003c94:	7bbb      	ldrb	r3, [r7, #14]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	dce9      	bgt.n	8003c78 <prvUnlockQueue+0x60>
 8003ca4:	e000      	b.n	8003ca8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003ca6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	22ff      	movs	r2, #255	; 0xff
 8003cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003cb0:	f001 fb52 	bl	8005358 <vPortExitCritical>
}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003cc4:	f001 fb18 	bl	80052f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	e001      	b.n	8003cda <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003cda:	f001 fb3d 	bl	8005358 <vPortExitCritical>

    return xReturn;
 8003cde:	68fb      	ldr	r3, [r7, #12]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003cf0:	f001 fb02 	bl	80052f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d102      	bne.n	8003d06 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003d00:	2301      	movs	r3, #1
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	e001      	b.n	8003d0a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003d0a:	f001 fb25 	bl	8005358 <vPortExitCritical>

    return xReturn;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	e014      	b.n	8003d52 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d28:	4a0f      	ldr	r2, [pc, #60]	; (8003d68 <vQueueAddToRegistry+0x50>)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10b      	bne.n	8003d4c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d34:	490c      	ldr	r1, [pc, #48]	; (8003d68 <vQueueAddToRegistry+0x50>)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003d3e:	4a0a      	ldr	r2, [pc, #40]	; (8003d68 <vQueueAddToRegistry+0x50>)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4413      	add	r3, r2
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8003d4a:	e006      	b.n	8003d5a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b07      	cmp	r3, #7
 8003d56:	d9e7      	bls.n	8003d28 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	20003eec 	.word	0x20003eec

08003d6c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003d7c:	f001 fabc 	bl	80052f8 <vPortEnterCritical>
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d86:	b25b      	sxtb	r3, r3
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8c:	d103      	bne.n	8003d96 <vQueueWaitForMessageRestricted+0x2a>
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d9c:	b25b      	sxtb	r3, r3
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da2:	d103      	bne.n	8003dac <vQueueWaitForMessageRestricted+0x40>
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dac:	f001 fad4 	bl	8005358 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d106      	bne.n	8003dc6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	3324      	adds	r3, #36	; 0x24
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	68b9      	ldr	r1, [r7, #8]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 fb91 	bl	80044e8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003dc6:	6978      	ldr	r0, [r7, #20]
 8003dc8:	f7ff ff26 	bl	8003c18 <prvUnlockQueue>
    }
 8003dcc:	bf00      	nop
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08c      	sub	sp, #48	; 0x30
 8003dd8:	af04      	add	r7, sp, #16
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	603b      	str	r3, [r7, #0]
 8003de0:	4613      	mov	r3, r2
 8003de2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003de4:	88fb      	ldrh	r3, [r7, #6]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f001 fbed 	bl	80055c8 <pvPortMalloc>
 8003dee:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00e      	beq.n	8003e14 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003df6:	206c      	movs	r0, #108	; 0x6c
 8003df8:	f001 fbe6 	bl	80055c8 <pvPortMalloc>
 8003dfc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	631a      	str	r2, [r3, #48]	; 0x30
 8003e0a:	e005      	b.n	8003e18 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003e0c:	6978      	ldr	r0, [r7, #20]
 8003e0e:	f001 fcbb 	bl	8005788 <vPortFree>
 8003e12:	e001      	b.n	8003e18 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003e14:	2300      	movs	r3, #0
 8003e16:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d013      	beq.n	8003e46 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e1e:	88fa      	ldrh	r2, [r7, #6]
 8003e20:	2300      	movs	r3, #0
 8003e22:	9303      	str	r3, [sp, #12]
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	9302      	str	r3, [sp, #8]
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	9301      	str	r3, [sp, #4]
 8003e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f80e 	bl	8003e56 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003e3a:	69f8      	ldr	r0, [r7, #28]
 8003e3c:	f000 f8a2 	bl	8003f84 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003e40:	2301      	movs	r3, #1
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	e002      	b.n	8003e4c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e46:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003e4c:	69bb      	ldr	r3, [r7, #24]
    }
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3720      	adds	r7, #32
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b088      	sub	sp, #32
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	607a      	str	r2, [r7, #4]
 8003e62:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	21a5      	movs	r1, #165	; 0xa5
 8003e70:	f001 fdda 	bl	8005a28 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f023 0307 	bic.w	r3, r3, #7
 8003e8c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <prvInitialiseNewTask+0x58>
        __asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	617b      	str	r3, [r7, #20]
    }
 8003eaa:	bf00      	nop
 8003eac:	e7fe      	b.n	8003eac <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d01f      	beq.n	8003ef4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61fb      	str	r3, [r7, #28]
 8003eb8:	e012      	b.n	8003ee0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	7819      	ldrb	r1, [r3, #0]
 8003ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3334      	adds	r3, #52	; 0x34
 8003eca:	460a      	mov	r2, r1
 8003ecc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d006      	beq.n	8003ee8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	3301      	adds	r3, #1
 8003ede:	61fb      	str	r3, [r7, #28]
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	2b1d      	cmp	r3, #29
 8003ee4:	d9e9      	bls.n	8003eba <prvInitialiseNewTask+0x64>
 8003ee6:	e000      	b.n	8003eea <prvInitialiseNewTask+0x94>
            {
                break;
 8003ee8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003ef2:	e003      	b.n	8003efc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d901      	bls.n	8003f06 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f02:	2304      	movs	r3, #4
 8003f04:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f0a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f10:	65da      	str	r2, [r3, #92]	; 0x5c
            pxNewTCB->uxMutexesHeld = 0;
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	2200      	movs	r2, #0
 8003f16:	661a      	str	r2, [r3, #96]	; 0x60
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff f9e5 	bl	80032ec <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f24:	3318      	adds	r3, #24
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff f9e0 	bl	80032ec <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f30:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f34:	f1c3 0205 	rsb	r2, r3, #5
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f44:	3364      	adds	r3, #100	; 0x64
 8003f46:	2204      	movs	r2, #4
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f001 fd6c 	bl	8005a28 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	3368      	adds	r3, #104	; 0x68
 8003f54:	2201      	movs	r2, #1
 8003f56:	2100      	movs	r1, #0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f001 fd65 	bl	8005a28 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	68f9      	ldr	r1, [r7, #12]
 8003f62:	69b8      	ldr	r0, [r7, #24]
 8003f64:	f001 f898 	bl	8005098 <pxPortInitialiseStack>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f78:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003f7a:	bf00      	nop
 8003f7c:	3720      	adds	r7, #32
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003f8c:	f001 f9b4 	bl	80052f8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003f90:	4b2c      	ldr	r3, [pc, #176]	; (8004044 <prvAddNewTaskToReadyList+0xc0>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3301      	adds	r3, #1
 8003f96:	4a2b      	ldr	r2, [pc, #172]	; (8004044 <prvAddNewTaskToReadyList+0xc0>)
 8003f98:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003f9a:	4b2b      	ldr	r3, [pc, #172]	; (8004048 <prvAddNewTaskToReadyList+0xc4>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d109      	bne.n	8003fb6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003fa2:	4a29      	ldr	r2, [pc, #164]	; (8004048 <prvAddNewTaskToReadyList+0xc4>)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fa8:	4b26      	ldr	r3, [pc, #152]	; (8004044 <prvAddNewTaskToReadyList+0xc0>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d110      	bne.n	8003fd2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003fb0:	f000 fbc8 	bl	8004744 <prvInitialiseTaskLists>
 8003fb4:	e00d      	b.n	8003fd2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003fb6:	4b25      	ldr	r3, [pc, #148]	; (800404c <prvAddNewTaskToReadyList+0xc8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fbe:	4b22      	ldr	r3, [pc, #136]	; (8004048 <prvAddNewTaskToReadyList+0xc4>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d802      	bhi.n	8003fd2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003fcc:	4a1e      	ldr	r2, [pc, #120]	; (8004048 <prvAddNewTaskToReadyList+0xc4>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003fd2:	4b1f      	ldr	r3, [pc, #124]	; (8004050 <prvAddNewTaskToReadyList+0xcc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	4a1d      	ldr	r2, [pc, #116]	; (8004050 <prvAddNewTaskToReadyList+0xcc>)
 8003fda:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003fdc:	4b1c      	ldr	r3, [pc, #112]	; (8004050 <prvAddNewTaskToReadyList+0xcc>)
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	655a      	str	r2, [r3, #84]	; 0x54
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	2201      	movs	r2, #1
 8003fea:	409a      	lsls	r2, r3
 8003fec:	4b19      	ldr	r3, [pc, #100]	; (8004054 <prvAddNewTaskToReadyList+0xd0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	4a18      	ldr	r2, [pc, #96]	; (8004054 <prvAddNewTaskToReadyList+0xd0>)
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4a15      	ldr	r2, [pc, #84]	; (8004058 <prvAddNewTaskToReadyList+0xd4>)
 8004004:	441a      	add	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3304      	adds	r3, #4
 800400a:	4619      	mov	r1, r3
 800400c:	4610      	mov	r0, r2
 800400e:	f7ff f97a 	bl	8003306 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004012:	f001 f9a1 	bl	8005358 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004016:	4b0d      	ldr	r3, [pc, #52]	; (800404c <prvAddNewTaskToReadyList+0xc8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00e      	beq.n	800403c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800401e:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <prvAddNewTaskToReadyList+0xc4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	429a      	cmp	r2, r3
 800402a:	d207      	bcs.n	800403c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <prvAddNewTaskToReadyList+0xd8>)
 800402e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	20000108 	.word	0x20000108
 8004048:	20000030 	.word	0x20000030
 800404c:	20000114 	.word	0x20000114
 8004050:	20000124 	.word	0x20000124
 8004054:	20000110 	.word	0x20000110
 8004058:	20000034 	.word	0x20000034
 800405c:	e000ed04 	.word	0xe000ed04

08004060 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004066:	4b20      	ldr	r3, [pc, #128]	; (80040e8 <vTaskStartScheduler+0x88>)
 8004068:	9301      	str	r3, [sp, #4]
 800406a:	2300      	movs	r3, #0
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	2300      	movs	r3, #0
 8004070:	2280      	movs	r2, #128	; 0x80
 8004072:	491e      	ldr	r1, [pc, #120]	; (80040ec <vTaskStartScheduler+0x8c>)
 8004074:	481e      	ldr	r0, [pc, #120]	; (80040f0 <vTaskStartScheduler+0x90>)
 8004076:	f7ff fead 	bl	8003dd4 <xTaskCreate>
 800407a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d102      	bne.n	8004088 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004082:	f000 fcf7 	bl	8004a74 <xTimerCreateTimerTask>
 8004086:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d116      	bne.n	80040bc <vTaskStartScheduler+0x5c>
        __asm volatile
 800408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	60bb      	str	r3, [r7, #8]
    }
 80040a0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80040a2:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <vTaskStartScheduler+0x94>)
 80040a4:	f04f 32ff 	mov.w	r2, #4294967295
 80040a8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80040aa:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <vTaskStartScheduler+0x98>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80040b0:	4b12      	ldr	r3, [pc, #72]	; (80040fc <vTaskStartScheduler+0x9c>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80040b6:	f001 f87d 	bl	80051b4 <xPortStartScheduler>
 80040ba:	e00e      	b.n	80040da <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c2:	d10a      	bne.n	80040da <vTaskStartScheduler+0x7a>
        __asm volatile
 80040c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c8:	f383 8811 	msr	BASEPRI, r3
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	607b      	str	r3, [r7, #4]
    }
 80040d6:	bf00      	nop
 80040d8:	e7fe      	b.n	80040d8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80040da:	4b09      	ldr	r3, [pc, #36]	; (8004100 <vTaskStartScheduler+0xa0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
}
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	2000012c 	.word	0x2000012c
 80040ec:	08005a5c 	.word	0x08005a5c
 80040f0:	08004715 	.word	0x08004715
 80040f4:	20000128 	.word	0x20000128
 80040f8:	20000114 	.word	0x20000114
 80040fc:	2000010c 	.word	0x2000010c
 8004100:	2000000c 	.word	0x2000000c

08004104 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004108:	4b04      	ldr	r3, [pc, #16]	; (800411c <vTaskSuspendAll+0x18>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3301      	adds	r3, #1
 800410e:	4a03      	ldr	r2, [pc, #12]	; (800411c <vTaskSuspendAll+0x18>)
 8004110:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004112:	bf00      	nop
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	20000130 	.word	0x20000130

08004120 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004126:	2300      	movs	r3, #0
 8004128:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800412a:	2300      	movs	r3, #0
 800412c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800412e:	4b41      	ldr	r3, [pc, #260]	; (8004234 <xTaskResumeAll+0x114>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10a      	bne.n	800414c <xTaskResumeAll+0x2c>
        __asm volatile
 8004136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	603b      	str	r3, [r7, #0]
    }
 8004148:	bf00      	nop
 800414a:	e7fe      	b.n	800414a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800414c:	f001 f8d4 	bl	80052f8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004150:	4b38      	ldr	r3, [pc, #224]	; (8004234 <xTaskResumeAll+0x114>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3b01      	subs	r3, #1
 8004156:	4a37      	ldr	r2, [pc, #220]	; (8004234 <xTaskResumeAll+0x114>)
 8004158:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800415a:	4b36      	ldr	r3, [pc, #216]	; (8004234 <xTaskResumeAll+0x114>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d161      	bne.n	8004226 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004162:	4b35      	ldr	r3, [pc, #212]	; (8004238 <xTaskResumeAll+0x118>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d05d      	beq.n	8004226 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800416a:	e02e      	b.n	80041ca <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800416c:	4b33      	ldr	r3, [pc, #204]	; (800423c <xTaskResumeAll+0x11c>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	3318      	adds	r3, #24
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff f921 	bl	80033c0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3304      	adds	r3, #4
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff f91c 	bl	80033c0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	2201      	movs	r2, #1
 800418e:	409a      	lsls	r2, r3
 8004190:	4b2b      	ldr	r3, [pc, #172]	; (8004240 <xTaskResumeAll+0x120>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4313      	orrs	r3, r2
 8004196:	4a2a      	ldr	r2, [pc, #168]	; (8004240 <xTaskResumeAll+0x120>)
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4a27      	ldr	r2, [pc, #156]	; (8004244 <xTaskResumeAll+0x124>)
 80041a8:	441a      	add	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3304      	adds	r3, #4
 80041ae:	4619      	mov	r1, r3
 80041b0:	4610      	mov	r0, r2
 80041b2:	f7ff f8a8 	bl	8003306 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ba:	4b23      	ldr	r3, [pc, #140]	; (8004248 <xTaskResumeAll+0x128>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d302      	bcc.n	80041ca <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80041c4:	4b21      	ldr	r3, [pc, #132]	; (800424c <xTaskResumeAll+0x12c>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041ca:	4b1c      	ldr	r3, [pc, #112]	; (800423c <xTaskResumeAll+0x11c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1cc      	bne.n	800416c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80041d8:	f000 fb32 	bl	8004840 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80041dc:	4b1c      	ldr	r3, [pc, #112]	; (8004250 <xTaskResumeAll+0x130>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d010      	beq.n	800420a <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80041e8:	f000 f846 	bl	8004278 <xTaskIncrementTick>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80041f2:	4b16      	ldr	r3, [pc, #88]	; (800424c <xTaskResumeAll+0x12c>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f1      	bne.n	80041e8 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8004204:	4b12      	ldr	r3, [pc, #72]	; (8004250 <xTaskResumeAll+0x130>)
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800420a:	4b10      	ldr	r3, [pc, #64]	; (800424c <xTaskResumeAll+0x12c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d009      	beq.n	8004226 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004212:	2301      	movs	r3, #1
 8004214:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004216:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <xTaskResumeAll+0x134>)
 8004218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004226:	f001 f897 	bl	8005358 <vPortExitCritical>

    return xAlreadyYielded;
 800422a:	68bb      	ldr	r3, [r7, #8]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20000130 	.word	0x20000130
 8004238:	20000108 	.word	0x20000108
 800423c:	200000c8 	.word	0x200000c8
 8004240:	20000110 	.word	0x20000110
 8004244:	20000034 	.word	0x20000034
 8004248:	20000030 	.word	0x20000030
 800424c:	2000011c 	.word	0x2000011c
 8004250:	20000118 	.word	0x20000118
 8004254:	e000ed04 	.word	0xe000ed04

08004258 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <xTaskGetTickCount+0x1c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004264:	687b      	ldr	r3, [r7, #4]
}
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	2000010c 	.word	0x2000010c

08004278 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004282:	4b4e      	ldr	r3, [pc, #312]	; (80043bc <xTaskIncrementTick+0x144>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	f040 808e 	bne.w	80043a8 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800428c:	4b4c      	ldr	r3, [pc, #304]	; (80043c0 <xTaskIncrementTick+0x148>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3301      	adds	r3, #1
 8004292:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004294:	4a4a      	ldr	r2, [pc, #296]	; (80043c0 <xTaskIncrementTick+0x148>)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d120      	bne.n	80042e2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80042a0:	4b48      	ldr	r3, [pc, #288]	; (80043c4 <xTaskIncrementTick+0x14c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <xTaskIncrementTick+0x48>
        __asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	603b      	str	r3, [r7, #0]
    }
 80042bc:	bf00      	nop
 80042be:	e7fe      	b.n	80042be <xTaskIncrementTick+0x46>
 80042c0:	4b40      	ldr	r3, [pc, #256]	; (80043c4 <xTaskIncrementTick+0x14c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	4b40      	ldr	r3, [pc, #256]	; (80043c8 <xTaskIncrementTick+0x150>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a3e      	ldr	r2, [pc, #248]	; (80043c4 <xTaskIncrementTick+0x14c>)
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	4a3e      	ldr	r2, [pc, #248]	; (80043c8 <xTaskIncrementTick+0x150>)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	4b3d      	ldr	r3, [pc, #244]	; (80043cc <xTaskIncrementTick+0x154>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3301      	adds	r3, #1
 80042da:	4a3c      	ldr	r2, [pc, #240]	; (80043cc <xTaskIncrementTick+0x154>)
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	f000 faaf 	bl	8004840 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80042e2:	4b3b      	ldr	r3, [pc, #236]	; (80043d0 <xTaskIncrementTick+0x158>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d348      	bcc.n	800437e <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042ec:	4b35      	ldr	r3, [pc, #212]	; (80043c4 <xTaskIncrementTick+0x14c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d104      	bne.n	8004300 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042f6:	4b36      	ldr	r3, [pc, #216]	; (80043d0 <xTaskIncrementTick+0x158>)
 80042f8:	f04f 32ff 	mov.w	r2, #4294967295
 80042fc:	601a      	str	r2, [r3, #0]
                    break;
 80042fe:	e03e      	b.n	800437e <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004300:	4b30      	ldr	r3, [pc, #192]	; (80043c4 <xTaskIncrementTick+0x14c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	429a      	cmp	r2, r3
 8004316:	d203      	bcs.n	8004320 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004318:	4a2d      	ldr	r2, [pc, #180]	; (80043d0 <xTaskIncrementTick+0x158>)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800431e:	e02e      	b.n	800437e <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	3304      	adds	r3, #4
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff f84b 	bl	80033c0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432e:	2b00      	cmp	r3, #0
 8004330:	d004      	beq.n	800433c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	3318      	adds	r3, #24
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff f842 	bl	80033c0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	2201      	movs	r2, #1
 8004342:	409a      	lsls	r2, r3
 8004344:	4b23      	ldr	r3, [pc, #140]	; (80043d4 <xTaskIncrementTick+0x15c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4313      	orrs	r3, r2
 800434a:	4a22      	ldr	r2, [pc, #136]	; (80043d4 <xTaskIncrementTick+0x15c>)
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004352:	4613      	mov	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4a1f      	ldr	r2, [pc, #124]	; (80043d8 <xTaskIncrementTick+0x160>)
 800435c:	441a      	add	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	3304      	adds	r3, #4
 8004362:	4619      	mov	r1, r3
 8004364:	4610      	mov	r0, r2
 8004366:	f7fe ffce 	bl	8003306 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436e:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <xTaskIncrementTick+0x164>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	429a      	cmp	r2, r3
 8004376:	d3b9      	bcc.n	80042ec <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8004378:	2301      	movs	r3, #1
 800437a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800437c:	e7b6      	b.n	80042ec <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800437e:	4b17      	ldr	r3, [pc, #92]	; (80043dc <xTaskIncrementTick+0x164>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004384:	4914      	ldr	r1, [pc, #80]	; (80043d8 <xTaskIncrementTick+0x160>)
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d901      	bls.n	800439a <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8004396:	2301      	movs	r3, #1
 8004398:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800439a:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <xTaskIncrementTick+0x168>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d007      	beq.n	80043b2 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 80043a2:	2301      	movs	r3, #1
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	e004      	b.n	80043b2 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80043a8:	4b0e      	ldr	r3, [pc, #56]	; (80043e4 <xTaskIncrementTick+0x16c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3301      	adds	r3, #1
 80043ae:	4a0d      	ldr	r2, [pc, #52]	; (80043e4 <xTaskIncrementTick+0x16c>)
 80043b0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80043b2:	697b      	ldr	r3, [r7, #20]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000130 	.word	0x20000130
 80043c0:	2000010c 	.word	0x2000010c
 80043c4:	200000c0 	.word	0x200000c0
 80043c8:	200000c4 	.word	0x200000c4
 80043cc:	20000120 	.word	0x20000120
 80043d0:	20000128 	.word	0x20000128
 80043d4:	20000110 	.word	0x20000110
 80043d8:	20000034 	.word	0x20000034
 80043dc:	20000030 	.word	0x20000030
 80043e0:	2000011c 	.word	0x2000011c
 80043e4:	20000118 	.word	0x20000118

080043e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043ee:	4b27      	ldr	r3, [pc, #156]	; (800448c <vTaskSwitchContext+0xa4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80043f6:	4b26      	ldr	r3, [pc, #152]	; (8004490 <vTaskSwitchContext+0xa8>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80043fc:	e03f      	b.n	800447e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80043fe:	4b24      	ldr	r3, [pc, #144]	; (8004490 <vTaskSwitchContext+0xa8>)
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004404:	4b23      	ldr	r3, [pc, #140]	; (8004494 <vTaskSwitchContext+0xac>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	fab3 f383 	clz	r3, r3
 8004410:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004412:	7afb      	ldrb	r3, [r7, #11]
 8004414:	f1c3 031f 	rsb	r3, r3, #31
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	491f      	ldr	r1, [pc, #124]	; (8004498 <vTaskSwitchContext+0xb0>)
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	440b      	add	r3, r1
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10a      	bne.n	8004444 <vTaskSwitchContext+0x5c>
        __asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	607b      	str	r3, [r7, #4]
    }
 8004440:	bf00      	nop
 8004442:	e7fe      	b.n	8004442 <vTaskSwitchContext+0x5a>
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4613      	mov	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4a12      	ldr	r2, [pc, #72]	; (8004498 <vTaskSwitchContext+0xb0>)
 8004450:	4413      	add	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	605a      	str	r2, [r3, #4]
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	3308      	adds	r3, #8
 8004466:	429a      	cmp	r2, r3
 8004468:	d104      	bne.n	8004474 <vTaskSwitchContext+0x8c>
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	605a      	str	r2, [r3, #4]
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	4a08      	ldr	r2, [pc, #32]	; (800449c <vTaskSwitchContext+0xb4>)
 800447c:	6013      	str	r3, [r2, #0]
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20000130 	.word	0x20000130
 8004490:	2000011c 	.word	0x2000011c
 8004494:	20000110 	.word	0x20000110
 8004498:	20000034 	.word	0x20000034
 800449c:	20000030 	.word	0x20000030

080044a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10a      	bne.n	80044c6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	60fb      	str	r3, [r7, #12]
    }
 80044c2:	bf00      	nop
 80044c4:	e7fe      	b.n	80044c4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044c6:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <vTaskPlaceOnEventList+0x44>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3318      	adds	r3, #24
 80044cc:	4619      	mov	r1, r3
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fe ff3d 	bl	800334e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80044d4:	2101      	movs	r1, #1
 80044d6:	6838      	ldr	r0, [r7, #0]
 80044d8:	f000 fa66 	bl	80049a8 <prvAddCurrentTaskToDelayedList>
}
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	20000030 	.word	0x20000030

080044e8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10a      	bne.n	8004510 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80044fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	617b      	str	r3, [r7, #20]
    }
 800450c:	bf00      	nop
 800450e:	e7fe      	b.n	800450e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004510:	4b0a      	ldr	r3, [pc, #40]	; (800453c <vTaskPlaceOnEventListRestricted+0x54>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3318      	adds	r3, #24
 8004516:	4619      	mov	r1, r3
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f7fe fef4 	bl	8003306 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004524:	f04f 33ff 	mov.w	r3, #4294967295
 8004528:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	68b8      	ldr	r0, [r7, #8]
 800452e:	f000 fa3b 	bl	80049a8 <prvAddCurrentTaskToDelayedList>
    }
 8004532:	bf00      	nop
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000030 	.word	0x20000030

08004540 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10a      	bne.n	800456c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	60fb      	str	r3, [r7, #12]
    }
 8004568:	bf00      	nop
 800456a:	e7fe      	b.n	800456a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	3318      	adds	r3, #24
 8004570:	4618      	mov	r0, r3
 8004572:	f7fe ff25 	bl	80033c0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004576:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <xTaskRemoveFromEventList+0xac>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d11c      	bne.n	80045b8 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	3304      	adds	r3, #4
 8004582:	4618      	mov	r0, r3
 8004584:	f7fe ff1c 	bl	80033c0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	2201      	movs	r2, #1
 800458e:	409a      	lsls	r2, r3
 8004590:	4b17      	ldr	r3, [pc, #92]	; (80045f0 <xTaskRemoveFromEventList+0xb0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4313      	orrs	r3, r2
 8004596:	4a16      	ldr	r2, [pc, #88]	; (80045f0 <xTaskRemoveFromEventList+0xb0>)
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4a13      	ldr	r2, [pc, #76]	; (80045f4 <xTaskRemoveFromEventList+0xb4>)
 80045a8:	441a      	add	r2, r3
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	3304      	adds	r3, #4
 80045ae:	4619      	mov	r1, r3
 80045b0:	4610      	mov	r0, r2
 80045b2:	f7fe fea8 	bl	8003306 <vListInsertEnd>
 80045b6:	e005      	b.n	80045c4 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	3318      	adds	r3, #24
 80045bc:	4619      	mov	r1, r3
 80045be:	480e      	ldr	r0, [pc, #56]	; (80045f8 <xTaskRemoveFromEventList+0xb8>)
 80045c0:	f7fe fea1 	bl	8003306 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c8:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <xTaskRemoveFromEventList+0xbc>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d905      	bls.n	80045de <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80045d2:	2301      	movs	r3, #1
 80045d4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <xTaskRemoveFromEventList+0xc0>)
 80045d8:	2201      	movs	r2, #1
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	e001      	b.n	80045e2 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80045e2:	697b      	ldr	r3, [r7, #20]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	20000130 	.word	0x20000130
 80045f0:	20000110 	.word	0x20000110
 80045f4:	20000034 	.word	0x20000034
 80045f8:	200000c8 	.word	0x200000c8
 80045fc:	20000030 	.word	0x20000030
 8004600:	2000011c 	.word	0x2000011c

08004604 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <vTaskInternalSetTimeOutState+0x24>)
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004614:	4b05      	ldr	r3, [pc, #20]	; (800462c <vTaskInternalSetTimeOutState+0x28>)
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	605a      	str	r2, [r3, #4]
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	20000120 	.word	0x20000120
 800462c:	2000010c 	.word	0x2000010c

08004630 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10a      	bne.n	8004656 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	613b      	str	r3, [r7, #16]
    }
 8004652:	bf00      	nop
 8004654:	e7fe      	b.n	8004654 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10a      	bne.n	8004672 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	60fb      	str	r3, [r7, #12]
    }
 800466e:	bf00      	nop
 8004670:	e7fe      	b.n	8004670 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004672:	f000 fe41 	bl	80052f8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004676:	4b1f      	ldr	r3, [pc, #124]	; (80046f4 <xTaskCheckForTimeOut+0xc4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468e:	d102      	bne.n	8004696 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004690:	2300      	movs	r3, #0
 8004692:	61fb      	str	r3, [r7, #28]
 8004694:	e026      	b.n	80046e4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	4b17      	ldr	r3, [pc, #92]	; (80046f8 <xTaskCheckForTimeOut+0xc8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d00a      	beq.n	80046b8 <xTaskCheckForTimeOut+0x88>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d305      	bcc.n	80046b8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80046ac:	2301      	movs	r3, #1
 80046ae:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	e015      	b.n	80046e4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d20b      	bcs.n	80046da <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	1ad2      	subs	r2, r2, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff ff98 	bl	8004604 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	e004      	b.n	80046e4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80046e0:	2301      	movs	r3, #1
 80046e2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80046e4:	f000 fe38 	bl	8005358 <vPortExitCritical>

    return xReturn;
 80046e8:	69fb      	ldr	r3, [r7, #28]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3720      	adds	r7, #32
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	2000010c 	.word	0x2000010c
 80046f8:	20000120 	.word	0x20000120

080046fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004700:	4b03      	ldr	r3, [pc, #12]	; (8004710 <vTaskMissedYield+0x14>)
 8004702:	2201      	movs	r2, #1
 8004704:	601a      	str	r2, [r3, #0]
}
 8004706:	bf00      	nop
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	2000011c 	.word	0x2000011c

08004714 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800471c:	f000 f852 	bl	80047c4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004720:	4b06      	ldr	r3, [pc, #24]	; (800473c <prvIdleTask+0x28>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d9f9      	bls.n	800471c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004728:	4b05      	ldr	r3, [pc, #20]	; (8004740 <prvIdleTask+0x2c>)
 800472a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004738:	e7f0      	b.n	800471c <prvIdleTask+0x8>
 800473a:	bf00      	nop
 800473c:	20000034 	.word	0x20000034
 8004740:	e000ed04 	.word	0xe000ed04

08004744 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800474a:	2300      	movs	r3, #0
 800474c:	607b      	str	r3, [r7, #4]
 800474e:	e00c      	b.n	800476a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4a12      	ldr	r2, [pc, #72]	; (80047a4 <prvInitialiseTaskLists+0x60>)
 800475c:	4413      	add	r3, r2
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe fda4 	bl	80032ac <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3301      	adds	r3, #1
 8004768:	607b      	str	r3, [r7, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b04      	cmp	r3, #4
 800476e:	d9ef      	bls.n	8004750 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004770:	480d      	ldr	r0, [pc, #52]	; (80047a8 <prvInitialiseTaskLists+0x64>)
 8004772:	f7fe fd9b 	bl	80032ac <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004776:	480d      	ldr	r0, [pc, #52]	; (80047ac <prvInitialiseTaskLists+0x68>)
 8004778:	f7fe fd98 	bl	80032ac <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800477c:	480c      	ldr	r0, [pc, #48]	; (80047b0 <prvInitialiseTaskLists+0x6c>)
 800477e:	f7fe fd95 	bl	80032ac <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004782:	480c      	ldr	r0, [pc, #48]	; (80047b4 <prvInitialiseTaskLists+0x70>)
 8004784:	f7fe fd92 	bl	80032ac <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004788:	480b      	ldr	r0, [pc, #44]	; (80047b8 <prvInitialiseTaskLists+0x74>)
 800478a:	f7fe fd8f 	bl	80032ac <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800478e:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <prvInitialiseTaskLists+0x78>)
 8004790:	4a05      	ldr	r2, [pc, #20]	; (80047a8 <prvInitialiseTaskLists+0x64>)
 8004792:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004794:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <prvInitialiseTaskLists+0x7c>)
 8004796:	4a05      	ldr	r2, [pc, #20]	; (80047ac <prvInitialiseTaskLists+0x68>)
 8004798:	601a      	str	r2, [r3, #0]
}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000034 	.word	0x20000034
 80047a8:	20000098 	.word	0x20000098
 80047ac:	200000ac 	.word	0x200000ac
 80047b0:	200000c8 	.word	0x200000c8
 80047b4:	200000dc 	.word	0x200000dc
 80047b8:	200000f4 	.word	0x200000f4
 80047bc:	200000c0 	.word	0x200000c0
 80047c0:	200000c4 	.word	0x200000c4

080047c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047ca:	e019      	b.n	8004800 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80047cc:	f000 fd94 	bl	80052f8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047d0:	4b10      	ldr	r3, [pc, #64]	; (8004814 <prvCheckTasksWaitingTermination+0x50>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3304      	adds	r3, #4
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fe fdef 	bl	80033c0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80047e2:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <prvCheckTasksWaitingTermination+0x54>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	4a0b      	ldr	r2, [pc, #44]	; (8004818 <prvCheckTasksWaitingTermination+0x54>)
 80047ea:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80047ec:	4b0b      	ldr	r3, [pc, #44]	; (800481c <prvCheckTasksWaitingTermination+0x58>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	4a0a      	ldr	r2, [pc, #40]	; (800481c <prvCheckTasksWaitingTermination+0x58>)
 80047f4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80047f6:	f000 fdaf 	bl	8005358 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f810 	bl	8004820 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004800:	4b06      	ldr	r3, [pc, #24]	; (800481c <prvCheckTasksWaitingTermination+0x58>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e1      	bne.n	80047cc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004808:	bf00      	nop
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	200000dc 	.word	0x200000dc
 8004818:	20000108 	.word	0x20000108
 800481c:	200000f0 	.word	0x200000f0

08004820 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	4618      	mov	r0, r3
 800482e:	f000 ffab 	bl	8005788 <vPortFree>
                vPortFree( pxTCB );
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 ffa8 	bl	8005788 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004838:	bf00      	nop
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004844:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <prvResetNextTaskUnblockTime+0x30>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d104      	bne.n	8004858 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800484e:	4b09      	ldr	r3, [pc, #36]	; (8004874 <prvResetNextTaskUnblockTime+0x34>)
 8004850:	f04f 32ff 	mov.w	r2, #4294967295
 8004854:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004856:	e005      	b.n	8004864 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <prvResetNextTaskUnblockTime+0x30>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a04      	ldr	r2, [pc, #16]	; (8004874 <prvResetNextTaskUnblockTime+0x34>)
 8004862:	6013      	str	r3, [r2, #0]
}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	200000c0 	.word	0x200000c0
 8004874:	20000128 	.word	0x20000128

08004878 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800487e:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <xTaskGetSchedulerState+0x34>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d102      	bne.n	800488c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004886:	2301      	movs	r3, #1
 8004888:	607b      	str	r3, [r7, #4]
 800488a:	e008      	b.n	800489e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800488c:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <xTaskGetSchedulerState+0x38>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d102      	bne.n	800489a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004894:	2302      	movs	r3, #2
 8004896:	607b      	str	r3, [r7, #4]
 8004898:	e001      	b.n	800489e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800489e:	687b      	ldr	r3, [r7, #4]
    }
 80048a0:	4618      	mov	r0, r3
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	20000114 	.word	0x20000114
 80048b0:	20000130 	.word	0x20000130

080048b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d063      	beq.n	8004992 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80048ca:	4b34      	ldr	r3, [pc, #208]	; (800499c <xTaskPriorityDisinherit+0xe8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d00a      	beq.n	80048ea <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	60fb      	str	r3, [r7, #12]
    }
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	60bb      	str	r3, [r7, #8]
    }
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490c:	1e5a      	subs	r2, r3, #1
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	661a      	str	r2, [r3, #96]	; 0x60

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491a:	429a      	cmp	r2, r3
 800491c:	d039      	beq.n	8004992 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004922:	2b00      	cmp	r3, #0
 8004924:	d135      	bne.n	8004992 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	3304      	adds	r3, #4
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe fd48 	bl	80033c0 <uxListRemove>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10a      	bne.n	800494c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493a:	2201      	movs	r2, #1
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	43da      	mvns	r2, r3
 8004942:	4b17      	ldr	r3, [pc, #92]	; (80049a0 <xTaskPriorityDisinherit+0xec>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4013      	ands	r3, r2
 8004948:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <xTaskPriorityDisinherit+0xec>)
 800494a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	f1c3 0205 	rsb	r2, r3, #5
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	2201      	movs	r2, #1
 8004966:	409a      	lsls	r2, r3
 8004968:	4b0d      	ldr	r3, [pc, #52]	; (80049a0 <xTaskPriorityDisinherit+0xec>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4313      	orrs	r3, r2
 800496e:	4a0c      	ldr	r2, [pc, #48]	; (80049a0 <xTaskPriorityDisinherit+0xec>)
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4a09      	ldr	r2, [pc, #36]	; (80049a4 <xTaskPriorityDisinherit+0xf0>)
 8004980:	441a      	add	r2, r3
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	3304      	adds	r3, #4
 8004986:	4619      	mov	r1, r3
 8004988:	4610      	mov	r0, r2
 800498a:	f7fe fcbc 	bl	8003306 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800498e:	2301      	movs	r3, #1
 8004990:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004992:	697b      	ldr	r3, [r7, #20]
    }
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000030 	.word	0x20000030
 80049a0:	20000110 	.word	0x20000110
 80049a4:	20000034 	.word	0x20000034

080049a8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80049b2:	4b29      	ldr	r3, [pc, #164]	; (8004a58 <prvAddCurrentTaskToDelayedList+0xb0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049b8:	4b28      	ldr	r3, [pc, #160]	; (8004a5c <prvAddCurrentTaskToDelayedList+0xb4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3304      	adds	r3, #4
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fe fcfe 	bl	80033c0 <uxListRemove>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10b      	bne.n	80049e2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80049ca:	4b24      	ldr	r3, [pc, #144]	; (8004a5c <prvAddCurrentTaskToDelayedList+0xb4>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	2201      	movs	r2, #1
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	43da      	mvns	r2, r3
 80049d8:	4b21      	ldr	r3, [pc, #132]	; (8004a60 <prvAddCurrentTaskToDelayedList+0xb8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4013      	ands	r3, r2
 80049de:	4a20      	ldr	r2, [pc, #128]	; (8004a60 <prvAddCurrentTaskToDelayedList+0xb8>)
 80049e0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e8:	d10a      	bne.n	8004a00 <prvAddCurrentTaskToDelayedList+0x58>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049f0:	4b1a      	ldr	r3, [pc, #104]	; (8004a5c <prvAddCurrentTaskToDelayedList+0xb4>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3304      	adds	r3, #4
 80049f6:	4619      	mov	r1, r3
 80049f8:	481a      	ldr	r0, [pc, #104]	; (8004a64 <prvAddCurrentTaskToDelayedList+0xbc>)
 80049fa:	f7fe fc84 	bl	8003306 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80049fe:	e026      	b.n	8004a4e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4413      	add	r3, r2
 8004a06:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a08:	4b14      	ldr	r3, [pc, #80]	; (8004a5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d209      	bcs.n	8004a2c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a18:	4b13      	ldr	r3, [pc, #76]	; (8004a68 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3304      	adds	r3, #4
 8004a22:	4619      	mov	r1, r3
 8004a24:	4610      	mov	r0, r2
 8004a26:	f7fe fc92 	bl	800334e <vListInsert>
}
 8004a2a:	e010      	b.n	8004a4e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a2c:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3304      	adds	r3, #4
 8004a36:	4619      	mov	r1, r3
 8004a38:	4610      	mov	r0, r2
 8004a3a:	f7fe fc88 	bl	800334e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004a3e:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d202      	bcs.n	8004a4e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8004a48:	4a09      	ldr	r2, [pc, #36]	; (8004a70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	6013      	str	r3, [r2, #0]
}
 8004a4e:	bf00      	nop
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	2000010c 	.word	0x2000010c
 8004a5c:	20000030 	.word	0x20000030
 8004a60:	20000110 	.word	0x20000110
 8004a64:	200000f4 	.word	0x200000f4
 8004a68:	200000c4 	.word	0x200000c4
 8004a6c:	200000c0 	.word	0x200000c0
 8004a70:	20000128 	.word	0x20000128

08004a74 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004a7e:	f000 fad5 	bl	800502c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004a82:	4b11      	ldr	r3, [pc, #68]	; (8004ac8 <xTimerCreateTimerTask+0x54>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00b      	beq.n	8004aa2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004a8a:	4b10      	ldr	r3, [pc, #64]	; (8004acc <xTimerCreateTimerTask+0x58>)
 8004a8c:	9301      	str	r3, [sp, #4]
 8004a8e:	2304      	movs	r3, #4
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	2300      	movs	r3, #0
 8004a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a98:	490d      	ldr	r1, [pc, #52]	; (8004ad0 <xTimerCreateTimerTask+0x5c>)
 8004a9a:	480e      	ldr	r0, [pc, #56]	; (8004ad4 <xTimerCreateTimerTask+0x60>)
 8004a9c:	f7ff f99a 	bl	8003dd4 <xTaskCreate>
 8004aa0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	603b      	str	r3, [r7, #0]
    }
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004abe:	687b      	ldr	r3, [r7, #4]
    }
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20000164 	.word	0x20000164
 8004acc:	20000168 	.word	0x20000168
 8004ad0:	08005a64 	.word	0x08005a64
 8004ad4:	08004c0d 	.word	0x08004c0d

08004ad8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08a      	sub	sp, #40	; 0x28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <xTimerGenericCommand+0x2e>
        __asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	623b      	str	r3, [r7, #32]
    }
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004b06:	4b1a      	ldr	r3, [pc, #104]	; (8004b70 <xTimerGenericCommand+0x98>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d02a      	beq.n	8004b64 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b05      	cmp	r3, #5
 8004b1e:	dc18      	bgt.n	8004b52 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b20:	f7ff feaa 	bl	8004878 <xTaskGetSchedulerState>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d109      	bne.n	8004b3e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b2a:	4b11      	ldr	r3, [pc, #68]	; (8004b70 <xTimerGenericCommand+0x98>)
 8004b2c:	6818      	ldr	r0, [r3, #0]
 8004b2e:	f107 0114 	add.w	r1, r7, #20
 8004b32:	2300      	movs	r3, #0
 8004b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b36:	f7fe fd57 	bl	80035e8 <xQueueGenericSend>
 8004b3a:	6278      	str	r0, [r7, #36]	; 0x24
 8004b3c:	e012      	b.n	8004b64 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004b3e:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <xTimerGenericCommand+0x98>)
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	f107 0114 	add.w	r1, r7, #20
 8004b46:	2300      	movs	r3, #0
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f7fe fd4d 	bl	80035e8 <xQueueGenericSend>
 8004b4e:	6278      	str	r0, [r7, #36]	; 0x24
 8004b50:	e008      	b.n	8004b64 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b52:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <xTimerGenericCommand+0x98>)
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	f107 0114 	add.w	r1, r7, #20
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	f7fe fe41 	bl	80037e4 <xQueueGenericSendFromISR>
 8004b62:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004b66:	4618      	mov	r0, r3
 8004b68:	3728      	adds	r7, #40	; 0x28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000164 	.word	0x20000164

08004b74 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b7e:	4b22      	ldr	r3, [pc, #136]	; (8004c08 <prvProcessExpiredTimer+0x94>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fe fc17 	bl	80033c0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d022      	beq.n	8004be6 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	18d1      	adds	r1, r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	6978      	ldr	r0, [r7, #20]
 8004bae:	f000 f8d1 	bl	8004d54 <prvInsertTimerInActiveList>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01f      	beq.n	8004bf8 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bb8:	2300      	movs	r3, #0
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	6978      	ldr	r0, [r7, #20]
 8004bc4:	f7ff ff88 	bl	8004ad8 <xTimerGenericCommand>
 8004bc8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d113      	bne.n	8004bf8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	60fb      	str	r3, [r7, #12]
    }
 8004be2:	bf00      	nop
 8004be4:	e7fe      	b.n	8004be4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bec:	f023 0301 	bic.w	r3, r3, #1
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	6978      	ldr	r0, [r7, #20]
 8004bfe:	4798      	blx	r3
    }
 8004c00:	bf00      	nop
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	2000015c 	.word	0x2000015c

08004c0c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c14:	f107 0308 	add.w	r3, r7, #8
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 f857 	bl	8004ccc <prvGetNextExpireTime>
 8004c1e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4619      	mov	r1, r3
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 f803 	bl	8004c30 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004c2a:	f000 f8d5 	bl	8004dd8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c2e:	e7f1      	b.n	8004c14 <prvTimerTask+0x8>

08004c30 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004c3a:	f7ff fa63 	bl	8004104 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c3e:	f107 0308 	add.w	r3, r7, #8
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 f866 	bl	8004d14 <prvSampleTimeNow>
 8004c48:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d130      	bne.n	8004cb2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10a      	bne.n	8004c6c <prvProcessTimerOrBlockTask+0x3c>
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d806      	bhi.n	8004c6c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004c5e:	f7ff fa5f 	bl	8004120 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c62:	68f9      	ldr	r1, [r7, #12]
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff ff85 	bl	8004b74 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004c6a:	e024      	b.n	8004cb6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d008      	beq.n	8004c84 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c72:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <prvProcessTimerOrBlockTask+0x90>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <prvProcessTimerOrBlockTask+0x50>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <prvProcessTimerOrBlockTask+0x52>
 8004c80:	2300      	movs	r3, #0
 8004c82:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c84:	4b0f      	ldr	r3, [pc, #60]	; (8004cc4 <prvProcessTimerOrBlockTask+0x94>)
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	4619      	mov	r1, r3
 8004c92:	f7ff f86b 	bl	8003d6c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004c96:	f7ff fa43 	bl	8004120 <xTaskResumeAll>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10a      	bne.n	8004cb6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004ca0:	4b09      	ldr	r3, [pc, #36]	; (8004cc8 <prvProcessTimerOrBlockTask+0x98>)
 8004ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	f3bf 8f6f 	isb	sy
    }
 8004cb0:	e001      	b.n	8004cb6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004cb2:	f7ff fa35 	bl	8004120 <xTaskResumeAll>
    }
 8004cb6:	bf00      	nop
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20000160 	.word	0x20000160
 8004cc4:	20000164 	.word	0x20000164
 8004cc8:	e000ed04 	.word	0xe000ed04

08004ccc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004cd4:	4b0e      	ldr	r3, [pc, #56]	; (8004d10 <prvGetNextExpireTime+0x44>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <prvGetNextExpireTime+0x16>
 8004cde:	2201      	movs	r2, #1
 8004ce0:	e000      	b.n	8004ce4 <prvGetNextExpireTime+0x18>
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d105      	bne.n	8004cfc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cf0:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <prvGetNextExpireTime+0x44>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	e001      	b.n	8004d00 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004d00:	68fb      	ldr	r3, [r7, #12]
    }
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	2000015c 	.word	0x2000015c

08004d14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004d1c:	f7ff fa9c 	bl	8004258 <xTaskGetTickCount>
 8004d20:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004d22:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <prvSampleTimeNow+0x3c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d205      	bcs.n	8004d38 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004d2c:	f000 f91a 	bl	8004f64 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	e002      	b.n	8004d3e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004d3e:	4a04      	ldr	r2, [pc, #16]	; (8004d50 <prvSampleTimeNow+0x3c>)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004d44:	68fb      	ldr	r3, [r7, #12]
    }
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	2000016c 	.word	0x2000016c

08004d54 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004d62:	2300      	movs	r3, #0
 8004d64:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d812      	bhi.n	8004da0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	1ad2      	subs	r2, r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d302      	bcc.n	8004d8e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	e01b      	b.n	8004dc6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d8e:	4b10      	ldr	r3, [pc, #64]	; (8004dd0 <prvInsertTimerInActiveList+0x7c>)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3304      	adds	r3, #4
 8004d96:	4619      	mov	r1, r3
 8004d98:	4610      	mov	r0, r2
 8004d9a:	f7fe fad8 	bl	800334e <vListInsert>
 8004d9e:	e012      	b.n	8004dc6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d206      	bcs.n	8004db6 <prvInsertTimerInActiveList+0x62>
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d302      	bcc.n	8004db6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004db0:	2301      	movs	r3, #1
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	e007      	b.n	8004dc6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004db6:	4b07      	ldr	r3, [pc, #28]	; (8004dd4 <prvInsertTimerInActiveList+0x80>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	f7fe fac4 	bl	800334e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004dc6:	697b      	ldr	r3, [r7, #20]
    }
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20000160 	.word	0x20000160
 8004dd4:	2000015c 	.word	0x2000015c

08004dd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08c      	sub	sp, #48	; 0x30
 8004ddc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004dde:	e0ae      	b.n	8004f3e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f2c0 80aa 	blt.w	8004f3c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d004      	beq.n	8004dfe <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	3304      	adds	r3, #4
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fe fae1 	bl	80033c0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dfe:	1d3b      	adds	r3, r7, #4
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff ff87 	bl	8004d14 <prvSampleTimeNow>
 8004e06:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b09      	cmp	r3, #9
 8004e0c:	f200 8097 	bhi.w	8004f3e <prvProcessReceivedCommands+0x166>
 8004e10:	a201      	add	r2, pc, #4	; (adr r2, 8004e18 <prvProcessReceivedCommands+0x40>)
 8004e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e16:	bf00      	nop
 8004e18:	08004e41 	.word	0x08004e41
 8004e1c:	08004e41 	.word	0x08004e41
 8004e20:	08004e41 	.word	0x08004e41
 8004e24:	08004eb5 	.word	0x08004eb5
 8004e28:	08004ec9 	.word	0x08004ec9
 8004e2c:	08004f13 	.word	0x08004f13
 8004e30:	08004e41 	.word	0x08004e41
 8004e34:	08004e41 	.word	0x08004e41
 8004e38:	08004eb5 	.word	0x08004eb5
 8004e3c:	08004ec9 	.word	0x08004ec9
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	18d1      	adds	r1, r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a3a      	ldr	r2, [r7, #32]
 8004e5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e60:	f7ff ff78 	bl	8004d54 <prvInsertTimerInActiveList>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d069      	beq.n	8004f3e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e70:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d05e      	beq.n	8004f3e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	441a      	add	r2, r3
 8004e88:	2300      	movs	r3, #0
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	2100      	movs	r1, #0
 8004e90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e92:	f7ff fe21 	bl	8004ad8 <xTimerGenericCommand>
 8004e96:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d14f      	bne.n	8004f3e <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	61bb      	str	r3, [r7, #24]
    }
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eba:	f023 0301 	bic.w	r3, r3, #1
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004ec6:	e03a      	b.n	8004f3e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10a      	bne.n	8004efe <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	617b      	str	r3, [r7, #20]
    }
 8004efa:	bf00      	nop
 8004efc:	e7fe      	b.n	8004efc <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	18d1      	adds	r1, r2, r3
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	6a3a      	ldr	r2, [r7, #32]
 8004f0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f0c:	f7ff ff22 	bl	8004d54 <prvInsertTimerInActiveList>
                        break;
 8004f10:	e015      	b.n	8004f3e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d103      	bne.n	8004f28 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004f20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f22:	f000 fc31 	bl	8005788 <vPortFree>
 8004f26:	e00a      	b.n	8004f3e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f2e:	f023 0301 	bic.w	r3, r3, #1
 8004f32:	b2da      	uxtb	r2, r3
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004f3a:	e000      	b.n	8004f3e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004f3c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f3e:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <prvProcessReceivedCommands+0x188>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f107 0108 	add.w	r1, r7, #8
 8004f46:	2200      	movs	r2, #0
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7fe fcf5 	bl	8003938 <xQueueReceive>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f47f af45 	bne.w	8004de0 <prvProcessReceivedCommands+0x8>
        }
    }
 8004f56:	bf00      	nop
 8004f58:	bf00      	nop
 8004f5a:	3728      	adds	r7, #40	; 0x28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	20000164 	.word	0x20000164

08004f64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f6a:	e048      	b.n	8004ffe <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f6c:	4b2d      	ldr	r3, [pc, #180]	; (8005024 <prvSwitchTimerLists+0xc0>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f76:	4b2b      	ldr	r3, [pc, #172]	; (8005024 <prvSwitchTimerLists+0xc0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fe fa1b 	bl	80033c0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d02e      	beq.n	8004ffe <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d90e      	bls.n	8004fd0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fbe:	4b19      	ldr	r3, [pc, #100]	; (8005024 <prvSwitchTimerLists+0xc0>)
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4610      	mov	r0, r2
 8004fca:	f7fe f9c0 	bl	800334e <vListInsert>
 8004fce:	e016      	b.n	8004ffe <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	2100      	movs	r1, #0
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f7ff fd7c 	bl	8004ad8 <xTimerGenericCommand>
 8004fe0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10a      	bne.n	8004ffe <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	603b      	str	r3, [r7, #0]
    }
 8004ffa:	bf00      	nop
 8004ffc:	e7fe      	b.n	8004ffc <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ffe:	4b09      	ldr	r3, [pc, #36]	; (8005024 <prvSwitchTimerLists+0xc0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1b1      	bne.n	8004f6c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005008:	4b06      	ldr	r3, [pc, #24]	; (8005024 <prvSwitchTimerLists+0xc0>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800500e:	4b06      	ldr	r3, [pc, #24]	; (8005028 <prvSwitchTimerLists+0xc4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a04      	ldr	r2, [pc, #16]	; (8005024 <prvSwitchTimerLists+0xc0>)
 8005014:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005016:	4a04      	ldr	r2, [pc, #16]	; (8005028 <prvSwitchTimerLists+0xc4>)
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	6013      	str	r3, [r2, #0]
    }
 800501c:	bf00      	nop
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	2000015c 	.word	0x2000015c
 8005028:	20000160 	.word	0x20000160

0800502c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005030:	f000 f962 	bl	80052f8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005034:	4b12      	ldr	r3, [pc, #72]	; (8005080 <prvCheckForValidListAndQueue+0x54>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d11d      	bne.n	8005078 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800503c:	4811      	ldr	r0, [pc, #68]	; (8005084 <prvCheckForValidListAndQueue+0x58>)
 800503e:	f7fe f935 	bl	80032ac <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005042:	4811      	ldr	r0, [pc, #68]	; (8005088 <prvCheckForValidListAndQueue+0x5c>)
 8005044:	f7fe f932 	bl	80032ac <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005048:	4b10      	ldr	r3, [pc, #64]	; (800508c <prvCheckForValidListAndQueue+0x60>)
 800504a:	4a0e      	ldr	r2, [pc, #56]	; (8005084 <prvCheckForValidListAndQueue+0x58>)
 800504c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800504e:	4b10      	ldr	r3, [pc, #64]	; (8005090 <prvCheckForValidListAndQueue+0x64>)
 8005050:	4a0d      	ldr	r2, [pc, #52]	; (8005088 <prvCheckForValidListAndQueue+0x5c>)
 8005052:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005054:	2200      	movs	r2, #0
 8005056:	210c      	movs	r1, #12
 8005058:	200a      	movs	r0, #10
 800505a:	f7fe fa43 	bl	80034e4 <xQueueGenericCreate>
 800505e:	4603      	mov	r3, r0
 8005060:	4a07      	ldr	r2, [pc, #28]	; (8005080 <prvCheckForValidListAndQueue+0x54>)
 8005062:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005064:	4b06      	ldr	r3, [pc, #24]	; (8005080 <prvCheckForValidListAndQueue+0x54>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d005      	beq.n	8005078 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800506c:	4b04      	ldr	r3, [pc, #16]	; (8005080 <prvCheckForValidListAndQueue+0x54>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4908      	ldr	r1, [pc, #32]	; (8005094 <prvCheckForValidListAndQueue+0x68>)
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe fe50 	bl	8003d18 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005078:	f000 f96e 	bl	8005358 <vPortExitCritical>
    }
 800507c:	bf00      	nop
 800507e:	bd80      	pop	{r7, pc}
 8005080:	20000164 	.word	0x20000164
 8005084:	20000134 	.word	0x20000134
 8005088:	20000148 	.word	0x20000148
 800508c:	2000015c 	.word	0x2000015c
 8005090:	20000160 	.word	0x20000160
 8005094:	08005a6c 	.word	0x08005a6c

08005098 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3b04      	subs	r3, #4
 80050a8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3b04      	subs	r3, #4
 80050b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f023 0201 	bic.w	r2, r3, #1
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3b04      	subs	r3, #4
 80050c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80050c8:	4a0c      	ldr	r2, [pc, #48]	; (80050fc <pxPortInitialiseStack+0x64>)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3b14      	subs	r3, #20
 80050d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	3b04      	subs	r3, #4
 80050de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f06f 0202 	mvn.w	r2, #2
 80050e6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	3b20      	subs	r3, #32
 80050ec:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80050ee:	68fb      	ldr	r3, [r7, #12]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	08005101 	.word	0x08005101

08005100 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800510a:	4b12      	ldr	r3, [pc, #72]	; (8005154 <prvTaskExitError+0x54>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005112:	d00a      	beq.n	800512a <prvTaskExitError+0x2a>
        __asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	60fb      	str	r3, [r7, #12]
    }
 8005126:	bf00      	nop
 8005128:	e7fe      	b.n	8005128 <prvTaskExitError+0x28>
        __asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	60bb      	str	r3, [r7, #8]
    }
 800513c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800513e:	bf00      	nop
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0fc      	beq.n	8005140 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005146:	bf00      	nop
 8005148:	bf00      	nop
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	20000010 	.word	0x20000010
	...

08005160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005160:	4b07      	ldr	r3, [pc, #28]	; (8005180 <pxCurrentTCBConst2>)
 8005162:	6819      	ldr	r1, [r3, #0]
 8005164:	6808      	ldr	r0, [r1, #0]
 8005166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516a:	f380 8809 	msr	PSP, r0
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f04f 0000 	mov.w	r0, #0
 8005176:	f380 8811 	msr	BASEPRI, r0
 800517a:	4770      	bx	lr
 800517c:	f3af 8000 	nop.w

08005180 <pxCurrentTCBConst2>:
 8005180:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop

08005188 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005188:	4808      	ldr	r0, [pc, #32]	; (80051ac <prvPortStartFirstTask+0x24>)
 800518a:	6800      	ldr	r0, [r0, #0]
 800518c:	6800      	ldr	r0, [r0, #0]
 800518e:	f380 8808 	msr	MSP, r0
 8005192:	f04f 0000 	mov.w	r0, #0
 8005196:	f380 8814 	msr	CONTROL, r0
 800519a:	b662      	cpsie	i
 800519c:	b661      	cpsie	f
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	df00      	svc	0
 80051a8:	bf00      	nop
 80051aa:	0000      	.short	0x0000
 80051ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80051b0:	bf00      	nop
 80051b2:	bf00      	nop

080051b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80051ba:	4b46      	ldr	r3, [pc, #280]	; (80052d4 <xPortStartScheduler+0x120>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a46      	ldr	r2, [pc, #280]	; (80052d8 <xPortStartScheduler+0x124>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d10a      	bne.n	80051da <xPortStartScheduler+0x26>
        __asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	613b      	str	r3, [r7, #16]
    }
 80051d6:	bf00      	nop
 80051d8:	e7fe      	b.n	80051d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80051da:	4b3e      	ldr	r3, [pc, #248]	; (80052d4 <xPortStartScheduler+0x120>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a3f      	ldr	r2, [pc, #252]	; (80052dc <xPortStartScheduler+0x128>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d10a      	bne.n	80051fa <xPortStartScheduler+0x46>
        __asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	60fb      	str	r3, [r7, #12]
    }
 80051f6:	bf00      	nop
 80051f8:	e7fe      	b.n	80051f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051fa:	4b39      	ldr	r3, [pc, #228]	; (80052e0 <xPortStartScheduler+0x12c>)
 80051fc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	22ff      	movs	r2, #255	; 0xff
 800520a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005214:	78fb      	ldrb	r3, [r7, #3]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800521c:	b2da      	uxtb	r2, r3
 800521e:	4b31      	ldr	r3, [pc, #196]	; (80052e4 <xPortStartScheduler+0x130>)
 8005220:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005222:	4b31      	ldr	r3, [pc, #196]	; (80052e8 <xPortStartScheduler+0x134>)
 8005224:	2207      	movs	r2, #7
 8005226:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005228:	e009      	b.n	800523e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800522a:	4b2f      	ldr	r3, [pc, #188]	; (80052e8 <xPortStartScheduler+0x134>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3b01      	subs	r3, #1
 8005230:	4a2d      	ldr	r2, [pc, #180]	; (80052e8 <xPortStartScheduler+0x134>)
 8005232:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	b2db      	uxtb	r3, r3
 800523c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800523e:	78fb      	ldrb	r3, [r7, #3]
 8005240:	b2db      	uxtb	r3, r3
 8005242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005246:	2b80      	cmp	r3, #128	; 0x80
 8005248:	d0ef      	beq.n	800522a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800524a:	4b27      	ldr	r3, [pc, #156]	; (80052e8 <xPortStartScheduler+0x134>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f1c3 0307 	rsb	r3, r3, #7
 8005252:	2b04      	cmp	r3, #4
 8005254:	d00a      	beq.n	800526c <xPortStartScheduler+0xb8>
        __asm volatile
 8005256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	60bb      	str	r3, [r7, #8]
    }
 8005268:	bf00      	nop
 800526a:	e7fe      	b.n	800526a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800526c:	4b1e      	ldr	r3, [pc, #120]	; (80052e8 <xPortStartScheduler+0x134>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	021b      	lsls	r3, r3, #8
 8005272:	4a1d      	ldr	r2, [pc, #116]	; (80052e8 <xPortStartScheduler+0x134>)
 8005274:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005276:	4b1c      	ldr	r3, [pc, #112]	; (80052e8 <xPortStartScheduler+0x134>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800527e:	4a1a      	ldr	r2, [pc, #104]	; (80052e8 <xPortStartScheduler+0x134>)
 8005280:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	b2da      	uxtb	r2, r3
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800528a:	4b18      	ldr	r3, [pc, #96]	; (80052ec <xPortStartScheduler+0x138>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a17      	ldr	r2, [pc, #92]	; (80052ec <xPortStartScheduler+0x138>)
 8005290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005294:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005296:	4b15      	ldr	r3, [pc, #84]	; (80052ec <xPortStartScheduler+0x138>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a14      	ldr	r2, [pc, #80]	; (80052ec <xPortStartScheduler+0x138>)
 800529c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80052a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80052a2:	f000 f8db 	bl	800545c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80052a6:	4b12      	ldr	r3, [pc, #72]	; (80052f0 <xPortStartScheduler+0x13c>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80052ac:	f000 f8fa 	bl	80054a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80052b0:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <xPortStartScheduler+0x140>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a0f      	ldr	r2, [pc, #60]	; (80052f4 <xPortStartScheduler+0x140>)
 80052b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80052ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80052bc:	f7ff ff64 	bl	8005188 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80052c0:	f7ff f892 	bl	80043e8 <vTaskSwitchContext>
    prvTaskExitError();
 80052c4:	f7ff ff1c 	bl	8005100 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	e000ed00 	.word	0xe000ed00
 80052d8:	410fc271 	.word	0x410fc271
 80052dc:	410fc270 	.word	0x410fc270
 80052e0:	e000e400 	.word	0xe000e400
 80052e4:	20000170 	.word	0x20000170
 80052e8:	20000174 	.word	0x20000174
 80052ec:	e000ed20 	.word	0xe000ed20
 80052f0:	20000010 	.word	0x20000010
 80052f4:	e000ef34 	.word	0xe000ef34

080052f8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
        __asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	607b      	str	r3, [r7, #4]
    }
 8005310:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005312:	4b0f      	ldr	r3, [pc, #60]	; (8005350 <vPortEnterCritical+0x58>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3301      	adds	r3, #1
 8005318:	4a0d      	ldr	r2, [pc, #52]	; (8005350 <vPortEnterCritical+0x58>)
 800531a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800531c:	4b0c      	ldr	r3, [pc, #48]	; (8005350 <vPortEnterCritical+0x58>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d10f      	bne.n	8005344 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005324:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <vPortEnterCritical+0x5c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <vPortEnterCritical+0x4c>
        __asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	603b      	str	r3, [r7, #0]
    }
 8005340:	bf00      	nop
 8005342:	e7fe      	b.n	8005342 <vPortEnterCritical+0x4a>
    }
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	20000010 	.word	0x20000010
 8005354:	e000ed04 	.word	0xe000ed04

08005358 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800535e:	4b12      	ldr	r3, [pc, #72]	; (80053a8 <vPortExitCritical+0x50>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10a      	bne.n	800537c <vPortExitCritical+0x24>
        __asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	607b      	str	r3, [r7, #4]
    }
 8005378:	bf00      	nop
 800537a:	e7fe      	b.n	800537a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800537c:	4b0a      	ldr	r3, [pc, #40]	; (80053a8 <vPortExitCritical+0x50>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3b01      	subs	r3, #1
 8005382:	4a09      	ldr	r2, [pc, #36]	; (80053a8 <vPortExitCritical+0x50>)
 8005384:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005386:	4b08      	ldr	r3, [pc, #32]	; (80053a8 <vPortExitCritical+0x50>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d105      	bne.n	800539a <vPortExitCritical+0x42>
 800538e:	2300      	movs	r3, #0
 8005390:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	f383 8811 	msr	BASEPRI, r3
    }
 8005398:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	20000010 	.word	0x20000010
 80053ac:	00000000 	.word	0x00000000

080053b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80053b0:	f3ef 8009 	mrs	r0, PSP
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	4b15      	ldr	r3, [pc, #84]	; (8005410 <pxCurrentTCBConst>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	f01e 0f10 	tst.w	lr, #16
 80053c0:	bf08      	it	eq
 80053c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80053c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ca:	6010      	str	r0, [r2, #0]
 80053cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80053d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80053d4:	f380 8811 	msr	BASEPRI, r0
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f7ff f802 	bl	80043e8 <vTaskSwitchContext>
 80053e4:	f04f 0000 	mov.w	r0, #0
 80053e8:	f380 8811 	msr	BASEPRI, r0
 80053ec:	bc09      	pop	{r0, r3}
 80053ee:	6819      	ldr	r1, [r3, #0]
 80053f0:	6808      	ldr	r0, [r1, #0]
 80053f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f6:	f01e 0f10 	tst.w	lr, #16
 80053fa:	bf08      	it	eq
 80053fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005400:	f380 8809 	msr	PSP, r0
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	f3af 8000 	nop.w

08005410 <pxCurrentTCBConst>:
 8005410:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005414:	bf00      	nop
 8005416:	bf00      	nop

08005418 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
        __asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	607b      	str	r3, [r7, #4]
    }
 8005430:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005432:	f7fe ff21 	bl	8004278 <xTaskIncrementTick>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800543c:	4b06      	ldr	r3, [pc, #24]	; (8005458 <SysTick_Handler+0x40>)
 800543e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	2300      	movs	r3, #0
 8005446:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	f383 8811 	msr	BASEPRI, r3
    }
 800544e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005450:	bf00      	nop
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005460:	4b0b      	ldr	r3, [pc, #44]	; (8005490 <vPortSetupTimerInterrupt+0x34>)
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005466:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <vPortSetupTimerInterrupt+0x38>)
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800546c:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <vPortSetupTimerInterrupt+0x3c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a0a      	ldr	r2, [pc, #40]	; (800549c <vPortSetupTimerInterrupt+0x40>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	099b      	lsrs	r3, r3, #6
 8005478:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <vPortSetupTimerInterrupt+0x44>)
 800547a:	3b01      	subs	r3, #1
 800547c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800547e:	4b04      	ldr	r3, [pc, #16]	; (8005490 <vPortSetupTimerInterrupt+0x34>)
 8005480:	2207      	movs	r2, #7
 8005482:	601a      	str	r2, [r3, #0]
}
 8005484:	bf00      	nop
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	e000e010 	.word	0xe000e010
 8005494:	e000e018 	.word	0xe000e018
 8005498:	20000000 	.word	0x20000000
 800549c:	10624dd3 	.word	0x10624dd3
 80054a0:	e000e014 	.word	0xe000e014

080054a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80054a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80054b4 <vPortEnableVFP+0x10>
 80054a8:	6801      	ldr	r1, [r0, #0]
 80054aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80054ae:	6001      	str	r1, [r0, #0]
 80054b0:	4770      	bx	lr
 80054b2:	0000      	.short	0x0000
 80054b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80054b8:	bf00      	nop
 80054ba:	bf00      	nop

080054bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
    	vSetVarulMaxPRIGROUPValue();
 80054c2:	f000 f83b 	bl	800553c <vSetVarulMaxPRIGROUPValue>
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80054c6:	f3ef 8305 	mrs	r3, IPSR
 80054ca:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b0f      	cmp	r3, #15
 80054d0:	d914      	bls.n	80054fc <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80054d2:	4a16      	ldr	r2, [pc, #88]	; (800552c <vPortValidateInterruptPriority+0x70>)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80054dc:	4b14      	ldr	r3, [pc, #80]	; (8005530 <vPortValidateInterruptPriority+0x74>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	7afa      	ldrb	r2, [r7, #11]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d20a      	bcs.n	80054fc <vPortValidateInterruptPriority+0x40>
        __asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	607b      	str	r3, [r7, #4]
    }
 80054f8:	bf00      	nop
 80054fa:	e7fe      	b.n	80054fa <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054fc:	4b0d      	ldr	r3, [pc, #52]	; (8005534 <vPortValidateInterruptPriority+0x78>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005504:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <vPortValidateInterruptPriority+0x7c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d90a      	bls.n	8005522 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	603b      	str	r3, [r7, #0]
    }
 800551e:	bf00      	nop
 8005520:	e7fe      	b.n	8005520 <vPortValidateInterruptPriority+0x64>
    }
 8005522:	bf00      	nop
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	e000e3f0 	.word	0xe000e3f0
 8005530:	20000170 	.word	0x20000170
 8005534:	e000ed0c 	.word	0xe000ed0c
 8005538:	20000174 	.word	0x20000174

0800553c <vSetVarulMaxPRIGROUPValue>:

    //###########################################################
    // Add function below in file port.c
    #if( configASSERT_DEFINED == 1 )
    void vSetVarulMaxPRIGROUPValue( void )
    {
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
    	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005542:	4b1f      	ldr	r3, [pc, #124]	; (80055c0 <vSetVarulMaxPRIGROUPValue+0x84>)
 8005544:	60fb      	str	r3, [r7, #12]
    	volatile uint8_t ucMaxPriorityValue;
    	/* Determine the number of priority bits available.  First write to all
    	possible bits. */
    	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	22ff      	movs	r2, #255	; 0xff
 800554a:	701a      	strb	r2, [r3, #0]
    	/* Read the value back to see how many bits stuck. */
    	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	b2db      	uxtb	r3, r3
 8005552:	71fb      	strb	r3, [r7, #7]
    	/* Calculate the maximum acceptable priority group value for the number
    	of bits read back. */
    	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005554:	4b1b      	ldr	r3, [pc, #108]	; (80055c4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005556:	2207      	movs	r2, #7
 8005558:	601a      	str	r2, [r3, #0]
    	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800555a:	e009      	b.n	8005570 <vSetVarulMaxPRIGROUPValue+0x34>
    	{
    		ulMaxPRIGROUPValue--;
 800555c:	4b19      	ldr	r3, [pc, #100]	; (80055c4 <vSetVarulMaxPRIGROUPValue+0x88>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3b01      	subs	r3, #1
 8005562:	4a18      	ldr	r2, [pc, #96]	; (80055c4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005564:	6013      	str	r3, [r2, #0]
    		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005566:	79fb      	ldrb	r3, [r7, #7]
 8005568:	b2db      	uxtb	r3, r3
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	b2db      	uxtb	r3, r3
 800556e:	71fb      	strb	r3, [r7, #7]
    	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005570:	79fb      	ldrb	r3, [r7, #7]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005578:	2b80      	cmp	r3, #128	; 0x80
 800557a:	d0ef      	beq.n	800555c <vSetVarulMaxPRIGROUPValue+0x20>
    #ifdef configPRIO_BITS
    	{
    		/* Check the FreeRTOS configuration that defines the number of
    		priority bits matches the number of priority bits actually queried
    		from the hardware. */
    		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800557c:	4b11      	ldr	r3, [pc, #68]	; (80055c4 <vSetVarulMaxPRIGROUPValue+0x88>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f1c3 0307 	rsb	r3, r3, #7
 8005584:	2b04      	cmp	r3, #4
 8005586:	d00a      	beq.n	800559e <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 8005588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	60bb      	str	r3, [r7, #8]
    }
 800559a:	bf00      	nop
 800559c:	e7fe      	b.n	800559c <vSetVarulMaxPRIGROUPValue+0x60>
    	}
    #endif
    	/* Shift the priority group value back to its position within the AIRCR
    	register. */
    	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800559e:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <vSetVarulMaxPRIGROUPValue+0x88>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	4a07      	ldr	r2, [pc, #28]	; (80055c4 <vSetVarulMaxPRIGROUPValue+0x88>)
 80055a6:	6013      	str	r3, [r2, #0]
    	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80055a8:	4b06      	ldr	r3, [pc, #24]	; (80055c4 <vSetVarulMaxPRIGROUPValue+0x88>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055b0:	4a04      	ldr	r2, [pc, #16]	; (80055c4 <vSetVarulMaxPRIGROUPValue+0x88>)
 80055b2:	6013      	str	r3, [r2, #0]
    }
 80055b4:	bf00      	nop
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	e000e400 	.word	0xe000e400
 80055c4:	20000174 	.word	0x20000174

080055c8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08a      	sub	sp, #40	; 0x28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80055d4:	f7fe fd96 	bl	8004104 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80055d8:	4b65      	ldr	r3, [pc, #404]	; (8005770 <pvPortMalloc+0x1a8>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80055e0:	f000 f934 	bl	800584c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055e4:	4b63      	ldr	r3, [pc, #396]	; (8005774 <pvPortMalloc+0x1ac>)
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f040 80a7 	bne.w	8005740 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d02d      	beq.n	8005654 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80055f8:	2208      	movs	r2, #8
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	429a      	cmp	r2, r3
 8005602:	d227      	bcs.n	8005654 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005604:	2208      	movs	r2, #8
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4413      	add	r3, r2
 800560a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	2b00      	cmp	r3, #0
 8005614:	d021      	beq.n	800565a <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f023 0307 	bic.w	r3, r3, #7
 800561c:	3308      	adds	r3, #8
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	429a      	cmp	r2, r3
 8005622:	d214      	bcs.n	800564e <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f023 0307 	bic.w	r3, r3, #7
 800562a:	3308      	adds	r3, #8
 800562c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	2b00      	cmp	r3, #0
 8005636:	d010      	beq.n	800565a <pvPortMalloc+0x92>
        __asm volatile
 8005638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	617b      	str	r3, [r7, #20]
    }
 800564a:	bf00      	nop
 800564c:	e7fe      	b.n	800564c <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005652:	e002      	b.n	800565a <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005654:	2300      	movs	r3, #0
 8005656:	607b      	str	r3, [r7, #4]
 8005658:	e000      	b.n	800565c <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800565a:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d06e      	beq.n	8005740 <pvPortMalloc+0x178>
 8005662:	4b45      	ldr	r3, [pc, #276]	; (8005778 <pvPortMalloc+0x1b0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	429a      	cmp	r2, r3
 800566a:	d869      	bhi.n	8005740 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800566c:	4b43      	ldr	r3, [pc, #268]	; (800577c <pvPortMalloc+0x1b4>)
 800566e:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005670:	4b42      	ldr	r3, [pc, #264]	; (800577c <pvPortMalloc+0x1b4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005676:	e004      	b.n	8005682 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	429a      	cmp	r2, r3
 800568a:	d903      	bls.n	8005694 <pvPortMalloc+0xcc>
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1f1      	bne.n	8005678 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005694:	4b36      	ldr	r3, [pc, #216]	; (8005770 <pvPortMalloc+0x1a8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569a:	429a      	cmp	r2, r3
 800569c:	d050      	beq.n	8005740 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2208      	movs	r2, #8
 80056a4:	4413      	add	r3, r2
 80056a6:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	1ad2      	subs	r2, r2, r3
 80056b8:	2308      	movs	r3, #8
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	429a      	cmp	r2, r3
 80056be:	d91f      	bls.n	8005700 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4413      	add	r3, r2
 80056c6:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	f003 0307 	and.w	r3, r3, #7
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <pvPortMalloc+0x120>
        __asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	613b      	str	r3, [r7, #16]
    }
 80056e4:	bf00      	nop
 80056e6:	e7fe      	b.n	80056e6 <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	1ad2      	subs	r2, r2, r3
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056fa:	69b8      	ldr	r0, [r7, #24]
 80056fc:	f000 f908 	bl	8005910 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005700:	4b1d      	ldr	r3, [pc, #116]	; (8005778 <pvPortMalloc+0x1b0>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	4a1b      	ldr	r2, [pc, #108]	; (8005778 <pvPortMalloc+0x1b0>)
 800570c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800570e:	4b1a      	ldr	r3, [pc, #104]	; (8005778 <pvPortMalloc+0x1b0>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4b1b      	ldr	r3, [pc, #108]	; (8005780 <pvPortMalloc+0x1b8>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d203      	bcs.n	8005722 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800571a:	4b17      	ldr	r3, [pc, #92]	; (8005778 <pvPortMalloc+0x1b0>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a18      	ldr	r2, [pc, #96]	; (8005780 <pvPortMalloc+0x1b8>)
 8005720:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	4b13      	ldr	r3, [pc, #76]	; (8005774 <pvPortMalloc+0x1ac>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	431a      	orrs	r2, r3
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005736:	4b13      	ldr	r3, [pc, #76]	; (8005784 <pvPortMalloc+0x1bc>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3301      	adds	r3, #1
 800573c:	4a11      	ldr	r2, [pc, #68]	; (8005784 <pvPortMalloc+0x1bc>)
 800573e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005740:	f7fe fcee 	bl	8004120 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00a      	beq.n	8005764 <pvPortMalloc+0x19c>
        __asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	60fb      	str	r3, [r7, #12]
    }
 8005760:	bf00      	nop
 8005762:	e7fe      	b.n	8005762 <pvPortMalloc+0x19a>
    return pvReturn;
 8005764:	69fb      	ldr	r3, [r7, #28]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3728      	adds	r7, #40	; 0x28
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20003d80 	.word	0x20003d80
 8005774:	20003d94 	.word	0x20003d94
 8005778:	20003d84 	.word	0x20003d84
 800577c:	20003d78 	.word	0x20003d78
 8005780:	20003d88 	.word	0x20003d88
 8005784:	20003d8c 	.word	0x20003d8c

08005788 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d04d      	beq.n	8005836 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800579a:	2308      	movs	r3, #8
 800579c:	425b      	negs	r3, r3
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4413      	add	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	4b24      	ldr	r3, [pc, #144]	; (8005840 <vPortFree+0xb8>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4013      	ands	r3, r2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <vPortFree+0x44>
        __asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	60fb      	str	r3, [r7, #12]
    }
 80057c8:	bf00      	nop
 80057ca:	e7fe      	b.n	80057ca <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00a      	beq.n	80057ea <vPortFree+0x62>
        __asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	60bb      	str	r3, [r7, #8]
    }
 80057e6:	bf00      	nop
 80057e8:	e7fe      	b.n	80057e8 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	4b14      	ldr	r3, [pc, #80]	; (8005840 <vPortFree+0xb8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4013      	ands	r3, r2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01e      	beq.n	8005836 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d11a      	bne.n	8005836 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	4b0e      	ldr	r3, [pc, #56]	; (8005840 <vPortFree+0xb8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	43db      	mvns	r3, r3
 800580a:	401a      	ands	r2, r3
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005810:	f7fe fc78 	bl	8004104 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	4b0a      	ldr	r3, [pc, #40]	; (8005844 <vPortFree+0xbc>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4413      	add	r3, r2
 800581e:	4a09      	ldr	r2, [pc, #36]	; (8005844 <vPortFree+0xbc>)
 8005820:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005822:	6938      	ldr	r0, [r7, #16]
 8005824:	f000 f874 	bl	8005910 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005828:	4b07      	ldr	r3, [pc, #28]	; (8005848 <vPortFree+0xc0>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3301      	adds	r3, #1
 800582e:	4a06      	ldr	r2, [pc, #24]	; (8005848 <vPortFree+0xc0>)
 8005830:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005832:	f7fe fc75 	bl	8004120 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005836:	bf00      	nop
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20003d94 	.word	0x20003d94
 8005844:	20003d84 	.word	0x20003d84
 8005848:	20003d90 	.word	0x20003d90

0800584c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005852:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005856:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005858:	4b27      	ldr	r3, [pc, #156]	; (80058f8 <prvHeapInit+0xac>)
 800585a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 0307 	and.w	r3, r3, #7
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00c      	beq.n	8005880 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3307      	adds	r3, #7
 800586a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0307 	bic.w	r3, r3, #7
 8005872:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	4a1f      	ldr	r2, [pc, #124]	; (80058f8 <prvHeapInit+0xac>)
 800587c:	4413      	add	r3, r2
 800587e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005884:	4a1d      	ldr	r2, [pc, #116]	; (80058fc <prvHeapInit+0xb0>)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800588a:	4b1c      	ldr	r3, [pc, #112]	; (80058fc <prvHeapInit+0xb0>)
 800588c:	2200      	movs	r2, #0
 800588e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	4413      	add	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005898:	2208      	movs	r2, #8
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	1a9b      	subs	r3, r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0307 	bic.w	r3, r3, #7
 80058a6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4a15      	ldr	r2, [pc, #84]	; (8005900 <prvHeapInit+0xb4>)
 80058ac:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80058ae:	4b14      	ldr	r3, [pc, #80]	; (8005900 <prvHeapInit+0xb4>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2200      	movs	r2, #0
 80058b4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80058b6:	4b12      	ldr	r3, [pc, #72]	; (8005900 <prvHeapInit+0xb4>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	1ad2      	subs	r2, r2, r3
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058cc:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <prvHeapInit+0xb4>)
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	4a0a      	ldr	r2, [pc, #40]	; (8005904 <prvHeapInit+0xb8>)
 80058da:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	4a09      	ldr	r2, [pc, #36]	; (8005908 <prvHeapInit+0xbc>)
 80058e2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058e4:	4b09      	ldr	r3, [pc, #36]	; (800590c <prvHeapInit+0xc0>)
 80058e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80058ea:	601a      	str	r2, [r3, #0]
}
 80058ec:	bf00      	nop
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	20000178 	.word	0x20000178
 80058fc:	20003d78 	.word	0x20003d78
 8005900:	20003d80 	.word	0x20003d80
 8005904:	20003d88 	.word	0x20003d88
 8005908:	20003d84 	.word	0x20003d84
 800590c:	20003d94 	.word	0x20003d94

08005910 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005918:	4b28      	ldr	r3, [pc, #160]	; (80059bc <prvInsertBlockIntoFreeList+0xac>)
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	e002      	b.n	8005924 <prvInsertBlockIntoFreeList+0x14>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	429a      	cmp	r2, r3
 800592c:	d8f7      	bhi.n	800591e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	4413      	add	r3, r2
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	429a      	cmp	r2, r3
 800593e:	d108      	bne.n	8005952 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	441a      	add	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	441a      	add	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d118      	bne.n	8005998 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4b15      	ldr	r3, [pc, #84]	; (80059c0 <prvInsertBlockIntoFreeList+0xb0>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d00d      	beq.n	800598e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	441a      	add	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	e008      	b.n	80059a0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800598e:	4b0c      	ldr	r3, [pc, #48]	; (80059c0 <prvInsertBlockIntoFreeList+0xb0>)
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	e003      	b.n	80059a0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d002      	beq.n	80059ae <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80059ae:	bf00      	nop
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	20003d78 	.word	0x20003d78
 80059c0:	20003d80 	.word	0x20003d80

080059c4 <__libc_init_array>:
 80059c4:	b570      	push	{r4, r5, r6, lr}
 80059c6:	4d0d      	ldr	r5, [pc, #52]	; (80059fc <__libc_init_array+0x38>)
 80059c8:	4c0d      	ldr	r4, [pc, #52]	; (8005a00 <__libc_init_array+0x3c>)
 80059ca:	1b64      	subs	r4, r4, r5
 80059cc:	10a4      	asrs	r4, r4, #2
 80059ce:	2600      	movs	r6, #0
 80059d0:	42a6      	cmp	r6, r4
 80059d2:	d109      	bne.n	80059e8 <__libc_init_array+0x24>
 80059d4:	4d0b      	ldr	r5, [pc, #44]	; (8005a04 <__libc_init_array+0x40>)
 80059d6:	4c0c      	ldr	r4, [pc, #48]	; (8005a08 <__libc_init_array+0x44>)
 80059d8:	f000 f82e 	bl	8005a38 <_init>
 80059dc:	1b64      	subs	r4, r4, r5
 80059de:	10a4      	asrs	r4, r4, #2
 80059e0:	2600      	movs	r6, #0
 80059e2:	42a6      	cmp	r6, r4
 80059e4:	d105      	bne.n	80059f2 <__libc_init_array+0x2e>
 80059e6:	bd70      	pop	{r4, r5, r6, pc}
 80059e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ec:	4798      	blx	r3
 80059ee:	3601      	adds	r6, #1
 80059f0:	e7ee      	b.n	80059d0 <__libc_init_array+0xc>
 80059f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f6:	4798      	blx	r3
 80059f8:	3601      	adds	r6, #1
 80059fa:	e7f2      	b.n	80059e2 <__libc_init_array+0x1e>
 80059fc:	08005a9c 	.word	0x08005a9c
 8005a00:	08005a9c 	.word	0x08005a9c
 8005a04:	08005a9c 	.word	0x08005a9c
 8005a08:	08005aa0 	.word	0x08005aa0

08005a0c <memcpy>:
 8005a0c:	440a      	add	r2, r1
 8005a0e:	4291      	cmp	r1, r2
 8005a10:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a14:	d100      	bne.n	8005a18 <memcpy+0xc>
 8005a16:	4770      	bx	lr
 8005a18:	b510      	push	{r4, lr}
 8005a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a22:	4291      	cmp	r1, r2
 8005a24:	d1f9      	bne.n	8005a1a <memcpy+0xe>
 8005a26:	bd10      	pop	{r4, pc}

08005a28 <memset>:
 8005a28:	4402      	add	r2, r0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d100      	bne.n	8005a32 <memset+0xa>
 8005a30:	4770      	bx	lr
 8005a32:	f803 1b01 	strb.w	r1, [r3], #1
 8005a36:	e7f9      	b.n	8005a2c <memset+0x4>

08005a38 <_init>:
 8005a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3a:	bf00      	nop
 8005a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a3e:	bc08      	pop	{r3}
 8005a40:	469e      	mov	lr, r3
 8005a42:	4770      	bx	lr

08005a44 <_fini>:
 8005a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a46:	bf00      	nop
 8005a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a4a:	bc08      	pop	{r3}
 8005a4c:	469e      	mov	lr, r3
 8005a4e:	4770      	bx	lr
