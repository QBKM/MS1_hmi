
MS1_hmi_446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c84  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e50  08008e54  08008e54  00018e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ca4  08009ca4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009ca4  08009ca4  00019ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cac  08009cac  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cac  08009cac  00019cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cb0  08009cb0  00019cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040bc  2000007c  08009d30  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004138  08009d30  00024138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000226df  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cce  00000000  00000000  0004278b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  00047460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00027303  00000000  00000000  00048da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001e7ed  00000000  00000000  000700ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000df000  00000000  00000000  0008e898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0016d898  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001748  00000000  00000000  0016d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006fdc  00000000  00000000  0016f038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008e3c 	.word	0x08008e3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08008e3c 	.word	0x08008e3c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96e 	b.w	80005c4 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468c      	mov	ip, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8083 	bne.w	8000416 <__udivmoddi4+0x116>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d947      	bls.n	80003a6 <__udivmoddi4+0xa6>
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	b142      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031c:	f1c2 0020 	rsb	r0, r2, #32
 8000320:	fa24 f000 	lsr.w	r0, r4, r0
 8000324:	4091      	lsls	r1, r2
 8000326:	4097      	lsls	r7, r2
 8000328:	ea40 0c01 	orr.w	ip, r0, r1
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbbc f6f8 	udiv	r6, ip, r8
 8000338:	fa1f fe87 	uxth.w	lr, r7
 800033c:	fb08 c116 	mls	r1, r8, r6, ip
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb06 f10e 	mul.w	r1, r6, lr
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000352:	f080 8119 	bcs.w	8000588 <__udivmoddi4+0x288>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8116 	bls.w	8000588 <__udivmoddi4+0x288>
 800035c:	3e02      	subs	r6, #2
 800035e:	443b      	add	r3, r7
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45a6      	cmp	lr, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	193c      	adds	r4, r7, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	f080 8105 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f240 8102 	bls.w	800058c <__udivmoddi4+0x28c>
 8000388:	3802      	subs	r0, #2
 800038a:	443c      	add	r4, r7
 800038c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	2600      	movs	r6, #0
 8000396:	b11d      	cbz	r5, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c5 4300 	strd	r4, r3, [r5]
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	b902      	cbnz	r2, 80003aa <__udivmoddi4+0xaa>
 80003a8:	deff      	udf	#255	; 0xff
 80003aa:	fab2 f282 	clz	r2, r2
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	d150      	bne.n	8000454 <__udivmoddi4+0x154>
 80003b2:	1bcb      	subs	r3, r1, r7
 80003b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	2601      	movs	r6, #1
 80003be:	fbb3 fcfe 	udiv	ip, r3, lr
 80003c2:	0c21      	lsrs	r1, r4, #16
 80003c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb08 f30c 	mul.w	r3, r8, ip
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0xe4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0xe2>
 80003dc:	428b      	cmp	r3, r1
 80003de:	f200 80e9 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1ac9      	subs	r1, r1, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x10c>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x10a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80d9 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e7bf      	b.n	8000396 <__udivmoddi4+0x96>
 8000416:	428b      	cmp	r3, r1
 8000418:	d909      	bls.n	800042e <__udivmoddi4+0x12e>
 800041a:	2d00      	cmp	r5, #0
 800041c:	f000 80b1 	beq.w	8000582 <__udivmoddi4+0x282>
 8000420:	2600      	movs	r6, #0
 8000422:	e9c5 0100 	strd	r0, r1, [r5]
 8000426:	4630      	mov	r0, r6
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	fab3 f683 	clz	r6, r3
 8000432:	2e00      	cmp	r6, #0
 8000434:	d14a      	bne.n	80004cc <__udivmoddi4+0x1cc>
 8000436:	428b      	cmp	r3, r1
 8000438:	d302      	bcc.n	8000440 <__udivmoddi4+0x140>
 800043a:	4282      	cmp	r2, r0
 800043c:	f200 80b8 	bhi.w	80005b0 <__udivmoddi4+0x2b0>
 8000440:	1a84      	subs	r4, r0, r2
 8000442:	eb61 0103 	sbc.w	r1, r1, r3
 8000446:	2001      	movs	r0, #1
 8000448:	468c      	mov	ip, r1
 800044a:	2d00      	cmp	r5, #0
 800044c:	d0a8      	beq.n	80003a0 <__udivmoddi4+0xa0>
 800044e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f603 	lsr.w	r6, r0, r3
 800045c:	4097      	lsls	r7, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000466:	40d9      	lsrs	r1, r3
 8000468:	4330      	orrs	r0, r6
 800046a:	0c03      	lsrs	r3, r0, #16
 800046c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000470:	fa1f f887 	uxth.w	r8, r7
 8000474:	fb0e 1116 	mls	r1, lr, r6, r1
 8000478:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047c:	fb06 f108 	mul.w	r1, r6, r8
 8000480:	4299      	cmp	r1, r3
 8000482:	fa04 f402 	lsl.w	r4, r4, r2
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x19c>
 8000488:	18fb      	adds	r3, r7, r3
 800048a:	f106 3cff 	add.w	ip, r6, #4294967295
 800048e:	f080 808d 	bcs.w	80005ac <__udivmoddi4+0x2ac>
 8000492:	4299      	cmp	r1, r3
 8000494:	f240 808a 	bls.w	80005ac <__udivmoddi4+0x2ac>
 8000498:	3e02      	subs	r6, #2
 800049a:	443b      	add	r3, r7
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b281      	uxth	r1, r0
 80004a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb00 f308 	mul.w	r3, r0, r8
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x1c4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ba:	d273      	bcs.n	80005a4 <__udivmoddi4+0x2a4>
 80004bc:	428b      	cmp	r3, r1
 80004be:	d971      	bls.n	80005a4 <__udivmoddi4+0x2a4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4439      	add	r1, r7
 80004c4:	1acb      	subs	r3, r1, r3
 80004c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ca:	e778      	b.n	80003be <__udivmoddi4+0xbe>
 80004cc:	f1c6 0c20 	rsb	ip, r6, #32
 80004d0:	fa03 f406 	lsl.w	r4, r3, r6
 80004d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004d8:	431c      	orrs	r4, r3
 80004da:	fa20 f70c 	lsr.w	r7, r0, ip
 80004de:	fa01 f306 	lsl.w	r3, r1, r6
 80004e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ea:	431f      	orrs	r7, r3
 80004ec:	0c3b      	lsrs	r3, r7, #16
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fa1f f884 	uxth.w	r8, r4
 80004f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000502:	458a      	cmp	sl, r1
 8000504:	fa02 f206 	lsl.w	r2, r2, r6
 8000508:	fa00 f306 	lsl.w	r3, r0, r6
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x220>
 800050e:	1861      	adds	r1, r4, r1
 8000510:	f109 30ff 	add.w	r0, r9, #4294967295
 8000514:	d248      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 8000516:	458a      	cmp	sl, r1
 8000518:	d946      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800051a:	f1a9 0902 	sub.w	r9, r9, #2
 800051e:	4421      	add	r1, r4
 8000520:	eba1 010a 	sub.w	r1, r1, sl
 8000524:	b2bf      	uxth	r7, r7
 8000526:	fbb1 f0fe 	udiv	r0, r1, lr
 800052a:	fb0e 1110 	mls	r1, lr, r0, r1
 800052e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000532:	fb00 f808 	mul.w	r8, r0, r8
 8000536:	45b8      	cmp	r8, r7
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x24a>
 800053a:	19e7      	adds	r7, r4, r7
 800053c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000540:	d22e      	bcs.n	80005a0 <__udivmoddi4+0x2a0>
 8000542:	45b8      	cmp	r8, r7
 8000544:	d92c      	bls.n	80005a0 <__udivmoddi4+0x2a0>
 8000546:	3802      	subs	r0, #2
 8000548:	4427      	add	r7, r4
 800054a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800054e:	eba7 0708 	sub.w	r7, r7, r8
 8000552:	fba0 8902 	umull	r8, r9, r0, r2
 8000556:	454f      	cmp	r7, r9
 8000558:	46c6      	mov	lr, r8
 800055a:	4649      	mov	r1, r9
 800055c:	d31a      	bcc.n	8000594 <__udivmoddi4+0x294>
 800055e:	d017      	beq.n	8000590 <__udivmoddi4+0x290>
 8000560:	b15d      	cbz	r5, 800057a <__udivmoddi4+0x27a>
 8000562:	ebb3 020e 	subs.w	r2, r3, lr
 8000566:	eb67 0701 	sbc.w	r7, r7, r1
 800056a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800056e:	40f2      	lsrs	r2, r6
 8000570:	ea4c 0202 	orr.w	r2, ip, r2
 8000574:	40f7      	lsrs	r7, r6
 8000576:	e9c5 2700 	strd	r2, r7, [r5]
 800057a:	2600      	movs	r6, #0
 800057c:	4631      	mov	r1, r6
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e70b      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0x60>
 800058c:	4618      	mov	r0, r3
 800058e:	e6fd      	b.n	800038c <__udivmoddi4+0x8c>
 8000590:	4543      	cmp	r3, r8
 8000592:	d2e5      	bcs.n	8000560 <__udivmoddi4+0x260>
 8000594:	ebb8 0e02 	subs.w	lr, r8, r2
 8000598:	eb69 0104 	sbc.w	r1, r9, r4
 800059c:	3801      	subs	r0, #1
 800059e:	e7df      	b.n	8000560 <__udivmoddi4+0x260>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e7d2      	b.n	800054a <__udivmoddi4+0x24a>
 80005a4:	4660      	mov	r0, ip
 80005a6:	e78d      	b.n	80004c4 <__udivmoddi4+0x1c4>
 80005a8:	4681      	mov	r9, r0
 80005aa:	e7b9      	b.n	8000520 <__udivmoddi4+0x220>
 80005ac:	4666      	mov	r6, ip
 80005ae:	e775      	b.n	800049c <__udivmoddi4+0x19c>
 80005b0:	4630      	mov	r0, r6
 80005b2:	e74a      	b.n	800044a <__udivmoddi4+0x14a>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	4439      	add	r1, r7
 80005ba:	e713      	b.n	80003e4 <__udivmoddi4+0xe4>
 80005bc:	3802      	subs	r0, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e724      	b.n	800040c <__udivmoddi4+0x10c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <Set_Color>:
  #error "SPI Setting Error !!"
#endif

uint8_t color_byte[2],color_fill_byte[2];

void Set_Color(uint16_t color)  {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]
  
  color_byte[0] = (uint8_t)(color >> 8);
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	0a1b      	lsrs	r3, r3, #8
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <Set_Color+0x2c>)
 80005dc:	701a      	strb	r2, [r3, #0]
  color_byte[1] = (uint8_t)(color & 0x00ff);
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <Set_Color+0x2c>)
 80005e4:	705a      	strb	r2, [r3, #1]
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20003f80 	.word	0x20003f80

080005f8 <Write_Command>:
  color_fill_byte[0] = (uint8_t)(color >> 8);
  color_fill_byte[1] = (uint8_t)(color & 0x00ff);
}
  

void Write_Command(uint8_t cmd)  {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
  
  OLED_CS(GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2110      	movs	r1, #16
 8000606:	4810      	ldr	r0, [pc, #64]	; (8000648 <Write_Command+0x50>)
 8000608:	f003 fac2 	bl	8003b90 <HAL_GPIO_WritePin>
  
#if  INTERFACE_4WIRE_SPI
  
  OLED_DC(GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	480d      	ldr	r0, [pc, #52]	; (8000648 <Write_Command+0x50>)
 8000612:	f003 fabd 	bl	8003b90 <HAL_GPIO_WritePin>
  
  while(HAL_SPI_Transmit(&hspi1,&cmd,0x01,0x10) != HAL_OK);
 8000616:	bf00      	nop
 8000618:	1df9      	adds	r1, r7, #7
 800061a:	2310      	movs	r3, #16
 800061c:	2201      	movs	r2, #1
 800061e:	480b      	ldr	r0, [pc, #44]	; (800064c <Write_Command+0x54>)
 8000620:	f004 f8f5 	bl	800480e <HAL_SPI_Transmit>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1f6      	bne.n	8000618 <Write_Command+0x20>
  
  OLED_DC(GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	2140      	movs	r1, #64	; 0x40
 800062e:	4806      	ldr	r0, [pc, #24]	; (8000648 <Write_Command+0x50>)
 8000630:	f003 faae 	bl	8003b90 <HAL_GPIO_WritePin>
	}

  
#endif
  
  OLED_CS(GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	2110      	movs	r1, #16
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <Write_Command+0x50>)
 800063a:	f003 faa9 	bl	8003b90 <HAL_GPIO_WritePin>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40020000 	.word	0x40020000
 800064c:	20003fa0 	.word	0x20003fa0

08000650 <Write_Data>:


void Write_Data(uint8_t dat) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
  
  OLED_CS(GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2110      	movs	r1, #16
 800065e:	4810      	ldr	r0, [pc, #64]	; (80006a0 <Write_Data+0x50>)
 8000660:	f003 fa96 	bl	8003b90 <HAL_GPIO_WritePin>
  
#if  INTERFACE_4WIRE_SPI
  
  OLED_DC(GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <Write_Data+0x50>)
 800066a:	f003 fa91 	bl	8003b90 <HAL_GPIO_WritePin>
  
  while(HAL_SPI_Transmit(&hspi1,&dat,0x01,0x10) != HAL_OK);
 800066e:	bf00      	nop
 8000670:	1df9      	adds	r1, r7, #7
 8000672:	2310      	movs	r3, #16
 8000674:	2201      	movs	r2, #1
 8000676:	480b      	ldr	r0, [pc, #44]	; (80006a4 <Write_Data+0x54>)
 8000678:	f004 f8c9 	bl	800480e <HAL_SPI_Transmit>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1f6      	bne.n	8000670 <Write_Data+0x20>
  
  OLED_DC(GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2140      	movs	r1, #64	; 0x40
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <Write_Data+0x50>)
 8000688:	f003 fa82 	bl	8003b90 <HAL_GPIO_WritePin>
		hwData <<= 1;
	}
  
#endif
  
  OLED_CS(GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2110      	movs	r1, #16
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <Write_Data+0x50>)
 8000692:	f003 fa7d 	bl	8003b90 <HAL_GPIO_WritePin>
  
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40020000 	.word	0x40020000
 80006a4:	20003fa0 	.word	0x20003fa0

080006a8 <Write_Data_ptr>:

void Write_Data_ptr(uint8_t* dat_p, uint16_t length) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	807b      	strh	r3, [r7, #2]
  
  OLED_CS(GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2110      	movs	r1, #16
 80006b8:	480f      	ldr	r0, [pc, #60]	; (80006f8 <Write_Data_ptr+0x50>)
 80006ba:	f003 fa69 	bl	8003b90 <HAL_GPIO_WritePin>
  
#if INTERFACE_4WIRE_SPI
  
  OLED_DC(GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	2140      	movs	r1, #64	; 0x40
 80006c2:	480d      	ldr	r0, [pc, #52]	; (80006f8 <Write_Data_ptr+0x50>)
 80006c4:	f003 fa64 	bl	8003b90 <HAL_GPIO_WritePin>
  
  while(HAL_SPI_Transmit(&hspi1,dat_p,length,0x10) != HAL_OK);
 80006c8:	bf00      	nop
 80006ca:	887a      	ldrh	r2, [r7, #2]
 80006cc:	2310      	movs	r3, #16
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	480a      	ldr	r0, [pc, #40]	; (80006fc <Write_Data_ptr+0x54>)
 80006d2:	f004 f89c 	bl	800480e <HAL_SPI_Transmit>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1f6      	bne.n	80006ca <Write_Data_ptr+0x22>
  
  OLED_DC(GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2140      	movs	r1, #64	; 0x40
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <Write_Data_ptr+0x50>)
 80006e2:	f003 fa55 	bl	8003b90 <HAL_GPIO_WritePin>
      hwData <<= 1;
    }
  }
#endif
  
  OLED_CS(GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2110      	movs	r1, #16
 80006ea:	4803      	ldr	r0, [pc, #12]	; (80006f8 <Write_Data_ptr+0x50>)
 80006ec:	f003 fa50 	bl	8003b90 <HAL_GPIO_WritePin>
  
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40020000 	.word	0x40020000
 80006fc:	20003fa0 	.word	0x20003fa0

08000700 <RAM_Address>:


void RAM_Address(void)  {
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  
  Write_Command(0x15);
 8000704:	2015      	movs	r0, #21
 8000706:	f7ff ff77 	bl	80005f8 <Write_Command>
  Write_Data(0x00);
 800070a:	2000      	movs	r0, #0
 800070c:	f7ff ffa0 	bl	8000650 <Write_Data>
  Write_Data(0x7f);
 8000710:	207f      	movs	r0, #127	; 0x7f
 8000712:	f7ff ff9d 	bl	8000650 <Write_Data>

  Write_Command(0x75);
 8000716:	2075      	movs	r0, #117	; 0x75
 8000718:	f7ff ff6e 	bl	80005f8 <Write_Command>
  Write_Data(0x00);
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff ff97 	bl	8000650 <Write_Data>
  Write_Data(0x7f);
 8000722:	207f      	movs	r0, #127	; 0x7f
 8000724:	f7ff ff94 	bl	8000650 <Write_Data>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <Clear_Screen>:


void Clear_Screen(void)  {
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
  
  int i,j;
  
  uint8_t clear_byte[] = {0x00, 0x00};
 8000732:	2300      	movs	r3, #0
 8000734:	80bb      	strh	r3, [r7, #4]
  RAM_Address();
 8000736:	f7ff ffe3 	bl	8000700 <RAM_Address>
  Write_Command(0x5C);
 800073a:	205c      	movs	r0, #92	; 0x5c
 800073c:	f7ff ff5c 	bl	80005f8 <Write_Command>
  for(i=0;i<128;i++)  {
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	e010      	b.n	8000768 <Clear_Screen+0x3c>
    for(j=0;j<128;j++)  {
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	e007      	b.n	800075c <Clear_Screen+0x30>
      Write_Data_ptr(clear_byte,2);//RAM data clear
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2102      	movs	r1, #2
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ffa9 	bl	80006a8 <Write_Data_ptr>
    for(j=0;j<128;j++)  {
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	3301      	adds	r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	2b7f      	cmp	r3, #127	; 0x7f
 8000760:	ddf4      	ble.n	800074c <Clear_Screen+0x20>
  for(i=0;i<128;i++)  {
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3301      	adds	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2b7f      	cmp	r3, #127	; 0x7f
 800076c:	ddeb      	ble.n	8000746 <Clear_Screen+0x1a>
    }
  }
}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <Set_Address>:
  Write_Data(y);
  Write_Data(SSD1351_HEIGHT-1);
  Write_Command(SSD1351_CMD_WRITERAM);
}
  
void Set_Address(uint8_t column, uint8_t row)  {
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	460a      	mov	r2, r1
 8000782:	71fb      	strb	r3, [r7, #7]
 8000784:	4613      	mov	r3, r2
 8000786:	71bb      	strb	r3, [r7, #6]
  
  Write_Command(SSD1351_CMD_SETCOLUMN);  
 8000788:	2015      	movs	r0, #21
 800078a:	f7ff ff35 	bl	80005f8 <Write_Command>
  Write_Data(column);	//X start 
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff5d 	bl	8000650 <Write_Data>
  Write_Data(column);	//X end 
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff59 	bl	8000650 <Write_Data>
  Write_Command(SSD1351_CMD_SETROW); 
 800079e:	2075      	movs	r0, #117	; 0x75
 80007a0:	f7ff ff2a 	bl	80005f8 <Write_Command>
  Write_Data(row);	//Y start 
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ff52 	bl	8000650 <Write_Data>
  Write_Data(row+7);	//Y end 
 80007ac:	79bb      	ldrb	r3, [r7, #6]
 80007ae:	3307      	adds	r3, #7
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff4c 	bl	8000650 <Write_Data>
  Write_Command(SSD1351_CMD_WRITERAM); 
 80007b8:	205c      	movs	r0, #92	; 0x5c
 80007ba:	f7ff ff1d 	bl	80005f8 <Write_Command>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <Write_text>:
  
void Write_text(uint8_t dat) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
    
  uint8_t i;
    
  for(i=0;i<8;i++)  {
 80007d2:	2300      	movs	r3, #0
 80007d4:	73fb      	strb	r3, [r7, #15]
 80007d6:	e015      	b.n	8000804 <Write_text+0x3c>
    if (dat & 0x01)	
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d004      	beq.n	80007ec <Write_text+0x24>
      Write_Data_ptr(color_byte,2);
 80007e2:	2102      	movs	r1, #2
 80007e4:	480b      	ldr	r0, [pc, #44]	; (8000814 <Write_text+0x4c>)
 80007e6:	f7ff ff5f 	bl	80006a8 <Write_Data_ptr>
 80007ea:	e005      	b.n	80007f8 <Write_text+0x30>
    else  {
      Write_Data(0x00);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f7ff ff2f 	bl	8000650 <Write_Data>
      Write_Data(0x00);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f7ff ff2c 	bl	8000650 <Write_Data>
    }
    dat >>= 1;
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	085b      	lsrs	r3, r3, #1
 80007fc:	71fb      	strb	r3, [r7, #7]
  for(i=0;i<8;i++)  {
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	3301      	adds	r3, #1
 8000802:	73fb      	strb	r3, [r7, #15]
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	2b07      	cmp	r3, #7
 8000808:	d9e6      	bls.n	80007d8 <Write_text+0x10>
  }
}
 800080a:	bf00      	nop
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20003f80 	.word	0x20003f80

08000818 <Device_Init>:
  Write_Data_ptr(color_byte,2);
  
}
  
  
void Device_Init(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit(&hspi1);
  SPI_GPIO_Init();

#endif

  OLED_CS(GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2110      	movs	r1, #16
 8000820:	4854      	ldr	r0, [pc, #336]	; (8000974 <Device_Init+0x15c>)
 8000822:	f003 f9b5 	bl	8003b90 <HAL_GPIO_WritePin>

  OLED_RST(GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2110      	movs	r1, #16
 800082a:	4853      	ldr	r0, [pc, #332]	; (8000978 <Device_Init+0x160>)
 800082c:	f003 f9b0 	bl	8003b90 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000830:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000834:	f002 fc28 	bl	8003088 <HAL_Delay>
  OLED_RST(GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2110      	movs	r1, #16
 800083c:	484e      	ldr	r0, [pc, #312]	; (8000978 <Device_Init+0x160>)
 800083e:	f003 f9a7 	bl	8003b90 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000842:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000846:	f002 fc1f 	bl	8003088 <HAL_Delay>
    
  Write_Command(0xfd);	// command lock
 800084a:	20fd      	movs	r0, #253	; 0xfd
 800084c:	f7ff fed4 	bl	80005f8 <Write_Command>
  Write_Data(0x12);
 8000850:	2012      	movs	r0, #18
 8000852:	f7ff fefd 	bl	8000650 <Write_Data>
  Write_Command(0xfd);	// command lock
 8000856:	20fd      	movs	r0, #253	; 0xfd
 8000858:	f7ff fece 	bl	80005f8 <Write_Command>
  Write_Data(0xB1);
 800085c:	20b1      	movs	r0, #177	; 0xb1
 800085e:	f7ff fef7 	bl	8000650 <Write_Data>

  Write_Command(0xae);	// display off
 8000862:	20ae      	movs	r0, #174	; 0xae
 8000864:	f7ff fec8 	bl	80005f8 <Write_Command>
  Write_Command(0xa4); 	// Normal Display mode
 8000868:	20a4      	movs	r0, #164	; 0xa4
 800086a:	f7ff fec5 	bl	80005f8 <Write_Command>

  Write_Command(0x15);	//set column address
 800086e:	2015      	movs	r0, #21
 8000870:	f7ff fec2 	bl	80005f8 <Write_Command>
  Write_Data(0x00);     //column address start 00
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff feeb 	bl	8000650 <Write_Data>
  Write_Data(0x7f);     //column address end 95
 800087a:	207f      	movs	r0, #127	; 0x7f
 800087c:	f7ff fee8 	bl	8000650 <Write_Data>
  Write_Command(0x75);	//set row address
 8000880:	2075      	movs	r0, #117	; 0x75
 8000882:	f7ff feb9 	bl	80005f8 <Write_Command>
  Write_Data(0x00);     //row address start 00
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff fee2 	bl	8000650 <Write_Data>
  Write_Data(0x7f);     //row address end 63	
 800088c:	207f      	movs	r0, #127	; 0x7f
 800088e:	f7ff fedf 	bl	8000650 <Write_Data>

  Write_Command(0xB3);
 8000892:	20b3      	movs	r0, #179	; 0xb3
 8000894:	f7ff feb0 	bl	80005f8 <Write_Command>
  Write_Data(0xF1);
 8000898:	20f1      	movs	r0, #241	; 0xf1
 800089a:	f7ff fed9 	bl	8000650 <Write_Data>

  Write_Command(0xCA);	
 800089e:	20ca      	movs	r0, #202	; 0xca
 80008a0:	f7ff feaa 	bl	80005f8 <Write_Command>
  Write_Data(0x7F);
 80008a4:	207f      	movs	r0, #127	; 0x7f
 80008a6:	f7ff fed3 	bl	8000650 <Write_Data>

  Write_Command(0xa0);  //set re-map & data format
 80008aa:	20a0      	movs	r0, #160	; 0xa0
 80008ac:	f7ff fea4 	bl	80005f8 <Write_Command>
  Write_Data(0x74);     //Horizontal address increment
 80008b0:	2074      	movs	r0, #116	; 0x74
 80008b2:	f7ff fecd 	bl	8000650 <Write_Data>

  Write_Command(0xa1);  //set display start line
 80008b6:	20a1      	movs	r0, #161	; 0xa1
 80008b8:	f7ff fe9e 	bl	80005f8 <Write_Command>
  Write_Data(0x00);     //start 00 line
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fec7 	bl	8000650 <Write_Data>

  Write_Command(0xa2);  //set display offset
 80008c2:	20a2      	movs	r0, #162	; 0xa2
 80008c4:	f7ff fe98 	bl	80005f8 <Write_Command>
  Write_Data(0x00);
 80008c8:	2000      	movs	r0, #0
 80008ca:	f7ff fec1 	bl	8000650 <Write_Data>

  Write_Command(0xAB);	
 80008ce:	20ab      	movs	r0, #171	; 0xab
 80008d0:	f7ff fe92 	bl	80005f8 <Write_Command>
  Write_Command(0x01);	
 80008d4:	2001      	movs	r0, #1
 80008d6:	f7ff fe8f 	bl	80005f8 <Write_Command>

  Write_Command(0xB4);	
 80008da:	20b4      	movs	r0, #180	; 0xb4
 80008dc:	f7ff fe8c 	bl	80005f8 <Write_Command>
  Write_Data(0xA0);	  
 80008e0:	20a0      	movs	r0, #160	; 0xa0
 80008e2:	f7ff feb5 	bl	8000650 <Write_Data>
  Write_Data(0xB5);  
 80008e6:	20b5      	movs	r0, #181	; 0xb5
 80008e8:	f7ff feb2 	bl	8000650 <Write_Data>
  Write_Data(0x55);    
 80008ec:	2055      	movs	r0, #85	; 0x55
 80008ee:	f7ff feaf 	bl	8000650 <Write_Data>

  Write_Command(0xC1);	
 80008f2:	20c1      	movs	r0, #193	; 0xc1
 80008f4:	f7ff fe80 	bl	80005f8 <Write_Command>
  Write_Data(0xC8);	
 80008f8:	20c8      	movs	r0, #200	; 0xc8
 80008fa:	f7ff fea9 	bl	8000650 <Write_Data>
  Write_Data(0x80);
 80008fe:	2080      	movs	r0, #128	; 0x80
 8000900:	f7ff fea6 	bl	8000650 <Write_Data>
  Write_Data(0xC0);
 8000904:	20c0      	movs	r0, #192	; 0xc0
 8000906:	f7ff fea3 	bl	8000650 <Write_Data>

  Write_Command(0xC7);	
 800090a:	20c7      	movs	r0, #199	; 0xc7
 800090c:	f7ff fe74 	bl	80005f8 <Write_Command>
  Write_Data(0x0F);
 8000910:	200f      	movs	r0, #15
 8000912:	f7ff fe9d 	bl	8000650 <Write_Data>

  Write_Command(0xB1);	
 8000916:	20b1      	movs	r0, #177	; 0xb1
 8000918:	f7ff fe6e 	bl	80005f8 <Write_Command>
  Write_Data(0x32);
 800091c:	2032      	movs	r0, #50	; 0x32
 800091e:	f7ff fe97 	bl	8000650 <Write_Data>

  Write_Command(0xB2);	
 8000922:	20b2      	movs	r0, #178	; 0xb2
 8000924:	f7ff fe68 	bl	80005f8 <Write_Command>
  Write_Data(0xA4);
 8000928:	20a4      	movs	r0, #164	; 0xa4
 800092a:	f7ff fe91 	bl	8000650 <Write_Data>
  Write_Data(0x00);
 800092e:	2000      	movs	r0, #0
 8000930:	f7ff fe8e 	bl	8000650 <Write_Data>
  Write_Data(0x00);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff fe8b 	bl	8000650 <Write_Data>

  Write_Command(0xBB);	
 800093a:	20bb      	movs	r0, #187	; 0xbb
 800093c:	f7ff fe5c 	bl	80005f8 <Write_Command>
  Write_Data(0x17);
 8000940:	2017      	movs	r0, #23
 8000942:	f7ff fe85 	bl	8000650 <Write_Data>

  Write_Command(0xB6);
 8000946:	20b6      	movs	r0, #182	; 0xb6
 8000948:	f7ff fe56 	bl	80005f8 <Write_Command>
  Write_Data(0x01);
 800094c:	2001      	movs	r0, #1
 800094e:	f7ff fe7f 	bl	8000650 <Write_Data>

  Write_Command(0xBE);
 8000952:	20be      	movs	r0, #190	; 0xbe
 8000954:	f7ff fe50 	bl	80005f8 <Write_Command>
  Write_Data(0x05);
 8000958:	2005      	movs	r0, #5
 800095a:	f7ff fe79 	bl	8000650 <Write_Data>

  Write_Command(0xA6);
 800095e:	20a6      	movs	r0, #166	; 0xa6
 8000960:	f7ff fe4a 	bl	80005f8 <Write_Command>

  Clear_Screen();
 8000964:	f7ff fee2 	bl	800072c <Clear_Screen>
  Write_Command(0xaf);	 //display on
 8000968:	20af      	movs	r0, #175	; 0xaf
 800096a:	f7ff fe45 	bl	80005f8 <Write_Command>
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40020000 	.word	0x40020000
 8000978:	40020800 	.word	0x40020800

0800097c <print_String>:
  
void Set_FontSize(FONT_SIZE size) {
  Font_Size = size;
}
  
void print_String(uint8_t x, uint8_t y, const uint8_t *text, FONT_SIZE size)  {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	603a      	str	r2, [r7, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
 800098a:	460b      	mov	r3, r1
 800098c:	71bb      	strb	r3, [r7, #6]
 800098e:	4613      	mov	r3, r2
 8000990:	717b      	strb	r3, [r7, #5]
  
  Font_Size = size;
 8000992:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <print_String+0x50>)
 8000994:	797b      	ldrb	r3, [r7, #5]
 8000996:	7013      	strb	r3, [r2, #0]
  
  if(Font_Size == FONT_5X8)
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <print_String+0x50>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d106      	bne.n	80009ae <print_String+0x32>
    Display_String_5x8(x, y, text);
 80009a0:	79b9      	ldrb	r1, [r7, #6]
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	683a      	ldr	r2, [r7, #0]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f87a 	bl	8000aa0 <Display_String_5x8>
  else if(Font_Size == FONT_8X16)
    Display_String_8x16(x, y, text);
  
}
 80009ac:	e009      	b.n	80009c2 <print_String+0x46>
  else if(Font_Size == FONT_8X16)
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <print_String+0x50>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d105      	bne.n	80009c2 <print_String+0x46>
    Display_String_8x16(x, y, text);
 80009b6:	79b9      	ldrb	r1, [r7, #6]
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	683a      	ldr	r2, [r7, #0]
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 f807 	bl	80009d0 <Display_String_8x16>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000098 	.word	0x20000098

080009d0 <Display_String_8x16>:

void Display_String_8x16(uint8_t x, uint8_t y, const uint8_t *text) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	603a      	str	r2, [r7, #0]
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	460b      	mov	r3, r1
 80009de:	71bb      	strb	r3, [r7, #6]
  
  uint16_t i=0,j,k,n;
 80009e0:	2300      	movs	r3, #0
 80009e2:	81fb      	strh	r3, [r7, #14]
  if(x>120)  {
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	2b78      	cmp	r3, #120	; 0x78
 80009e8:	d94d      	bls.n	8000a86 <Display_String_8x16+0xb6>
    x=1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	71fb      	strb	r3, [r7, #7]
  }
  while(text[i]>0x00) {
 80009ee:	e04a      	b.n	8000a86 <Display_String_8x16+0xb6>
    if((text[i]>=0x20)&&(text[i]<=0x7e))  {
 80009f0:	89fb      	ldrh	r3, [r7, #14]
 80009f2:	683a      	ldr	r2, [r7, #0]
 80009f4:	4413      	add	r3, r2
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b1f      	cmp	r3, #31
 80009fa:	d941      	bls.n	8000a80 <Display_String_8x16+0xb0>
 80009fc:	89fb      	ldrh	r3, [r7, #14]
 80009fe:	683a      	ldr	r2, [r7, #0]
 8000a00:	4413      	add	r3, r2
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b7e      	cmp	r3, #126	; 0x7e
 8000a06:	d83b      	bhi.n	8000a80 <Display_String_8x16+0xb0>
      j=text[i]-0x20;
 8000a08:	89fb      	ldrh	r3, [r7, #14]
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	3b20      	subs	r3, #32
 8000a14:	813b      	strh	r3, [r7, #8]
      for(n=0;n<2;n++)  {
 8000a16:	2300      	movs	r3, #0
 8000a18:	817b      	strh	r3, [r7, #10]
 8000a1a:	e027      	b.n	8000a6c <Display_String_8x16+0x9c>
        for(k=0;k<8;k++)  {
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	81bb      	strh	r3, [r7, #12]
 8000a20:	e01e      	b.n	8000a60 <Display_String_8x16+0x90>
          Set_Address(x+k, n*8+y);
 8000a22:	89bb      	ldrh	r3, [r7, #12]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	4413      	add	r3, r2
 8000a2a:	b2d8      	uxtb	r0, r3
 8000a2c:	897b      	ldrh	r3, [r7, #10]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	79bb      	ldrb	r3, [r7, #6]
 8000a36:	4413      	add	r3, r2
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f7ff fe9c 	bl	8000778 <Set_Address>
          Write_text(ascii_table_8x16[j][k+8*n]);
 8000a40:	893a      	ldrh	r2, [r7, #8]
 8000a42:	89b9      	ldrh	r1, [r7, #12]
 8000a44:	897b      	ldrh	r3, [r7, #10]
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	440b      	add	r3, r1
 8000a4a:	4914      	ldr	r1, [pc, #80]	; (8000a9c <Display_String_8x16+0xcc>)
 8000a4c:	0112      	lsls	r2, r2, #4
 8000a4e:	440a      	add	r2, r1
 8000a50:	4413      	add	r3, r2
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff feb7 	bl	80007c8 <Write_text>
        for(k=0;k<8;k++)  {
 8000a5a:	89bb      	ldrh	r3, [r7, #12]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	81bb      	strh	r3, [r7, #12]
 8000a60:	89bb      	ldrh	r3, [r7, #12]
 8000a62:	2b07      	cmp	r3, #7
 8000a64:	d9dd      	bls.n	8000a22 <Display_String_8x16+0x52>
      for(n=0;n<2;n++)  {
 8000a66:	897b      	ldrh	r3, [r7, #10]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	817b      	strh	r3, [r7, #10]
 8000a6c:	897b      	ldrh	r3, [r7, #10]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d9d4      	bls.n	8000a1c <Display_String_8x16+0x4c>
        }
      }
      i++;
 8000a72:	89fb      	ldrh	r3, [r7, #14]
 8000a74:	3301      	adds	r3, #1
 8000a76:	81fb      	strh	r3, [r7, #14]
      x+=8;
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	3308      	adds	r3, #8
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	e002      	b.n	8000a86 <Display_String_8x16+0xb6>
    }
    else
      i++;
 8000a80:	89fb      	ldrh	r3, [r7, #14]
 8000a82:	3301      	adds	r3, #1
 8000a84:	81fb      	strh	r3, [r7, #14]
  while(text[i]>0x00) {
 8000a86:	89fb      	ldrh	r3, [r7, #14]
 8000a88:	683a      	ldr	r2, [r7, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d1ae      	bne.n	80009f0 <Display_String_8x16+0x20>
  }
}
 8000a92:	bf00      	nop
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	08009220 	.word	0x08009220

08000aa0 <Display_String_5x8>:

void Display_String_5x8(uint8_t x, uint8_t y, const uint8_t *text)  {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	603a      	str	r2, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	460b      	mov	r3, r1
 8000aae:	71bb      	strb	r3, [r7, #6]
  
  uint8_t i=0,j,k;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	73fb      	strb	r3, [r7, #15]

  while(text[i]>0x00) {	
 8000ab4:	e04a      	b.n	8000b4c <Display_String_5x8+0xac>
    if((text[i]>=0x20)&&(text[i]<=0x7e))  {
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	683a      	ldr	r2, [r7, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b1f      	cmp	r3, #31
 8000ac0:	d941      	bls.n	8000b46 <Display_String_5x8+0xa6>
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	683a      	ldr	r2, [r7, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b7e      	cmp	r3, #126	; 0x7e
 8000acc:	d83b      	bhi.n	8000b46 <Display_String_5x8+0xa6>
      j=text[i]-0x20;
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	683a      	ldr	r2, [r7, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	3b20      	subs	r3, #32
 8000ad8:	737b      	strb	r3, [r7, #13]
      for(k=0; k<5;k++)  {
 8000ada:	2300      	movs	r3, #0
 8000adc:	73bb      	strb	r3, [r7, #14]
 8000ade:	e017      	b.n	8000b10 <Display_String_5x8+0x70>
        Set_Address(x+k, y);
 8000ae0:	79fa      	ldrb	r2, [r7, #7]
 8000ae2:	7bbb      	ldrb	r3, [r7, #14]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	79ba      	ldrb	r2, [r7, #6]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fe43 	bl	8000778 <Set_Address>
        Write_text(ascii_table_5x8[j][k]);
 8000af2:	7b7a      	ldrb	r2, [r7, #13]
 8000af4:	7bb9      	ldrb	r1, [r7, #14]
 8000af6:	481b      	ldr	r0, [pc, #108]	; (8000b64 <Display_String_5x8+0xc4>)
 8000af8:	4613      	mov	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	4403      	add	r3, r0
 8000b00:	440b      	add	r3, r1
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fe5f 	bl	80007c8 <Write_text>
      for(k=0; k<5;k++)  {
 8000b0a:	7bbb      	ldrb	r3, [r7, #14]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	73bb      	strb	r3, [r7, #14]
 8000b10:	7bbb      	ldrb	r3, [r7, #14]
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	d9e4      	bls.n	8000ae0 <Display_String_5x8+0x40>
      }
      Set_Address(x+5, y);   
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	3305      	adds	r3, #5
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	79ba      	ldrb	r2, [r7, #6]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fe29 	bl	8000778 <Set_Address>
      Write_text(0x00);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff fe4e 	bl	80007c8 <Write_text>
      i++;
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	73fb      	strb	r3, [r7, #15]
      x+=6;
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	3306      	adds	r3, #6
 8000b36:	71fb      	strb	r3, [r7, #7]
      if(x>=128)
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	da05      	bge.n	8000b4c <Display_String_5x8+0xac>
        x=1;
 8000b40:	2301      	movs	r3, #1
 8000b42:	71fb      	strb	r3, [r7, #7]
      if(x>=128)
 8000b44:	e002      	b.n	8000b4c <Display_String_5x8+0xac>
    }
    else  
      i++;
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	73fb      	strb	r3, [r7, #15]
  while(text[i]>0x00) {	
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	683a      	ldr	r2, [r7, #0]
 8000b50:	4413      	add	r3, r2
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1ae      	bne.n	8000ab6 <Display_String_5x8+0x16>
  }
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	08009810 	.word	0x08009810

08000b68 <Fill_Rect>:
/**************************************************************************/
/*!
    @brief  Draws a filled rectangle using HW acceleration
*/
/**************************************************************************/
void Fill_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	4608      	mov	r0, r1
 8000b72:	4611      	mov	r1, r2
 8000b74:	461a      	mov	r2, r3
 8000b76:	4623      	mov	r3, r4
 8000b78:	80fb      	strh	r3, [r7, #6]
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	80bb      	strh	r3, [r7, #4]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	807b      	strh	r3, [r7, #2]
 8000b82:	4613      	mov	r3, r2
 8000b84:	803b      	strh	r3, [r7, #0]

  if ((x >= SSD1351_WIDTH) || (y >= SSD1351_HEIGHT))
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	2b7f      	cmp	r3, #127	; 0x7f
 8000b8a:	d84f      	bhi.n	8000c2c <Fill_Rect+0xc4>
 8000b8c:	88bb      	ldrh	r3, [r7, #4]
 8000b8e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b90:	d84c      	bhi.n	8000c2c <Fill_Rect+0xc4>
  return;

  // Y bounds check
  if (y+h > SSD1351_HEIGHT) {
 8000b92:	88ba      	ldrh	r2, [r7, #4]
 8000b94:	883b      	ldrh	r3, [r7, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	2b80      	cmp	r3, #128	; 0x80
 8000b9a:	dd03      	ble.n	8000ba4 <Fill_Rect+0x3c>
    h = SSD1351_HEIGHT - y - 1;
 8000b9c:	88bb      	ldrh	r3, [r7, #4]
 8000b9e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000ba2:	803b      	strh	r3, [r7, #0]
  }

  // X bounds check
  if (x+w > SSD1351_WIDTH)  {
 8000ba4:	88fa      	ldrh	r2, [r7, #6]
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	4413      	add	r3, r2
 8000baa:	2b80      	cmp	r3, #128	; 0x80
 8000bac:	dd03      	ble.n	8000bb6 <Fill_Rect+0x4e>
    w = SSD1351_WIDTH - x - 1;
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000bb4:	807b      	strh	r3, [r7, #2]
  }

  // set location
  Write_Command(SSD1351_CMD_SETCOLUMN);
 8000bb6:	2015      	movs	r0, #21
 8000bb8:	f7ff fd1e 	bl	80005f8 <Write_Command>
  Write_Data(x);
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fd45 	bl	8000650 <Write_Data>
  Write_Data(x+w-1);
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	887b      	ldrh	r3, [r7, #2]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	4413      	add	r3, r2
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fd3a 	bl	8000650 <Write_Data>
  Write_Command(SSD1351_CMD_SETROW);
 8000bdc:	2075      	movs	r0, #117	; 0x75
 8000bde:	f7ff fd0b 	bl	80005f8 <Write_Command>
  Write_Data(y);
 8000be2:	88bb      	ldrh	r3, [r7, #4]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fd32 	bl	8000650 <Write_Data>
  Write_Data(y+h-1);
 8000bec:	88bb      	ldrh	r3, [r7, #4]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	883b      	ldrh	r3, [r7, #0]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4413      	add	r3, r2
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fd27 	bl	8000650 <Write_Data>
  // fill!
  Write_Command(SSD1351_CMD_WRITERAM);  
 8000c02:	205c      	movs	r0, #92	; 0x5c
 8000c04:	f7ff fcf8 	bl	80005f8 <Write_Command>
  
  for (uint16_t i=0; i < w*h; i++) {
 8000c08:	2300      	movs	r3, #0
 8000c0a:	81fb      	strh	r3, [r7, #14]
 8000c0c:	e006      	b.n	8000c1c <Fill_Rect+0xb4>
    Write_Data_ptr(color_fill_byte,2);
 8000c0e:	2102      	movs	r1, #2
 8000c10:	4808      	ldr	r0, [pc, #32]	; (8000c34 <Fill_Rect+0xcc>)
 8000c12:	f7ff fd49 	bl	80006a8 <Write_Data_ptr>
  for (uint16_t i=0; i < w*h; i++) {
 8000c16:	89fb      	ldrh	r3, [r7, #14]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	81fb      	strh	r3, [r7, #14]
 8000c1c:	89fa      	ldrh	r2, [r7, #14]
 8000c1e:	887b      	ldrh	r3, [r7, #2]
 8000c20:	8839      	ldrh	r1, [r7, #0]
 8000c22:	fb01 f303 	mul.w	r3, r1, r3
 8000c26:	429a      	cmp	r2, r3
 8000c28:	dbf1      	blt.n	8000c0e <Fill_Rect+0xa6>
 8000c2a:	e000      	b.n	8000c2e <Fill_Rect+0xc6>
  return;
 8000c2c:	bf00      	nop
  }
}
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd90      	pop	{r4, r7, pc}
 8000c34:	20003f7c 	.word	0x20003f7c

08000c38 <handler_oled>:
 *              commands
 * 
 * @param       parameters 
 * ************************************************************* **/
static void handler_oled(void* parameters)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
 8000c40:	f005 fd38 	bl	80066b4 <xTaskGetTickCount>
 8000c44:	4603      	mov	r3, r0
 8000c46:	60fb      	str	r3, [r7, #12]

    while(1)
    {
        /* check and update btn */
        xQueueReceive(QueueHandle_btn, &button, 0);
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <handler_oled+0x34>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4908      	ldr	r1, [pc, #32]	; (8000c70 <handler_oled+0x38>)
 8000c50:	4618      	mov	r0, r3
 8000c52:	f004 ffed 	bl	8005c30 <xQueueReceive>

        /* refresh the page */
        oled.OLED_GUI_MENU(); 
 8000c56:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <handler_oled+0x3c>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	4798      	blx	r3

        /* define the refresh rate of the screen */
        vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(OLED_DEFAULT_PERIOD_TASK));
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	2164      	movs	r1, #100	; 0x64
 8000c62:	4618      	mov	r0, r3
 8000c64:	f005 fb78 	bl	8006358 <xTaskDelayUntil>
        xQueueReceive(QueueHandle_btn, &button, 0);
 8000c68:	e7ee      	b.n	8000c48 <handler_oled+0x10>
 8000c6a:	bf00      	nop
 8000c6c:	20003f84 	.word	0x20003f84
 8000c70:	20000099 	.word	0x20000099
 8000c74:	200000a0 	.word	0x200000a0

08000c78 <OLED_GUI_BTN_UP>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
static void OLED_GUI_BTN_UP(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
    oled.line_pointer = (oled.line_pointer >= oled.max_pointer) ? oled.max_pointer : oled.line_pointer +1;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <OLED_GUI_BTN_UP+0x2c>)
 8000c7e:	785a      	ldrb	r2, [r3, #1]
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <OLED_GUI_BTN_UP+0x2c>)
 8000c82:	78db      	ldrb	r3, [r3, #3]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d302      	bcc.n	8000c8e <OLED_GUI_BTN_UP+0x16>
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <OLED_GUI_BTN_UP+0x2c>)
 8000c8a:	78db      	ldrb	r3, [r3, #3]
 8000c8c:	e003      	b.n	8000c96 <OLED_GUI_BTN_UP+0x1e>
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <OLED_GUI_BTN_UP+0x2c>)
 8000c90:	785b      	ldrb	r3, [r3, #1]
 8000c92:	3301      	adds	r3, #1
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	4a03      	ldr	r2, [pc, #12]	; (8000ca4 <OLED_GUI_BTN_UP+0x2c>)
 8000c98:	7053      	strb	r3, [r2, #1]
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	200000a0 	.word	0x200000a0

08000ca8 <OLED_GUI_BTN_DOWN>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
static void OLED_GUI_BTN_DOWN(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
    oled.line_pointer = (oled.line_pointer <= oled.min_pointer) ? oled.min_pointer : oled.line_pointer -1;
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <OLED_GUI_BTN_DOWN+0x2c>)
 8000cae:	785a      	ldrb	r2, [r3, #1]
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <OLED_GUI_BTN_DOWN+0x2c>)
 8000cb2:	789b      	ldrb	r3, [r3, #2]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d802      	bhi.n	8000cbe <OLED_GUI_BTN_DOWN+0x16>
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <OLED_GUI_BTN_DOWN+0x2c>)
 8000cba:	789b      	ldrb	r3, [r3, #2]
 8000cbc:	e003      	b.n	8000cc6 <OLED_GUI_BTN_DOWN+0x1e>
 8000cbe:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <OLED_GUI_BTN_DOWN+0x2c>)
 8000cc0:	785b      	ldrb	r3, [r3, #1]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4a03      	ldr	r2, [pc, #12]	; (8000cd4 <OLED_GUI_BTN_DOWN+0x2c>)
 8000cc8:	7053      	strb	r3, [r2, #1]
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	200000a0 	.word	0x200000a0

08000cd8 <OLED_GUI_BTN_OK>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
static void OLED_GUI_BTN_OK(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
    switch (oled.line_pointer)
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <OLED_GUI_BTN_OK+0x70>)
 8000cde:	785b      	ldrb	r3, [r3, #1]
 8000ce0:	2b09      	cmp	r3, #9
 8000ce2:	d82b      	bhi.n	8000d3c <OLED_GUI_BTN_OK+0x64>
 8000ce4:	a201      	add	r2, pc, #4	; (adr r2, 8000cec <OLED_GUI_BTN_OK+0x14>)
 8000ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cea:	bf00      	nop
 8000cec:	08000d3d 	.word	0x08000d3d
 8000cf0:	08000d15 	.word	0x08000d15
 8000cf4:	08000d1d 	.word	0x08000d1d
 8000cf8:	08000d25 	.word	0x08000d25
 8000cfc:	08000d2d 	.word	0x08000d2d
 8000d00:	08000d35 	.word	0x08000d35
 8000d04:	08000d3d 	.word	0x08000d3d
 8000d08:	08000d3d 	.word	0x08000d3d
 8000d0c:	08000d3d 	.word	0x08000d3d
 8000d10:	08000d3d 	.word	0x08000d3d
    {
        case E_HMI_OLED_LINE_0: break;
        case E_HMI_OLED_LINE_1: oled.OLED_GUI_MENU = OLED_GUI_MONITORING; break;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <OLED_GUI_BTN_OK+0x70>)
 8000d16:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <OLED_GUI_BTN_OK+0x74>)
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	e010      	b.n	8000d3e <OLED_GUI_BTN_OK+0x66>
        case E_HMI_OLED_LINE_2: oled.OLED_GUI_MENU = OLED_GUI_STATUS; break;
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <OLED_GUI_BTN_OK+0x70>)
 8000d1e:	4a0c      	ldr	r2, [pc, #48]	; (8000d50 <OLED_GUI_BTN_OK+0x78>)
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	e00c      	b.n	8000d3e <OLED_GUI_BTN_OK+0x66>
        case E_HMI_OLED_LINE_3: oled.OLED_GUI_MENU = OLED_GUI_DATA; break;
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <OLED_GUI_BTN_OK+0x70>)
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <OLED_GUI_BTN_OK+0x7c>)
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	e008      	b.n	8000d3e <OLED_GUI_BTN_OK+0x66>
        case E_HMI_OLED_LINE_4: oled.OLED_GUI_MENU = OLED_GUI_SLEEP; break;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <OLED_GUI_BTN_OK+0x70>)
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <OLED_GUI_BTN_OK+0x80>)
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	e004      	b.n	8000d3e <OLED_GUI_BTN_OK+0x66>
        case E_HMI_OLED_LINE_5: oled.OLED_GUI_MENU = OLED_GUI_RESET; break;
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <OLED_GUI_BTN_OK+0x70>)
 8000d36:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <OLED_GUI_BTN_OK+0x84>)
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	e000      	b.n	8000d3e <OLED_GUI_BTN_OK+0x66>
        case E_HMI_OLED_LINE_6: break;
        case E_HMI_OLED_LINE_7: break;
        case E_HMI_OLED_LINE_8: break;
        case E_HMI_OLED_LINE_9: break;
        default: break;
 8000d3c:	bf00      	nop
    }
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	200000a0 	.word	0x200000a0
 8000d4c:	08000fa1 	.word	0x08000fa1
 8000d50:	08001065 	.word	0x08001065
 8000d54:	08001185 	.word	0x08001185
 8000d58:	080011c1 	.word	0x080011c1
 8000d5c:	08001219 	.word	0x08001219

08000d60 <OLED_GUI_BTN_RETURN>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
static void OLED_GUI_BTN_RETURN(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
    oled.OLED_GUI_MENU = OLED_GUI_MAIN;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <OLED_GUI_BTN_RETURN+0x20>)
 8000d66:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <OLED_GUI_BTN_RETURN+0x24>)
 8000d68:	605a      	str	r2, [r3, #4]
    oled.menu_flag = E_HMI_OLED_MENU_NEW;
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <OLED_GUI_BTN_RETURN+0x20>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
    button = E_BTN_NONE;
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <OLED_GUI_BTN_RETURN+0x28>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	200000a0 	.word	0x200000a0
 8000d84:	08000e11 	.word	0x08000e11
 8000d88:	20000099 	.word	0x20000099

08000d8c <OLED_GUI_START>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
static void OLED_GUI_START(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
    if(oled.menu_flag == E_HMI_OLED_MENU_NEW)
 8000d90:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <OLED_GUI_START+0x6c>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d11d      	bne.n	8000dd4 <OLED_GUI_START+0x48>
    {
        //seeting for the menu
        oled.line_pointer = E_HMI_OLED_LINE_0;
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <OLED_GUI_START+0x6c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	705a      	strb	r2, [r3, #1]
        oled.min_pointer  = E_HMI_OLED_LINE_0;
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <OLED_GUI_START+0x6c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	709a      	strb	r2, [r3, #2]
        oled.max_pointer  = E_HMI_OLED_LINE_0;
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <OLED_GUI_START+0x6c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	70da      	strb	r2, [r3, #3]
        oled.menu_flag    = E_HMI_OLED_MENU_OLD;
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <OLED_GUI_START+0x6c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]

        Clear_Screen();
 8000db0:	f7ff fcbc 	bl	800072c <Clear_Screen>
        Set_Color(WHITE);
 8000db4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000db8:	f7ff fc06 	bl	80005c8 <Set_Color>
        print_String(0, 0, (const uint8_t*)"Hello World !", FONT_5X8);
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4a0f      	ldr	r2, [pc, #60]	; (8000dfc <OLED_GUI_START+0x70>)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f7ff fdda 	bl	800097c <print_String>
        print_String(0, 15, (const uint8_t*)"Waiting for SEQ ready...", FONT_5X8);
 8000dc8:	2300      	movs	r3, #0
 8000dca:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <OLED_GUI_START+0x74>)
 8000dcc:	210f      	movs	r1, #15
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f7ff fdd4 	bl	800097c <print_String>
    }

    /* print the image */
    /* wait for seq */
    if(!strcmp((char*)uart_data->APP.PHASE, "wait"))
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <OLED_GUI_START+0x78>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	490b      	ldr	r1, [pc, #44]	; (8000e08 <OLED_GUI_START+0x7c>)
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fa18 	bl	8000210 <strcmp>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d105      	bne.n	8000df2 <OLED_GUI_START+0x66>
    {
        oled.OLED_GUI_MENU = OLED_GUI_MAIN;
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <OLED_GUI_START+0x6c>)
 8000de8:	4a08      	ldr	r2, [pc, #32]	; (8000e0c <OLED_GUI_START+0x80>)
 8000dea:	605a      	str	r2, [r3, #4]
        oled.menu_flag = E_HMI_OLED_MENU_NEW;
 8000dec:	4b02      	ldr	r3, [pc, #8]	; (8000df8 <OLED_GUI_START+0x6c>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
    }
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000a0 	.word	0x200000a0
 8000dfc:	08008e54 	.word	0x08008e54
 8000e00:	08008e64 	.word	0x08008e64
 8000e04:	2000009c 	.word	0x2000009c
 8000e08:	08008e80 	.word	0x08008e80
 8000e0c:	08000e11 	.word	0x08000e11

08000e10 <OLED_GUI_MAIN>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
static void OLED_GUI_MAIN(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	static ENUM_HMI_OLED_POINTER_t last_pointer = E_HMI_OLED_LINE_1;

    if(oled.menu_flag == E_HMI_OLED_MENU_NEW)
 8000e14:	4b58      	ldr	r3, [pc, #352]	; (8000f78 <OLED_GUI_MAIN+0x168>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d13b      	bne.n	8000e94 <OLED_GUI_MAIN+0x84>
    {
        //seeting for the menu
        oled.line_pointer = E_HMI_OLED_LINE_1;
 8000e1c:	4b56      	ldr	r3, [pc, #344]	; (8000f78 <OLED_GUI_MAIN+0x168>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	705a      	strb	r2, [r3, #1]
        oled.min_pointer  = E_HMI_OLED_LINE_1;
 8000e22:	4b55      	ldr	r3, [pc, #340]	; (8000f78 <OLED_GUI_MAIN+0x168>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	709a      	strb	r2, [r3, #2]
        oled.max_pointer  = E_HMI_OLED_LINE_5;
 8000e28:	4b53      	ldr	r3, [pc, #332]	; (8000f78 <OLED_GUI_MAIN+0x168>)
 8000e2a:	2205      	movs	r2, #5
 8000e2c:	70da      	strb	r2, [r3, #3]
        oled.menu_flag    = E_HMI_OLED_MENU_OLD;
 8000e2e:	4b52      	ldr	r3, [pc, #328]	; (8000f78 <OLED_GUI_MAIN+0x168>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]

        Clear_Screen();
 8000e34:	f7ff fc7a 	bl	800072c <Clear_Screen>
        Set_Color(WHITE);
 8000e38:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e3c:	f7ff fbc4 	bl	80005c8 <Set_Color>
        print_String(0, 0, (const uint8_t*)"===== MAIN MENU =====", FONT_5X8);
 8000e40:	2300      	movs	r3, #0
 8000e42:	4a4e      	ldr	r2, [pc, #312]	; (8000f7c <OLED_GUI_MAIN+0x16c>)
 8000e44:	2100      	movs	r1, #0
 8000e46:	2000      	movs	r0, #0
 8000e48:	f7ff fd98 	bl	800097c <print_String>
        print_String(10, OLED_MENU_LINE_1, (const uint8_t*)"Monitoring", FONT_5X8);
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	4a4c      	ldr	r2, [pc, #304]	; (8000f80 <OLED_GUI_MAIN+0x170>)
 8000e50:	2110      	movs	r1, #16
 8000e52:	200a      	movs	r0, #10
 8000e54:	f7ff fd92 	bl	800097c <print_String>
        print_String(10, OLED_MENU_LINE_2, (const uint8_t*)"Status", FONT_5X8);
 8000e58:	2300      	movs	r3, #0
 8000e5a:	4a4a      	ldr	r2, [pc, #296]	; (8000f84 <OLED_GUI_MAIN+0x174>)
 8000e5c:	2118      	movs	r1, #24
 8000e5e:	200a      	movs	r0, #10
 8000e60:	f7ff fd8c 	bl	800097c <print_String>
        print_String(10, OLED_MENU_LINE_3, (const uint8_t*)"Data", FONT_5X8);
 8000e64:	2300      	movs	r3, #0
 8000e66:	4a48      	ldr	r2, [pc, #288]	; (8000f88 <OLED_GUI_MAIN+0x178>)
 8000e68:	2120      	movs	r1, #32
 8000e6a:	200a      	movs	r0, #10
 8000e6c:	f7ff fd86 	bl	800097c <print_String>
        print_String(10, OLED_MENU_LINE_4, (const uint8_t*)"Sleep", FONT_5X8);
 8000e70:	2300      	movs	r3, #0
 8000e72:	4a46      	ldr	r2, [pc, #280]	; (8000f8c <OLED_GUI_MAIN+0x17c>)
 8000e74:	2128      	movs	r1, #40	; 0x28
 8000e76:	200a      	movs	r0, #10
 8000e78:	f7ff fd80 	bl	800097c <print_String>
        print_String(10, OLED_MENU_LINE_5, (const uint8_t*)"Reset all", FONT_5X8);
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	4a44      	ldr	r2, [pc, #272]	; (8000f90 <OLED_GUI_MAIN+0x180>)
 8000e80:	2130      	movs	r1, #48	; 0x30
 8000e82:	200a      	movs	r0, #10
 8000e84:	f7ff fd7a 	bl	800097c <print_String>
        print_String(0,  OLED_MENU_LINE_1, (const uint8_t*)">", FONT_5X8);
 8000e88:	2300      	movs	r3, #0
 8000e8a:	4a42      	ldr	r2, [pc, #264]	; (8000f94 <OLED_GUI_MAIN+0x184>)
 8000e8c:	2110      	movs	r1, #16
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f7ff fd74 	bl	800097c <print_String>
    }

    /* btn managment */
    switch (button)
 8000e94:	4b40      	ldr	r3, [pc, #256]	; (8000f98 <OLED_GUI_MAIN+0x188>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d816      	bhi.n	8000ecc <OLED_GUI_MAIN+0xbc>
 8000e9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ea4 <OLED_GUI_MAIN+0x94>)
 8000ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea4:	08000eb5 	.word	0x08000eb5
 8000ea8:	08000ec1 	.word	0x08000ec1
 8000eac:	08000ebb 	.word	0x08000ebb
 8000eb0:	08000ec7 	.word	0x08000ec7
    {
        case OLED_BTN_UP:       OLED_GUI_BTN_UP(); break;
 8000eb4:	f7ff fee0 	bl	8000c78 <OLED_GUI_BTN_UP>
 8000eb8:	e009      	b.n	8000ece <OLED_GUI_MAIN+0xbe>
        case OLED_BTN_DOWN:     OLED_GUI_BTN_DOWN(); break;
 8000eba:	f7ff fef5 	bl	8000ca8 <OLED_GUI_BTN_DOWN>
 8000ebe:	e006      	b.n	8000ece <OLED_GUI_MAIN+0xbe>
        case OLED_BTN_OK:       OLED_GUI_BTN_OK(); break;
 8000ec0:	f7ff ff0a 	bl	8000cd8 <OLED_GUI_BTN_OK>
 8000ec4:	e003      	b.n	8000ece <OLED_GUI_MAIN+0xbe>
        case OLED_BTN_RETURN:   OLED_GUI_BTN_RETURN(); break;
 8000ec6:	f7ff ff4b 	bl	8000d60 <OLED_GUI_BTN_RETURN>
 8000eca:	e000      	b.n	8000ece <OLED_GUI_MAIN+0xbe>
        default: break;
 8000ecc:	bf00      	nop
    }

    button = E_BTN_NONE;
 8000ece:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <OLED_GUI_MAIN+0x188>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]

    /* pointer management */
    if(last_pointer != oled.line_pointer)
 8000ed4:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <OLED_GUI_MAIN+0x168>)
 8000ed6:	785a      	ldrb	r2, [r3, #1]
 8000ed8:	4b30      	ldr	r3, [pc, #192]	; (8000f9c <OLED_GUI_MAIN+0x18c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d046      	beq.n	8000f6e <OLED_GUI_MAIN+0x15e>
    {
    	last_pointer = oled.line_pointer;
 8000ee0:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <OLED_GUI_MAIN+0x168>)
 8000ee2:	785a      	ldrb	r2, [r3, #1]
 8000ee4:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <OLED_GUI_MAIN+0x18c>)
 8000ee6:	701a      	strb	r2, [r3, #0]
    	Set_Color(BLACK);
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f7ff fb6d 	bl	80005c8 <Set_Color>
    	Fill_Rect(0, OLED_MENU_LINE_1 , 5, OLED_MENU_LINE_5);
 8000eee:	2330      	movs	r3, #48	; 0x30
 8000ef0:	2205      	movs	r2, #5
 8000ef2:	2110      	movs	r1, #16
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff fe37 	bl	8000b68 <Fill_Rect>
    	Set_Color(WHITE);
 8000efa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000efe:	f7ff fb63 	bl	80005c8 <Set_Color>

		switch(oled.line_pointer)
 8000f02:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <OLED_GUI_MAIN+0x168>)
 8000f04:	785b      	ldrb	r3, [r3, #1]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	d832      	bhi.n	8000f72 <OLED_GUI_MAIN+0x162>
 8000f0c:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <OLED_GUI_MAIN+0x104>)
 8000f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f12:	bf00      	nop
 8000f14:	08000f29 	.word	0x08000f29
 8000f18:	08000f37 	.word	0x08000f37
 8000f1c:	08000f45 	.word	0x08000f45
 8000f20:	08000f53 	.word	0x08000f53
 8000f24:	08000f61 	.word	0x08000f61
		{
		case E_HMI_OLED_LINE_1 : print_String(0, OLED_MENU_LINE_1, (const uint8_t*)">", FONT_5X8); break;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	4a1a      	ldr	r2, [pc, #104]	; (8000f94 <OLED_GUI_MAIN+0x184>)
 8000f2c:	2110      	movs	r1, #16
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff fd24 	bl	800097c <print_String>
 8000f34:	e01e      	b.n	8000f74 <OLED_GUI_MAIN+0x164>
		case E_HMI_OLED_LINE_2 : print_String(0, OLED_MENU_LINE_2, (const uint8_t*)">", FONT_5X8); break;
 8000f36:	2300      	movs	r3, #0
 8000f38:	4a16      	ldr	r2, [pc, #88]	; (8000f94 <OLED_GUI_MAIN+0x184>)
 8000f3a:	2118      	movs	r1, #24
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff fd1d 	bl	800097c <print_String>
 8000f42:	e017      	b.n	8000f74 <OLED_GUI_MAIN+0x164>
		case E_HMI_OLED_LINE_3 : print_String(0, OLED_MENU_LINE_3, (const uint8_t*)">", FONT_5X8); break;
 8000f44:	2300      	movs	r3, #0
 8000f46:	4a13      	ldr	r2, [pc, #76]	; (8000f94 <OLED_GUI_MAIN+0x184>)
 8000f48:	2120      	movs	r1, #32
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff fd16 	bl	800097c <print_String>
 8000f50:	e010      	b.n	8000f74 <OLED_GUI_MAIN+0x164>
		case E_HMI_OLED_LINE_4 : print_String(0, OLED_MENU_LINE_4, (const uint8_t*)">", FONT_5X8); break;
 8000f52:	2300      	movs	r3, #0
 8000f54:	4a0f      	ldr	r2, [pc, #60]	; (8000f94 <OLED_GUI_MAIN+0x184>)
 8000f56:	2128      	movs	r1, #40	; 0x28
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f7ff fd0f 	bl	800097c <print_String>
 8000f5e:	e009      	b.n	8000f74 <OLED_GUI_MAIN+0x164>
		case E_HMI_OLED_LINE_5 : print_String(0, OLED_MENU_LINE_5, (const uint8_t*)">", FONT_5X8); break;
 8000f60:	2300      	movs	r3, #0
 8000f62:	4a0c      	ldr	r2, [pc, #48]	; (8000f94 <OLED_GUI_MAIN+0x184>)
 8000f64:	2130      	movs	r1, #48	; 0x30
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff fd08 	bl	800097c <print_String>
 8000f6c:	e002      	b.n	8000f74 <OLED_GUI_MAIN+0x164>
		default: break;
		}
    }
 8000f6e:	bf00      	nop
 8000f70:	e000      	b.n	8000f74 <OLED_GUI_MAIN+0x164>
		default: break;
 8000f72:	bf00      	nop
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200000a0 	.word	0x200000a0
 8000f7c:	08008e88 	.word	0x08008e88
 8000f80:	08008ea0 	.word	0x08008ea0
 8000f84:	08008eac 	.word	0x08008eac
 8000f88:	08008eb4 	.word	0x08008eb4
 8000f8c:	08008ebc 	.word	0x08008ebc
 8000f90:	08008ec4 	.word	0x08008ec4
 8000f94:	08008ed0 	.word	0x08008ed0
 8000f98:	20000099 	.word	0x20000099
 8000f9c:	20000000 	.word	0x20000000

08000fa0 <OLED_GUI_MONITORING>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
static void OLED_GUI_MONITORING(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
    if(oled.menu_flag == E_HMI_OLED_MENU_NEW)
 8000fa4:	4b28      	ldr	r3, [pc, #160]	; (8001048 <OLED_GUI_MONITORING+0xa8>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d129      	bne.n	8001000 <OLED_GUI_MONITORING+0x60>
    {
        //seeting for the menu
        oled.line_pointer = E_HMI_OLED_LINE_1;
 8000fac:	4b26      	ldr	r3, [pc, #152]	; (8001048 <OLED_GUI_MONITORING+0xa8>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	705a      	strb	r2, [r3, #1]
        oled.min_pointer  = E_HMI_OLED_LINE_1;
 8000fb2:	4b25      	ldr	r3, [pc, #148]	; (8001048 <OLED_GUI_MONITORING+0xa8>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	709a      	strb	r2, [r3, #2]
        oled.max_pointer  = E_HMI_OLED_LINE_5;
 8000fb8:	4b23      	ldr	r3, [pc, #140]	; (8001048 <OLED_GUI_MONITORING+0xa8>)
 8000fba:	2205      	movs	r2, #5
 8000fbc:	70da      	strb	r2, [r3, #3]
        oled.menu_flag    = E_HMI_OLED_MENU_OLD;
 8000fbe:	4b22      	ldr	r3, [pc, #136]	; (8001048 <OLED_GUI_MONITORING+0xa8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]

        Clear_Screen();
 8000fc4:	f7ff fbb2 	bl	800072c <Clear_Screen>
        Set_Color(WHITE);
 8000fc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000fcc:	f7ff fafc 	bl	80005c8 <Set_Color>
        print_String(0, 0, (const uint8_t*)"===== MNTR MENU =====", FONT_5X8);
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	; (800104c <OLED_GUI_MONITORING+0xac>)
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff fcd0 	bl	800097c <print_String>
        print_String(10, OLED_MENU_LINE_1, (const uint8_t*)"Battery seq :", FONT_5X8);
 8000fdc:	2300      	movs	r3, #0
 8000fde:	4a1c      	ldr	r2, [pc, #112]	; (8001050 <OLED_GUI_MONITORING+0xb0>)
 8000fe0:	2110      	movs	r1, #16
 8000fe2:	200a      	movs	r0, #10
 8000fe4:	f7ff fcca 	bl	800097c <print_String>
        print_String(10, OLED_MENU_LINE_2, (const uint8_t*)"Battery motor1 :", FONT_5X8);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	4a1a      	ldr	r2, [pc, #104]	; (8001054 <OLED_GUI_MONITORING+0xb4>)
 8000fec:	2118      	movs	r1, #24
 8000fee:	200a      	movs	r0, #10
 8000ff0:	f7ff fcc4 	bl	800097c <print_String>
        print_String(10, OLED_MENU_LINE_3, (const uint8_t*)"Battery motor2 :", FONT_5X8);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	4a18      	ldr	r2, [pc, #96]	; (8001058 <OLED_GUI_MONITORING+0xb8>)
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	200a      	movs	r0, #10
 8000ffc:	f7ff fcbe 	bl	800097c <print_String>
    }

    print_String(10, OLED_MENU_LINE_1, (const uint8_t*)uart_data->MNTR.BAT_SEQ, FONT_5X8);
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <OLED_GUI_MONITORING+0xbc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001008:	2300      	movs	r3, #0
 800100a:	2110      	movs	r1, #16
 800100c:	200a      	movs	r0, #10
 800100e:	f7ff fcb5 	bl	800097c <print_String>
    print_String(10, OLED_MENU_LINE_2, (const uint8_t*)uart_data->MNTR.BAT_MOTOR1, FONT_5X8);
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <OLED_GUI_MONITORING+0xbc>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 800101a:	2300      	movs	r3, #0
 800101c:	2118      	movs	r1, #24
 800101e:	200a      	movs	r0, #10
 8001020:	f7ff fcac 	bl	800097c <print_String>
    print_String(10, OLED_MENU_LINE_3, (const uint8_t*)uart_data->MNTR.BAT_MOTOR2, FONT_5X8);
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <OLED_GUI_MONITORING+0xbc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800102c:	2300      	movs	r3, #0
 800102e:	2120      	movs	r1, #32
 8001030:	200a      	movs	r0, #10
 8001032:	f7ff fca3 	bl	800097c <print_String>

    if(button == OLED_BTN_RETURN) OLED_GUI_BTN_RETURN();
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <OLED_GUI_MONITORING+0xc0>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b04      	cmp	r3, #4
 800103c:	d101      	bne.n	8001042 <OLED_GUI_MONITORING+0xa2>
 800103e:	f7ff fe8f 	bl	8000d60 <OLED_GUI_BTN_RETURN>
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200000a0 	.word	0x200000a0
 800104c:	08008ed4 	.word	0x08008ed4
 8001050:	08008eec 	.word	0x08008eec
 8001054:	08008efc 	.word	0x08008efc
 8001058:	08008f10 	.word	0x08008f10
 800105c:	2000009c 	.word	0x2000009c
 8001060:	20000099 	.word	0x20000099

08001064 <OLED_GUI_STATUS>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
static void OLED_GUI_STATUS(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
    if(oled.menu_flag == E_HMI_OLED_MENU_NEW)
 8001068:	4b3e      	ldr	r3, [pc, #248]	; (8001164 <OLED_GUI_STATUS+0x100>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d13b      	bne.n	80010e8 <OLED_GUI_STATUS+0x84>
    {
        //seeting for the menu
        oled.line_pointer = E_HMI_OLED_LINE_1;
 8001070:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <OLED_GUI_STATUS+0x100>)
 8001072:	2201      	movs	r2, #1
 8001074:	705a      	strb	r2, [r3, #1]
        oled.min_pointer  = E_HMI_OLED_LINE_1;
 8001076:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <OLED_GUI_STATUS+0x100>)
 8001078:	2201      	movs	r2, #1
 800107a:	709a      	strb	r2, [r3, #2]
        oled.max_pointer  = E_HMI_OLED_LINE_5;
 800107c:	4b39      	ldr	r3, [pc, #228]	; (8001164 <OLED_GUI_STATUS+0x100>)
 800107e:	2205      	movs	r2, #5
 8001080:	70da      	strb	r2, [r3, #3]
        oled.menu_flag    = E_HMI_OLED_MENU_OLD;
 8001082:	4b38      	ldr	r3, [pc, #224]	; (8001164 <OLED_GUI_STATUS+0x100>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]

        Clear_Screen();
 8001088:	f7ff fb50 	bl	800072c <Clear_Screen>
        Set_Color(WHITE);
 800108c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001090:	f7ff fa9a 	bl	80005c8 <Set_Color>
        print_String(0, 0, (const uint8_t*)"===== STATUS MENU =====", FONT_5X8);
 8001094:	2300      	movs	r3, #0
 8001096:	4a34      	ldr	r2, [pc, #208]	; (8001168 <OLED_GUI_STATUS+0x104>)
 8001098:	2100      	movs	r1, #0
 800109a:	2000      	movs	r0, #0
 800109c:	f7ff fc6e 	bl	800097c <print_String>
        print_String(10, OLED_MENU_LINE_1, (const uint8_t*)"Phase :", FONT_5X8);
 80010a0:	2300      	movs	r3, #0
 80010a2:	4a32      	ldr	r2, [pc, #200]	; (800116c <OLED_GUI_STATUS+0x108>)
 80010a4:	2110      	movs	r1, #16
 80010a6:	200a      	movs	r0, #10
 80010a8:	f7ff fc68 	bl	800097c <print_String>
        print_String(10, OLED_MENU_LINE_2, (const uint8_t*)"Aerocontact :", FONT_5X8);
 80010ac:	2300      	movs	r3, #0
 80010ae:	4a30      	ldr	r2, [pc, #192]	; (8001170 <OLED_GUI_STATUS+0x10c>)
 80010b0:	2118      	movs	r1, #24
 80010b2:	200a      	movs	r0, #10
 80010b4:	f7ff fc62 	bl	800097c <print_String>

        print_String(10, OLED_MENU_LINE_4, (const uint8_t*)"Recovery :", FONT_5X8);
 80010b8:	2300      	movs	r3, #0
 80010ba:	4a2e      	ldr	r2, [pc, #184]	; (8001174 <OLED_GUI_STATUS+0x110>)
 80010bc:	2128      	movs	r1, #40	; 0x28
 80010be:	200a      	movs	r0, #10
 80010c0:	f7ff fc5c 	bl	800097c <print_String>
        print_String(10, OLED_MENU_LINE_5, (const uint8_t*)"last cmd :", FONT_5X8);
 80010c4:	2300      	movs	r3, #0
 80010c6:	4a2c      	ldr	r2, [pc, #176]	; (8001178 <OLED_GUI_STATUS+0x114>)
 80010c8:	2130      	movs	r1, #48	; 0x30
 80010ca:	200a      	movs	r0, #10
 80010cc:	f7ff fc56 	bl	800097c <print_String>

        print_String(10, OLED_MENU_LINE_7, (const uint8_t*)"Recovery :", FONT_5X8);
 80010d0:	2300      	movs	r3, #0
 80010d2:	4a28      	ldr	r2, [pc, #160]	; (8001174 <OLED_GUI_STATUS+0x110>)
 80010d4:	2140      	movs	r1, #64	; 0x40
 80010d6:	200a      	movs	r0, #10
 80010d8:	f7ff fc50 	bl	800097c <print_String>
        print_String(10, OLED_MENU_LINE_8, (const uint8_t*)"last cmd :", FONT_5X8);
 80010dc:	2300      	movs	r3, #0
 80010de:	4a26      	ldr	r2, [pc, #152]	; (8001178 <OLED_GUI_STATUS+0x114>)
 80010e0:	2148      	movs	r1, #72	; 0x48
 80010e2:	200a      	movs	r0, #10
 80010e4:	f7ff fc4a 	bl	800097c <print_String>
    }

    print_String(10, OLED_MENU_LINE_1, (const uint8_t*)uart_data->APP.PHASE, FONT_5X8);
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <OLED_GUI_STATUS+0x118>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	2300      	movs	r3, #0
 80010f0:	2110      	movs	r1, #16
 80010f2:	200a      	movs	r0, #10
 80010f4:	f7ff fc42 	bl	800097c <print_String>
    print_String(10, OLED_MENU_LINE_2, (const uint8_t*)uart_data->APP.AEROC, FONT_5X8);
 80010f8:	4b20      	ldr	r3, [pc, #128]	; (800117c <OLED_GUI_STATUS+0x118>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f103 0210 	add.w	r2, r3, #16
 8001100:	2300      	movs	r3, #0
 8001102:	2118      	movs	r1, #24
 8001104:	200a      	movs	r0, #10
 8001106:	f7ff fc39 	bl	800097c <print_String>
    print_String(10, OLED_MENU_LINE_4, (const uint8_t*)uart_data->RECOVERY.STATUS, FONT_5X8);
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <OLED_GUI_STATUS+0x118>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8001112:	2300      	movs	r3, #0
 8001114:	2128      	movs	r1, #40	; 0x28
 8001116:	200a      	movs	r0, #10
 8001118:	f7ff fc30 	bl	800097c <print_String>
    print_String(10, OLED_MENU_LINE_5, (const uint8_t*)uart_data->RECOVERY.LAST_CMD, FONT_5X8);
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <OLED_GUI_STATUS+0x118>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8001124:	2300      	movs	r3, #0
 8001126:	2130      	movs	r1, #48	; 0x30
 8001128:	200a      	movs	r0, #10
 800112a:	f7ff fc27 	bl	800097c <print_String>
    print_String(10, OLED_MENU_LINE_7, (const uint8_t*)uart_data->PAYLOAD.STATUS, FONT_5X8);
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <OLED_GUI_STATUS+0x118>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f503 7298 	add.w	r2, r3, #304	; 0x130
 8001136:	2300      	movs	r3, #0
 8001138:	2140      	movs	r1, #64	; 0x40
 800113a:	200a      	movs	r0, #10
 800113c:	f7ff fc1e 	bl	800097c <print_String>
    print_String(10, OLED_MENU_LINE_8, (const uint8_t*)uart_data->PAYLOAD.LAST_CMD, FONT_5X8);
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <OLED_GUI_STATUS+0x118>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8001148:	2300      	movs	r3, #0
 800114a:	2148      	movs	r1, #72	; 0x48
 800114c:	200a      	movs	r0, #10
 800114e:	f7ff fc15 	bl	800097c <print_String>

    if(button == OLED_BTN_RETURN) OLED_GUI_BTN_RETURN();
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <OLED_GUI_STATUS+0x11c>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b04      	cmp	r3, #4
 8001158:	d101      	bne.n	800115e <OLED_GUI_STATUS+0xfa>
 800115a:	f7ff fe01 	bl	8000d60 <OLED_GUI_BTN_RETURN>
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200000a0 	.word	0x200000a0
 8001168:	08008f24 	.word	0x08008f24
 800116c:	08008f3c 	.word	0x08008f3c
 8001170:	08008f44 	.word	0x08008f44
 8001174:	08008f54 	.word	0x08008f54
 8001178:	08008f60 	.word	0x08008f60
 800117c:	2000009c 	.word	0x2000009c
 8001180:	20000099 	.word	0x20000099

08001184 <OLED_GUI_DATA>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
static void OLED_GUI_DATA(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
    if(oled.menu_flag == E_HMI_OLED_MENU_NEW)
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <OLED_GUI_DATA+0x34>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d10b      	bne.n	80011a8 <OLED_GUI_DATA+0x24>
    {
        //seeting for the menu
        oled.line_pointer = E_HMI_OLED_LINE_1;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <OLED_GUI_DATA+0x34>)
 8001192:	2201      	movs	r2, #1
 8001194:	705a      	strb	r2, [r3, #1]
        oled.min_pointer  = E_HMI_OLED_LINE_1;
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <OLED_GUI_DATA+0x34>)
 8001198:	2201      	movs	r2, #1
 800119a:	709a      	strb	r2, [r3, #2]
        oled.max_pointer  = E_HMI_OLED_LINE_5;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <OLED_GUI_DATA+0x34>)
 800119e:	2205      	movs	r2, #5
 80011a0:	70da      	strb	r2, [r3, #3]
        oled.menu_flag    = E_HMI_OLED_MENU_OLD;
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <OLED_GUI_DATA+0x34>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
    }

    if(button == OLED_BTN_RETURN) OLED_GUI_BTN_RETURN();
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <OLED_GUI_DATA+0x38>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b04      	cmp	r3, #4
 80011ae:	d101      	bne.n	80011b4 <OLED_GUI_DATA+0x30>
 80011b0:	f7ff fdd6 	bl	8000d60 <OLED_GUI_BTN_RETURN>
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200000a0 	.word	0x200000a0
 80011bc:	20000099 	.word	0x20000099

080011c0 <OLED_GUI_SLEEP>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
static void OLED_GUI_SLEEP(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
    if(oled.menu_flag == E_HMI_OLED_MENU_NEW)
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <OLED_GUI_SLEEP+0x4c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d117      	bne.n	80011fc <OLED_GUI_SLEEP+0x3c>
    {
        //seeting for the menu
        oled.line_pointer = E_HMI_OLED_LINE_0;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <OLED_GUI_SLEEP+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	705a      	strb	r2, [r3, #1]
        oled.min_pointer  = E_HMI_OLED_LINE_0;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <OLED_GUI_SLEEP+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	709a      	strb	r2, [r3, #2]
        oled.max_pointer  = E_HMI_OLED_LINE_0;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <OLED_GUI_SLEEP+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	70da      	strb	r2, [r3, #3]
        oled.menu_flag    = E_HMI_OLED_MENU_OLD;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <OLED_GUI_SLEEP+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]

        Clear_Screen();
 80011e4:	f7ff faa2 	bl	800072c <Clear_Screen>
        Set_Color(WHITE);
 80011e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011ec:	f7ff f9ec 	bl	80005c8 <Set_Color>
        print_String(30, 30, (const uint8_t*)"POWER SAVING MODE", FONT_5X8);
 80011f0:	2300      	movs	r3, #0
 80011f2:	4a07      	ldr	r2, [pc, #28]	; (8001210 <OLED_GUI_SLEEP+0x50>)
 80011f4:	211e      	movs	r1, #30
 80011f6:	201e      	movs	r0, #30
 80011f8:	f7ff fbc0 	bl	800097c <print_String>
    }

    if(button == OLED_BTN_RETURN) OLED_GUI_BTN_RETURN();
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <OLED_GUI_SLEEP+0x54>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b04      	cmp	r3, #4
 8001202:	d101      	bne.n	8001208 <OLED_GUI_SLEEP+0x48>
 8001204:	f7ff fdac 	bl	8000d60 <OLED_GUI_BTN_RETURN>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200000a0 	.word	0x200000a0
 8001210:	08008f6c 	.word	0x08008f6c
 8001214:	20000099 	.word	0x20000099

08001218 <OLED_GUI_RESET>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
static void OLED_GUI_RESET(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
    /* restart the SEQ software */
    HAL_GPIO_WritePin(SEQ_RST_GPIO_Port, SEQ_RST_Pin, GPIO_PIN_SET);
 800121c:	2201      	movs	r2, #1
 800121e:	2101      	movs	r1, #1
 8001220:	4805      	ldr	r0, [pc, #20]	; (8001238 <OLED_GUI_RESET+0x20>)
 8001222:	f002 fcb5 	bl	8003b90 <HAL_GPIO_WritePin>

    vTaskDelay(pdMS_TO_TICKS(10));
 8001226:	200a      	movs	r0, #10
 8001228:	f005 f914 	bl	8006454 <vTaskDelay>
    
    /* restart the CPU */
	SCB->AIRCR = 0x05fa0004;
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <OLED_GUI_RESET+0x24>)
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <OLED_GUI_RESET+0x28>)
 8001230:	60da      	str	r2, [r3, #12]
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40020000 	.word	0x40020000
 800123c:	e000ed00 	.word	0xe000ed00
 8001240:	05fa0004 	.word	0x05fa0004

08001244 <API_HMI_START>:
/** ************************************************************* *
 * @brief       init and start the payload task
 * 
 * ************************************************************* **/
void API_HMI_START(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af02      	add	r7, sp, #8
    BaseType_t status;

    leds_init();
 800124a:	f000 fa25 	bl	8001698 <leds_init>
    leds_send_cmd(E_LIST_LED5, E_CMD_LEDS_GREEN);
 800124e:	2102      	movs	r1, #2
 8001250:	2004      	movs	r0, #4
 8001252:	f000 fb29 	bl	80018a8 <leds_send_cmd>

    uart_init();
 8001256:	f000 fb69 	bl	800192c <uart_init>
    uart_storage_attach(uart_data);
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <API_HMI_START+0x70>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f000 feb6 	bl	8001fd0 <uart_storage_attach>

    /* oled */ 
    Device_Init();
 8001264:	f7ff fad8 	bl	8000818 <Device_Init>
    Clear_Screen();
 8001268:	f7ff fa60 	bl	800072c <Clear_Screen>
    oled.OLED_GUI_MENU = OLED_GUI_START;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <API_HMI_START+0x74>)
 800126e:	4a13      	ldr	r2, [pc, #76]	; (80012bc <API_HMI_START+0x78>)
 8001270:	605a      	str	r2, [r3, #4]
    oled.menu_flag = E_HMI_OLED_MENU_NEW;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <API_HMI_START+0x74>)
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]

    /* create the task */
    status = xTaskCreate(handler_oled, "task_oled", configMINIMAL_STACK_SIZE, NULL, TASK_PRIORITY_APP_OLED, &TaskHandle_oled);
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <API_HMI_START+0x7c>)
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	2305      	movs	r3, #5
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2300      	movs	r3, #0
 8001282:	2280      	movs	r2, #128	; 0x80
 8001284:	490f      	ldr	r1, [pc, #60]	; (80012c4 <API_HMI_START+0x80>)
 8001286:	4810      	ldr	r0, [pc, #64]	; (80012c8 <API_HMI_START+0x84>)
 8001288:	f004 ff20 	bl	80060cc <xTaskCreate>
 800128c:	6078      	str	r0, [r7, #4]
    configASSERT(status == pdPASS);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d00a      	beq.n	80012aa <API_HMI_START+0x66>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001298:	f383 8811 	msr	BASEPRI, r3
 800129c:	f3bf 8f6f 	isb	sy
 80012a0:	f3bf 8f4f 	dsb	sy
 80012a4:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80012a6:	bf00      	nop
 80012a8:	e7fe      	b.n	80012a8 <API_HMI_START+0x64>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000009c 	.word	0x2000009c
 80012b8:	200000a0 	.word	0x200000a0
 80012bc:	08000d8d 	.word	0x08000d8d
 80012c0:	20003f88 	.word	0x20003f88
 80012c4:	08008f80 	.word	0x08008f80
 80012c8:	08000c39 	.word	0x08000c39

080012cc <handler_leds>:
 *              commands
 * 
 * @param       parameters 
 * ************************************************************* **/
static void handler_leds(void* parameters)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
    STRUCT_LEDS_t led;

    while(1)
    {
        /* check for new command */
        if(xQueueReceive(QueueHandle_leds_cmd, &led, portMAX_DELAY)) 
 80012d4:	4bc3      	ldr	r3, [pc, #780]	; (80015e4 <handler_leds+0x318>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f107 010c 	add.w	r1, r7, #12
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	4618      	mov	r0, r3
 80012e2:	f004 fca5 	bl	8005c30 <xQueueReceive>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 81cf 	beq.w	800168c <handler_leds+0x3c0>
        {
            switch (led.list)
 80012ee:	7b7b      	ldrb	r3, [r7, #13]
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	f200 81cd 	bhi.w	8001690 <handler_leds+0x3c4>
 80012f6:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <handler_leds+0x30>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	08001311 	.word	0x08001311
 8001300:	080013c9 	.word	0x080013c9
 8001304:	08001481 	.word	0x08001481
 8001308:	08001529 	.word	0x08001529
 800130c:	080015c9 	.word	0x080015c9
            {
                /* LED 1 */
                case E_LIST_LED1 :
                    switch (led.cmd)
 8001310:	7b3b      	ldrb	r3, [r7, #12]
 8001312:	2b03      	cmp	r3, #3
 8001314:	d856      	bhi.n	80013c4 <handler_leds+0xf8>
 8001316:	a201      	add	r2, pc, #4	; (adr r2, 800131c <handler_leds+0x50>)
 8001318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131c:	0800132d 	.word	0x0800132d
 8001320:	08001353 	.word	0x08001353
 8001324:	08001379 	.word	0x08001379
 8001328:	0800139f 	.word	0x0800139f
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001332:	48ad      	ldr	r0, [pc, #692]	; (80015e8 <handler_leds+0x31c>)
 8001334:	f002 fc2c 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133e:	48aa      	ldr	r0, [pc, #680]	; (80015e8 <handler_leds+0x31c>)
 8001340:	f002 fc26 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800134a:	48a7      	ldr	r0, [pc, #668]	; (80015e8 <handler_leds+0x31c>)
 800134c:	f002 fc20 	bl	8003b90 <HAL_GPIO_WritePin>
                            break;
 8001350:	e039      	b.n	80013c6 <handler_leds+0xfa>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001358:	48a3      	ldr	r0, [pc, #652]	; (80015e8 <handler_leds+0x31c>)
 800135a:	f002 fc19 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001364:	48a0      	ldr	r0, [pc, #640]	; (80015e8 <handler_leds+0x31c>)
 8001366:	f002 fc13 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_SET);
 800136a:	2201      	movs	r2, #1
 800136c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001370:	489d      	ldr	r0, [pc, #628]	; (80015e8 <handler_leds+0x31c>)
 8001372:	f002 fc0d 	bl	8003b90 <HAL_GPIO_WritePin>
                            break;
 8001376:	e026      	b.n	80013c6 <handler_leds+0xfa>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800137e:	489a      	ldr	r0, [pc, #616]	; (80015e8 <handler_leds+0x31c>)
 8001380:	f002 fc06 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800138a:	4897      	ldr	r0, [pc, #604]	; (80015e8 <handler_leds+0x31c>)
 800138c:	f002 fc00 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001396:	4894      	ldr	r0, [pc, #592]	; (80015e8 <handler_leds+0x31c>)
 8001398:	f002 fbfa 	bl	8003b90 <HAL_GPIO_WritePin>
                            break;
 800139c:	e013      	b.n	80013c6 <handler_leds+0xfa>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a4:	4890      	ldr	r0, [pc, #576]	; (80015e8 <handler_leds+0x31c>)
 80013a6:	f002 fbf3 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b0:	488d      	ldr	r0, [pc, #564]	; (80015e8 <handler_leds+0x31c>)
 80013b2:	f002 fbed 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013bc:	488a      	ldr	r0, [pc, #552]	; (80015e8 <handler_leds+0x31c>)
 80013be:	f002 fbe7 	bl	8003b90 <HAL_GPIO_WritePin>
                            break;
 80013c2:	e000      	b.n	80013c6 <handler_leds+0xfa>

                        default:
                            break;
 80013c4:	bf00      	nop
                    }
                    break;
 80013c6:	e164      	b.n	8001692 <handler_leds+0x3c6>

                /* LED 2 */
                case E_LIST_LED2 :
                    switch (led.cmd)
 80013c8:	7b3b      	ldrb	r3, [r7, #12]
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	d856      	bhi.n	800147c <handler_leds+0x1b0>
 80013ce:	a201      	add	r2, pc, #4	; (adr r2, 80013d4 <handler_leds+0x108>)
 80013d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d4:	080013e5 	.word	0x080013e5
 80013d8:	0800140b 	.word	0x0800140b
 80013dc:	08001431 	.word	0x08001431
 80013e0:	08001457 	.word	0x08001457
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ea:	487f      	ldr	r0, [pc, #508]	; (80015e8 <handler_leds+0x31c>)
 80013ec:	f002 fbd0 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f6:	487c      	ldr	r0, [pc, #496]	; (80015e8 <handler_leds+0x31c>)
 80013f8:	f002 fbca 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001402:	487a      	ldr	r0, [pc, #488]	; (80015ec <handler_leds+0x320>)
 8001404:	f002 fbc4 	bl	8003b90 <HAL_GPIO_WritePin>
                            break;
 8001408:	e039      	b.n	800147e <handler_leds+0x1b2>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001410:	4875      	ldr	r0, [pc, #468]	; (80015e8 <handler_leds+0x31c>)
 8001412:	f002 fbbd 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 7100 	mov.w	r1, #512	; 0x200
 800141c:	4873      	ldr	r0, [pc, #460]	; (80015ec <handler_leds+0x320>)
 800141e:	f002 fbb7 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_SET);
 8001422:	2201      	movs	r2, #1
 8001424:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001428:	486f      	ldr	r0, [pc, #444]	; (80015e8 <handler_leds+0x31c>)
 800142a:	f002 fbb1 	bl	8003b90 <HAL_GPIO_WritePin>
                            break;
 800142e:	e026      	b.n	800147e <handler_leds+0x1b2>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001436:	486c      	ldr	r0, [pc, #432]	; (80015e8 <handler_leds+0x31c>)
 8001438:	f002 fbaa 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001442:	486a      	ldr	r0, [pc, #424]	; (80015ec <handler_leds+0x320>)
 8001444:	f002 fba4 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_SET);
 8001448:	2201      	movs	r2, #1
 800144a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800144e:	4866      	ldr	r0, [pc, #408]	; (80015e8 <handler_leds+0x31c>)
 8001450:	f002 fb9e 	bl	8003b90 <HAL_GPIO_WritePin>
                            break;
 8001454:	e013      	b.n	800147e <handler_leds+0x1b2>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	f44f 7100 	mov.w	r1, #512	; 0x200
 800145c:	4862      	ldr	r0, [pc, #392]	; (80015e8 <handler_leds+0x31c>)
 800145e:	f002 fb97 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001468:	485f      	ldr	r0, [pc, #380]	; (80015e8 <handler_leds+0x31c>)
 800146a:	f002 fb91 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_SET);
 800146e:	2201      	movs	r2, #1
 8001470:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001474:	485d      	ldr	r0, [pc, #372]	; (80015ec <handler_leds+0x320>)
 8001476:	f002 fb8b 	bl	8003b90 <HAL_GPIO_WritePin>
                            break;
 800147a:	e000      	b.n	800147e <handler_leds+0x1b2>

                        default:
                            break;
 800147c:	bf00      	nop
                    }
                    break;
 800147e:	e108      	b.n	8001692 <handler_leds+0x3c6>

                /* LED 3 */
                case E_LIST_LED3 :
                    switch (led.cmd)
 8001480:	7b3b      	ldrb	r3, [r7, #12]
 8001482:	2b03      	cmp	r3, #3
 8001484:	d84e      	bhi.n	8001524 <handler_leds+0x258>
 8001486:	a201      	add	r2, pc, #4	; (adr r2, 800148c <handler_leds+0x1c0>)
 8001488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148c:	0800149d 	.word	0x0800149d
 8001490:	080014bf 	.word	0x080014bf
 8001494:	080014e1 	.word	0x080014e1
 8001498:	08001503 	.word	0x08001503
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014a2:	4852      	ldr	r0, [pc, #328]	; (80015ec <handler_leds+0x320>)
 80014a4:	f002 fb74 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2180      	movs	r1, #128	; 0x80
 80014ac:	484f      	ldr	r0, [pc, #316]	; (80015ec <handler_leds+0x320>)
 80014ae:	f002 fb6f 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2140      	movs	r1, #64	; 0x40
 80014b6:	484d      	ldr	r0, [pc, #308]	; (80015ec <handler_leds+0x320>)
 80014b8:	f002 fb6a 	bl	8003b90 <HAL_GPIO_WritePin>
                            break;
 80014bc:	e033      	b.n	8001526 <handler_leds+0x25a>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	2180      	movs	r1, #128	; 0x80
 80014c2:	484a      	ldr	r0, [pc, #296]	; (80015ec <handler_leds+0x320>)
 80014c4:	f002 fb64 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2140      	movs	r1, #64	; 0x40
 80014cc:	4847      	ldr	r0, [pc, #284]	; (80015ec <handler_leds+0x320>)
 80014ce:	f002 fb5f 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_SET);
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d8:	4844      	ldr	r0, [pc, #272]	; (80015ec <handler_leds+0x320>)
 80014da:	f002 fb59 	bl	8003b90 <HAL_GPIO_WritePin>
                            break;
 80014de:	e022      	b.n	8001526 <handler_leds+0x25a>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e6:	4841      	ldr	r0, [pc, #260]	; (80015ec <handler_leds+0x320>)
 80014e8:	f002 fb52 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2140      	movs	r1, #64	; 0x40
 80014f0:	483e      	ldr	r0, [pc, #248]	; (80015ec <handler_leds+0x320>)
 80014f2:	f002 fb4d 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	2180      	movs	r1, #128	; 0x80
 80014fa:	483c      	ldr	r0, [pc, #240]	; (80015ec <handler_leds+0x320>)
 80014fc:	f002 fb48 	bl	8003b90 <HAL_GPIO_WritePin>
                            break;
 8001500:	e011      	b.n	8001526 <handler_leds+0x25a>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001508:	4838      	ldr	r0, [pc, #224]	; (80015ec <handler_leds+0x320>)
 800150a:	f002 fb41 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	2180      	movs	r1, #128	; 0x80
 8001512:	4836      	ldr	r0, [pc, #216]	; (80015ec <handler_leds+0x320>)
 8001514:	f002 fb3c 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_SET);
 8001518:	2201      	movs	r2, #1
 800151a:	2140      	movs	r1, #64	; 0x40
 800151c:	4833      	ldr	r0, [pc, #204]	; (80015ec <handler_leds+0x320>)
 800151e:	f002 fb37 	bl	8003b90 <HAL_GPIO_WritePin>
                            break;
 8001522:	e000      	b.n	8001526 <handler_leds+0x25a>

                        default:
                            break;
 8001524:	bf00      	nop
                    }
                    break;
 8001526:	e0b4      	b.n	8001692 <handler_leds+0x3c6>

                /* LED 4 */
                case E_LIST_LED4 :
                    switch (led.cmd)
 8001528:	7b3b      	ldrb	r3, [r7, #12]
 800152a:	2b03      	cmp	r3, #3
 800152c:	d84a      	bhi.n	80015c4 <handler_leds+0x2f8>
 800152e:	a201      	add	r2, pc, #4	; (adr r2, 8001534 <handler_leds+0x268>)
 8001530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001534:	08001545 	.word	0x08001545
 8001538:	08001565 	.word	0x08001565
 800153c:	08001585 	.word	0x08001585
 8001540:	080015a5 	.word	0x080015a5
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	2104      	movs	r1, #4
 8001548:	4828      	ldr	r0, [pc, #160]	; (80015ec <handler_leds+0x320>)
 800154a:	f002 fb21 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2102      	movs	r1, #2
 8001552:	4826      	ldr	r0, [pc, #152]	; (80015ec <handler_leds+0x320>)
 8001554:	f002 fb1c 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	2101      	movs	r1, #1
 800155c:	4823      	ldr	r0, [pc, #140]	; (80015ec <handler_leds+0x320>)
 800155e:	f002 fb17 	bl	8003b90 <HAL_GPIO_WritePin>
                            break;
 8001562:	e030      	b.n	80015c6 <handler_leds+0x2fa>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	2102      	movs	r1, #2
 8001568:	4820      	ldr	r0, [pc, #128]	; (80015ec <handler_leds+0x320>)
 800156a:	f002 fb11 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2101      	movs	r1, #1
 8001572:	481e      	ldr	r0, [pc, #120]	; (80015ec <handler_leds+0x320>)
 8001574:	f002 fb0c 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	2104      	movs	r1, #4
 800157c:	481b      	ldr	r0, [pc, #108]	; (80015ec <handler_leds+0x320>)
 800157e:	f002 fb07 	bl	8003b90 <HAL_GPIO_WritePin>
                            break;
 8001582:	e020      	b.n	80015c6 <handler_leds+0x2fa>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	2104      	movs	r1, #4
 8001588:	4818      	ldr	r0, [pc, #96]	; (80015ec <handler_leds+0x320>)
 800158a:	f002 fb01 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2101      	movs	r1, #1
 8001592:	4816      	ldr	r0, [pc, #88]	; (80015ec <handler_leds+0x320>)
 8001594:	f002 fafc 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_SET);
 8001598:	2201      	movs	r2, #1
 800159a:	2102      	movs	r1, #2
 800159c:	4813      	ldr	r0, [pc, #76]	; (80015ec <handler_leds+0x320>)
 800159e:	f002 faf7 	bl	8003b90 <HAL_GPIO_WritePin>
                            break;
 80015a2:	e010      	b.n	80015c6 <handler_leds+0x2fa>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2104      	movs	r1, #4
 80015a8:	4810      	ldr	r0, [pc, #64]	; (80015ec <handler_leds+0x320>)
 80015aa:	f002 faf1 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2102      	movs	r1, #2
 80015b2:	480e      	ldr	r0, [pc, #56]	; (80015ec <handler_leds+0x320>)
 80015b4:	f002 faec 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_SET);
 80015b8:	2201      	movs	r2, #1
 80015ba:	2101      	movs	r1, #1
 80015bc:	480b      	ldr	r0, [pc, #44]	; (80015ec <handler_leds+0x320>)
 80015be:	f002 fae7 	bl	8003b90 <HAL_GPIO_WritePin>
                            break;
 80015c2:	e000      	b.n	80015c6 <handler_leds+0x2fa>

                        default:
                            break;
 80015c4:	bf00      	nop
                    }
                    break;
 80015c6:	e064      	b.n	8001692 <handler_leds+0x3c6>

                /* LED 5 */
                case E_LIST_LED5 :
                    switch (led.cmd)
 80015c8:	7b3b      	ldrb	r3, [r7, #12]
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d85c      	bhi.n	8001688 <handler_leds+0x3bc>
 80015ce:	a201      	add	r2, pc, #4	; (adr r2, 80015d4 <handler_leds+0x308>)
 80015d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d4:	080015f1 	.word	0x080015f1
 80015d8:	08001617 	.word	0x08001617
 80015dc:	0800163d 	.word	0x0800163d
 80015e0:	08001663 	.word	0x08001663
 80015e4:	20003f8c 	.word	0x20003f8c
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40020800 	.word	0x40020800
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f6:	4827      	ldr	r0, [pc, #156]	; (8001694 <handler_leds+0x3c8>)
 80015f8:	f002 faca 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001602:	4824      	ldr	r0, [pc, #144]	; (8001694 <handler_leds+0x3c8>)
 8001604:	f002 fac4 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800160e:	4821      	ldr	r0, [pc, #132]	; (8001694 <handler_leds+0x3c8>)
 8001610:	f002 fabe 	bl	8003b90 <HAL_GPIO_WritePin>
                            break;
 8001614:	e039      	b.n	800168a <handler_leds+0x3be>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800161c:	481d      	ldr	r0, [pc, #116]	; (8001694 <handler_leds+0x3c8>)
 800161e:	f002 fab7 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001628:	481a      	ldr	r0, [pc, #104]	; (8001694 <handler_leds+0x3c8>)
 800162a:	f002 fab1 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_SET);
 800162e:	2201      	movs	r2, #1
 8001630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001634:	4817      	ldr	r0, [pc, #92]	; (8001694 <handler_leds+0x3c8>)
 8001636:	f002 faab 	bl	8003b90 <HAL_GPIO_WritePin>
                            break;
 800163a:	e026      	b.n	800168a <handler_leds+0x3be>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_RESET);
 800163c:	2200      	movs	r2, #0
 800163e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001642:	4814      	ldr	r0, [pc, #80]	; (8001694 <handler_leds+0x3c8>)
 8001644:	f002 faa4 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800164e:	4811      	ldr	r0, [pc, #68]	; (8001694 <handler_leds+0x3c8>)
 8001650:	f002 fa9e 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_SET);
 8001654:	2201      	movs	r2, #1
 8001656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800165a:	480e      	ldr	r0, [pc, #56]	; (8001694 <handler_leds+0x3c8>)
 800165c:	f002 fa98 	bl	8003b90 <HAL_GPIO_WritePin>
                            break;
 8001660:	e013      	b.n	800168a <handler_leds+0x3be>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001668:	480a      	ldr	r0, [pc, #40]	; (8001694 <handler_leds+0x3c8>)
 800166a:	f002 fa91 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001674:	4807      	ldr	r0, [pc, #28]	; (8001694 <handler_leds+0x3c8>)
 8001676:	f002 fa8b 	bl	8003b90 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_SET);
 800167a:	2201      	movs	r2, #1
 800167c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <handler_leds+0x3c8>)
 8001682:	f002 fa85 	bl	8003b90 <HAL_GPIO_WritePin>
                            break;
 8001686:	e000      	b.n	800168a <handler_leds+0x3be>

                        default:
                            break;
 8001688:	bf00      	nop
                    }
                    break;
 800168a:	e002      	b.n	8001692 <handler_leds+0x3c6>
            
                default:
                    break;
            }
        }
 800168c:	bf00      	nop
 800168e:	e621      	b.n	80012d4 <handler_leds+0x8>
                    break;
 8001690:	bf00      	nop
        if(xQueueReceive(QueueHandle_leds_cmd, &led, portMAX_DELAY)) 
 8001692:	e61f      	b.n	80012d4 <handler_leds+0x8>
 8001694:	40020800 	.word	0x40020800

08001698 <leds_init>:
/** ************************************************************* *
 * @brief       init and start the payload task
 * 
 * ************************************************************* **/
void leds_init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af02      	add	r7, sp, #8
    BaseType_t status;

    HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a4:	487a      	ldr	r0, [pc, #488]	; (8001890 <leds_init+0x1f8>)
 80016a6:	f002 fa73 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b0:	4877      	ldr	r0, [pc, #476]	; (8001890 <leds_init+0x1f8>)
 80016b2:	f002 fa6d 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016bc:	4874      	ldr	r0, [pc, #464]	; (8001890 <leds_init+0x1f8>)
 80016be:	f002 fa67 	bl	8003b90 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016c8:	4871      	ldr	r0, [pc, #452]	; (8001890 <leds_init+0x1f8>)
 80016ca:	f002 fa61 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016d4:	486e      	ldr	r0, [pc, #440]	; (8001890 <leds_init+0x1f8>)
 80016d6:	f002 fa5b 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e0:	486c      	ldr	r0, [pc, #432]	; (8001894 <leds_init+0x1fc>)
 80016e2:	f002 fa55 	bl	8003b90 <HAL_GPIO_WritePin>
    
    HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ec:	4869      	ldr	r0, [pc, #420]	; (8001894 <leds_init+0x1fc>)
 80016ee:	f002 fa4f 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2180      	movs	r1, #128	; 0x80
 80016f6:	4867      	ldr	r0, [pc, #412]	; (8001894 <leds_init+0x1fc>)
 80016f8:	f002 fa4a 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2140      	movs	r1, #64	; 0x40
 8001700:	4864      	ldr	r0, [pc, #400]	; (8001894 <leds_init+0x1fc>)
 8001702:	f002 fa45 	bl	8003b90 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	2104      	movs	r1, #4
 800170a:	4862      	ldr	r0, [pc, #392]	; (8001894 <leds_init+0x1fc>)
 800170c:	f002 fa40 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	2102      	movs	r1, #2
 8001714:	485f      	ldr	r0, [pc, #380]	; (8001894 <leds_init+0x1fc>)
 8001716:	f002 fa3b 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	2101      	movs	r1, #1
 800171e:	485d      	ldr	r0, [pc, #372]	; (8001894 <leds_init+0x1fc>)
 8001720:	f002 fa36 	bl	8003b90 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800172a:	485a      	ldr	r0, [pc, #360]	; (8001894 <leds_init+0x1fc>)
 800172c:	f002 fa30 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001736:	4857      	ldr	r0, [pc, #348]	; (8001894 <leds_init+0x1fc>)
 8001738:	f002 fa2a 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001742:	4854      	ldr	r0, [pc, #336]	; (8001894 <leds_init+0x1fc>)
 8001744:	f002 fa24 	bl	8003b90 <HAL_GPIO_WritePin>

    HAL_Delay(200);
 8001748:	20c8      	movs	r0, #200	; 0xc8
 800174a:	f001 fc9d 	bl	8003088 <HAL_Delay>

    /* */ 
    HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_SET);
 800174e:	2201      	movs	r2, #1
 8001750:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001754:	484e      	ldr	r0, [pc, #312]	; (8001890 <leds_init+0x1f8>)
 8001756:	f002 fa1b 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_SET);
 800175a:	2201      	movs	r2, #1
 800175c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001760:	484b      	ldr	r0, [pc, #300]	; (8001890 <leds_init+0x1f8>)
 8001762:	f002 fa15 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_SET);
 8001766:	2201      	movs	r2, #1
 8001768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800176c:	4849      	ldr	r0, [pc, #292]	; (8001894 <leds_init+0x1fc>)
 800176e:	f002 fa0f 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_SET);
 8001772:	2201      	movs	r2, #1
 8001774:	2104      	movs	r1, #4
 8001776:	4847      	ldr	r0, [pc, #284]	; (8001894 <leds_init+0x1fc>)
 8001778:	f002 fa0a 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_SET);
 800177c:	2201      	movs	r2, #1
 800177e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001782:	4844      	ldr	r0, [pc, #272]	; (8001894 <leds_init+0x1fc>)
 8001784:	f002 fa04 	bl	8003b90 <HAL_GPIO_WritePin>

    HAL_Delay(200);
 8001788:	20c8      	movs	r0, #200	; 0xc8
 800178a:	f001 fc7d 	bl	8003088 <HAL_Delay>

    /* */ 
    HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_SET);
 800178e:	2201      	movs	r2, #1
 8001790:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001794:	483e      	ldr	r0, [pc, #248]	; (8001890 <leds_init+0x1f8>)
 8001796:	f002 f9fb 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB2_G_GPIO_Port, RGB2_G_Pin, GPIO_PIN_SET);
 800179a:	2201      	movs	r2, #1
 800179c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a0:	483b      	ldr	r0, [pc, #236]	; (8001890 <leds_init+0x1f8>)
 80017a2:	f002 f9f5 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB3_G_GPIO_Port, RGB3_G_Pin, GPIO_PIN_SET);
 80017a6:	2201      	movs	r2, #1
 80017a8:	2180      	movs	r1, #128	; 0x80
 80017aa:	483a      	ldr	r0, [pc, #232]	; (8001894 <leds_init+0x1fc>)
 80017ac:	f002 f9f0 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_SET);
 80017b0:	2201      	movs	r2, #1
 80017b2:	2102      	movs	r1, #2
 80017b4:	4837      	ldr	r0, [pc, #220]	; (8001894 <leds_init+0x1fc>)
 80017b6:	f002 f9eb 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB5_G_GPIO_Port, RGB5_G_Pin, GPIO_PIN_SET);
 80017ba:	2201      	movs	r2, #1
 80017bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017c0:	4834      	ldr	r0, [pc, #208]	; (8001894 <leds_init+0x1fc>)
 80017c2:	f002 f9e5 	bl	8003b90 <HAL_GPIO_WritePin>

    HAL_Delay(200);
 80017c6:	20c8      	movs	r0, #200	; 0xc8
 80017c8:	f001 fc5e 	bl	8003088 <HAL_Delay>

    /* */ 
    HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_SET);
 80017cc:	2201      	movs	r2, #1
 80017ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017d2:	482f      	ldr	r0, [pc, #188]	; (8001890 <leds_init+0x1f8>)
 80017d4:	f002 f9dc 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB2_B_GPIO_Port, RGB2_B_Pin, GPIO_PIN_SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017de:	482d      	ldr	r0, [pc, #180]	; (8001894 <leds_init+0x1fc>)
 80017e0:	f002 f9d6 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB3_B_GPIO_Port, RGB3_B_Pin, GPIO_PIN_SET);
 80017e4:	2201      	movs	r2, #1
 80017e6:	2140      	movs	r1, #64	; 0x40
 80017e8:	482a      	ldr	r0, [pc, #168]	; (8001894 <leds_init+0x1fc>)
 80017ea:	f002 f9d1 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB4_B_GPIO_Port, RGB4_B_Pin, GPIO_PIN_SET);
 80017ee:	2201      	movs	r2, #1
 80017f0:	2101      	movs	r1, #1
 80017f2:	4828      	ldr	r0, [pc, #160]	; (8001894 <leds_init+0x1fc>)
 80017f4:	f002 f9cc 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB5_B_GPIO_Port, RGB5_B_Pin, GPIO_PIN_SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017fe:	4825      	ldr	r0, [pc, #148]	; (8001894 <leds_init+0x1fc>)
 8001800:	f002 f9c6 	bl	8003b90 <HAL_GPIO_WritePin>

    HAL_Delay(1000);
 8001804:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001808:	f001 fc3e 	bl	8003088 <HAL_Delay>

    HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001812:	481f      	ldr	r0, [pc, #124]	; (8001890 <leds_init+0x1f8>)
 8001814:	f002 f9bc 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB2_R_GPIO_Port, RGB2_R_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800181e:	481c      	ldr	r0, [pc, #112]	; (8001890 <leds_init+0x1f8>)
 8001820:	f002 f9b6 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB3_R_GPIO_Port, RGB3_R_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800182a:	481a      	ldr	r0, [pc, #104]	; (8001894 <leds_init+0x1fc>)
 800182c:	f002 f9b0 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB4_R_GPIO_Port, RGB4_R_Pin, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	2104      	movs	r1, #4
 8001834:	4817      	ldr	r0, [pc, #92]	; (8001894 <leds_init+0x1fc>)
 8001836:	f002 f9ab 	bl	8003b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB5_R_GPIO_Port, RGB5_R_Pin, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001840:	4814      	ldr	r0, [pc, #80]	; (8001894 <leds_init+0x1fc>)
 8001842:	f002 f9a5 	bl	8003b90 <HAL_GPIO_WritePin>

    /* create the queues */
    QueueHandle_leds_cmd  = xQueueCreate(32, sizeof(ENUM_LEDS_CMD_t));
 8001846:	2200      	movs	r2, #0
 8001848:	2101      	movs	r1, #1
 800184a:	2020      	movs	r0, #32
 800184c:	f003 ffc6 	bl	80057dc <xQueueGenericCreate>
 8001850:	4603      	mov	r3, r0
 8001852:	4a11      	ldr	r2, [pc, #68]	; (8001898 <leds_init+0x200>)
 8001854:	6013      	str	r3, [r2, #0]

    status = xTaskCreate(handler_leds, "task_leds", configMINIMAL_STACK_SIZE, NULL, TASK_PRIORITY_APP_LEDS, &TaskHandle_leds);
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <leds_init+0x204>)
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	2305      	movs	r3, #5
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2300      	movs	r3, #0
 8001860:	2280      	movs	r2, #128	; 0x80
 8001862:	490f      	ldr	r1, [pc, #60]	; (80018a0 <leds_init+0x208>)
 8001864:	480f      	ldr	r0, [pc, #60]	; (80018a4 <leds_init+0x20c>)
 8001866:	f004 fc31 	bl	80060cc <xTaskCreate>
 800186a:	6078      	str	r0, [r7, #4]
    configASSERT(status == pdPASS);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d00a      	beq.n	8001888 <leds_init+0x1f0>
        __asm volatile
 8001872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001876:	f383 8811 	msr	BASEPRI, r3
 800187a:	f3bf 8f6f 	isb	sy
 800187e:	f3bf 8f4f 	dsb	sy
 8001882:	603b      	str	r3, [r7, #0]
    }
 8001884:	bf00      	nop
 8001886:	e7fe      	b.n	8001886 <leds_init+0x1ee>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40020000 	.word	0x40020000
 8001894:	40020800 	.word	0x40020800
 8001898:	20003f8c 	.word	0x20003f8c
 800189c:	20003f90 	.word	0x20003f90
 80018a0:	08008f8c 	.word	0x08008f8c
 80018a4:	080012cd 	.word	0x080012cd

080018a8 <leds_send_cmd>:
 * @brief       send a command to the payload task
 * 
 * @param       cmd 
 * ************************************************************* **/
void leds_send_cmd(ENUM_LEDS_LIST_t led, ENUM_LEDS_CMD_t command)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	460a      	mov	r2, r1
 80018b2:	71fb      	strb	r3, [r7, #7]
 80018b4:	4613      	mov	r3, r2
 80018b6:	71bb      	strb	r3, [r7, #6]
    STRUCT_LEDS_t data =
 80018b8:	79bb      	ldrb	r3, [r7, #6]
 80018ba:	733b      	strb	r3, [r7, #12]
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	737b      	strb	r3, [r7, #13]
    {
        .cmd = command, 
        .list = led
    };

    xQueueSend(QueueHandle_leds_cmd, &data, (TickType_t)0);
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <leds_send_cmd+0x30>)
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	f107 010c 	add.w	r1, r7, #12
 80018c8:	2300      	movs	r3, #0
 80018ca:	2200      	movs	r2, #0
 80018cc:	f004 f808 	bl	80058e0 <xQueueGenericSend>
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20003f8c 	.word	0x20003f8c

080018dc <handler_uart>:
 * @brief       
 * 
 * @param       parameters 
 * ************************************************************* **/
void handler_uart(void* parameters)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
    uint8_t frame[FRAME_SIZE] = {0};
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
 80018f8:	751a      	strb	r2, [r3, #20]

    while(1)
    {
        if(xQueueReceive(QueueHandle_uart, &frame, portMAX_DELAY) == pdTRUE)
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <handler_uart+0x48>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f107 010c 	add.w	r1, r7, #12
 8001902:	f04f 32ff 	mov.w	r2, #4294967295
 8001906:	4618      	mov	r0, r3
 8001908:	f004 f992 	bl	8005c30 <xQueueReceive>
 800190c:	4603      	mov	r3, r0
 800190e:	2b01      	cmp	r3, #1
 8001910:	d1f3      	bne.n	80018fa <handler_uart+0x1e>
        {
            TF_Accept(TinyFrame_RX, frame, FRAME_SIZE);
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <handler_uart+0x4c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f107 010c 	add.w	r1, r7, #12
 800191a:	2219      	movs	r2, #25
 800191c:	4618      	mov	r0, r3
 800191e:	f000 fd59 	bl	80023d4 <TF_Accept>
        if(xQueueReceive(QueueHandle_uart, &frame, portMAX_DELAY) == pdTRUE)
 8001922:	e7ea      	b.n	80018fa <handler_uart+0x1e>
 8001924:	20003f9c 	.word	0x20003f9c
 8001928:	20003f94 	.word	0x20003f94

0800192c <uart_init>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
void uart_init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af02      	add	r7, sp, #8
    BaseType_t status;

    /* subscribe for all message id */
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_APP_PHASE, id_parser_app_phase);
 8001932:	4b5c      	ldr	r3, [pc, #368]	; (8001aa4 <uart_init+0x178>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a5c      	ldr	r2, [pc, #368]	; (8001aa8 <uart_init+0x17c>)
 8001938:	2110      	movs	r1, #16
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fc1c 	bl	8002178 <TF_AddTypeListener>
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_APP_WINDOW, id_parser_app_window);
 8001940:	4b58      	ldr	r3, [pc, #352]	; (8001aa4 <uart_init+0x178>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a59      	ldr	r2, [pc, #356]	; (8001aac <uart_init+0x180>)
 8001946:	2112      	movs	r1, #18
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fc15 	bl	8002178 <TF_AddTypeListener>
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_APP_AEROC, id_parser_app_aeroc);
 800194e:	4b55      	ldr	r3, [pc, #340]	; (8001aa4 <uart_init+0x178>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a57      	ldr	r2, [pc, #348]	; (8001ab0 <uart_init+0x184>)
 8001954:	2111      	movs	r1, #17
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fc0e 	bl	8002178 <TF_AddTypeListener>
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_SENS_IMU_AX, id_parser_sens_imu_ax);
 800195c:	4b51      	ldr	r3, [pc, #324]	; (8001aa4 <uart_init+0x178>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a54      	ldr	r2, [pc, #336]	; (8001ab4 <uart_init+0x188>)
 8001962:	2120      	movs	r1, #32
 8001964:	4618      	mov	r0, r3
 8001966:	f000 fc07 	bl	8002178 <TF_AddTypeListener>
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_SENS_IMU_AY, id_parser_sens_imu_ay);
 800196a:	4b4e      	ldr	r3, [pc, #312]	; (8001aa4 <uart_init+0x178>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a52      	ldr	r2, [pc, #328]	; (8001ab8 <uart_init+0x18c>)
 8001970:	2121      	movs	r1, #33	; 0x21
 8001972:	4618      	mov	r0, r3
 8001974:	f000 fc00 	bl	8002178 <TF_AddTypeListener>
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_SENS_IMU_AZ, id_parser_sens_imu_az);
 8001978:	4b4a      	ldr	r3, [pc, #296]	; (8001aa4 <uart_init+0x178>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a4f      	ldr	r2, [pc, #316]	; (8001abc <uart_init+0x190>)
 800197e:	2122      	movs	r1, #34	; 0x22
 8001980:	4618      	mov	r0, r3
 8001982:	f000 fbf9 	bl	8002178 <TF_AddTypeListener>
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_SENS_IMU_GX, id_parser_sens_imu_gx);
 8001986:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <uart_init+0x178>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a4d      	ldr	r2, [pc, #308]	; (8001ac0 <uart_init+0x194>)
 800198c:	2123      	movs	r1, #35	; 0x23
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fbf2 	bl	8002178 <TF_AddTypeListener>
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_SENS_IMU_GY, id_parser_sens_imu_gy);
 8001994:	4b43      	ldr	r3, [pc, #268]	; (8001aa4 <uart_init+0x178>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a4a      	ldr	r2, [pc, #296]	; (8001ac4 <uart_init+0x198>)
 800199a:	2124      	movs	r1, #36	; 0x24
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fbeb 	bl	8002178 <TF_AddTypeListener>
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_SENS_IMU_GZ, id_parser_sens_imu_gz);
 80019a2:	4b40      	ldr	r3, [pc, #256]	; (8001aa4 <uart_init+0x178>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a48      	ldr	r2, [pc, #288]	; (8001ac8 <uart_init+0x19c>)
 80019a8:	2125      	movs	r1, #37	; 0x25
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 fbe4 	bl	8002178 <TF_AddTypeListener>
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_SENS_IMU_ERROR, id_parser_sens_imu_error);
 80019b0:	4b3c      	ldr	r3, [pc, #240]	; (8001aa4 <uart_init+0x178>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a45      	ldr	r2, [pc, #276]	; (8001acc <uart_init+0x1a0>)
 80019b6:	2127      	movs	r1, #39	; 0x27
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 fbdd 	bl	8002178 <TF_AddTypeListener>
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_SENS_IMU_TEMP, id_parser_sens_imu_temp);
 80019be:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <uart_init+0x178>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a43      	ldr	r2, [pc, #268]	; (8001ad0 <uart_init+0x1a4>)
 80019c4:	2126      	movs	r1, #38	; 0x26
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 fbd6 	bl	8002178 <TF_AddTypeListener>
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_SENS_BARO_PRESS, id_parser_sens_baro_press);
 80019cc:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <uart_init+0x178>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a40      	ldr	r2, [pc, #256]	; (8001ad4 <uart_init+0x1a8>)
 80019d2:	2128      	movs	r1, #40	; 0x28
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 fbcf 	bl	8002178 <TF_AddTypeListener>
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_SENS_BARO_TEMP, id_parser_sens_baro_temp);
 80019da:	4b32      	ldr	r3, [pc, #200]	; (8001aa4 <uart_init+0x178>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a3e      	ldr	r2, [pc, #248]	; (8001ad8 <uart_init+0x1ac>)
 80019e0:	2129      	movs	r1, #41	; 0x29
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 fbc8 	bl	8002178 <TF_AddTypeListener>
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_SENS_BARO_ERROR, id_parser_sens_baro_error);
 80019e8:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <uart_init+0x178>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a3b      	ldr	r2, [pc, #236]	; (8001adc <uart_init+0x1b0>)
 80019ee:	212a      	movs	r1, #42	; 0x2a
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 fbc1 	bl	8002178 <TF_AddTypeListener>
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_MNTR_BAT_SEQ, id_parser_mntr_bat_seq);
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <uart_init+0x178>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a39      	ldr	r2, [pc, #228]	; (8001ae0 <uart_init+0x1b4>)
 80019fc:	2130      	movs	r1, #48	; 0x30
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 fbba 	bl	8002178 <TF_AddTypeListener>
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_MNTR_BAT_MOTOR1, id_parser_mntr_bat_motor1);
 8001a04:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <uart_init+0x178>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a36      	ldr	r2, [pc, #216]	; (8001ae4 <uart_init+0x1b8>)
 8001a0a:	2131      	movs	r1, #49	; 0x31
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 fbb3 	bl	8002178 <TF_AddTypeListener>
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_MNTR_BAT_MOTOR2, id_parser_mntr_bat_motor2);
 8001a12:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <uart_init+0x178>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a34      	ldr	r2, [pc, #208]	; (8001ae8 <uart_init+0x1bc>)
 8001a18:	2132      	movs	r1, #50	; 0x32
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 fbac 	bl	8002178 <TF_AddTypeListener>
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_RECOV_LAST_CMD, id_parser_recov_last_cmd);
 8001a20:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <uart_init+0x178>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a31      	ldr	r2, [pc, #196]	; (8001aec <uart_init+0x1c0>)
 8001a26:	2140      	movs	r1, #64	; 0x40
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 fba5 	bl	8002178 <TF_AddTypeListener>
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_RECOV_STATUS, id_parser_recov_status);
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <uart_init+0x178>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a2f      	ldr	r2, [pc, #188]	; (8001af0 <uart_init+0x1c4>)
 8001a34:	2141      	movs	r1, #65	; 0x41
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 fb9e 	bl	8002178 <TF_AddTypeListener>
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_PAYLOAD_LAST_CMD, id_parser_payload_last_cmd);
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <uart_init+0x178>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a2c      	ldr	r2, [pc, #176]	; (8001af4 <uart_init+0x1c8>)
 8001a42:	2150      	movs	r1, #80	; 0x50
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 fb97 	bl	8002178 <TF_AddTypeListener>
    TF_AddTypeListener(TinyFrame_RX, HMI_ID_PAYLOAD_STATUS, id_parser_payload_status);
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <uart_init+0x178>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a2a      	ldr	r2, [pc, #168]	; (8001af8 <uart_init+0x1cc>)
 8001a50:	2151      	movs	r1, #81	; 0x51
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 fb90 	bl	8002178 <TF_AddTypeListener>

    QueueHandle_uart = xQueueCreate (32, sizeof(uint8_t*));
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2104      	movs	r1, #4
 8001a5c:	2020      	movs	r0, #32
 8001a5e:	f003 febd 	bl	80057dc <xQueueGenericCreate>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4a25      	ldr	r2, [pc, #148]	; (8001afc <uart_init+0x1d0>)
 8001a66:	6013      	str	r3, [r2, #0]
    status = xTaskCreate(handler_uart, "task_uart", configMINIMAL_STACK_SIZE, NULL, TASK_PRIORITY_APP_UART, &TaskHandle_uart);
 8001a68:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <uart_init+0x1d4>)
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	2305      	movs	r3, #5
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2300      	movs	r3, #0
 8001a72:	2280      	movs	r2, #128	; 0x80
 8001a74:	4923      	ldr	r1, [pc, #140]	; (8001b04 <uart_init+0x1d8>)
 8001a76:	4824      	ldr	r0, [pc, #144]	; (8001b08 <uart_init+0x1dc>)
 8001a78:	f004 fb28 	bl	80060cc <xTaskCreate>
 8001a7c:	6078      	str	r0, [r7, #4]
    configASSERT(status == pdPASS);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d00a      	beq.n	8001a9a <uart_init+0x16e>
        __asm volatile
 8001a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a88:	f383 8811 	msr	BASEPRI, r3
 8001a8c:	f3bf 8f6f 	isb	sy
 8001a90:	f3bf 8f4f 	dsb	sy
 8001a94:	603b      	str	r3, [r7, #0]
    }
 8001a96:	bf00      	nop
 8001a98:	e7fe      	b.n	8001a98 <uart_init+0x16c>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20003f94 	.word	0x20003f94
 8001aa8:	08001b0d 	.word	0x08001b0d
 8001aac:	08001b91 	.word	0x08001b91
 8001ab0:	08001bf5 	.word	0x08001bf5
 8001ab4:	08001c21 	.word	0x08001c21
 8001ab8:	08001c49 	.word	0x08001c49
 8001abc:	08001c71 	.word	0x08001c71
 8001ac0:	08001c99 	.word	0x08001c99
 8001ac4:	08001cc1 	.word	0x08001cc1
 8001ac8:	08001ced 	.word	0x08001ced
 8001acc:	08001d45 	.word	0x08001d45
 8001ad0:	08001d19 	.word	0x08001d19
 8001ad4:	08001d71 	.word	0x08001d71
 8001ad8:	08001d9d 	.word	0x08001d9d
 8001adc:	08001dc9 	.word	0x08001dc9
 8001ae0:	08001df5 	.word	0x08001df5
 8001ae4:	08001e59 	.word	0x08001e59
 8001ae8:	08001ebd 	.word	0x08001ebd
 8001aec:	08001f21 	.word	0x08001f21
 8001af0:	08001f4d 	.word	0x08001f4d
 8001af4:	08001f79 	.word	0x08001f79
 8001af8:	08001fa5 	.word	0x08001fa5
 8001afc:	20003f9c 	.word	0x20003f9c
 8001b00:	20003f98 	.word	0x20003f98
 8001b04:	08008f98 	.word	0x08008f98
 8001b08:	080018dd 	.word	0x080018dd

08001b0c <id_parser_app_phase>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_app_phase(TinyFrame *tf, TF_Msg *msg)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.APP.PHASE, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3312      	adds	r3, #18
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <id_parser_app_phase+0x74>)
 8001b20:	601a      	str	r2, [r3, #0]

    /* phase wait */
    if(!strcmp("wait", (char*)(tf->data)))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3312      	adds	r3, #18
 8001b26:	4619      	mov	r1, r3
 8001b28:	4816      	ldr	r0, [pc, #88]	; (8001b84 <id_parser_app_phase+0x78>)
 8001b2a:	f7fe fb71 	bl	8000210 <strcmp>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d104      	bne.n	8001b3e <id_parser_app_phase+0x32>
    {
        leds_send_cmd(E_LIST_LED4, E_CMD_LEDS_GREEN);
 8001b34:	2102      	movs	r1, #2
 8001b36:	2003      	movs	r0, #3
 8001b38:	f7ff feb6 	bl	80018a8 <leds_send_cmd>
 8001b3c:	e01a      	b.n	8001b74 <id_parser_app_phase+0x68>
    }
    else
    /* phase ascend */
    if(!strcmp("ascend", (char*)(tf->data)))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3312      	adds	r3, #18
 8001b42:	4619      	mov	r1, r3
 8001b44:	4810      	ldr	r0, [pc, #64]	; (8001b88 <id_parser_app_phase+0x7c>)
 8001b46:	f7fe fb63 	bl	8000210 <strcmp>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d104      	bne.n	8001b5a <id_parser_app_phase+0x4e>
    {
        leds_send_cmd(E_LIST_LED4, E_CMD_LEDS_RED);
 8001b50:	2101      	movs	r1, #1
 8001b52:	2003      	movs	r0, #3
 8001b54:	f7ff fea8 	bl	80018a8 <leds_send_cmd>
 8001b58:	e00c      	b.n	8001b74 <id_parser_app_phase+0x68>
    }
    else
    /* phase descend */
    if(!strcmp("descend", (char*)(tf->data)))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3312      	adds	r3, #18
 8001b5e:	4619      	mov	r1, r3
 8001b60:	480a      	ldr	r0, [pc, #40]	; (8001b8c <id_parser_app_phase+0x80>)
 8001b62:	f7fe fb55 	bl	8000210 <strcmp>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d103      	bne.n	8001b74 <id_parser_app_phase+0x68>
    {
        leds_send_cmd(E_LIST_LED4, E_CMD_LEDS_NONE);
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	2003      	movs	r0, #3
 8001b70:	f7ff fe9a 	bl	80018a8 <leds_send_cmd>
    }

    return TF_STAY;
 8001b74:	2301      	movs	r3, #1
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200000a8 	.word	0x200000a8
 8001b84:	08008fa4 	.word	0x08008fa4
 8001b88:	08008fac 	.word	0x08008fac
 8001b8c:	08008fb4 	.word	0x08008fb4

08001b90 <id_parser_app_window>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_app_window(TinyFrame *tf, TF_Msg *msg)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.APP.WINDOW, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3312      	adds	r3, #18
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <id_parser_app_window+0x58>)
 8001ba4:	621a      	str	r2, [r3, #32]

    /* window in */
    if(!strcmp("in", (char*)(tf->data)))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3312      	adds	r3, #18
 8001baa:	4619      	mov	r1, r3
 8001bac:	480f      	ldr	r0, [pc, #60]	; (8001bec <id_parser_app_window+0x5c>)
 8001bae:	f7fe fb2f 	bl	8000210 <strcmp>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d104      	bne.n	8001bc2 <id_parser_app_window+0x32>
    {
        leds_send_cmd(E_LIST_LED4, E_CMD_LEDS_BLUE);
 8001bb8:	2103      	movs	r1, #3
 8001bba:	2003      	movs	r0, #3
 8001bbc:	f7ff fe74 	bl	80018a8 <leds_send_cmd>
 8001bc0:	e00c      	b.n	8001bdc <id_parser_app_window+0x4c>
    }
    else
    /* window out */
    if(!strcmp("out", (char*)(tf->data)))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3312      	adds	r3, #18
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <id_parser_app_window+0x60>)
 8001bca:	f7fe fb21 	bl	8000210 <strcmp>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d103      	bne.n	8001bdc <id_parser_app_window+0x4c>
    {
        leds_send_cmd(E_LIST_LED4, E_CMD_LEDS_NONE);
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2003      	movs	r0, #3
 8001bd8:	f7ff fe66 	bl	80018a8 <leds_send_cmd>
    }

    return TF_STAY;
 8001bdc:	2301      	movs	r3, #1
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200000a8 	.word	0x200000a8
 8001bec:	08008fbc 	.word	0x08008fbc
 8001bf0:	08008fc0 	.word	0x08008fc0

08001bf4 <id_parser_app_aeroc>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_app_aeroc(TinyFrame *tf, TF_Msg *msg)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.APP.AEROC, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3312      	adds	r3, #18
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <id_parser_app_aeroc+0x28>)
 8001c08:	611a      	str	r2, [r3, #16]
    leds_send_cmd(E_LIST_LED5, E_CMD_LEDS_RED);
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	2004      	movs	r0, #4
 8001c0e:	f7ff fe4b 	bl	80018a8 <leds_send_cmd>
    return TF_STAY;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	200000a8 	.word	0x200000a8

08001c20 <id_parser_sens_imu_ax>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_sens_imu_ax(TinyFrame *tf, TF_Msg *msg)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.SENSOR.IMU_AX, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3312      	adds	r3, #18
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <id_parser_sens_imu_ax+0x24>)
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
    return TF_STAY;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	200000a8 	.word	0x200000a8

08001c48 <id_parser_sens_imu_ay>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_sens_imu_ay(TinyFrame *tf, TF_Msg *msg)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.SENSOR.IMU_AY, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3312      	adds	r3, #18
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <id_parser_sens_imu_ay+0x24>)
 8001c5c:	651a      	str	r2, [r3, #80]	; 0x50
    return TF_STAY;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	200000a8 	.word	0x200000a8

08001c70 <id_parser_sens_imu_az>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_sens_imu_az(TinyFrame *tf, TF_Msg *msg)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.SENSOR.IMU_AZ, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3312      	adds	r3, #18
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <id_parser_sens_imu_az+0x24>)
 8001c84:	661a      	str	r2, [r3, #96]	; 0x60
    return TF_STAY;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	200000a8 	.word	0x200000a8

08001c98 <id_parser_sens_imu_gx>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_sens_imu_gx(TinyFrame *tf, TF_Msg *msg)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.SENSOR.IMU_GX, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3312      	adds	r3, #18
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <id_parser_sens_imu_gx+0x24>)
 8001cac:	671a      	str	r2, [r3, #112]	; 0x70
    return TF_STAY;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	200000a8 	.word	0x200000a8

08001cc0 <id_parser_sens_imu_gy>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_sens_imu_gy(TinyFrame *tf, TF_Msg *msg)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.SENSOR.IMU_GY, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3312      	adds	r3, #18
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <id_parser_sens_imu_gy+0x28>)
 8001cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    return TF_STAY;
 8001cd8:	2301      	movs	r3, #1
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	200000a8 	.word	0x200000a8

08001cec <id_parser_sens_imu_gz>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_sens_imu_gz(TinyFrame *tf, TF_Msg *msg)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.SENSOR.IMU_GZ, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3312      	adds	r3, #18
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <id_parser_sens_imu_gz+0x28>)
 8001d00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    return TF_STAY;
 8001d04:	2301      	movs	r3, #1
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	200000a8 	.word	0x200000a8

08001d18 <id_parser_sens_imu_temp>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_sens_imu_temp(TinyFrame *tf, TF_Msg *msg)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.SENSOR.IMU_TEMP, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3312      	adds	r3, #18
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <id_parser_sens_imu_temp+0x28>)
 8001d2c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    return TF_STAY;
 8001d30:	2301      	movs	r3, #1
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	200000a8 	.word	0x200000a8

08001d44 <id_parser_sens_imu_error>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_sens_imu_error(TinyFrame *tf, TF_Msg *msg)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.ERROR.IMU, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3312      	adds	r3, #18
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <id_parser_sens_imu_error+0x28>)
 8001d58:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    return TF_STAY;
 8001d5c:	2301      	movs	r3, #1
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	200000a8 	.word	0x200000a8

08001d70 <id_parser_sens_baro_press>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_sens_baro_press(TinyFrame *tf, TF_Msg *msg)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.SENSOR.BARO_PRESS, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3312      	adds	r3, #18
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <id_parser_sens_baro_press+0x28>)
 8001d84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    return TF_STAY;
 8001d88:	2301      	movs	r3, #1
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200000a8 	.word	0x200000a8

08001d9c <id_parser_sens_baro_temp>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_sens_baro_temp(TinyFrame *tf, TF_Msg *msg)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.SENSOR.BARO_TEMP, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3312      	adds	r3, #18
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <id_parser_sens_baro_temp+0x28>)
 8001db0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    return TF_STAY;
 8001db4:	2301      	movs	r3, #1
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	200000a8 	.word	0x200000a8

08001dc8 <id_parser_sens_baro_error>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_sens_baro_error(TinyFrame *tf, TF_Msg *msg)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.ERROR.BARO, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3312      	adds	r3, #18
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <id_parser_sens_baro_error+0x28>)
 8001ddc:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    return TF_STAY;
 8001de0:	2301      	movs	r3, #1
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	200000a8 	.word	0x200000a8

08001df4 <id_parser_mntr_bat_seq>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_mntr_bat_seq(TinyFrame *tf, TF_Msg *msg)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.MNTR.BAT_SEQ, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3312      	adds	r3, #18
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <id_parser_mntr_bat_seq+0x58>)
 8001e08:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    
    /* battery ok */
    if(!strcmp("ok", (char*)(tf->data)))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3312      	adds	r3, #18
 8001e10:	4619      	mov	r1, r3
 8001e12:	480f      	ldr	r0, [pc, #60]	; (8001e50 <id_parser_mntr_bat_seq+0x5c>)
 8001e14:	f7fe f9fc 	bl	8000210 <strcmp>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d104      	bne.n	8001e28 <id_parser_mntr_bat_seq+0x34>
    {
        leds_send_cmd(E_LIST_LED1, E_CMD_LEDS_GREEN);
 8001e1e:	2102      	movs	r1, #2
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff fd41 	bl	80018a8 <leds_send_cmd>
 8001e26:	e00c      	b.n	8001e42 <id_parser_mntr_bat_seq+0x4e>
    }
    else
    /* battery ko */
    if(!strcmp("ko", (char*)(tf->data)))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3312      	adds	r3, #18
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4809      	ldr	r0, [pc, #36]	; (8001e54 <id_parser_mntr_bat_seq+0x60>)
 8001e30:	f7fe f9ee 	bl	8000210 <strcmp>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d103      	bne.n	8001e42 <id_parser_mntr_bat_seq+0x4e>
    {
        leds_send_cmd(E_LIST_LED1, E_CMD_LEDS_RED);
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f7ff fd33 	bl	80018a8 <leds_send_cmd>
    }

    return TF_STAY;
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200000a8 	.word	0x200000a8
 8001e50:	08008fc4 	.word	0x08008fc4
 8001e54:	08008fc8 	.word	0x08008fc8

08001e58 <id_parser_mntr_bat_motor1>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_mntr_bat_motor1(TinyFrame *tf, TF_Msg *msg)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.MNTR.BAT_MOTOR1, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3312      	adds	r3, #18
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <id_parser_mntr_bat_motor1+0x58>)
 8001e6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    
    /* battery ok */
    if(!strcmp("ok", (char*)(tf->data)))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3312      	adds	r3, #18
 8001e74:	4619      	mov	r1, r3
 8001e76:	480f      	ldr	r0, [pc, #60]	; (8001eb4 <id_parser_mntr_bat_motor1+0x5c>)
 8001e78:	f7fe f9ca 	bl	8000210 <strcmp>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d104      	bne.n	8001e8c <id_parser_mntr_bat_motor1+0x34>
    {
        leds_send_cmd(E_LIST_LED2, E_CMD_LEDS_GREEN);
 8001e82:	2102      	movs	r1, #2
 8001e84:	2001      	movs	r0, #1
 8001e86:	f7ff fd0f 	bl	80018a8 <leds_send_cmd>
 8001e8a:	e00c      	b.n	8001ea6 <id_parser_mntr_bat_motor1+0x4e>
    }
    else
    /* battery ko */
    if(!strcmp("ko", (char*)(tf->data)))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3312      	adds	r3, #18
 8001e90:	4619      	mov	r1, r3
 8001e92:	4809      	ldr	r0, [pc, #36]	; (8001eb8 <id_parser_mntr_bat_motor1+0x60>)
 8001e94:	f7fe f9bc 	bl	8000210 <strcmp>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d103      	bne.n	8001ea6 <id_parser_mntr_bat_motor1+0x4e>
    {
        leds_send_cmd(E_LIST_LED2, E_CMD_LEDS_RED);
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7ff fd01 	bl	80018a8 <leds_send_cmd>
    }

    return TF_STAY;
 8001ea6:	2301      	movs	r3, #1
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	200000a8 	.word	0x200000a8
 8001eb4:	08008fc4 	.word	0x08008fc4
 8001eb8:	08008fc8 	.word	0x08008fc8

08001ebc <id_parser_mntr_bat_motor2>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_mntr_bat_motor2(TinyFrame *tf, TF_Msg *msg)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.MNTR.BAT_MOTOR2, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3312      	adds	r3, #18
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <id_parser_mntr_bat_motor2+0x58>)
 8001ed0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

    /* battery ok */
    if(!strcmp("ok", (char*)(tf->data)))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3312      	adds	r3, #18
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480f      	ldr	r0, [pc, #60]	; (8001f18 <id_parser_mntr_bat_motor2+0x5c>)
 8001edc:	f7fe f998 	bl	8000210 <strcmp>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d104      	bne.n	8001ef0 <id_parser_mntr_bat_motor2+0x34>
    {
        leds_send_cmd(E_LIST_LED3, E_CMD_LEDS_GREEN);
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	2002      	movs	r0, #2
 8001eea:	f7ff fcdd 	bl	80018a8 <leds_send_cmd>
 8001eee:	e00c      	b.n	8001f0a <id_parser_mntr_bat_motor2+0x4e>
    }
    else
    /* battery ko */
    if(!strcmp("ko", (char*)(tf->data)))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3312      	adds	r3, #18
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4809      	ldr	r0, [pc, #36]	; (8001f1c <id_parser_mntr_bat_motor2+0x60>)
 8001ef8:	f7fe f98a 	bl	8000210 <strcmp>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d103      	bne.n	8001f0a <id_parser_mntr_bat_motor2+0x4e>
    {
        leds_send_cmd(E_LIST_LED3, E_CMD_LEDS_RED);
 8001f02:	2101      	movs	r1, #1
 8001f04:	2002      	movs	r0, #2
 8001f06:	f7ff fccf 	bl	80018a8 <leds_send_cmd>
    }

    return TF_STAY;
 8001f0a:	2301      	movs	r3, #1
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200000a8 	.word	0x200000a8
 8001f18:	08008fc4 	.word	0x08008fc4
 8001f1c:	08008fc8 	.word	0x08008fc8

08001f20 <id_parser_recov_last_cmd>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_recov_last_cmd(TinyFrame *tf, TF_Msg *msg)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.RECOVERY.LAST_CMD, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3312      	adds	r3, #18
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <id_parser_recov_last_cmd+0x28>)
 8001f34:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    return TF_STAY;
 8001f38:	2301      	movs	r3, #1
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	200000a8 	.word	0x200000a8

08001f4c <id_parser_recov_status>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_recov_status(TinyFrame *tf, TF_Msg *msg)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.RECOVERY.STATUS, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3312      	adds	r3, #18
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <id_parser_recov_status+0x28>)
 8001f60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return TF_STAY;
 8001f64:	2301      	movs	r3, #1
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	200000a8 	.word	0x200000a8

08001f78 <id_parser_payload_last_cmd>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_payload_last_cmd(TinyFrame *tf, TF_Msg *msg)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.PAYLOAD.LAST_CMD, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3312      	adds	r3, #18
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <id_parser_payload_last_cmd+0x28>)
 8001f8c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    return TF_STAY;
 8001f90:	2301      	movs	r3, #1
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	200000a8 	.word	0x200000a8

08001fa4 <id_parser_payload_status>:
 * @brief       
 * 
 * @param       data 
 * ************************************************************* **/
static TF_Result id_parser_payload_status(TinyFrame *tf, TF_Msg *msg)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
    memcpy(uart_storage.PAYLOAD.STATUS, (char*)(tf->data), sizeof(PAYLOAD_SIZE));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3312      	adds	r3, #18
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <id_parser_payload_status+0x28>)
 8001fb8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    return TF_STAY;
 8001fbc:	2301      	movs	r3, #1
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	200000a8 	.word	0x200000a8

08001fd0 <uart_storage_attach>:
 * @brief       
 * 
 * @return      STRUCT_UART_STORAGE_t* 
 * ************************************************************* **/
void uart_storage_attach(STRUCT_UART_STORAGE_t* storage)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
   storage = &uart_storage;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <uart_storage_attach+0x18>)
 8001fda:	607b      	str	r3, [r7, #4]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	200000a8 	.word	0x200000a8

08001fec <TF_ClearMsg>:
 * Clear message struct
 *
 * @param msg - message to clear in-place
 */
static inline void TF_ClearMsg(TF_Msg *msg)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
    memset(msg, 0, sizeof(TF_Msg));
 8001ff4:	2214      	movs	r2, #20
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f005 ff4b 	bl	8007e94 <memset>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <TF_CksumStart>:
        0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
        0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
    };

    static TF_CKSUM TF_CksumStart(void)
      { return 0; }
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0
 800200a:	2300      	movs	r3, #0
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <TF_CksumAdd>:

    static TF_CKSUM TF_CksumAdd(TF_CKSUM cksum, uint8_t byte)
      { return (cksum >> 8) ^ crc16_table[(cksum ^ byte) & 0xff]; }
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	460a      	mov	r2, r1
 8002022:	80fb      	strh	r3, [r7, #6]
 8002024:	4613      	mov	r3, r2
 8002026:	717b      	strb	r3, [r7, #5]
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	0a1b      	lsrs	r3, r3, #8
 800202c:	b29a      	uxth	r2, r3
 800202e:	88f9      	ldrh	r1, [r7, #6]
 8002030:	797b      	ldrb	r3, [r7, #5]
 8002032:	404b      	eors	r3, r1
 8002034:	b2db      	uxtb	r3, r3
 8002036:	4905      	ldr	r1, [pc, #20]	; (800204c <TF_CksumAdd+0x34>)
 8002038:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800203c:	4053      	eors	r3, r2
 800203e:	b29b      	uxth	r3, r3
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	080099ec 	.word	0x080099ec

08002050 <TF_CksumEnd>:

    static TF_CKSUM TF_CksumEnd(TF_CKSUM cksum)
      { return cksum; }
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	80fb      	strh	r3, [r7, #6]
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <renew_id_listener>:

//region Listeners

/** Reset ID listener's timeout to the original value */
static inline void _TF_FN renew_id_listener(struct TF_IdListener_ *lst)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
    lst->timeout = lst->timeout_max;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	89da      	ldrh	r2, [r3, #14]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	819a      	strh	r2, [r3, #12]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <cleanup_id_listener>:

/** Notify callback about ID listener's demise & let it free any resources in userdata */
static void _TF_FN cleanup_id_listener(TinyFrame *tf, TF_COUNT i, struct TF_IdListener_ *lst)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	460b      	mov	r3, r1
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	72fb      	strb	r3, [r7, #11]
    TF_Msg msg;
    if (lst->fn == NULL) return;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d02c      	beq.n	80020f4 <cleanup_id_listener+0x70>

    // Make user clean up their data - only if not NULL
    if (lst->userdata != NULL || lst->userdata2 != NULL) {
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d103      	bne.n	80020aa <cleanup_id_listener+0x26>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00e      	beq.n	80020c8 <cleanup_id_listener+0x44>
        msg.userdata = lst->userdata;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	623b      	str	r3, [r7, #32]
        msg.userdata2 = lst->userdata2;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
        msg.data = NULL; // this is a signal that the listener should clean up
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
        lst->fn(tf, &msg); // return value is ignored here - use TF_STAY or TF_CLOSE
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f107 0214 	add.w	r2, r7, #20
 80020c2:	4611      	mov	r1, r2
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	4798      	blx	r3
    }

    lst->fn = NULL; // Discard listener
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	605a      	str	r2, [r3, #4]
    lst->fn_timeout = NULL;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]

    if (i == tf->count_id_lst - 1) {
 80020d4:	7afa      	ldrb	r2, [r7, #11]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f893 35fc 	ldrb.w	r3, [r3, #1532]	; 0x5fc
 80020dc:	3b01      	subs	r3, #1
 80020de:	429a      	cmp	r2, r3
 80020e0:	d109      	bne.n	80020f6 <cleanup_id_listener+0x72>
        tf->count_id_lst--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 35fc 	ldrb.w	r3, [r3, #1532]	; 0x5fc
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
 80020f2:	e000      	b.n	80020f6 <cleanup_id_listener+0x72>
    if (lst->fn == NULL) return;
 80020f4:	bf00      	nop
    }
}
 80020f6:	3728      	adds	r7, #40	; 0x28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <cleanup_type_listener>:

/** Clean up Type listener */
static inline void _TF_FN cleanup_type_listener(TinyFrame *tf, TF_COUNT i, struct TF_TypeListener_ *lst)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	460b      	mov	r3, r1
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	72fb      	strb	r3, [r7, #11]
    lst->fn = NULL; // Discard listener
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	605a      	str	r2, [r3, #4]
    if (i == tf->count_type_lst - 1) {
 8002110:	7afa      	ldrb	r2, [r7, #11]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f893 35fd 	ldrb.w	r3, [r3, #1533]	; 0x5fd
 8002118:	3b01      	subs	r3, #1
 800211a:	429a      	cmp	r2, r3
 800211c:	d107      	bne.n	800212e <cleanup_type_listener+0x32>
        tf->count_type_lst--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f893 35fd 	ldrb.w	r3, [r3, #1533]	; 0x5fd
 8002124:	3b01      	subs	r3, #1
 8002126:	b2da      	uxtb	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f883 25fd 	strb.w	r2, [r3, #1533]	; 0x5fd
    }
}
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <cleanup_generic_listener>:

/** Clean up Generic listener */
static inline void _TF_FN cleanup_generic_listener(TinyFrame *tf, TF_COUNT i, struct TF_GenericListener_ *lst)
{
 800213a:	b480      	push	{r7}
 800213c:	b085      	sub	sp, #20
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	460b      	mov	r3, r1
 8002144:	607a      	str	r2, [r7, #4]
 8002146:	72fb      	strb	r3, [r7, #11]
    lst->fn = NULL; // Discard listener
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
    if (i == tf->count_generic_lst - 1) {
 800214e:	7afa      	ldrb	r2, [r7, #11]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 35fe 	ldrb.w	r3, [r3, #1534]	; 0x5fe
 8002156:	3b01      	subs	r3, #1
 8002158:	429a      	cmp	r2, r3
 800215a:	d107      	bne.n	800216c <cleanup_generic_listener+0x32>
        tf->count_generic_lst--;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 35fe 	ldrb.w	r3, [r3, #1534]	; 0x5fe
 8002162:	3b01      	subs	r3, #1
 8002164:	b2da      	uxtb	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f883 25fe 	strb.w	r2, [r3, #1534]	; 0x5fe
    }
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <TF_AddTypeListener>:
    return false;
}

/** Add a new Type listener. Returns 1 on success. */
bool _TF_FN TF_AddTypeListener(TinyFrame *tf, TF_TYPE frame_type, TF_Listener cb)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	460b      	mov	r3, r1
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	72fb      	strb	r3, [r7, #11]
    TF_COUNT i;
    struct TF_TypeListener_ *lst;
    for (i = 0; i < TF_MAX_TYPE_LST; i++) {
 8002186:	2300      	movs	r3, #0
 8002188:	75fb      	strb	r3, [r7, #23]
 800218a:	e020      	b.n	80021ce <TF_AddTypeListener+0x56>
        lst = &tf->type_listeners[i];
 800218c:	7dfb      	ldrb	r3, [r7, #23]
 800218e:	33b3      	adds	r3, #179	; 0xb3
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4413      	add	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        // test for empty slot
        if (lst->fn == NULL) {
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d113      	bne.n	80021c8 <TF_AddTypeListener+0x50>
            lst->fn = cb;
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	605a      	str	r2, [r3, #4]
            lst->type = frame_type;
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	7afa      	ldrb	r2, [r7, #11]
 80021aa:	701a      	strb	r2, [r3, #0]
            if (i >= tf->count_type_lst) {
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f893 35fd 	ldrb.w	r3, [r3, #1533]	; 0x5fd
 80021b2:	7dfa      	ldrb	r2, [r7, #23]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d305      	bcc.n	80021c4 <TF_AddTypeListener+0x4c>
                tf->count_type_lst = (TF_COUNT) (i + 1);
 80021b8:	7dfb      	ldrb	r3, [r7, #23]
 80021ba:	3301      	adds	r3, #1
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f883 25fd 	strb.w	r2, [r3, #1533]	; 0x5fd
            }
            return true;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e009      	b.n	80021dc <TF_AddTypeListener+0x64>
    for (i = 0; i < TF_MAX_TYPE_LST; i++) {
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
 80021ca:	3301      	adds	r3, #1
 80021cc:	75fb      	strb	r3, [r7, #23]
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
 80021d0:	2b09      	cmp	r3, #9
 80021d2:	d9db      	bls.n	800218c <TF_AddTypeListener+0x14>
        }
    }

    TF_Error("Failed to add type listener");
 80021d4:	4803      	ldr	r0, [pc, #12]	; (80021e4 <TF_AddTypeListener+0x6c>)
 80021d6:	f005 ff95 	bl	8008104 <puts>
    return false;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	08009060 	.word	0x08009060

080021e8 <TF_HandleReceivedMessage>:
    return false;
}

/** Handle a message that was just collected & verified by the parser */
static void _TF_FN TF_HandleReceivedMessage(TinyFrame *tf)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08c      	sub	sp, #48	; 0x30
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
    struct TF_GenericListener_ *glst;
    TF_Result res;

    // Prepare message object
    TF_Msg msg;
    TF_ClearMsg(&msg);
 80021f0:	f107 0308 	add.w	r3, r7, #8
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fef9 	bl	8001fec <TF_ClearMsg>
    msg.frame_id = tf->id;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	7b9b      	ldrb	r3, [r3, #14]
 80021fe:	723b      	strb	r3, [r7, #8]
    msg.is_response = false;
 8002200:	2300      	movs	r3, #0
 8002202:	727b      	strb	r3, [r7, #9]
    msg.type = tf->type;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800220a:	72bb      	strb	r3, [r7, #10]
    msg.data = tf->data;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3312      	adds	r3, #18
 8002210:	60fb      	str	r3, [r7, #12]
    msg.len = tf->len;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	8a1b      	ldrh	r3, [r3, #16]
 8002216:	823b      	strh	r3, [r7, #16]

    // The loop upper bounds are the highest currently used slot index
    // (or close to it, depending on the order of listener removals).

    // ID listeners first
    for (i = 0; i < tf->count_id_lst; i++) {
 8002218:	2300      	movs	r3, #0
 800221a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800221e:	e04d      	b.n	80022bc <TF_HandleReceivedMessage+0xd4>
        ilst = &tf->id_listeners[i];
 8002220:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002224:	4613      	mov	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	4413      	add	r3, r2
 8002234:	61fb      	str	r3, [r7, #28]

        if (ilst->fn && ilst->id == msg.frame_id) {
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d039      	beq.n	80022b2 <TF_HandleReceivedMessage+0xca>
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	781a      	ldrb	r2, [r3, #0]
 8002242:	7a3b      	ldrb	r3, [r7, #8]
 8002244:	429a      	cmp	r2, r3
 8002246:	d134      	bne.n	80022b2 <TF_HandleReceivedMessage+0xca>
            msg.userdata = ilst->userdata; // pass userdata pointer to the callback
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	617b      	str	r3, [r7, #20]
            msg.userdata2 = ilst->userdata2;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	61bb      	str	r3, [r7, #24]
            res = ilst->fn(tf, &msg);
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f107 0208 	add.w	r2, r7, #8
 800225c:	4611      	mov	r1, r2
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
 8002262:	4603      	mov	r3, r0
 8002264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            ilst->userdata = msg.userdata; // put it back (may have changed the pointer or set to NULL)
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	611a      	str	r2, [r3, #16]
            ilst->userdata2 = msg.userdata2; // put it back (may have changed the pointer or set to NULL)
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	615a      	str	r2, [r3, #20]

            if (res != TF_NEXT) {
 8002274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01a      	beq.n	80022b2 <TF_HandleReceivedMessage+0xca>
                // if it's TF_CLOSE, we assume user already cleaned up userdata
                if (res == TF_RENEW) {
 800227c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002280:	2b02      	cmp	r3, #2
 8002282:	d103      	bne.n	800228c <TF_HandleReceivedMessage+0xa4>
                    renew_id_listener(ilst);
 8002284:	69f8      	ldr	r0, [r7, #28]
 8002286:	f7ff feef 	bl	8002068 <renew_id_listener>
                    // Set userdata to NULL to avoid calling user for cleanup
                    ilst->userdata = NULL;
                    ilst->userdata2 = NULL;
                    cleanup_id_listener(tf, i, ilst);
                }
                return;
 800228a:	e098      	b.n	80023be <TF_HandleReceivedMessage+0x1d6>
                else if (res == TF_CLOSE) {
 800228c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002290:	2b03      	cmp	r3, #3
 8002292:	f040 8094 	bne.w	80023be <TF_HandleReceivedMessage+0x1d6>
                    ilst->userdata = NULL;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	2200      	movs	r2, #0
 800229a:	611a      	str	r2, [r3, #16]
                    ilst->userdata2 = NULL;
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	2200      	movs	r2, #0
 80022a0:	615a      	str	r2, [r3, #20]
                    cleanup_id_listener(tf, i, ilst);
 80022a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	4619      	mov	r1, r3
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff feea 	bl	8002084 <cleanup_id_listener>
                return;
 80022b0:	e085      	b.n	80023be <TF_HandleReceivedMessage+0x1d6>
    for (i = 0; i < tf->count_id_lst; i++) {
 80022b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022b6:	3301      	adds	r3, #1
 80022b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 35fc 	ldrb.w	r3, [r3, #1532]	; 0x5fc
 80022c2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d3aa      	bcc.n	8002220 <TF_HandleReceivedMessage+0x38>
            }
        }
    }
    // clean up for the following listeners that don't use userdata (this avoids data from
    // an ID listener that returned TF_NEXT from leaking into Type and Generic listeners)
    msg.userdata = NULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
    msg.userdata2 = NULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61bb      	str	r3, [r7, #24]

    // Type listeners
    for (i = 0; i < tf->count_type_lst; i++) {
 80022d2:	2300      	movs	r3, #0
 80022d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80022d8:	e02e      	b.n	8002338 <TF_HandleReceivedMessage+0x150>
        tlst = &tf->type_listeners[i];
 80022da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022de:	33b3      	adds	r3, #179	; 0xb3
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	623b      	str	r3, [r7, #32]

        if (tlst->fn && tlst->type == msg.type) {
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01e      	beq.n	800232e <TF_HandleReceivedMessage+0x146>
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	7abb      	ldrb	r3, [r7, #10]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d119      	bne.n	800232e <TF_HandleReceivedMessage+0x146>
            res = tlst->fn(tf, &msg);
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f107 0208 	add.w	r2, r7, #8
 8002302:	4611      	mov	r1, r2
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	4798      	blx	r3
 8002308:	4603      	mov	r3, r0
 800230a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (res != TF_NEXT) {
 800230e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <TF_HandleReceivedMessage+0x146>
                // type listeners don't have userdata.
                // TF_RENEW doesn't make sense here because type listeners don't expire = same as TF_STAY

                if (res == TF_CLOSE) {
 8002316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800231a:	2b03      	cmp	r3, #3
 800231c:	d151      	bne.n	80023c2 <TF_HandleReceivedMessage+0x1da>
                    cleanup_type_listener(tf, i, tlst);
 800231e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002322:	6a3a      	ldr	r2, [r7, #32]
 8002324:	4619      	mov	r1, r3
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff fee8 	bl	80020fc <cleanup_type_listener>
                }
                return;
 800232c:	e049      	b.n	80023c2 <TF_HandleReceivedMessage+0x1da>
    for (i = 0; i < tf->count_type_lst; i++) {
 800232e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002332:	3301      	adds	r3, #1
 8002334:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 35fd 	ldrb.w	r3, [r3, #1533]	; 0x5fd
 800233e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002342:	429a      	cmp	r2, r3
 8002344:	d3c9      	bcc.n	80022da <TF_HandleReceivedMessage+0xf2>
            }
        }
    }

    // Generic listeners
    for (i = 0; i < tf->count_generic_lst; i++) {
 8002346:	2300      	movs	r3, #0
 8002348:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800234c:	e02a      	b.n	80023a4 <TF_HandleReceivedMessage+0x1bc>
        glst = &tf->generic_listeners[i];
 800234e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002352:	f503 73bd 	add.w	r3, r3, #378	; 0x17a
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	4413      	add	r3, r2
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28

        if (glst->fn) {
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d019      	beq.n	800239a <TF_HandleReceivedMessage+0x1b2>
            res = glst->fn(tf, &msg);
 8002366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f107 0208 	add.w	r2, r7, #8
 800236e:	4611      	mov	r1, r2
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	4798      	blx	r3
 8002374:	4603      	mov	r3, r0
 8002376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (res != TF_NEXT) {
 800237a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00b      	beq.n	800239a <TF_HandleReceivedMessage+0x1b2>

                // note: It's not expected that user will have multiple generic listeners, or
                // ever actually remove them. They're most useful as default callbacks if no other listener
                // handled the message.

                if (res == TF_CLOSE) {
 8002382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002386:	2b03      	cmp	r3, #3
 8002388:	d11d      	bne.n	80023c6 <TF_HandleReceivedMessage+0x1de>
                    cleanup_generic_listener(tf, i, glst);
 800238a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800238e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002390:	4619      	mov	r1, r3
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff fed1 	bl	800213a <cleanup_generic_listener>
                }
                return;
 8002398:	e015      	b.n	80023c6 <TF_HandleReceivedMessage+0x1de>
    for (i = 0; i < tf->count_generic_lst; i++) {
 800239a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800239e:	3301      	adds	r3, #1
 80023a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 35fe 	ldrb.w	r3, [r3, #1534]	; 0x5fe
 80023aa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d3cd      	bcc.n	800234e <TF_HandleReceivedMessage+0x166>
            }
        }
    }

    TF_Error("Unhandled message, type %d", (int)msg.type);
 80023b2:	7abb      	ldrb	r3, [r7, #10]
 80023b4:	4619      	mov	r1, r3
 80023b6:	4806      	ldr	r0, [pc, #24]	; (80023d0 <TF_HandleReceivedMessage+0x1e8>)
 80023b8:	f005 fe1e 	bl	8007ff8 <iprintf>
 80023bc:	e004      	b.n	80023c8 <TF_HandleReceivedMessage+0x1e0>
                return;
 80023be:	bf00      	nop
 80023c0:	e002      	b.n	80023c8 <TF_HandleReceivedMessage+0x1e0>
                return;
 80023c2:	bf00      	nop
 80023c4:	e000      	b.n	80023c8 <TF_HandleReceivedMessage+0x1e0>
                return;
 80023c6:	bf00      	nop
}
 80023c8:	3730      	adds	r7, #48	; 0x30
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	0800912c 	.word	0x0800912c

080023d4 <TF_Accept>:

//region Parser

/** Handle a received byte buffer */
void _TF_FN TF_Accept(TinyFrame *tf, const uint8_t *buffer, uint32_t count)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
    uint32_t i;
    for (i = 0; i < count; i++) {
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	e00a      	b.n	80023fc <TF_Accept+0x28>
        TF_AcceptChar(tf, buffer[i]);
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	4413      	add	r3, r2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	4619      	mov	r1, r3
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f83f 	bl	8002474 <TF_AcceptChar>
    for (i = 0; i < count; i++) {
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	3301      	adds	r3, #1
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	429a      	cmp	r2, r3
 8002402:	d3f0      	bcc.n	80023e6 <TF_Accept+0x12>
    }
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <TF_ResetParser>:

/** Reset the parser's internal state. */
void _TF_FN TF_ResetParser(TinyFrame *tf)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
    tf->state = TFState_SOF;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	729a      	strb	r2, [r3, #10]
    // more init will be done by the parser when the first byte is received
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <pars_begin_frame>:

/** SOF was received - prepare for the frame */
static void _TF_FN pars_begin_frame(TinyFrame *tf) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
    // Reset state vars
    CKSUM_RESET(tf->cksum);
 8002430:	f7ff fde9 	bl	8002006 <TF_CksumStart>
 8002434:	4603      	mov	r3, r0
 8002436:	461a      	mov	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
#if TF_USE_SOF_BYTE
    CKSUM_ADD(tf->cksum, TF_SOF_BYTE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 8002444:	2101      	movs	r1, #1
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fde6 	bl	8002018 <TF_CksumAdd>
 800244c:	4603      	mov	r3, r0
 800244e:	461a      	mov	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
#endif

    tf->discard_data = false;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

    // Enter ID state
    tf->state = TFState_ID;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2203      	movs	r2, #3
 8002462:	729a      	strb	r2, [r3, #10]
    tf->rxi = 0;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <TF_AcceptChar>:

/** Handle a received char - here's the main state machine */
void _TF_FN TF_AcceptChar(TinyFrame *tf, unsigned char c)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	70fb      	strb	r3, [r7, #3]
    // Parser timeout - clear
    if (tf->parser_timeout_ticks >= TF_PARSER_TIMEOUT_TICKS) {
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	899b      	ldrh	r3, [r3, #12]
 8002484:	2b09      	cmp	r3, #9
 8002486:	d909      	bls.n	800249c <TF_AcceptChar+0x28>
        if (tf->state != TFState_SOF) {
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	7a9b      	ldrb	r3, [r3, #10]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <TF_AcceptChar+0x28>
            TF_ResetParser(tf);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff ffbc 	bl	800240e <TF_ResetParser>
            TF_Error("Parser timeout");
 8002496:	48a7      	ldr	r0, [pc, #668]	; (8002734 <TF_AcceptChar+0x2c0>)
 8002498:	f005 fe34 	bl	8008104 <puts>
        }
    }
    tf->parser_timeout_ticks = 0;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	819a      	strh	r2, [r3, #12]
        pars_begin_frame(tf);
    }
#endif

    //@formatter:off
    switch (tf->state) {
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	7a9b      	ldrb	r3, [r3, #10]
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	f200 8197 	bhi.w	80027da <TF_AcceptChar+0x366>
 80024ac:	a201      	add	r2, pc, #4	; (adr r2, 80024b4 <TF_AcceptChar+0x40>)
 80024ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b2:	bf00      	nop
 80024b4:	080024d1 	.word	0x080024d1
 80024b8:	0800253d 	.word	0x0800253d
 80024bc:	08002601 	.word	0x08002601
 80024c0:	080024e1 	.word	0x080024e1
 80024c4:	08002599 	.word	0x08002599
 80024c8:	080026bf 	.word	0x080026bf
 80024cc:	08002741 	.word	0x08002741
        case TFState_SOF:
            if (c == TF_SOF_BYTE) {
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	f040 8174 	bne.w	80027c0 <TF_AcceptChar+0x34c>
                pars_begin_frame(tf);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ffa5 	bl	8002428 <pars_begin_frame>
            }
            break;
 80024de:	e16f      	b.n	80027c0 <TF_AcceptChar+0x34c>

        case TFState_ID:
            CKSUM_ADD(tf->cksum, c);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fd94 	bl	8002018 <TF_CksumAdd>
 80024f0:	4603      	mov	r3, r0
 80024f2:	461a      	mov	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
            COLLECT_NUMBER(tf->id, TF_ID) {
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	7b9b      	ldrb	r3, [r3, #14]
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	b25a      	sxtb	r2, r3
 8002502:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002506:	4313      	orrs	r3, r2
 8002508:	b25b      	sxtb	r3, r3
 800250a:	b2da      	uxtb	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	739a      	strb	r2, [r3, #14]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
 8002516:	3301      	adds	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
 8002526:	2b01      	cmp	r3, #1
 8002528:	f040 814c 	bne.w	80027c4 <TF_AcceptChar+0x350>
                // Enter LEN state
                tf->state = TFState_LEN;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	729a      	strb	r2, [r3, #10]
                tf->rxi = 0;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
            }
            break;
 800253a:	e143      	b.n	80027c4 <TF_AcceptChar+0x350>

        case TFState_LEN:
            CKSUM_ADD(tf->cksum, c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 8002542:	78fa      	ldrb	r2, [r7, #3]
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fd66 	bl	8002018 <TF_CksumAdd>
 800254c:	4603      	mov	r3, r0
 800254e:	461a      	mov	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
            COLLECT_NUMBER(tf->len, TF_LEN) {
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	8a1b      	ldrh	r3, [r3, #16]
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	b21a      	sxth	r2, r3
 800255e:	78fb      	ldrb	r3, [r7, #3]
 8002560:	b21b      	sxth	r3, r3
 8002562:	4313      	orrs	r3, r2
 8002564:	b21b      	sxth	r3, r3
 8002566:	b29a      	uxth	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	821a      	strh	r2, [r3, #16]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
 8002572:	3301      	adds	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
 8002582:	2b02      	cmp	r3, #2
 8002584:	f040 8120 	bne.w	80027c8 <TF_AcceptChar+0x354>
                // Enter TYPE state
                tf->state = TFState_TYPE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2204      	movs	r2, #4
 800258c:	729a      	strb	r2, [r3, #10]
                tf->rxi = 0;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
            }
            break;
 8002596:	e117      	b.n	80027c8 <TF_AcceptChar+0x354>

        case TFState_TYPE:
            CKSUM_ADD(tf->cksum, c);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 800259e:	78fa      	ldrb	r2, [r7, #3]
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fd38 	bl	8002018 <TF_CksumAdd>
 80025a8:	4603      	mov	r3, r0
 80025aa:	461a      	mov	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
            COLLECT_NUMBER(tf->type, TF_TYPE) {
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	b25a      	sxtb	r2, r3
 80025bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
 80025d2:	3301      	adds	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	f040 80f2 	bne.w	80027cc <TF_AcceptChar+0x358>
                #if TF_CKSUM_TYPE == TF_CKSUM_NONE
                    tf->state = TFState_DATA;
                    tf->rxi = 0;
                #else
                    // enter HEAD_CKSUM state
                    tf->state = TFState_HEAD_CKSUM;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	729a      	strb	r2, [r3, #10]
                    tf->rxi = 0;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
                    tf->ref_cksum = 0;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f8a3 2416 	strh.w	r2, [r3, #1046]	; 0x416
                #endif
            }
            break;
 80025fe:	e0e5      	b.n	80027cc <TF_AcceptChar+0x358>

        case TFState_HEAD_CKSUM:
            COLLECT_NUMBER(tf->ref_cksum, TF_CKSUM) {
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f8b3 3416 	ldrh.w	r3, [r3, #1046]	; 0x416
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	b21a      	sxth	r2, r3
 800260a:	78fb      	ldrb	r3, [r7, #3]
 800260c:	b21b      	sxth	r3, r3
 800260e:	4313      	orrs	r3, r2
 8002610:	b21b      	sxth	r3, r3
 8002612:	b29a      	uxth	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f8a3 2416 	strh.w	r2, [r3, #1046]	; 0x416
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
 8002620:	3301      	adds	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
 8002630:	2b02      	cmp	r3, #2
 8002632:	f040 80cd 	bne.w	80027d0 <TF_AcceptChar+0x35c>
                // Check the header checksum against the computed value
                CKSUM_FINALIZE(tf->cksum);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fd07 	bl	8002050 <TF_CksumEnd>
 8002642:	4603      	mov	r3, r0
 8002644:	461a      	mov	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414

                if (tf->cksum != tf->ref_cksum) {
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f8b3 2414 	ldrh.w	r2, [r3, #1044]	; 0x414
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f8b3 3416 	ldrh.w	r3, [r3, #1046]	; 0x416
 8002658:	429a      	cmp	r2, r3
 800265a:	d006      	beq.n	800266a <TF_AcceptChar+0x1f6>
                    TF_Error("Rx head cksum mismatch");
 800265c:	4836      	ldr	r0, [pc, #216]	; (8002738 <TF_AcceptChar+0x2c4>)
 800265e:	f005 fd51 	bl	8008104 <puts>
                    TF_ResetParser(tf);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff fed3 	bl	800240e <TF_ResetParser>
                    break;
 8002668:	e0b7      	b.n	80027da <TF_AcceptChar+0x366>
                }

                if (tf->len == 0) {
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	8a1b      	ldrh	r3, [r3, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <TF_AcceptChar+0x20c>
                    // if the message has no body, we're done.
                    TF_HandleReceivedMessage(tf);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff fdb8 	bl	80021e8 <TF_HandleReceivedMessage>
                    TF_ResetParser(tf);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff fec8 	bl	800240e <TF_ResetParser>
                    break;
 800267e:	e0ac      	b.n	80027da <TF_AcceptChar+0x366>
                }

                // Enter DATA state
                tf->state = TFState_DATA;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2205      	movs	r2, #5
 8002684:	729a      	strb	r2, [r3, #10]
                tf->rxi = 0;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412

                CKSUM_RESET(tf->cksum); // Start collecting the payload
 800268e:	f7ff fcba 	bl	8002006 <TF_CksumStart>
 8002692:	4603      	mov	r3, r0
 8002694:	461a      	mov	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414

                if (tf->len > TF_MAX_PAYLOAD_RX) {
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8a1b      	ldrh	r3, [r3, #16]
 80026a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a4:	f240 8094 	bls.w	80027d0 <TF_AcceptChar+0x35c>
                    TF_Error("Rx payload too long: %d", (int)tf->len);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	8a1b      	ldrh	r3, [r3, #16]
 80026ac:	4619      	mov	r1, r3
 80026ae:	4823      	ldr	r0, [pc, #140]	; (800273c <TF_AcceptChar+0x2c8>)
 80026b0:	f005 fca2 	bl	8007ff8 <iprintf>
                    // ERROR - frame too long. Consume, but do not store.
                    tf->discard_data = true;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
            }
            break;
 80026bc:	e088      	b.n	80027d0 <TF_AcceptChar+0x35c>

        case TFState_DATA:
            if (tf->discard_data) {
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <TF_AcceptChar+0x266>
                tf->rxi++;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
 80026ce:	3301      	adds	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
 80026d8:	e019      	b.n	800270e <TF_AcceptChar+0x29a>
            } else {
                CKSUM_ADD(tf->cksum, c);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fc97 	bl	8002018 <TF_CksumAdd>
 80026ea:	4603      	mov	r3, r0
 80026ec:	461a      	mov	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
                tf->data[tf->rxi++] = c;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	b291      	uxth	r1, r2
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	f8a2 1412 	strh.w	r1, [r2, #1042]	; 0x412
 8002704:	461a      	mov	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	78fa      	ldrb	r2, [r7, #3]
 800270c:	749a      	strb	r2, [r3, #18]
            }

            if (tf->rxi == tf->len) {
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f8b3 2412 	ldrh.w	r2, [r3, #1042]	; 0x412
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	8a1b      	ldrh	r3, [r3, #16]
 8002718:	429a      	cmp	r2, r3
 800271a:	d15b      	bne.n	80027d4 <TF_AcceptChar+0x360>
                    // All done
                    TF_HandleReceivedMessage(tf);
                    TF_ResetParser(tf);
                #else
                    // Enter DATA_CKSUM state
                    tf->state = TFState_DATA_CKSUM;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2206      	movs	r2, #6
 8002720:	729a      	strb	r2, [r3, #10]
                    tf->rxi = 0;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
                    tf->ref_cksum = 0;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f8a3 2416 	strh.w	r2, [r3, #1046]	; 0x416
                #endif
            }
            break;
 8002732:	e04f      	b.n	80027d4 <TF_AcceptChar+0x360>
 8002734:	08009178 	.word	0x08009178
 8002738:	0800918c 	.word	0x0800918c
 800273c:	080091a8 	.word	0x080091a8

        case TFState_DATA_CKSUM:
            COLLECT_NUMBER(tf->ref_cksum, TF_CKSUM) {
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f8b3 3416 	ldrh.w	r3, [r3, #1046]	; 0x416
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	b21a      	sxth	r2, r3
 800274a:	78fb      	ldrb	r3, [r7, #3]
 800274c:	b21b      	sxth	r3, r3
 800274e:	4313      	orrs	r3, r2
 8002750:	b21b      	sxth	r3, r3
 8002752:	b29a      	uxth	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f8a3 2416 	strh.w	r2, [r3, #1046]	; 0x416
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
 8002760:	3301      	adds	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
 8002770:	2b02      	cmp	r3, #2
 8002772:	d131      	bne.n	80027d8 <TF_AcceptChar+0x364>
                // Check the header checksum against the computed value
                CKSUM_FINALIZE(tf->cksum);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fc68 	bl	8002050 <TF_CksumEnd>
 8002780:	4603      	mov	r3, r0
 8002782:	461a      	mov	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
                if (!tf->discard_data) {
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8002790:	f083 0301 	eor.w	r3, r3, #1
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00e      	beq.n	80027b8 <TF_AcceptChar+0x344>
                    if (tf->cksum == tf->ref_cksum) {
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f8b3 2414 	ldrh.w	r2, [r3, #1044]	; 0x414
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f8b3 3416 	ldrh.w	r3, [r3, #1046]	; 0x416
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d103      	bne.n	80027b2 <TF_AcceptChar+0x33e>
                        TF_HandleReceivedMessage(tf);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fd1c 	bl	80021e8 <TF_HandleReceivedMessage>
 80027b0:	e002      	b.n	80027b8 <TF_AcceptChar+0x344>
                    } else {
                        TF_Error("Body cksum mismatch");
 80027b2:	480c      	ldr	r0, [pc, #48]	; (80027e4 <TF_AcceptChar+0x370>)
 80027b4:	f005 fca6 	bl	8008104 <puts>
                    }
                }

                TF_ResetParser(tf);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff fe28 	bl	800240e <TF_ResetParser>
            }
            break;
 80027be:	e00b      	b.n	80027d8 <TF_AcceptChar+0x364>
            break;
 80027c0:	bf00      	nop
 80027c2:	e00a      	b.n	80027da <TF_AcceptChar+0x366>
            break;
 80027c4:	bf00      	nop
 80027c6:	e008      	b.n	80027da <TF_AcceptChar+0x366>
            break;
 80027c8:	bf00      	nop
 80027ca:	e006      	b.n	80027da <TF_AcceptChar+0x366>
            break;
 80027cc:	bf00      	nop
 80027ce:	e004      	b.n	80027da <TF_AcceptChar+0x366>
            break;
 80027d0:	bf00      	nop
 80027d2:	e002      	b.n	80027da <TF_AcceptChar+0x366>
            break;
 80027d4:	bf00      	nop
 80027d6:	e000      	b.n	80027da <TF_AcceptChar+0x366>
            break;
 80027d8:	bf00      	nop
    }
    //@formatter:on
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	080091c8 	.word	0x080091c8

080027e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	607b      	str	r3, [r7, #4]
 80027f2:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <MX_DMA_Init+0x3c>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a0b      	ldr	r2, [pc, #44]	; (8002824 <MX_DMA_Init+0x3c>)
 80027f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <MX_DMA_Init+0x3c>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002806:	607b      	str	r3, [r7, #4]
 8002808:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	2010      	movs	r0, #16
 8002810:	f000 fd16 	bl	8003240 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002814:	2010      	movs	r0, #16
 8002816:	f000 fd2f 	bl	8003278 <HAL_NVIC_EnableIRQ>

}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800

08002828 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282e:	f107 030c 	add.w	r3, r7, #12
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	60da      	str	r2, [r3, #12]
 800283c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	4b49      	ldr	r3, [pc, #292]	; (8002968 <MX_GPIO_Init+0x140>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4a48      	ldr	r2, [pc, #288]	; (8002968 <MX_GPIO_Init+0x140>)
 8002848:	f043 0304 	orr.w	r3, r3, #4
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
 800284e:	4b46      	ldr	r3, [pc, #280]	; (8002968 <MX_GPIO_Init+0x140>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	4b42      	ldr	r3, [pc, #264]	; (8002968 <MX_GPIO_Init+0x140>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	4a41      	ldr	r2, [pc, #260]	; (8002968 <MX_GPIO_Init+0x140>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6313      	str	r3, [r2, #48]	; 0x30
 800286a:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <MX_GPIO_Init+0x140>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	4b3b      	ldr	r3, [pc, #236]	; (8002968 <MX_GPIO_Init+0x140>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a3a      	ldr	r2, [pc, #232]	; (8002968 <MX_GPIO_Init+0x140>)
 8002880:	f043 0302 	orr.w	r3, r3, #2
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b38      	ldr	r3, [pc, #224]	; (8002968 <MX_GPIO_Init+0x140>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB5_B_Pin|RGB5_G_Pin|RGB5_R_Pin|RGB4_B_Pin
 8002892:	2200      	movs	r2, #0
 8002894:	f24e 31d7 	movw	r1, #58327	; 0xe3d7
 8002898:	4834      	ldr	r0, [pc, #208]	; (800296c <MX_GPIO_Init+0x144>)
 800289a:	f001 f979 	bl	8003b90 <HAL_GPIO_WritePin>
                          |RGB4_G_Pin|RGB4_R_Pin|SSD1351_NRST_Pin|RGB3_B_Pin
                          |RGB3_G_Pin|RGB3_R_Pin|RGB2_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEQ_RST_Pin|SSD1351_NSS_Pin|SSD1351_DC_Pin|RGB2_G_Pin
 800289e:	2200      	movs	r2, #0
 80028a0:	f641 7151 	movw	r1, #8017	; 0x1f51
 80028a4:	4832      	ldr	r0, [pc, #200]	; (8002970 <MX_GPIO_Init+0x148>)
 80028a6:	f001 f973 	bl	8003b90 <HAL_GPIO_WritePin>
                          |RGB2_R_Pin|RGB1_B_Pin|RGB1_G_Pin|RGB1_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BTN1_Pin|BTN2_Pin|BTN3_Pin|BTN4_Pin, GPIO_PIN_RESET);
 80028aa:	2200      	movs	r2, #0
 80028ac:	21f0      	movs	r1, #240	; 0xf0
 80028ae:	4831      	ldr	r0, [pc, #196]	; (8002974 <MX_GPIO_Init+0x14c>)
 80028b0:	f001 f96e 	bl	8003b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = RGB5_B_Pin|RGB5_G_Pin|RGB5_R_Pin|RGB4_B_Pin
 80028b4:	f24e 33c7 	movw	r3, #58311	; 0xe3c7
 80028b8:	60fb      	str	r3, [r7, #12]
                          |RGB4_G_Pin|RGB4_R_Pin|RGB3_B_Pin|RGB3_G_Pin
                          |RGB3_R_Pin|RGB2_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ba:	2301      	movs	r3, #1
 80028bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028c6:	f107 030c 	add.w	r3, r7, #12
 80028ca:	4619      	mov	r1, r3
 80028cc:	4827      	ldr	r0, [pc, #156]	; (800296c <MX_GPIO_Init+0x144>)
 80028ce:	f000 ffcb 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SEQ_RST_Pin|SSD1351_NSS_Pin;
 80028d2:	2311      	movs	r3, #17
 80028d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d6:	2301      	movs	r3, #1
 80028d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028de:	2302      	movs	r3, #2
 80028e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e2:	f107 030c 	add.w	r3, r7, #12
 80028e6:	4619      	mov	r1, r3
 80028e8:	4821      	ldr	r0, [pc, #132]	; (8002970 <MX_GPIO_Init+0x148>)
 80028ea:	f000 ffbd 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1351_DC_Pin;
 80028ee:	2340      	movs	r3, #64	; 0x40
 80028f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f2:	2301      	movs	r3, #1
 80028f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fa:	2303      	movs	r3, #3
 80028fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSD1351_DC_GPIO_Port, &GPIO_InitStruct);
 80028fe:	f107 030c 	add.w	r3, r7, #12
 8002902:	4619      	mov	r1, r3
 8002904:	481a      	ldr	r0, [pc, #104]	; (8002970 <MX_GPIO_Init+0x148>)
 8002906:	f000 ffaf 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1351_NRST_Pin;
 800290a:	2310      	movs	r3, #16
 800290c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800290e:	2301      	movs	r3, #1
 8002910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002916:	2303      	movs	r3, #3
 8002918:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSD1351_NRST_GPIO_Port, &GPIO_InitStruct);
 800291a:	f107 030c 	add.w	r3, r7, #12
 800291e:	4619      	mov	r1, r3
 8002920:	4812      	ldr	r0, [pc, #72]	; (800296c <MX_GPIO_Init+0x144>)
 8002922:	f000 ffa1 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = RGB2_G_Pin|RGB2_R_Pin|RGB1_B_Pin|RGB1_G_Pin
 8002926:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800292a:	60fb      	str	r3, [r7, #12]
                          |RGB1_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292c:	2301      	movs	r3, #1
 800292e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002934:	2300      	movs	r3, #0
 8002936:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002938:	f107 030c 	add.w	r3, r7, #12
 800293c:	4619      	mov	r1, r3
 800293e:	480c      	ldr	r0, [pc, #48]	; (8002970 <MX_GPIO_Init+0x148>)
 8002940:	f000 ff92 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin|BTN4_Pin;
 8002944:	23f0      	movs	r3, #240	; 0xf0
 8002946:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002948:	2301      	movs	r3, #1
 800294a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002950:	2300      	movs	r3, #0
 8002952:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002954:	f107 030c 	add.w	r3, r7, #12
 8002958:	4619      	mov	r1, r3
 800295a:	4806      	ldr	r0, [pc, #24]	; (8002974 <MX_GPIO_Init+0x14c>)
 800295c:	f000 ff84 	bl	8003868 <HAL_GPIO_Init>

}
 8002960:	bf00      	nop
 8002962:	3720      	adds	r7, #32
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40023800 	.word	0x40023800
 800296c:	40020800 	.word	0x40020800
 8002970:	40020000 	.word	0x40020000
 8002974:	40020400 	.word	0x40020400

08002978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800297c:	f000 fb42 	bl	8003004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002980:	f000 f80e 	bl	80029a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002984:	f7ff ff50 	bl	8002828 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002988:	f000 fa6e 	bl	8002e68 <MX_USART2_UART_Init>
  MX_DMA_Init();
 800298c:	f7ff ff2c 	bl	80027e8 <MX_DMA_Init>
  MX_SPI1_Init();
 8002990:	f000 f88c 	bl	8002aac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  API_HMI_START();
 8002994:	f7fe fc56 	bl	8001244 <API_HMI_START>

  vTaskStartScheduler();
 8002998:	f003 fd90 	bl	80064bc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800299c:	e7fe      	b.n	800299c <main+0x24>
	...

080029a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b094      	sub	sp, #80	; 0x50
 80029a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029a6:	f107 031c 	add.w	r3, r7, #28
 80029aa:	2234      	movs	r2, #52	; 0x34
 80029ac:	2100      	movs	r1, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f005 fa70 	bl	8007e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029b4:	f107 0308 	add.w	r3, r7, #8
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029c4:	2300      	movs	r3, #0
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <SystemClock_Config+0xd4>)
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	4a29      	ldr	r2, [pc, #164]	; (8002a74 <SystemClock_Config+0xd4>)
 80029ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d2:	6413      	str	r3, [r2, #64]	; 0x40
 80029d4:	4b27      	ldr	r3, [pc, #156]	; (8002a74 <SystemClock_Config+0xd4>)
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80029e0:	2300      	movs	r3, #0
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	4b24      	ldr	r3, [pc, #144]	; (8002a78 <SystemClock_Config+0xd8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80029ec:	4a22      	ldr	r2, [pc, #136]	; (8002a78 <SystemClock_Config+0xd8>)
 80029ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <SystemClock_Config+0xd8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029fc:	603b      	str	r3, [r7, #0]
 80029fe:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a00:	2302      	movs	r3, #2
 8002a02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a04:	2301      	movs	r3, #1
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a08:	2310      	movs	r3, #16
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a10:	2300      	movs	r3, #0
 8002a12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002a14:	2310      	movs	r3, #16
 8002a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002a18:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002a1c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002a1e:	2304      	movs	r3, #4
 8002a20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a22:	2302      	movs	r3, #2
 8002a24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a26:	2302      	movs	r3, #2
 8002a28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a2a:	f107 031c 	add.w	r3, r7, #28
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f001 fbc6 	bl	80041c0 <HAL_RCC_OscConfig>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002a3a:	f000 f831 	bl	8002aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a3e:	230f      	movs	r3, #15
 8002a40:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a42:	2302      	movs	r3, #2
 8002a44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a54:	f107 0308 	add.w	r3, r7, #8
 8002a58:	2102      	movs	r1, #2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f001 f8b2 	bl	8003bc4 <HAL_RCC_ClockConfig>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002a66:	f000 f81b 	bl	8002aa0 <Error_Handler>
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	3750      	adds	r7, #80	; 0x50
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40007000 	.word	0x40007000

08002a7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d101      	bne.n	8002a92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a8e:	f000 fadb 	bl	8003048 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40014800 	.word	0x40014800

08002aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002aa4:	b672      	cpsid	i
}
 8002aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002aa8:	e7fe      	b.n	8002aa8 <Error_Handler+0x8>
	...

08002aac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ab0:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <MX_SPI1_Init+0x64>)
 8002ab2:	4a18      	ldr	r2, [pc, #96]	; (8002b14 <MX_SPI1_Init+0x68>)
 8002ab4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <MX_SPI1_Init+0x64>)
 8002ab8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002abc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002abe:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <MX_SPI1_Init+0x64>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ac4:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <MX_SPI1_Init+0x64>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aca:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <MX_SPI1_Init+0x64>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <MX_SPI1_Init+0x64>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <MX_SPI1_Init+0x64>)
 8002ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002adc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ade:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <MX_SPI1_Init+0x64>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <MX_SPI1_Init+0x64>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aea:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <MX_SPI1_Init+0x64>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002af0:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <MX_SPI1_Init+0x64>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <MX_SPI1_Init+0x64>)
 8002af8:	220a      	movs	r2, #10
 8002afa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002afc:	4804      	ldr	r0, [pc, #16]	; (8002b10 <MX_SPI1_Init+0x64>)
 8002afe:	f001 fdfd 	bl	80046fc <HAL_SPI_Init>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b08:	f7ff ffca 	bl	8002aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b0c:	bf00      	nop
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20003fa0 	.word	0x20003fa0
 8002b14:	40013000 	.word	0x40013000

08002b18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08a      	sub	sp, #40	; 0x28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b20:	f107 0314 	add.w	r3, r7, #20
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a19      	ldr	r2, [pc, #100]	; (8002b9c <HAL_SPI_MspInit+0x84>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d12b      	bne.n	8002b92 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	4b18      	ldr	r3, [pc, #96]	; (8002ba0 <HAL_SPI_MspInit+0x88>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	4a17      	ldr	r2, [pc, #92]	; (8002ba0 <HAL_SPI_MspInit+0x88>)
 8002b44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b48:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4a:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <HAL_SPI_MspInit+0x88>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <HAL_SPI_MspInit+0x88>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	4a10      	ldr	r2, [pc, #64]	; (8002ba0 <HAL_SPI_MspInit+0x88>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6313      	str	r3, [r2, #48]	; 0x30
 8002b66:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <HAL_SPI_MspInit+0x88>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SSD1351_SCK_Pin|SSD1351_MOSI_Pin;
 8002b72:	23a0      	movs	r3, #160	; 0xa0
 8002b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b76:	2302      	movs	r3, #2
 8002b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b82:	2305      	movs	r3, #5
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b86:	f107 0314 	add.w	r3, r7, #20
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4805      	ldr	r0, [pc, #20]	; (8002ba4 <HAL_SPI_MspInit+0x8c>)
 8002b8e:	f000 fe6b 	bl	8003868 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002b92:	bf00      	nop
 8002b94:	3728      	adds	r7, #40	; 0x28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40013000 	.word	0x40013000
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40020000 	.word	0x40020000

08002ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	607b      	str	r3, [r7, #4]
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <HAL_MspInit+0x4c>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	4a0f      	ldr	r2, [pc, #60]	; (8002bf4 <HAL_MspInit+0x4c>)
 8002bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <HAL_MspInit+0x4c>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc6:	607b      	str	r3, [r7, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	603b      	str	r3, [r7, #0]
 8002bce:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <HAL_MspInit+0x4c>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	4a08      	ldr	r2, [pc, #32]	; (8002bf4 <HAL_MspInit+0x4c>)
 8002bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_MspInit+0x4c>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40023800 	.word	0x40023800

08002bf8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08c      	sub	sp, #48	; 0x30
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	201a      	movs	r0, #26
 8002c0e:	f000 fb17 	bl	8003240 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002c12:	201a      	movs	r0, #26
 8002c14:	f000 fb30 	bl	8003278 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <HAL_InitTick+0xa0>)
 8002c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c20:	4a1d      	ldr	r2, [pc, #116]	; (8002c98 <HAL_InitTick+0xa0>)
 8002c22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c26:	6453      	str	r3, [r2, #68]	; 0x44
 8002c28:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <HAL_InitTick+0xa0>)
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c34:	f107 0210 	add.w	r2, r7, #16
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f001 f8da 	bl	8003df8 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002c44:	f001 f8c4 	bl	8003dd0 <HAL_RCC_GetPCLK2Freq>
 8002c48:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4c:	4a13      	ldr	r2, [pc, #76]	; (8002c9c <HAL_InitTick+0xa4>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	0c9b      	lsrs	r3, r3, #18
 8002c54:	3b01      	subs	r3, #1
 8002c56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8002c58:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <HAL_InitTick+0xa8>)
 8002c5a:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <HAL_InitTick+0xac>)
 8002c5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <HAL_InitTick+0xa8>)
 8002c60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c64:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8002c66:	4a0e      	ldr	r2, [pc, #56]	; (8002ca0 <HAL_InitTick+0xa8>)
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <HAL_InitTick+0xa8>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c72:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_InitTick+0xa8>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8002c78:	4809      	ldr	r0, [pc, #36]	; (8002ca0 <HAL_InitTick+0xa8>)
 8002c7a:	f001 ffcf 	bl	8004c1c <HAL_TIM_Base_Init>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d104      	bne.n	8002c8e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8002c84:	4806      	ldr	r0, [pc, #24]	; (8002ca0 <HAL_InitTick+0xa8>)
 8002c86:	f002 f823 	bl	8004cd0 <HAL_TIM_Base_Start_IT>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	e000      	b.n	8002c90 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3730      	adds	r7, #48	; 0x30
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	431bde83 	.word	0x431bde83
 8002ca0:	20003ff8 	.word	0x20003ff8
 8002ca4:	40014800 	.word	0x40014800

08002ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cac:	e7fe      	b.n	8002cac <NMI_Handler+0x4>

08002cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cb2:	e7fe      	b.n	8002cb2 <HardFault_Handler+0x4>

08002cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cb8:	e7fe      	b.n	8002cb8 <MemManage_Handler+0x4>

08002cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cbe:	e7fe      	b.n	8002cbe <BusFault_Handler+0x4>

08002cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cc4:	e7fe      	b.n	8002cc4 <UsageFault_Handler+0x4>

08002cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002cd8:	4802      	ldr	r0, [pc, #8]	; (8002ce4 <DMA1_Stream5_IRQHandler+0x10>)
 8002cda:	f000 fb89 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20004040 	.word	0x20004040

08002ce8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002cec:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002cee:	f002 f85f 	bl	8004db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20003ff8 	.word	0x20003ff8

08002cfc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	e00a      	b.n	8002d24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d0e:	f3af 8000 	nop.w
 8002d12:	4601      	mov	r1, r0
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	60ba      	str	r2, [r7, #8]
 8002d1a:	b2ca      	uxtb	r2, r1
 8002d1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	3301      	adds	r3, #1
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	dbf0      	blt.n	8002d0e <_read+0x12>
	}

return len;
 8002d2c:	687b      	ldr	r3, [r7, #4]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	e009      	b.n	8002d5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	60ba      	str	r2, [r7, #8]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	dbf1      	blt.n	8002d48 <_write+0x12>
	}
	return len;
 8002d64:	687b      	ldr	r3, [r7, #4]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <_close>:

int _close(int file)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
	return -1;
 8002d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d96:	605a      	str	r2, [r3, #4]
	return 0;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <_isatty>:

int _isatty(int file)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
	return 1;
 8002dae:	2301      	movs	r3, #1
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
	return 0;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002de0:	4a14      	ldr	r2, [pc, #80]	; (8002e34 <_sbrk+0x5c>)
 8002de2:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <_sbrk+0x60>)
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dec:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <_sbrk+0x64>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002df4:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <_sbrk+0x64>)
 8002df6:	4a12      	ldr	r2, [pc, #72]	; (8002e40 <_sbrk+0x68>)
 8002df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dfa:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <_sbrk+0x64>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d207      	bcs.n	8002e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e08:	f005 f80c 	bl	8007e24 <__errno>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	220c      	movs	r2, #12
 8002e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
 8002e16:	e009      	b.n	8002e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e18:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <_sbrk+0x64>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e1e:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <_sbrk+0x64>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	4a05      	ldr	r2, [pc, #20]	; (8002e3c <_sbrk+0x64>)
 8002e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20020000 	.word	0x20020000
 8002e38:	00000400 	.word	0x00000400
 8002e3c:	20000208 	.word	0x20000208
 8002e40:	20004138 	.word	0x20004138

08002e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <SystemInit+0x20>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4e:	4a05      	ldr	r2, [pc, #20]	; (8002e64 <SystemInit+0x20>)
 8002e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <MX_USART2_UART_Init+0x4c>)
 8002e6e:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <MX_USART2_UART_Init+0x50>)
 8002e70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e72:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <MX_USART2_UART_Init+0x4c>)
 8002e74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <MX_USART2_UART_Init+0x4c>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <MX_USART2_UART_Init+0x4c>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e86:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <MX_USART2_UART_Init+0x4c>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e8c:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <MX_USART2_UART_Init+0x4c>)
 8002e8e:	220c      	movs	r2, #12
 8002e90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e92:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <MX_USART2_UART_Init+0x4c>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e98:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <MX_USART2_UART_Init+0x4c>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e9e:	4805      	ldr	r0, [pc, #20]	; (8002eb4 <MX_USART2_UART_Init+0x4c>)
 8002ea0:	f002 f96a 	bl	8005178 <HAL_UART_Init>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002eaa:	f7ff fdf9 	bl	8002aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200040a0 	.word	0x200040a0
 8002eb8:	40004400 	.word	0x40004400

08002ebc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a30      	ldr	r2, [pc, #192]	; (8002f9c <HAL_UART_MspInit+0xe0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d159      	bne.n	8002f92 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	4b2f      	ldr	r3, [pc, #188]	; (8002fa0 <HAL_UART_MspInit+0xe4>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	4a2e      	ldr	r2, [pc, #184]	; (8002fa0 <HAL_UART_MspInit+0xe4>)
 8002ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eec:	6413      	str	r3, [r2, #64]	; 0x40
 8002eee:	4b2c      	ldr	r3, [pc, #176]	; (8002fa0 <HAL_UART_MspInit+0xe4>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <HAL_UART_MspInit+0xe4>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4a27      	ldr	r2, [pc, #156]	; (8002fa0 <HAL_UART_MspInit+0xe4>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0a:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <HAL_UART_MspInit+0xe4>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f16:	230c      	movs	r3, #12
 8002f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f22:	2303      	movs	r3, #3
 8002f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f26:	2307      	movs	r3, #7
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2a:	f107 0314 	add.w	r3, r7, #20
 8002f2e:	4619      	mov	r1, r3
 8002f30:	481c      	ldr	r0, [pc, #112]	; (8002fa4 <HAL_UART_MspInit+0xe8>)
 8002f32:	f000 fc99 	bl	8003868 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002f36:	4b1c      	ldr	r3, [pc, #112]	; (8002fa8 <HAL_UART_MspInit+0xec>)
 8002f38:	4a1c      	ldr	r2, [pc, #112]	; (8002fac <HAL_UART_MspInit+0xf0>)
 8002f3a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <HAL_UART_MspInit+0xec>)
 8002f3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f42:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f44:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <HAL_UART_MspInit+0xec>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f4a:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <HAL_UART_MspInit+0xec>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f50:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <HAL_UART_MspInit+0xec>)
 8002f52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f56:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f58:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <HAL_UART_MspInit+0xec>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f5e:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <HAL_UART_MspInit+0xec>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002f64:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <HAL_UART_MspInit+0xec>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f6a:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <HAL_UART_MspInit+0xec>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f70:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <HAL_UART_MspInit+0xec>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002f76:	480c      	ldr	r0, [pc, #48]	; (8002fa8 <HAL_UART_MspInit+0xec>)
 8002f78:	f000 f98c 	bl	8003294 <HAL_DMA_Init>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002f82:	f7ff fd8d 	bl	8002aa0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a07      	ldr	r2, [pc, #28]	; (8002fa8 <HAL_UART_MspInit+0xec>)
 8002f8a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f8c:	4a06      	ldr	r2, [pc, #24]	; (8002fa8 <HAL_UART_MspInit+0xec>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f92:	bf00      	nop
 8002f94:	3728      	adds	r7, #40	; 0x28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40004400 	.word	0x40004400
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40020000 	.word	0x40020000
 8002fa8:	20004040 	.word	0x20004040
 8002fac:	40026088 	.word	0x40026088

08002fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fe8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fb4:	480d      	ldr	r0, [pc, #52]	; (8002fec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fb6:	490e      	ldr	r1, [pc, #56]	; (8002ff0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fb8:	4a0e      	ldr	r2, [pc, #56]	; (8002ff4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fbc:	e002      	b.n	8002fc4 <LoopCopyDataInit>

08002fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fc2:	3304      	adds	r3, #4

08002fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fc8:	d3f9      	bcc.n	8002fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fca:	4a0b      	ldr	r2, [pc, #44]	; (8002ff8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fcc:	4c0b      	ldr	r4, [pc, #44]	; (8002ffc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fd0:	e001      	b.n	8002fd6 <LoopFillZerobss>

08002fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fd4:	3204      	adds	r2, #4

08002fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fd8:	d3fb      	bcc.n	8002fd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fda:	f7ff ff33 	bl	8002e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fde:	f004 ff27 	bl	8007e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fe2:	f7ff fcc9 	bl	8002978 <main>
  bx  lr    
 8002fe6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fe8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ff0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002ff4:	08009cb4 	.word	0x08009cb4
  ldr r2, =_sbss
 8002ff8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002ffc:	20004138 	.word	0x20004138

08003000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003000:	e7fe      	b.n	8003000 <ADC_IRQHandler>
	...

08003004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003008:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <HAL_Init+0x40>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a0d      	ldr	r2, [pc, #52]	; (8003044 <HAL_Init+0x40>)
 800300e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003012:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_Init+0x40>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <HAL_Init+0x40>)
 800301a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800301e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <HAL_Init+0x40>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a07      	ldr	r2, [pc, #28]	; (8003044 <HAL_Init+0x40>)
 8003026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800302c:	2003      	movs	r0, #3
 800302e:	f000 f8fc 	bl	800322a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003032:	200f      	movs	r0, #15
 8003034:	f7ff fde0 	bl	8002bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003038:	f7ff fdb6 	bl	8002ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40023c00 	.word	0x40023c00

08003048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_IncTick+0x20>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_IncTick+0x24>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4413      	add	r3, r2
 8003058:	4a04      	ldr	r2, [pc, #16]	; (800306c <HAL_IncTick+0x24>)
 800305a:	6013      	str	r3, [r2, #0]
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	2000000c 	.word	0x2000000c
 800306c:	200040e4 	.word	0x200040e4

08003070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return uwTick;
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <HAL_GetTick+0x14>)
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	200040e4 	.word	0x200040e4

08003088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003090:	f7ff ffee 	bl	8003070 <HAL_GetTick>
 8003094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a0:	d005      	beq.n	80030ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030a2:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <HAL_Delay+0x44>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4413      	add	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030ae:	bf00      	nop
 80030b0:	f7ff ffde 	bl	8003070 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d8f7      	bhi.n	80030b0 <HAL_Delay+0x28>
  {
  }
}
 80030c0:	bf00      	nop
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	2000000c 	.word	0x2000000c

080030d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <__NVIC_SetPriorityGrouping+0x44>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030ec:	4013      	ands	r3, r2
 80030ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003102:	4a04      	ldr	r2, [pc, #16]	; (8003114 <__NVIC_SetPriorityGrouping+0x44>)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	60d3      	str	r3, [r2, #12]
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800311c:	4b04      	ldr	r3, [pc, #16]	; (8003130 <__NVIC_GetPriorityGrouping+0x18>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	f003 0307 	and.w	r3, r3, #7
}
 8003126:	4618      	mov	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	2b00      	cmp	r3, #0
 8003144:	db0b      	blt.n	800315e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	f003 021f 	and.w	r2, r3, #31
 800314c:	4907      	ldr	r1, [pc, #28]	; (800316c <__NVIC_EnableIRQ+0x38>)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	2001      	movs	r0, #1
 8003156:	fa00 f202 	lsl.w	r2, r0, r2
 800315a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	e000e100 	.word	0xe000e100

08003170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	6039      	str	r1, [r7, #0]
 800317a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003180:	2b00      	cmp	r3, #0
 8003182:	db0a      	blt.n	800319a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	b2da      	uxtb	r2, r3
 8003188:	490c      	ldr	r1, [pc, #48]	; (80031bc <__NVIC_SetPriority+0x4c>)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	0112      	lsls	r2, r2, #4
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	440b      	add	r3, r1
 8003194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003198:	e00a      	b.n	80031b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	4908      	ldr	r1, [pc, #32]	; (80031c0 <__NVIC_SetPriority+0x50>)
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	3b04      	subs	r3, #4
 80031a8:	0112      	lsls	r2, r2, #4
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	440b      	add	r3, r1
 80031ae:	761a      	strb	r2, [r3, #24]
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	e000e100 	.word	0xe000e100
 80031c0:	e000ed00 	.word	0xe000ed00

080031c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b089      	sub	sp, #36	; 0x24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f1c3 0307 	rsb	r3, r3, #7
 80031de:	2b04      	cmp	r3, #4
 80031e0:	bf28      	it	cs
 80031e2:	2304      	movcs	r3, #4
 80031e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3304      	adds	r3, #4
 80031ea:	2b06      	cmp	r3, #6
 80031ec:	d902      	bls.n	80031f4 <NVIC_EncodePriority+0x30>
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3b03      	subs	r3, #3
 80031f2:	e000      	b.n	80031f6 <NVIC_EncodePriority+0x32>
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f8:	f04f 32ff 	mov.w	r2, #4294967295
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43da      	mvns	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	401a      	ands	r2, r3
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800320c:	f04f 31ff 	mov.w	r1, #4294967295
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	fa01 f303 	lsl.w	r3, r1, r3
 8003216:	43d9      	mvns	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800321c:	4313      	orrs	r3, r2
         );
}
 800321e:	4618      	mov	r0, r3
 8003220:	3724      	adds	r7, #36	; 0x24
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff ff4c 	bl	80030d0 <__NVIC_SetPriorityGrouping>
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003252:	f7ff ff61 	bl	8003118 <__NVIC_GetPriorityGrouping>
 8003256:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	6978      	ldr	r0, [r7, #20]
 800325e:	f7ff ffb1 	bl	80031c4 <NVIC_EncodePriority>
 8003262:	4602      	mov	r2, r0
 8003264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003268:	4611      	mov	r1, r2
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff ff80 	bl	8003170 <__NVIC_SetPriority>
}
 8003270:	bf00      	nop
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff ff54 	bl	8003134 <__NVIC_EnableIRQ>
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032a0:	f7ff fee6 	bl	8003070 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e099      	b.n	80033e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d0:	e00f      	b.n	80032f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032d2:	f7ff fecd 	bl	8003070 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b05      	cmp	r3, #5
 80032de:	d908      	bls.n	80032f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2203      	movs	r2, #3
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e078      	b.n	80033e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e8      	bne.n	80032d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4b38      	ldr	r3, [pc, #224]	; (80033ec <HAL_DMA_Init+0x158>)
 800330c:	4013      	ands	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800331e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003336:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4313      	orrs	r3, r2
 8003342:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	2b04      	cmp	r3, #4
 800334a:	d107      	bne.n	800335c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	4313      	orrs	r3, r2
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f023 0307 	bic.w	r3, r3, #7
 8003372:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2b04      	cmp	r3, #4
 8003384:	d117      	bne.n	80033b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00e      	beq.n	80033b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f9e9 	bl	8003770 <DMA_CheckFifoParam>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2240      	movs	r2, #64	; 0x40
 80033a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033b2:	2301      	movs	r3, #1
 80033b4:	e016      	b.n	80033e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f9a0 	bl	8003704 <DMA_CalcBaseAndBitshift>
 80033c4:	4603      	mov	r3, r0
 80033c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033cc:	223f      	movs	r2, #63	; 0x3f
 80033ce:	409a      	lsls	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	f010803f 	.word	0xf010803f

080033f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033fc:	4b92      	ldr	r3, [pc, #584]	; (8003648 <HAL_DMA_IRQHandler+0x258>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a92      	ldr	r2, [pc, #584]	; (800364c <HAL_DMA_IRQHandler+0x25c>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	0a9b      	lsrs	r3, r3, #10
 8003408:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341a:	2208      	movs	r2, #8
 800341c:	409a      	lsls	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4013      	ands	r3, r2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01a      	beq.n	800345c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d013      	beq.n	800345c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0204 	bic.w	r2, r2, #4
 8003442:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	2208      	movs	r2, #8
 800344a:	409a      	lsls	r2, r3
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003454:	f043 0201 	orr.w	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003460:	2201      	movs	r2, #1
 8003462:	409a      	lsls	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d012      	beq.n	8003492 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00b      	beq.n	8003492 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347e:	2201      	movs	r2, #1
 8003480:	409a      	lsls	r2, r3
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	f043 0202 	orr.w	r2, r3, #2
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003496:	2204      	movs	r2, #4
 8003498:	409a      	lsls	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4013      	ands	r3, r2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d012      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00b      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b4:	2204      	movs	r2, #4
 80034b6:	409a      	lsls	r2, r3
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c0:	f043 0204 	orr.w	r2, r3, #4
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034cc:	2210      	movs	r2, #16
 80034ce:	409a      	lsls	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d043      	beq.n	8003560 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d03c      	beq.n	8003560 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ea:	2210      	movs	r2, #16
 80034ec:	409a      	lsls	r2, r3
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d018      	beq.n	8003532 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d108      	bne.n	8003520 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d024      	beq.n	8003560 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
 800351e:	e01f      	b.n	8003560 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01b      	beq.n	8003560 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
 8003530:	e016      	b.n	8003560 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d107      	bne.n	8003550 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0208 	bic.w	r2, r2, #8
 800354e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003564:	2220      	movs	r2, #32
 8003566:	409a      	lsls	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 808e 	beq.w	800368e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 8086 	beq.w	800368e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003586:	2220      	movs	r2, #32
 8003588:	409a      	lsls	r2, r3
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b05      	cmp	r3, #5
 8003598:	d136      	bne.n	8003608 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0216 	bic.w	r2, r2, #22
 80035a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695a      	ldr	r2, [r3, #20]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d103      	bne.n	80035ca <HAL_DMA_IRQHandler+0x1da>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d007      	beq.n	80035da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0208 	bic.w	r2, r2, #8
 80035d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035de:	223f      	movs	r2, #63	; 0x3f
 80035e0:	409a      	lsls	r2, r3
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d07d      	beq.n	80036fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	4798      	blx	r3
        }
        return;
 8003606:	e078      	b.n	80036fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d01c      	beq.n	8003650 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d108      	bne.n	8003636 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	2b00      	cmp	r3, #0
 800362a:	d030      	beq.n	800368e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
 8003634:	e02b      	b.n	800368e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d027      	beq.n	800368e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	4798      	blx	r3
 8003646:	e022      	b.n	800368e <HAL_DMA_IRQHandler+0x29e>
 8003648:	20000004 	.word	0x20000004
 800364c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10f      	bne.n	800367e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0210 	bic.w	r2, r2, #16
 800366c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003692:	2b00      	cmp	r3, #0
 8003694:	d032      	beq.n	80036fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d022      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2205      	movs	r2, #5
 80036a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0201 	bic.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	3301      	adds	r3, #1
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d307      	bcc.n	80036d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f2      	bne.n	80036ba <HAL_DMA_IRQHandler+0x2ca>
 80036d4:	e000      	b.n	80036d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80036d6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	4798      	blx	r3
 80036f8:	e000      	b.n	80036fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80036fa:	bf00      	nop
    }
  }
}
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop

08003704 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	3b10      	subs	r3, #16
 8003714:	4a14      	ldr	r2, [pc, #80]	; (8003768 <DMA_CalcBaseAndBitshift+0x64>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800371e:	4a13      	ldr	r2, [pc, #76]	; (800376c <DMA_CalcBaseAndBitshift+0x68>)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4413      	add	r3, r2
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b03      	cmp	r3, #3
 8003730:	d909      	bls.n	8003746 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800373a:	f023 0303 	bic.w	r3, r3, #3
 800373e:	1d1a      	adds	r2, r3, #4
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	659a      	str	r2, [r3, #88]	; 0x58
 8003744:	e007      	b.n	8003756 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800374e:	f023 0303 	bic.w	r3, r3, #3
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	aaaaaaab 	.word	0xaaaaaaab
 800376c:	08009c04 	.word	0x08009c04

08003770 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d11f      	bne.n	80037ca <DMA_CheckFifoParam+0x5a>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b03      	cmp	r3, #3
 800378e:	d856      	bhi.n	800383e <DMA_CheckFifoParam+0xce>
 8003790:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <DMA_CheckFifoParam+0x28>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037a9 	.word	0x080037a9
 800379c:	080037bb 	.word	0x080037bb
 80037a0:	080037a9 	.word	0x080037a9
 80037a4:	0800383f 	.word	0x0800383f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d046      	beq.n	8003842 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b8:	e043      	b.n	8003842 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037c2:	d140      	bne.n	8003846 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c8:	e03d      	b.n	8003846 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d2:	d121      	bne.n	8003818 <DMA_CheckFifoParam+0xa8>
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d837      	bhi.n	800384a <DMA_CheckFifoParam+0xda>
 80037da:	a201      	add	r2, pc, #4	; (adr r2, 80037e0 <DMA_CheckFifoParam+0x70>)
 80037dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e0:	080037f1 	.word	0x080037f1
 80037e4:	080037f7 	.word	0x080037f7
 80037e8:	080037f1 	.word	0x080037f1
 80037ec:	08003809 	.word	0x08003809
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	73fb      	strb	r3, [r7, #15]
      break;
 80037f4:	e030      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d025      	beq.n	800384e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003806:	e022      	b.n	800384e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003810:	d11f      	bne.n	8003852 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003816:	e01c      	b.n	8003852 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d903      	bls.n	8003826 <DMA_CheckFifoParam+0xb6>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d003      	beq.n	800382c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003824:	e018      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
      break;
 800382a:	e015      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00e      	beq.n	8003856 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      break;
 800383c:	e00b      	b.n	8003856 <DMA_CheckFifoParam+0xe6>
      break;
 800383e:	bf00      	nop
 8003840:	e00a      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;
 8003842:	bf00      	nop
 8003844:	e008      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;
 8003846:	bf00      	nop
 8003848:	e006      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;
 800384a:	bf00      	nop
 800384c:	e004      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;
 800384e:	bf00      	nop
 8003850:	e002      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;   
 8003852:	bf00      	nop
 8003854:	e000      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;
 8003856:	bf00      	nop
    }
  } 
  
  return status; 
 8003858:	7bfb      	ldrb	r3, [r7, #15]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop

08003868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003868:	b480      	push	{r7}
 800386a:	b089      	sub	sp, #36	; 0x24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800387a:	2300      	movs	r3, #0
 800387c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
 8003882:	e165      	b.n	8003b50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003884:	2201      	movs	r2, #1
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4013      	ands	r3, r2
 8003896:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	429a      	cmp	r2, r3
 800389e:	f040 8154 	bne.w	8003b4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d005      	beq.n	80038ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d130      	bne.n	800391c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	2203      	movs	r2, #3
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038f0:	2201      	movs	r2, #1
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	f003 0201 	and.w	r2, r3, #1
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b03      	cmp	r3, #3
 8003926:	d017      	beq.n	8003958 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	2203      	movs	r2, #3
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d123      	bne.n	80039ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	08da      	lsrs	r2, r3, #3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3208      	adds	r2, #8
 800396c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003970:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	220f      	movs	r2, #15
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	08da      	lsrs	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3208      	adds	r2, #8
 80039a6:	69b9      	ldr	r1, [r7, #24]
 80039a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	2203      	movs	r2, #3
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4013      	ands	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 0203 	and.w	r2, r3, #3
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80ae 	beq.w	8003b4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	4b5d      	ldr	r3, [pc, #372]	; (8003b68 <HAL_GPIO_Init+0x300>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	4a5c      	ldr	r2, [pc, #368]	; (8003b68 <HAL_GPIO_Init+0x300>)
 80039f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039fc:	6453      	str	r3, [r2, #68]	; 0x44
 80039fe:	4b5a      	ldr	r3, [pc, #360]	; (8003b68 <HAL_GPIO_Init+0x300>)
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a0a:	4a58      	ldr	r2, [pc, #352]	; (8003b6c <HAL_GPIO_Init+0x304>)
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	089b      	lsrs	r3, r3, #2
 8003a10:	3302      	adds	r3, #2
 8003a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	220f      	movs	r2, #15
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43db      	mvns	r3, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a4f      	ldr	r2, [pc, #316]	; (8003b70 <HAL_GPIO_Init+0x308>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d025      	beq.n	8003a82 <HAL_GPIO_Init+0x21a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a4e      	ldr	r2, [pc, #312]	; (8003b74 <HAL_GPIO_Init+0x30c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01f      	beq.n	8003a7e <HAL_GPIO_Init+0x216>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a4d      	ldr	r2, [pc, #308]	; (8003b78 <HAL_GPIO_Init+0x310>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d019      	beq.n	8003a7a <HAL_GPIO_Init+0x212>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a4c      	ldr	r2, [pc, #304]	; (8003b7c <HAL_GPIO_Init+0x314>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d013      	beq.n	8003a76 <HAL_GPIO_Init+0x20e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a4b      	ldr	r2, [pc, #300]	; (8003b80 <HAL_GPIO_Init+0x318>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00d      	beq.n	8003a72 <HAL_GPIO_Init+0x20a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a4a      	ldr	r2, [pc, #296]	; (8003b84 <HAL_GPIO_Init+0x31c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d007      	beq.n	8003a6e <HAL_GPIO_Init+0x206>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a49      	ldr	r2, [pc, #292]	; (8003b88 <HAL_GPIO_Init+0x320>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d101      	bne.n	8003a6a <HAL_GPIO_Init+0x202>
 8003a66:	2306      	movs	r3, #6
 8003a68:	e00c      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a6a:	2307      	movs	r3, #7
 8003a6c:	e00a      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a6e:	2305      	movs	r3, #5
 8003a70:	e008      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a72:	2304      	movs	r3, #4
 8003a74:	e006      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a76:	2303      	movs	r3, #3
 8003a78:	e004      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e002      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a82:	2300      	movs	r3, #0
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	f002 0203 	and.w	r2, r2, #3
 8003a8a:	0092      	lsls	r2, r2, #2
 8003a8c:	4093      	lsls	r3, r2
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a94:	4935      	ldr	r1, [pc, #212]	; (8003b6c <HAL_GPIO_Init+0x304>)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	089b      	lsrs	r3, r3, #2
 8003a9a:	3302      	adds	r3, #2
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aa2:	4b3a      	ldr	r3, [pc, #232]	; (8003b8c <HAL_GPIO_Init+0x324>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ac6:	4a31      	ldr	r2, [pc, #196]	; (8003b8c <HAL_GPIO_Init+0x324>)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003acc:	4b2f      	ldr	r3, [pc, #188]	; (8003b8c <HAL_GPIO_Init+0x324>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003af0:	4a26      	ldr	r2, [pc, #152]	; (8003b8c <HAL_GPIO_Init+0x324>)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003af6:	4b25      	ldr	r3, [pc, #148]	; (8003b8c <HAL_GPIO_Init+0x324>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	43db      	mvns	r3, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4013      	ands	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b1a:	4a1c      	ldr	r2, [pc, #112]	; (8003b8c <HAL_GPIO_Init+0x324>)
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b20:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <HAL_GPIO_Init+0x324>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b44:	4a11      	ldr	r2, [pc, #68]	; (8003b8c <HAL_GPIO_Init+0x324>)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	61fb      	str	r3, [r7, #28]
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	2b0f      	cmp	r3, #15
 8003b54:	f67f ae96 	bls.w	8003884 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b58:	bf00      	nop
 8003b5a:	bf00      	nop
 8003b5c:	3724      	adds	r7, #36	; 0x24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40013800 	.word	0x40013800
 8003b70:	40020000 	.word	0x40020000
 8003b74:	40020400 	.word	0x40020400
 8003b78:	40020800 	.word	0x40020800
 8003b7c:	40020c00 	.word	0x40020c00
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40021400 	.word	0x40021400
 8003b88:	40021800 	.word	0x40021800
 8003b8c:	40013c00 	.word	0x40013c00

08003b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	807b      	strh	r3, [r7, #2]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba0:	787b      	ldrb	r3, [r7, #1]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ba6:	887a      	ldrh	r2, [r7, #2]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bac:	e003      	b.n	8003bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bae:	887b      	ldrh	r3, [r7, #2]
 8003bb0:	041a      	lsls	r2, r3, #16
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	619a      	str	r2, [r3, #24]
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0cc      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd8:	4b68      	ldr	r3, [pc, #416]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d90c      	bls.n	8003c00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be6:	4b65      	ldr	r3, [pc, #404]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bee:	4b63      	ldr	r3, [pc, #396]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0b8      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d020      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c18:	4b59      	ldr	r3, [pc, #356]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	4a58      	ldr	r2, [pc, #352]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c30:	4b53      	ldr	r3, [pc, #332]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4a52      	ldr	r2, [pc, #328]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3c:	4b50      	ldr	r3, [pc, #320]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	494d      	ldr	r1, [pc, #308]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d044      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d107      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d119      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e07f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d003      	beq.n	8003c82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d107      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c82:	4b3f      	ldr	r3, [pc, #252]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e06f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c92:	4b3b      	ldr	r3, [pc, #236]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e067      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ca2:	4b37      	ldr	r3, [pc, #220]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f023 0203 	bic.w	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	4934      	ldr	r1, [pc, #208]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cb4:	f7ff f9dc 	bl	8003070 <HAL_GetTick>
 8003cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cba:	e00a      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cbc:	f7ff f9d8 	bl	8003070 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e04f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 020c 	and.w	r2, r3, #12
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d1eb      	bne.n	8003cbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce4:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d20c      	bcs.n	8003d0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf2:	4b22      	ldr	r3, [pc, #136]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b20      	ldr	r3, [pc, #128]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e032      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d18:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4916      	ldr	r1, [pc, #88]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d36:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	490e      	ldr	r1, [pc, #56]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d4a:	f000 f887 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	490a      	ldr	r1, [pc, #40]	; (8003d84 <HAL_RCC_ClockConfig+0x1c0>)
 8003d5c:	5ccb      	ldrb	r3, [r1, r3]
 8003d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d62:	4a09      	ldr	r2, [pc, #36]	; (8003d88 <HAL_RCC_ClockConfig+0x1c4>)
 8003d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d66:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe ff44 	bl	8002bf8 <HAL_InitTick>

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40023c00 	.word	0x40023c00
 8003d80:	40023800 	.word	0x40023800
 8003d84:	08009bec 	.word	0x08009bec
 8003d88:	20000004 	.word	0x20000004
 8003d8c:	20000008 	.word	0x20000008

08003d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d94:	4b03      	ldr	r3, [pc, #12]	; (8003da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d96:	681b      	ldr	r3, [r3, #0]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	20000004 	.word	0x20000004

08003da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dac:	f7ff fff0 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	0a9b      	lsrs	r3, r3, #10
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	4903      	ldr	r1, [pc, #12]	; (8003dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dbe:	5ccb      	ldrb	r3, [r1, r3]
 8003dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	08009bfc 	.word	0x08009bfc

08003dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dd4:	f7ff ffdc 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	0b5b      	lsrs	r3, r3, #13
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	4903      	ldr	r1, [pc, #12]	; (8003df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003de6:	5ccb      	ldrb	r3, [r1, r3]
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40023800 	.word	0x40023800
 8003df4:	08009bfc 	.word	0x08009bfc

08003df8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	220f      	movs	r2, #15
 8003e06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e08:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <HAL_RCC_GetClockConfig+0x5c>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 0203 	and.w	r2, r3, #3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e14:	4b0f      	ldr	r3, [pc, #60]	; (8003e54 <HAL_RCC_GetClockConfig+0x5c>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e20:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <HAL_RCC_GetClockConfig+0x5c>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e2c:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <HAL_RCC_GetClockConfig+0x5c>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	08db      	lsrs	r3, r3, #3
 8003e32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e3a:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <HAL_RCC_GetClockConfig+0x60>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 020f 	and.w	r2, r3, #15
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	601a      	str	r2, [r3, #0]
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40023c00 	.word	0x40023c00

08003e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e60:	b088      	sub	sp, #32
 8003e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e78:	4bce      	ldr	r3, [pc, #824]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 030c 	and.w	r3, r3, #12
 8003e80:	2b0c      	cmp	r3, #12
 8003e82:	f200 818d 	bhi.w	80041a0 <HAL_RCC_GetSysClockFreq+0x344>
 8003e86:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <HAL_RCC_GetSysClockFreq+0x30>)
 8003e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8c:	08003ec1 	.word	0x08003ec1
 8003e90:	080041a1 	.word	0x080041a1
 8003e94:	080041a1 	.word	0x080041a1
 8003e98:	080041a1 	.word	0x080041a1
 8003e9c:	08003ec7 	.word	0x08003ec7
 8003ea0:	080041a1 	.word	0x080041a1
 8003ea4:	080041a1 	.word	0x080041a1
 8003ea8:	080041a1 	.word	0x080041a1
 8003eac:	08003ecd 	.word	0x08003ecd
 8003eb0:	080041a1 	.word	0x080041a1
 8003eb4:	080041a1 	.word	0x080041a1
 8003eb8:	080041a1 	.word	0x080041a1
 8003ebc:	08004041 	.word	0x08004041
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ec0:	4bbd      	ldr	r3, [pc, #756]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003ec2:	61bb      	str	r3, [r7, #24]
       break;
 8003ec4:	e16f      	b.n	80041a6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ec6:	4bbd      	ldr	r3, [pc, #756]	; (80041bc <HAL_RCC_GetSysClockFreq+0x360>)
 8003ec8:	61bb      	str	r3, [r7, #24]
      break;
 8003eca:	e16c      	b.n	80041a6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ecc:	4bb9      	ldr	r3, [pc, #740]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ed4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ed6:	4bb7      	ldr	r3, [pc, #732]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d053      	beq.n	8003f8a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ee2:	4bb4      	ldr	r3, [pc, #720]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	099b      	lsrs	r3, r3, #6
 8003ee8:	461a      	mov	r2, r3
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ef2:	f04f 0100 	mov.w	r1, #0
 8003ef6:	ea02 0400 	and.w	r4, r2, r0
 8003efa:	603c      	str	r4, [r7, #0]
 8003efc:	400b      	ands	r3, r1
 8003efe:	607b      	str	r3, [r7, #4]
 8003f00:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f04:	4620      	mov	r0, r4
 8003f06:	4629      	mov	r1, r5
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	014b      	lsls	r3, r1, #5
 8003f12:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f16:	0142      	lsls	r2, r0, #5
 8003f18:	4610      	mov	r0, r2
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4623      	mov	r3, r4
 8003f1e:	1ac0      	subs	r0, r0, r3
 8003f20:	462b      	mov	r3, r5
 8003f22:	eb61 0103 	sbc.w	r1, r1, r3
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	018b      	lsls	r3, r1, #6
 8003f30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f34:	0182      	lsls	r2, r0, #6
 8003f36:	1a12      	subs	r2, r2, r0
 8003f38:	eb63 0301 	sbc.w	r3, r3, r1
 8003f3c:	f04f 0000 	mov.w	r0, #0
 8003f40:	f04f 0100 	mov.w	r1, #0
 8003f44:	00d9      	lsls	r1, r3, #3
 8003f46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f4a:	00d0      	lsls	r0, r2, #3
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4621      	mov	r1, r4
 8003f52:	1852      	adds	r2, r2, r1
 8003f54:	4629      	mov	r1, r5
 8003f56:	eb43 0101 	adc.w	r1, r3, r1
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	f04f 0000 	mov.w	r0, #0
 8003f60:	f04f 0100 	mov.w	r1, #0
 8003f64:	0259      	lsls	r1, r3, #9
 8003f66:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003f6a:	0250      	lsls	r0, r2, #9
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4610      	mov	r0, r2
 8003f72:	4619      	mov	r1, r3
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	461a      	mov	r2, r3
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	f7fc f9a8 	bl	80002d0 <__aeabi_uldivmod>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4613      	mov	r3, r2
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	e04c      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f8a:	4b8a      	ldr	r3, [pc, #552]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	099b      	lsrs	r3, r3, #6
 8003f90:	461a      	mov	r2, r3
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f9a:	f04f 0100 	mov.w	r1, #0
 8003f9e:	ea02 0a00 	and.w	sl, r2, r0
 8003fa2:	ea03 0b01 	and.w	fp, r3, r1
 8003fa6:	4650      	mov	r0, sl
 8003fa8:	4659      	mov	r1, fp
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	f04f 0300 	mov.w	r3, #0
 8003fb2:	014b      	lsls	r3, r1, #5
 8003fb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003fb8:	0142      	lsls	r2, r0, #5
 8003fba:	4610      	mov	r0, r2
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	ebb0 000a 	subs.w	r0, r0, sl
 8003fc2:	eb61 010b 	sbc.w	r1, r1, fp
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	018b      	lsls	r3, r1, #6
 8003fd0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003fd4:	0182      	lsls	r2, r0, #6
 8003fd6:	1a12      	subs	r2, r2, r0
 8003fd8:	eb63 0301 	sbc.w	r3, r3, r1
 8003fdc:	f04f 0000 	mov.w	r0, #0
 8003fe0:	f04f 0100 	mov.w	r1, #0
 8003fe4:	00d9      	lsls	r1, r3, #3
 8003fe6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fea:	00d0      	lsls	r0, r2, #3
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	eb12 020a 	adds.w	r2, r2, sl
 8003ff4:	eb43 030b 	adc.w	r3, r3, fp
 8003ff8:	f04f 0000 	mov.w	r0, #0
 8003ffc:	f04f 0100 	mov.w	r1, #0
 8004000:	0299      	lsls	r1, r3, #10
 8004002:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004006:	0290      	lsls	r0, r2, #10
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4610      	mov	r0, r2
 800400e:	4619      	mov	r1, r3
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	461a      	mov	r2, r3
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	f7fc f95a 	bl	80002d0 <__aeabi_uldivmod>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4613      	mov	r3, r2
 8004022:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004024:	4b63      	ldr	r3, [pc, #396]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	0c1b      	lsrs	r3, r3, #16
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	3301      	adds	r3, #1
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	fbb2 f3f3 	udiv	r3, r2, r3
 800403c:	61bb      	str	r3, [r7, #24]
      break;
 800403e:	e0b2      	b.n	80041a6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004040:	4b5c      	ldr	r3, [pc, #368]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004048:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800404a:	4b5a      	ldr	r3, [pc, #360]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d04d      	beq.n	80040f2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004056:	4b57      	ldr	r3, [pc, #348]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	099b      	lsrs	r3, r3, #6
 800405c:	461a      	mov	r2, r3
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004066:	f04f 0100 	mov.w	r1, #0
 800406a:	ea02 0800 	and.w	r8, r2, r0
 800406e:	ea03 0901 	and.w	r9, r3, r1
 8004072:	4640      	mov	r0, r8
 8004074:	4649      	mov	r1, r9
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	014b      	lsls	r3, r1, #5
 8004080:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004084:	0142      	lsls	r2, r0, #5
 8004086:	4610      	mov	r0, r2
 8004088:	4619      	mov	r1, r3
 800408a:	ebb0 0008 	subs.w	r0, r0, r8
 800408e:	eb61 0109 	sbc.w	r1, r1, r9
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	018b      	lsls	r3, r1, #6
 800409c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040a0:	0182      	lsls	r2, r0, #6
 80040a2:	1a12      	subs	r2, r2, r0
 80040a4:	eb63 0301 	sbc.w	r3, r3, r1
 80040a8:	f04f 0000 	mov.w	r0, #0
 80040ac:	f04f 0100 	mov.w	r1, #0
 80040b0:	00d9      	lsls	r1, r3, #3
 80040b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040b6:	00d0      	lsls	r0, r2, #3
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	eb12 0208 	adds.w	r2, r2, r8
 80040c0:	eb43 0309 	adc.w	r3, r3, r9
 80040c4:	f04f 0000 	mov.w	r0, #0
 80040c8:	f04f 0100 	mov.w	r1, #0
 80040cc:	0259      	lsls	r1, r3, #9
 80040ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80040d2:	0250      	lsls	r0, r2, #9
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4610      	mov	r0, r2
 80040da:	4619      	mov	r1, r3
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	461a      	mov	r2, r3
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	f7fc f8f4 	bl	80002d0 <__aeabi_uldivmod>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4613      	mov	r3, r2
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	e04a      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f2:	4b30      	ldr	r3, [pc, #192]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x358>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	099b      	lsrs	r3, r3, #6
 80040f8:	461a      	mov	r2, r3
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004102:	f04f 0100 	mov.w	r1, #0
 8004106:	ea02 0400 	and.w	r4, r2, r0
 800410a:	ea03 0501 	and.w	r5, r3, r1
 800410e:	4620      	mov	r0, r4
 8004110:	4629      	mov	r1, r5
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	014b      	lsls	r3, r1, #5
 800411c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004120:	0142      	lsls	r2, r0, #5
 8004122:	4610      	mov	r0, r2
 8004124:	4619      	mov	r1, r3
 8004126:	1b00      	subs	r0, r0, r4
 8004128:	eb61 0105 	sbc.w	r1, r1, r5
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	018b      	lsls	r3, r1, #6
 8004136:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800413a:	0182      	lsls	r2, r0, #6
 800413c:	1a12      	subs	r2, r2, r0
 800413e:	eb63 0301 	sbc.w	r3, r3, r1
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	f04f 0100 	mov.w	r1, #0
 800414a:	00d9      	lsls	r1, r3, #3
 800414c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004150:	00d0      	lsls	r0, r2, #3
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	1912      	adds	r2, r2, r4
 8004158:	eb45 0303 	adc.w	r3, r5, r3
 800415c:	f04f 0000 	mov.w	r0, #0
 8004160:	f04f 0100 	mov.w	r1, #0
 8004164:	0299      	lsls	r1, r3, #10
 8004166:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800416a:	0290      	lsls	r0, r2, #10
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4610      	mov	r0, r2
 8004172:	4619      	mov	r1, r3
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	461a      	mov	r2, r3
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	f7fc f8a8 	bl	80002d0 <__aeabi_uldivmod>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4613      	mov	r3, r2
 8004186:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004188:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	0f1b      	lsrs	r3, r3, #28
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	fbb2 f3f3 	udiv	r3, r2, r3
 800419c:	61bb      	str	r3, [r7, #24]
      break;
 800419e:	e002      	b.n	80041a6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041a0:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80041a2:	61bb      	str	r3, [r7, #24]
      break;
 80041a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041a6:	69bb      	ldr	r3, [r7, #24]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3720      	adds	r7, #32
 80041ac:	46bd      	mov	sp, r7
 80041ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041b2:	bf00      	nop
 80041b4:	40023800 	.word	0x40023800
 80041b8:	00f42400 	.word	0x00f42400
 80041bc:	007a1200 	.word	0x007a1200

080041c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e28d      	b.n	80046ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 8083 	beq.w	80042e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041e0:	4b94      	ldr	r3, [pc, #592]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 030c 	and.w	r3, r3, #12
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d019      	beq.n	8004220 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041ec:	4b91      	ldr	r3, [pc, #580]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d106      	bne.n	8004206 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041f8:	4b8e      	ldr	r3, [pc, #568]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004204:	d00c      	beq.n	8004220 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004206:	4b8b      	ldr	r3, [pc, #556]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800420e:	2b0c      	cmp	r3, #12
 8004210:	d112      	bne.n	8004238 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004212:	4b88      	ldr	r3, [pc, #544]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800421a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800421e:	d10b      	bne.n	8004238 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004220:	4b84      	ldr	r3, [pc, #528]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d05b      	beq.n	80042e4 <HAL_RCC_OscConfig+0x124>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d157      	bne.n	80042e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e25a      	b.n	80046ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004240:	d106      	bne.n	8004250 <HAL_RCC_OscConfig+0x90>
 8004242:	4b7c      	ldr	r3, [pc, #496]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a7b      	ldr	r2, [pc, #492]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 8004248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	e01d      	b.n	800428c <HAL_RCC_OscConfig+0xcc>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004258:	d10c      	bne.n	8004274 <HAL_RCC_OscConfig+0xb4>
 800425a:	4b76      	ldr	r3, [pc, #472]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a75      	ldr	r2, [pc, #468]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 8004260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	4b73      	ldr	r3, [pc, #460]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a72      	ldr	r2, [pc, #456]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 800426c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	e00b      	b.n	800428c <HAL_RCC_OscConfig+0xcc>
 8004274:	4b6f      	ldr	r3, [pc, #444]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a6e      	ldr	r2, [pc, #440]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 800427a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	4b6c      	ldr	r3, [pc, #432]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a6b      	ldr	r2, [pc, #428]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 8004286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800428a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d013      	beq.n	80042bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fe feec 	bl	8003070 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800429c:	f7fe fee8 	bl	8003070 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b64      	cmp	r3, #100	; 0x64
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e21f      	b.n	80046ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ae:	4b61      	ldr	r3, [pc, #388]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0xdc>
 80042ba:	e014      	b.n	80042e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042bc:	f7fe fed8 	bl	8003070 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c4:	f7fe fed4 	bl	8003070 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b64      	cmp	r3, #100	; 0x64
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e20b      	b.n	80046ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d6:	4b57      	ldr	r3, [pc, #348]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f0      	bne.n	80042c4 <HAL_RCC_OscConfig+0x104>
 80042e2:	e000      	b.n	80042e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d06f      	beq.n	80043d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042f2:	4b50      	ldr	r3, [pc, #320]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d017      	beq.n	800432e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042fe:	4b4d      	ldr	r3, [pc, #308]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004306:	2b08      	cmp	r3, #8
 8004308:	d105      	bne.n	8004316 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800430a:	4b4a      	ldr	r3, [pc, #296]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00b      	beq.n	800432e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004316:	4b47      	ldr	r3, [pc, #284]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800431e:	2b0c      	cmp	r3, #12
 8004320:	d11c      	bne.n	800435c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004322:	4b44      	ldr	r3, [pc, #272]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d116      	bne.n	800435c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800432e:	4b41      	ldr	r3, [pc, #260]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <HAL_RCC_OscConfig+0x186>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d001      	beq.n	8004346 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e1d3      	b.n	80046ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004346:	4b3b      	ldr	r3, [pc, #236]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	4937      	ldr	r1, [pc, #220]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 8004356:	4313      	orrs	r3, r2
 8004358:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800435a:	e03a      	b.n	80043d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d020      	beq.n	80043a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004364:	4b34      	ldr	r3, [pc, #208]	; (8004438 <HAL_RCC_OscConfig+0x278>)
 8004366:	2201      	movs	r2, #1
 8004368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436a:	f7fe fe81 	bl	8003070 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004372:	f7fe fe7d 	bl	8003070 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e1b4      	b.n	80046ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004384:	4b2b      	ldr	r3, [pc, #172]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0f0      	beq.n	8004372 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004390:	4b28      	ldr	r3, [pc, #160]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	4925      	ldr	r1, [pc, #148]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	600b      	str	r3, [r1, #0]
 80043a4:	e015      	b.n	80043d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043a6:	4b24      	ldr	r3, [pc, #144]	; (8004438 <HAL_RCC_OscConfig+0x278>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ac:	f7fe fe60 	bl	8003070 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043b4:	f7fe fe5c 	bl	8003070 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e193      	b.n	80046ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c6:	4b1b      	ldr	r3, [pc, #108]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f0      	bne.n	80043b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d036      	beq.n	800444c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d016      	beq.n	8004414 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043e6:	4b15      	ldr	r3, [pc, #84]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 80043e8:	2201      	movs	r2, #1
 80043ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ec:	f7fe fe40 	bl	8003070 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043f4:	f7fe fe3c 	bl	8003070 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e173      	b.n	80046ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004406:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_RCC_OscConfig+0x274>)
 8004408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCC_OscConfig+0x234>
 8004412:	e01b      	b.n	800444c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004414:	4b09      	ldr	r3, [pc, #36]	; (800443c <HAL_RCC_OscConfig+0x27c>)
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441a:	f7fe fe29 	bl	8003070 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004420:	e00e      	b.n	8004440 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004422:	f7fe fe25 	bl	8003070 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d907      	bls.n	8004440 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e15c      	b.n	80046ee <HAL_RCC_OscConfig+0x52e>
 8004434:	40023800 	.word	0x40023800
 8004438:	42470000 	.word	0x42470000
 800443c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004440:	4b8a      	ldr	r3, [pc, #552]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 8004442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1ea      	bne.n	8004422 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 8097 	beq.w	8004588 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800445a:	2300      	movs	r3, #0
 800445c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800445e:	4b83      	ldr	r3, [pc, #524]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10f      	bne.n	800448a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800446a:	2300      	movs	r3, #0
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	4b7f      	ldr	r3, [pc, #508]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	4a7e      	ldr	r2, [pc, #504]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 8004474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004478:	6413      	str	r3, [r2, #64]	; 0x40
 800447a:	4b7c      	ldr	r3, [pc, #496]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004486:	2301      	movs	r3, #1
 8004488:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448a:	4b79      	ldr	r3, [pc, #484]	; (8004670 <HAL_RCC_OscConfig+0x4b0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004492:	2b00      	cmp	r3, #0
 8004494:	d118      	bne.n	80044c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004496:	4b76      	ldr	r3, [pc, #472]	; (8004670 <HAL_RCC_OscConfig+0x4b0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a75      	ldr	r2, [pc, #468]	; (8004670 <HAL_RCC_OscConfig+0x4b0>)
 800449c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044a2:	f7fe fde5 	bl	8003070 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044aa:	f7fe fde1 	bl	8003070 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e118      	b.n	80046ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044bc:	4b6c      	ldr	r3, [pc, #432]	; (8004670 <HAL_RCC_OscConfig+0x4b0>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d106      	bne.n	80044de <HAL_RCC_OscConfig+0x31e>
 80044d0:	4b66      	ldr	r3, [pc, #408]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	4a65      	ldr	r2, [pc, #404]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 80044d6:	f043 0301 	orr.w	r3, r3, #1
 80044da:	6713      	str	r3, [r2, #112]	; 0x70
 80044dc:	e01c      	b.n	8004518 <HAL_RCC_OscConfig+0x358>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b05      	cmp	r3, #5
 80044e4:	d10c      	bne.n	8004500 <HAL_RCC_OscConfig+0x340>
 80044e6:	4b61      	ldr	r3, [pc, #388]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	4a60      	ldr	r2, [pc, #384]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 80044ec:	f043 0304 	orr.w	r3, r3, #4
 80044f0:	6713      	str	r3, [r2, #112]	; 0x70
 80044f2:	4b5e      	ldr	r3, [pc, #376]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f6:	4a5d      	ldr	r2, [pc, #372]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 80044f8:	f043 0301 	orr.w	r3, r3, #1
 80044fc:	6713      	str	r3, [r2, #112]	; 0x70
 80044fe:	e00b      	b.n	8004518 <HAL_RCC_OscConfig+0x358>
 8004500:	4b5a      	ldr	r3, [pc, #360]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 8004502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004504:	4a59      	ldr	r2, [pc, #356]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 8004506:	f023 0301 	bic.w	r3, r3, #1
 800450a:	6713      	str	r3, [r2, #112]	; 0x70
 800450c:	4b57      	ldr	r3, [pc, #348]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	4a56      	ldr	r2, [pc, #344]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 8004512:	f023 0304 	bic.w	r3, r3, #4
 8004516:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d015      	beq.n	800454c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004520:	f7fe fda6 	bl	8003070 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004526:	e00a      	b.n	800453e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004528:	f7fe fda2 	bl	8003070 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	f241 3288 	movw	r2, #5000	; 0x1388
 8004536:	4293      	cmp	r3, r2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e0d7      	b.n	80046ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453e:	4b4b      	ldr	r3, [pc, #300]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 8004540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0ee      	beq.n	8004528 <HAL_RCC_OscConfig+0x368>
 800454a:	e014      	b.n	8004576 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454c:	f7fe fd90 	bl	8003070 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004552:	e00a      	b.n	800456a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004554:	f7fe fd8c 	bl	8003070 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e0c1      	b.n	80046ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800456a:	4b40      	ldr	r3, [pc, #256]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 800456c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1ee      	bne.n	8004554 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004576:	7dfb      	ldrb	r3, [r7, #23]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d105      	bne.n	8004588 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800457c:	4b3b      	ldr	r3, [pc, #236]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	4a3a      	ldr	r2, [pc, #232]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 8004582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004586:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80ad 	beq.w	80046ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004592:	4b36      	ldr	r3, [pc, #216]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 030c 	and.w	r3, r3, #12
 800459a:	2b08      	cmp	r3, #8
 800459c:	d060      	beq.n	8004660 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d145      	bne.n	8004632 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a6:	4b33      	ldr	r3, [pc, #204]	; (8004674 <HAL_RCC_OscConfig+0x4b4>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fe fd60 	bl	8003070 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b4:	f7fe fd5c 	bl	8003070 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e093      	b.n	80046ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c6:	4b29      	ldr	r3, [pc, #164]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f0      	bne.n	80045b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69da      	ldr	r2, [r3, #28]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	019b      	lsls	r3, r3, #6
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e8:	085b      	lsrs	r3, r3, #1
 80045ea:	3b01      	subs	r3, #1
 80045ec:	041b      	lsls	r3, r3, #16
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	061b      	lsls	r3, r3, #24
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	071b      	lsls	r3, r3, #28
 80045fe:	491b      	ldr	r1, [pc, #108]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 8004600:	4313      	orrs	r3, r2
 8004602:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004604:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <HAL_RCC_OscConfig+0x4b4>)
 8004606:	2201      	movs	r2, #1
 8004608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460a:	f7fe fd31 	bl	8003070 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004612:	f7fe fd2d 	bl	8003070 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e064      	b.n	80046ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004624:	4b11      	ldr	r3, [pc, #68]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0f0      	beq.n	8004612 <HAL_RCC_OscConfig+0x452>
 8004630:	e05c      	b.n	80046ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004632:	4b10      	ldr	r3, [pc, #64]	; (8004674 <HAL_RCC_OscConfig+0x4b4>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004638:	f7fe fd1a 	bl	8003070 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004640:	f7fe fd16 	bl	8003070 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e04d      	b.n	80046ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004652:	4b06      	ldr	r3, [pc, #24]	; (800466c <HAL_RCC_OscConfig+0x4ac>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x480>
 800465e:	e045      	b.n	80046ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d107      	bne.n	8004678 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e040      	b.n	80046ee <HAL_RCC_OscConfig+0x52e>
 800466c:	40023800 	.word	0x40023800
 8004670:	40007000 	.word	0x40007000
 8004674:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004678:	4b1f      	ldr	r3, [pc, #124]	; (80046f8 <HAL_RCC_OscConfig+0x538>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d030      	beq.n	80046e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004690:	429a      	cmp	r2, r3
 8004692:	d129      	bne.n	80046e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800469e:	429a      	cmp	r2, r3
 80046a0:	d122      	bne.n	80046e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046a8:	4013      	ands	r3, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d119      	bne.n	80046e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	085b      	lsrs	r3, r3, #1
 80046c0:	3b01      	subs	r3, #1
 80046c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d10f      	bne.n	80046e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d107      	bne.n	80046e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d001      	beq.n	80046ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40023800 	.word	0x40023800

080046fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e07b      	b.n	8004806 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	2b00      	cmp	r3, #0
 8004714:	d108      	bne.n	8004728 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800471e:	d009      	beq.n	8004734 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	61da      	str	r2, [r3, #28]
 8004726:	e005      	b.n	8004734 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fe f9e2 	bl	8002b18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b8:	ea42 0103 	orr.w	r1, r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	0c1b      	lsrs	r3, r3, #16
 80047d2:	f003 0104 	and.w	r1, r3, #4
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	f003 0210 	and.w	r2, r3, #16
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b088      	sub	sp, #32
 8004812:	af00      	add	r7, sp, #0
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	603b      	str	r3, [r7, #0]
 800481a:	4613      	mov	r3, r2
 800481c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_SPI_Transmit+0x22>
 800482c:	2302      	movs	r3, #2
 800482e:	e126      	b.n	8004a7e <HAL_SPI_Transmit+0x270>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004838:	f7fe fc1a 	bl	8003070 <HAL_GetTick>
 800483c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800483e:	88fb      	ldrh	r3, [r7, #6]
 8004840:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b01      	cmp	r3, #1
 800484c:	d002      	beq.n	8004854 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800484e:	2302      	movs	r3, #2
 8004850:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004852:	e10b      	b.n	8004a6c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <HAL_SPI_Transmit+0x52>
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d102      	bne.n	8004866 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004864:	e102      	b.n	8004a6c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2203      	movs	r2, #3
 800486a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	88fa      	ldrh	r2, [r7, #6]
 800487e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	88fa      	ldrh	r2, [r7, #6]
 8004884:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ac:	d10f      	bne.n	80048ce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d007      	beq.n	80048ec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f4:	d14b      	bne.n	800498e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_SPI_Transmit+0xf6>
 80048fe:	8afb      	ldrh	r3, [r7, #22]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d13e      	bne.n	8004982 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	881a      	ldrh	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	1c9a      	adds	r2, r3, #2
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004928:	e02b      	b.n	8004982 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b02      	cmp	r3, #2
 8004936:	d112      	bne.n	800495e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	881a      	ldrh	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004948:	1c9a      	adds	r2, r3, #2
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	86da      	strh	r2, [r3, #54]	; 0x36
 800495c:	e011      	b.n	8004982 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800495e:	f7fe fb87 	bl	8003070 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d803      	bhi.n	8004976 <HAL_SPI_Transmit+0x168>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d102      	bne.n	800497c <HAL_SPI_Transmit+0x16e>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004980:	e074      	b.n	8004a6c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1ce      	bne.n	800492a <HAL_SPI_Transmit+0x11c>
 800498c:	e04c      	b.n	8004a28 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HAL_SPI_Transmit+0x18e>
 8004996:	8afb      	ldrh	r3, [r7, #22]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d140      	bne.n	8004a1e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	330c      	adds	r3, #12
 80049a6:	7812      	ldrb	r2, [r2, #0]
 80049a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049c2:	e02c      	b.n	8004a1e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d113      	bne.n	80049fa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	330c      	adds	r3, #12
 80049dc:	7812      	ldrb	r2, [r2, #0]
 80049de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80049f8:	e011      	b.n	8004a1e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049fa:	f7fe fb39 	bl	8003070 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d803      	bhi.n	8004a12 <HAL_SPI_Transmit+0x204>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a10:	d102      	bne.n	8004a18 <HAL_SPI_Transmit+0x20a>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d102      	bne.n	8004a1e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a1c:	e026      	b.n	8004a6c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1cd      	bne.n	80049c4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	6839      	ldr	r1, [r7, #0]
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f8b3 	bl	8004b98 <SPI_EndRxTxTransaction>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10a      	bne.n	8004a5c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a46:	2300      	movs	r3, #0
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	613b      	str	r3, [r7, #16]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	77fb      	strb	r3, [r7, #31]
 8004a68:	e000      	b.n	8004a6c <HAL_SPI_Transmit+0x25e>
  }

error:
 8004a6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3720      	adds	r7, #32
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	4613      	mov	r3, r2
 8004a96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a98:	f7fe faea 	bl	8003070 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	1a9b      	subs	r3, r3, r2
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004aa8:	f7fe fae2 	bl	8003070 <HAL_GetTick>
 8004aac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004aae:	4b39      	ldr	r3, [pc, #228]	; (8004b94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	015b      	lsls	r3, r3, #5
 8004ab4:	0d1b      	lsrs	r3, r3, #20
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	fb02 f303 	mul.w	r3, r2, r3
 8004abc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004abe:	e054      	b.n	8004b6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac6:	d050      	beq.n	8004b6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ac8:	f7fe fad2 	bl	8003070 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	69fa      	ldr	r2, [r7, #28]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d902      	bls.n	8004ade <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d13d      	bne.n	8004b5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004aec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004af6:	d111      	bne.n	8004b1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b00:	d004      	beq.n	8004b0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b0a:	d107      	bne.n	8004b1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b24:	d10f      	bne.n	8004b46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e017      	b.n	8004b8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4013      	ands	r3, r2
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	bf0c      	ite	eq
 8004b7a:	2301      	moveq	r3, #1
 8004b7c:	2300      	movne	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d19b      	bne.n	8004ac0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3720      	adds	r7, #32
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000004 	.word	0x20000004

08004b98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b088      	sub	sp, #32
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ba4:	4b1b      	ldr	r3, [pc, #108]	; (8004c14 <SPI_EndRxTxTransaction+0x7c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a1b      	ldr	r2, [pc, #108]	; (8004c18 <SPI_EndRxTxTransaction+0x80>)
 8004baa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bae:	0d5b      	lsrs	r3, r3, #21
 8004bb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bb4:	fb02 f303 	mul.w	r3, r2, r3
 8004bb8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bc2:	d112      	bne.n	8004bea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	2180      	movs	r1, #128	; 0x80
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f7ff ff5a 	bl	8004a88 <SPI_WaitFlagStateUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d016      	beq.n	8004c08 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	f043 0220 	orr.w	r2, r3, #32
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e00f      	b.n	8004c0a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00a      	beq.n	8004c06 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c00:	2b80      	cmp	r3, #128	; 0x80
 8004c02:	d0f2      	beq.n	8004bea <SPI_EndRxTxTransaction+0x52>
 8004c04:	e000      	b.n	8004c08 <SPI_EndRxTxTransaction+0x70>
        break;
 8004c06:	bf00      	nop
  }

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000004 	.word	0x20000004
 8004c18:	165e9f81 	.word	0x165e9f81

08004c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e041      	b.n	8004cb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f839 	bl	8004cba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3304      	adds	r3, #4
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	f000 f9d8 	bl	8005010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
	...

08004cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d001      	beq.n	8004ce8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e04e      	b.n	8004d86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a23      	ldr	r2, [pc, #140]	; (8004d94 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d022      	beq.n	8004d50 <HAL_TIM_Base_Start_IT+0x80>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d12:	d01d      	beq.n	8004d50 <HAL_TIM_Base_Start_IT+0x80>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a1f      	ldr	r2, [pc, #124]	; (8004d98 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d018      	beq.n	8004d50 <HAL_TIM_Base_Start_IT+0x80>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a1e      	ldr	r2, [pc, #120]	; (8004d9c <HAL_TIM_Base_Start_IT+0xcc>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d013      	beq.n	8004d50 <HAL_TIM_Base_Start_IT+0x80>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a1c      	ldr	r2, [pc, #112]	; (8004da0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d00e      	beq.n	8004d50 <HAL_TIM_Base_Start_IT+0x80>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a1b      	ldr	r2, [pc, #108]	; (8004da4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d009      	beq.n	8004d50 <HAL_TIM_Base_Start_IT+0x80>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a19      	ldr	r2, [pc, #100]	; (8004da8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d004      	beq.n	8004d50 <HAL_TIM_Base_Start_IT+0x80>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a18      	ldr	r2, [pc, #96]	; (8004dac <HAL_TIM_Base_Start_IT+0xdc>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d111      	bne.n	8004d74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b06      	cmp	r3, #6
 8004d60:	d010      	beq.n	8004d84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0201 	orr.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d72:	e007      	b.n	8004d84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0201 	orr.w	r2, r2, #1
 8004d82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40010000 	.word	0x40010000
 8004d98:	40000400 	.word	0x40000400
 8004d9c:	40000800 	.word	0x40000800
 8004da0:	40000c00 	.word	0x40000c00
 8004da4:	40010400 	.word	0x40010400
 8004da8:	40014000 	.word	0x40014000
 8004dac:	40001800 	.word	0x40001800

08004db0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d122      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d11b      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0202 	mvn.w	r2, #2
 8004ddc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f8ee 	bl	8004fd4 <HAL_TIM_IC_CaptureCallback>
 8004df8:	e005      	b.n	8004e06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f8e0 	bl	8004fc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f8f1 	bl	8004fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d122      	bne.n	8004e60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d11b      	bne.n	8004e60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0204 	mvn.w	r2, #4
 8004e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2202      	movs	r2, #2
 8004e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f8c4 	bl	8004fd4 <HAL_TIM_IC_CaptureCallback>
 8004e4c:	e005      	b.n	8004e5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f8b6 	bl	8004fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f8c7 	bl	8004fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d122      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d11b      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0208 	mvn.w	r2, #8
 8004e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2204      	movs	r2, #4
 8004e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f89a 	bl	8004fd4 <HAL_TIM_IC_CaptureCallback>
 8004ea0:	e005      	b.n	8004eae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f88c 	bl	8004fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f89d 	bl	8004fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	2b10      	cmp	r3, #16
 8004ec0:	d122      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b10      	cmp	r3, #16
 8004ece:	d11b      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0210 	mvn.w	r2, #16
 8004ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2208      	movs	r2, #8
 8004ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f870 	bl	8004fd4 <HAL_TIM_IC_CaptureCallback>
 8004ef4:	e005      	b.n	8004f02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f862 	bl	8004fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f873 	bl	8004fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d10e      	bne.n	8004f34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d107      	bne.n	8004f34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f06f 0201 	mvn.w	r2, #1
 8004f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fd fda4 	bl	8002a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3e:	2b80      	cmp	r3, #128	; 0x80
 8004f40:	d10e      	bne.n	8004f60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f4c:	2b80      	cmp	r3, #128	; 0x80
 8004f4e:	d107      	bne.n	8004f60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f902 	bl	8005164 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6a:	2b40      	cmp	r3, #64	; 0x40
 8004f6c:	d10e      	bne.n	8004f8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b40      	cmp	r3, #64	; 0x40
 8004f7a:	d107      	bne.n	8004f8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f838 	bl	8004ffc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 0320 	and.w	r3, r3, #32
 8004f96:	2b20      	cmp	r3, #32
 8004f98:	d10e      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b20      	cmp	r3, #32
 8004fa6:	d107      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f06f 0220 	mvn.w	r2, #32
 8004fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f8cc 	bl	8005150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fb8:	bf00      	nop
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a40      	ldr	r2, [pc, #256]	; (8005124 <TIM_Base_SetConfig+0x114>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d013      	beq.n	8005050 <TIM_Base_SetConfig+0x40>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502e:	d00f      	beq.n	8005050 <TIM_Base_SetConfig+0x40>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a3d      	ldr	r2, [pc, #244]	; (8005128 <TIM_Base_SetConfig+0x118>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00b      	beq.n	8005050 <TIM_Base_SetConfig+0x40>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a3c      	ldr	r2, [pc, #240]	; (800512c <TIM_Base_SetConfig+0x11c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d007      	beq.n	8005050 <TIM_Base_SetConfig+0x40>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a3b      	ldr	r2, [pc, #236]	; (8005130 <TIM_Base_SetConfig+0x120>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d003      	beq.n	8005050 <TIM_Base_SetConfig+0x40>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a3a      	ldr	r2, [pc, #232]	; (8005134 <TIM_Base_SetConfig+0x124>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d108      	bne.n	8005062 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a2f      	ldr	r2, [pc, #188]	; (8005124 <TIM_Base_SetConfig+0x114>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d02b      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005070:	d027      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a2c      	ldr	r2, [pc, #176]	; (8005128 <TIM_Base_SetConfig+0x118>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d023      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a2b      	ldr	r2, [pc, #172]	; (800512c <TIM_Base_SetConfig+0x11c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d01f      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a2a      	ldr	r2, [pc, #168]	; (8005130 <TIM_Base_SetConfig+0x120>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d01b      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a29      	ldr	r2, [pc, #164]	; (8005134 <TIM_Base_SetConfig+0x124>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d017      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a28      	ldr	r2, [pc, #160]	; (8005138 <TIM_Base_SetConfig+0x128>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d013      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a27      	ldr	r2, [pc, #156]	; (800513c <TIM_Base_SetConfig+0x12c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00f      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a26      	ldr	r2, [pc, #152]	; (8005140 <TIM_Base_SetConfig+0x130>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00b      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a25      	ldr	r2, [pc, #148]	; (8005144 <TIM_Base_SetConfig+0x134>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d007      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a24      	ldr	r2, [pc, #144]	; (8005148 <TIM_Base_SetConfig+0x138>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d003      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a23      	ldr	r2, [pc, #140]	; (800514c <TIM_Base_SetConfig+0x13c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d108      	bne.n	80050d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a0a      	ldr	r2, [pc, #40]	; (8005124 <TIM_Base_SetConfig+0x114>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d003      	beq.n	8005108 <TIM_Base_SetConfig+0xf8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a0c      	ldr	r2, [pc, #48]	; (8005134 <TIM_Base_SetConfig+0x124>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d103      	bne.n	8005110 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	615a      	str	r2, [r3, #20]
}
 8005116:	bf00      	nop
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40010000 	.word	0x40010000
 8005128:	40000400 	.word	0x40000400
 800512c:	40000800 	.word	0x40000800
 8005130:	40000c00 	.word	0x40000c00
 8005134:	40010400 	.word	0x40010400
 8005138:	40014000 	.word	0x40014000
 800513c:	40014400 	.word	0x40014400
 8005140:	40014800 	.word	0x40014800
 8005144:	40001800 	.word	0x40001800
 8005148:	40001c00 	.word	0x40001c00
 800514c:	40002000 	.word	0x40002000

08005150 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e03f      	b.n	800520a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7fd fe8c 	bl	8002ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2224      	movs	r2, #36	; 0x24
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f829 	bl	8005214 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695a      	ldr	r2, [r3, #20]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005218:	b09f      	sub	sp, #124	; 0x7c
 800521a:	af00      	add	r7, sp, #0
 800521c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800521e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522a:	68d9      	ldr	r1, [r3, #12]
 800522c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	ea40 0301 	orr.w	r3, r0, r1
 8005234:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	431a      	orrs	r2, r3
 8005240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	431a      	orrs	r2, r3
 8005246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	4313      	orrs	r3, r2
 800524c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800524e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005258:	f021 010c 	bic.w	r1, r1, #12
 800525c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005262:	430b      	orrs	r3, r1
 8005264:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005272:	6999      	ldr	r1, [r3, #24]
 8005274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	ea40 0301 	orr.w	r3, r0, r1
 800527c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800527e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4bc5      	ldr	r3, [pc, #788]	; (8005598 <UART_SetConfig+0x384>)
 8005284:	429a      	cmp	r2, r3
 8005286:	d004      	beq.n	8005292 <UART_SetConfig+0x7e>
 8005288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4bc3      	ldr	r3, [pc, #780]	; (800559c <UART_SetConfig+0x388>)
 800528e:	429a      	cmp	r2, r3
 8005290:	d103      	bne.n	800529a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005292:	f7fe fd9d 	bl	8003dd0 <HAL_RCC_GetPCLK2Freq>
 8005296:	6778      	str	r0, [r7, #116]	; 0x74
 8005298:	e002      	b.n	80052a0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800529a:	f7fe fd85 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 800529e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a8:	f040 80b6 	bne.w	8005418 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052ae:	461c      	mov	r4, r3
 80052b0:	f04f 0500 	mov.w	r5, #0
 80052b4:	4622      	mov	r2, r4
 80052b6:	462b      	mov	r3, r5
 80052b8:	1891      	adds	r1, r2, r2
 80052ba:	6439      	str	r1, [r7, #64]	; 0x40
 80052bc:	415b      	adcs	r3, r3
 80052be:	647b      	str	r3, [r7, #68]	; 0x44
 80052c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052c4:	1912      	adds	r2, r2, r4
 80052c6:	eb45 0303 	adc.w	r3, r5, r3
 80052ca:	f04f 0000 	mov.w	r0, #0
 80052ce:	f04f 0100 	mov.w	r1, #0
 80052d2:	00d9      	lsls	r1, r3, #3
 80052d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052d8:	00d0      	lsls	r0, r2, #3
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	1911      	adds	r1, r2, r4
 80052e0:	6639      	str	r1, [r7, #96]	; 0x60
 80052e2:	416b      	adcs	r3, r5
 80052e4:	667b      	str	r3, [r7, #100]	; 0x64
 80052e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	1891      	adds	r1, r2, r2
 80052f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80052f4:	415b      	adcs	r3, r3
 80052f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005300:	f7fa ffe6 	bl	80002d0 <__aeabi_uldivmod>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4ba5      	ldr	r3, [pc, #660]	; (80055a0 <UART_SetConfig+0x38c>)
 800530a:	fba3 2302 	umull	r2, r3, r3, r2
 800530e:	095b      	lsrs	r3, r3, #5
 8005310:	011e      	lsls	r6, r3, #4
 8005312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005314:	461c      	mov	r4, r3
 8005316:	f04f 0500 	mov.w	r5, #0
 800531a:	4622      	mov	r2, r4
 800531c:	462b      	mov	r3, r5
 800531e:	1891      	adds	r1, r2, r2
 8005320:	6339      	str	r1, [r7, #48]	; 0x30
 8005322:	415b      	adcs	r3, r3
 8005324:	637b      	str	r3, [r7, #52]	; 0x34
 8005326:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800532a:	1912      	adds	r2, r2, r4
 800532c:	eb45 0303 	adc.w	r3, r5, r3
 8005330:	f04f 0000 	mov.w	r0, #0
 8005334:	f04f 0100 	mov.w	r1, #0
 8005338:	00d9      	lsls	r1, r3, #3
 800533a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800533e:	00d0      	lsls	r0, r2, #3
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	1911      	adds	r1, r2, r4
 8005346:	65b9      	str	r1, [r7, #88]	; 0x58
 8005348:	416b      	adcs	r3, r5
 800534a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800534c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	461a      	mov	r2, r3
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	1891      	adds	r1, r2, r2
 8005358:	62b9      	str	r1, [r7, #40]	; 0x28
 800535a:	415b      	adcs	r3, r3
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800535e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005362:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005366:	f7fa ffb3 	bl	80002d0 <__aeabi_uldivmod>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4b8c      	ldr	r3, [pc, #560]	; (80055a0 <UART_SetConfig+0x38c>)
 8005370:	fba3 1302 	umull	r1, r3, r3, r2
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	2164      	movs	r1, #100	; 0x64
 8005378:	fb01 f303 	mul.w	r3, r1, r3
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	3332      	adds	r3, #50	; 0x32
 8005382:	4a87      	ldr	r2, [pc, #540]	; (80055a0 <UART_SetConfig+0x38c>)
 8005384:	fba2 2303 	umull	r2, r3, r2, r3
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005390:	441e      	add	r6, r3
 8005392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005394:	4618      	mov	r0, r3
 8005396:	f04f 0100 	mov.w	r1, #0
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	1894      	adds	r4, r2, r2
 80053a0:	623c      	str	r4, [r7, #32]
 80053a2:	415b      	adcs	r3, r3
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
 80053a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053aa:	1812      	adds	r2, r2, r0
 80053ac:	eb41 0303 	adc.w	r3, r1, r3
 80053b0:	f04f 0400 	mov.w	r4, #0
 80053b4:	f04f 0500 	mov.w	r5, #0
 80053b8:	00dd      	lsls	r5, r3, #3
 80053ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053be:	00d4      	lsls	r4, r2, #3
 80053c0:	4622      	mov	r2, r4
 80053c2:	462b      	mov	r3, r5
 80053c4:	1814      	adds	r4, r2, r0
 80053c6:	653c      	str	r4, [r7, #80]	; 0x50
 80053c8:	414b      	adcs	r3, r1
 80053ca:	657b      	str	r3, [r7, #84]	; 0x54
 80053cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	461a      	mov	r2, r3
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	1891      	adds	r1, r2, r2
 80053d8:	61b9      	str	r1, [r7, #24]
 80053da:	415b      	adcs	r3, r3
 80053dc:	61fb      	str	r3, [r7, #28]
 80053de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80053e6:	f7fa ff73 	bl	80002d0 <__aeabi_uldivmod>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4b6c      	ldr	r3, [pc, #432]	; (80055a0 <UART_SetConfig+0x38c>)
 80053f0:	fba3 1302 	umull	r1, r3, r3, r2
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	2164      	movs	r1, #100	; 0x64
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	3332      	adds	r3, #50	; 0x32
 8005402:	4a67      	ldr	r2, [pc, #412]	; (80055a0 <UART_SetConfig+0x38c>)
 8005404:	fba2 2303 	umull	r2, r3, r2, r3
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	f003 0207 	and.w	r2, r3, #7
 800540e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4432      	add	r2, r6
 8005414:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005416:	e0b9      	b.n	800558c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800541a:	461c      	mov	r4, r3
 800541c:	f04f 0500 	mov.w	r5, #0
 8005420:	4622      	mov	r2, r4
 8005422:	462b      	mov	r3, r5
 8005424:	1891      	adds	r1, r2, r2
 8005426:	6139      	str	r1, [r7, #16]
 8005428:	415b      	adcs	r3, r3
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005430:	1912      	adds	r2, r2, r4
 8005432:	eb45 0303 	adc.w	r3, r5, r3
 8005436:	f04f 0000 	mov.w	r0, #0
 800543a:	f04f 0100 	mov.w	r1, #0
 800543e:	00d9      	lsls	r1, r3, #3
 8005440:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005444:	00d0      	lsls	r0, r2, #3
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	eb12 0804 	adds.w	r8, r2, r4
 800544e:	eb43 0905 	adc.w	r9, r3, r5
 8005452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	4618      	mov	r0, r3
 8005458:	f04f 0100 	mov.w	r1, #0
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	008b      	lsls	r3, r1, #2
 8005466:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800546a:	0082      	lsls	r2, r0, #2
 800546c:	4640      	mov	r0, r8
 800546e:	4649      	mov	r1, r9
 8005470:	f7fa ff2e 	bl	80002d0 <__aeabi_uldivmod>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4b49      	ldr	r3, [pc, #292]	; (80055a0 <UART_SetConfig+0x38c>)
 800547a:	fba3 2302 	umull	r2, r3, r3, r2
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	011e      	lsls	r6, r3, #4
 8005482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005484:	4618      	mov	r0, r3
 8005486:	f04f 0100 	mov.w	r1, #0
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	1894      	adds	r4, r2, r2
 8005490:	60bc      	str	r4, [r7, #8]
 8005492:	415b      	adcs	r3, r3
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800549a:	1812      	adds	r2, r2, r0
 800549c:	eb41 0303 	adc.w	r3, r1, r3
 80054a0:	f04f 0400 	mov.w	r4, #0
 80054a4:	f04f 0500 	mov.w	r5, #0
 80054a8:	00dd      	lsls	r5, r3, #3
 80054aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054ae:	00d4      	lsls	r4, r2, #3
 80054b0:	4622      	mov	r2, r4
 80054b2:	462b      	mov	r3, r5
 80054b4:	1814      	adds	r4, r2, r0
 80054b6:	64bc      	str	r4, [r7, #72]	; 0x48
 80054b8:	414b      	adcs	r3, r1
 80054ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f04f 0100 	mov.w	r1, #0
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	f04f 0300 	mov.w	r3, #0
 80054ce:	008b      	lsls	r3, r1, #2
 80054d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054d4:	0082      	lsls	r2, r0, #2
 80054d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80054da:	f7fa fef9 	bl	80002d0 <__aeabi_uldivmod>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4b2f      	ldr	r3, [pc, #188]	; (80055a0 <UART_SetConfig+0x38c>)
 80054e4:	fba3 1302 	umull	r1, r3, r3, r2
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	2164      	movs	r1, #100	; 0x64
 80054ec:	fb01 f303 	mul.w	r3, r1, r3
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	3332      	adds	r3, #50	; 0x32
 80054f6:	4a2a      	ldr	r2, [pc, #168]	; (80055a0 <UART_SetConfig+0x38c>)
 80054f8:	fba2 2303 	umull	r2, r3, r2, r3
 80054fc:	095b      	lsrs	r3, r3, #5
 80054fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005502:	441e      	add	r6, r3
 8005504:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005506:	4618      	mov	r0, r3
 8005508:	f04f 0100 	mov.w	r1, #0
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	1894      	adds	r4, r2, r2
 8005512:	603c      	str	r4, [r7, #0]
 8005514:	415b      	adcs	r3, r3
 8005516:	607b      	str	r3, [r7, #4]
 8005518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800551c:	1812      	adds	r2, r2, r0
 800551e:	eb41 0303 	adc.w	r3, r1, r3
 8005522:	f04f 0400 	mov.w	r4, #0
 8005526:	f04f 0500 	mov.w	r5, #0
 800552a:	00dd      	lsls	r5, r3, #3
 800552c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005530:	00d4      	lsls	r4, r2, #3
 8005532:	4622      	mov	r2, r4
 8005534:	462b      	mov	r3, r5
 8005536:	eb12 0a00 	adds.w	sl, r2, r0
 800553a:	eb43 0b01 	adc.w	fp, r3, r1
 800553e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	4618      	mov	r0, r3
 8005544:	f04f 0100 	mov.w	r1, #0
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	f04f 0300 	mov.w	r3, #0
 8005550:	008b      	lsls	r3, r1, #2
 8005552:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005556:	0082      	lsls	r2, r0, #2
 8005558:	4650      	mov	r0, sl
 800555a:	4659      	mov	r1, fp
 800555c:	f7fa feb8 	bl	80002d0 <__aeabi_uldivmod>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4b0e      	ldr	r3, [pc, #56]	; (80055a0 <UART_SetConfig+0x38c>)
 8005566:	fba3 1302 	umull	r1, r3, r3, r2
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	2164      	movs	r1, #100	; 0x64
 800556e:	fb01 f303 	mul.w	r3, r1, r3
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	3332      	adds	r3, #50	; 0x32
 8005578:	4a09      	ldr	r2, [pc, #36]	; (80055a0 <UART_SetConfig+0x38c>)
 800557a:	fba2 2303 	umull	r2, r3, r2, r3
 800557e:	095b      	lsrs	r3, r3, #5
 8005580:	f003 020f 	and.w	r2, r3, #15
 8005584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4432      	add	r2, r6
 800558a:	609a      	str	r2, [r3, #8]
}
 800558c:	bf00      	nop
 800558e:	377c      	adds	r7, #124	; 0x7c
 8005590:	46bd      	mov	sp, r7
 8005592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005596:	bf00      	nop
 8005598:	40011000 	.word	0x40011000
 800559c:	40011400 	.word	0x40011400
 80055a0:	51eb851f 	.word	0x51eb851f

080055a4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f103 0208 	add.w	r2, r3, #8
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f04f 32ff 	mov.w	r2, #4294967295
 80055bc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f103 0208 	add.w	r2, r3, #8
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f103 0208 	add.w	r2, r3, #8
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055f2:	bf00      	nop
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80055fe:	b480      	push	{r7}
 8005600:	b085      	sub	sp, #20
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	601a      	str	r2, [r3, #0]
}
 800563a:	bf00      	nop
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005646:	b480      	push	{r7}
 8005648:	b085      	sub	sp, #20
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565c:	d103      	bne.n	8005666 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	e00c      	b.n	8005680 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	3308      	adds	r3, #8
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	e002      	b.n	8005674 <vListInsert+0x2e>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	429a      	cmp	r2, r3
 800567e:	d2f6      	bcs.n	800566e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	601a      	str	r2, [r3, #0]
}
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6892      	ldr	r2, [r2, #8]
 80056ce:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6852      	ldr	r2, [r2, #4]
 80056d8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d103      	bne.n	80056ec <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	1e5a      	subs	r2, r3, #1
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10a      	bne.n	8005736 <xQueueGenericReset+0x2a>
        __asm volatile
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	60bb      	str	r3, [r7, #8]
    }
 8005732:	bf00      	nop
 8005734:	e7fe      	b.n	8005734 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8005736:	f002 f80f 	bl	8007758 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005742:	68f9      	ldr	r1, [r7, #12]
 8005744:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005746:	fb01 f303 	mul.w	r3, r1, r3
 800574a:	441a      	add	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005766:	3b01      	subs	r3, #1
 8005768:	68f9      	ldr	r1, [r7, #12]
 800576a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	441a      	add	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	22ff      	movs	r2, #255	; 0xff
 800577a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	22ff      	movs	r2, #255	; 0xff
 8005782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d114      	bne.n	80057b6 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01a      	beq.n	80057ca <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	3310      	adds	r3, #16
 8005798:	4618      	mov	r0, r3
 800579a:	f001 f8ff 	bl	800699c <xTaskRemoveFromEventList>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d012      	beq.n	80057ca <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80057a4:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <xQueueGenericReset+0xcc>)
 80057a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	e009      	b.n	80057ca <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3310      	adds	r3, #16
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff fef2 	bl	80055a4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3324      	adds	r3, #36	; 0x24
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7ff feed 	bl	80055a4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80057ca:	f001 fff5 	bl	80077b8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80057ce:	2301      	movs	r3, #1
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	e000ed04 	.word	0xe000ed04

080057dc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08c      	sub	sp, #48	; 0x30
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	4613      	mov	r3, r2
 80057e8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <xQueueGenericCreate+0x2a>
        __asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	61bb      	str	r3, [r7, #24]
    }
 8005802:	bf00      	nop
 8005804:	e7fe      	b.n	8005804 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	fb02 f303 	mul.w	r3, r2, r3
 800580e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d006      	beq.n	8005824 <xQueueGenericCreate+0x48>
 8005816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	fbb2 f3f3 	udiv	r3, r2, r3
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	429a      	cmp	r2, r3
 8005822:	d101      	bne.n	8005828 <xQueueGenericCreate+0x4c>
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <xQueueGenericCreate+0x4e>
 8005828:	2300      	movs	r3, #0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10a      	bne.n	8005844 <xQueueGenericCreate+0x68>
        __asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	617b      	str	r3, [r7, #20]
    }
 8005840:	bf00      	nop
 8005842:	e7fe      	b.n	8005842 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800584a:	d90a      	bls.n	8005862 <xQueueGenericCreate+0x86>
        __asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	613b      	str	r3, [r7, #16]
    }
 800585e:	bf00      	nop
 8005860:	e7fe      	b.n	8005860 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	3350      	adds	r3, #80	; 0x50
 8005866:	4618      	mov	r0, r3
 8005868:	f002 f8de 	bl	8007a28 <pvPortMalloc>
 800586c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00d      	beq.n	8005890 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	3350      	adds	r3, #80	; 0x50
 800587c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800587e:	79fa      	ldrb	r2, [r7, #7]
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	4613      	mov	r3, r2
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	68b9      	ldr	r1, [r7, #8]
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 f805 	bl	800589a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005890:	6a3b      	ldr	r3, [r7, #32]
    }
 8005892:	4618      	mov	r0, r3
 8005894:	3728      	adds	r7, #40	; 0x28
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	607a      	str	r2, [r7, #4]
 80058a6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d103      	bne.n	80058b6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	e002      	b.n	80058bc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058c8:	2101      	movs	r1, #1
 80058ca:	69b8      	ldr	r0, [r7, #24]
 80058cc:	f7ff ff1e 	bl	800570c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	78fa      	ldrb	r2, [r7, #3]
 80058d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80058d8:	bf00      	nop
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08e      	sub	sp, #56	; 0x38
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058ee:	2300      	movs	r3, #0
 80058f0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10a      	bne.n	8005912 <xQueueGenericSend+0x32>
        __asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d103      	bne.n	8005920 <xQueueGenericSend+0x40>
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <xQueueGenericSend+0x44>
 8005920:	2301      	movs	r3, #1
 8005922:	e000      	b.n	8005926 <xQueueGenericSend+0x46>
 8005924:	2300      	movs	r3, #0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10a      	bne.n	8005940 <xQueueGenericSend+0x60>
        __asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800593c:	bf00      	nop
 800593e:	e7fe      	b.n	800593e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b02      	cmp	r3, #2
 8005944:	d103      	bne.n	800594e <xQueueGenericSend+0x6e>
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594a:	2b01      	cmp	r3, #1
 800594c:	d101      	bne.n	8005952 <xQueueGenericSend+0x72>
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <xQueueGenericSend+0x74>
 8005952:	2300      	movs	r3, #0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10a      	bne.n	800596e <xQueueGenericSend+0x8e>
        __asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	623b      	str	r3, [r7, #32]
    }
 800596a:	bf00      	nop
 800596c:	e7fe      	b.n	800596c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800596e:	f001 f9b1 	bl	8006cd4 <xTaskGetSchedulerState>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d102      	bne.n	800597e <xQueueGenericSend+0x9e>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <xQueueGenericSend+0xa2>
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <xQueueGenericSend+0xa4>
 8005982:	2300      	movs	r3, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <xQueueGenericSend+0xbe>
        __asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	61fb      	str	r3, [r7, #28]
    }
 800599a:	bf00      	nop
 800599c:	e7fe      	b.n	800599c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800599e:	f001 fedb 	bl	8007758 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d302      	bcc.n	80059b4 <xQueueGenericSend+0xd4>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d129      	bne.n	8005a08 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	68b9      	ldr	r1, [r7, #8]
 80059b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059ba:	f000 fa19 	bl	8005df0 <prvCopyDataToQueue>
 80059be:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d010      	beq.n	80059ea <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	3324      	adds	r3, #36	; 0x24
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 ffe5 	bl	800699c <xTaskRemoveFromEventList>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d013      	beq.n	8005a00 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80059d8:	4b3f      	ldr	r3, [pc, #252]	; (8005ad8 <xQueueGenericSend+0x1f8>)
 80059da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	e00a      	b.n	8005a00 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80059ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80059f0:	4b39      	ldr	r3, [pc, #228]	; (8005ad8 <xQueueGenericSend+0x1f8>)
 80059f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005a00:	f001 feda 	bl	80077b8 <vPortExitCritical>
                return pdPASS;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e063      	b.n	8005ad0 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d103      	bne.n	8005a16 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005a0e:	f001 fed3 	bl	80077b8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	e05c      	b.n	8005ad0 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d106      	bne.n	8005a2a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005a1c:	f107 0314 	add.w	r3, r7, #20
 8005a20:	4618      	mov	r0, r3
 8005a22:	f001 f81d 	bl	8006a60 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005a26:	2301      	movs	r3, #1
 8005a28:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005a2a:	f001 fec5 	bl	80077b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005a2e:	f000 fd97 	bl	8006560 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005a32:	f001 fe91 	bl	8007758 <vPortEnterCritical>
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a3c:	b25b      	sxtb	r3, r3
 8005a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a42:	d103      	bne.n	8005a4c <xQueueGenericSend+0x16c>
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a52:	b25b      	sxtb	r3, r3
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a58:	d103      	bne.n	8005a62 <xQueueGenericSend+0x182>
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a62:	f001 fea9 	bl	80077b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a66:	1d3a      	adds	r2, r7, #4
 8005a68:	f107 0314 	add.w	r3, r7, #20
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f001 f80c 	bl	8006a8c <xTaskCheckForTimeOut>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d124      	bne.n	8005ac4 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a7c:	f000 fab0 	bl	8005fe0 <prvIsQueueFull>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d018      	beq.n	8005ab8 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	3310      	adds	r3, #16
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 ff34 	bl	80068fc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a96:	f000 fa3b 	bl	8005f10 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005a9a:	f000 fd6f 	bl	800657c <xTaskResumeAll>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f47f af7c 	bne.w	800599e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8005aa6:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <xQueueGenericSend+0x1f8>)
 8005aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	e772      	b.n	800599e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aba:	f000 fa29 	bl	8005f10 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005abe:	f000 fd5d 	bl	800657c <xTaskResumeAll>
 8005ac2:	e76c      	b.n	800599e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ac6:	f000 fa23 	bl	8005f10 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005aca:	f000 fd57 	bl	800657c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8005ace:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3738      	adds	r7, #56	; 0x38
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	e000ed04 	.word	0xe000ed04

08005adc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b090      	sub	sp, #64	; 0x40
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10a      	bne.n	8005b0a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005b06:	bf00      	nop
 8005b08:	e7fe      	b.n	8005b08 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d103      	bne.n	8005b18 <xQueueGenericSendFromISR+0x3c>
 8005b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <xQueueGenericSendFromISR+0x40>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e000      	b.n	8005b1e <xQueueGenericSendFromISR+0x42>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10a      	bne.n	8005b38 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8005b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005b34:	bf00      	nop
 8005b36:	e7fe      	b.n	8005b36 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d103      	bne.n	8005b46 <xQueueGenericSendFromISR+0x6a>
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <xQueueGenericSendFromISR+0x6e>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <xQueueGenericSendFromISR+0x70>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	623b      	str	r3, [r7, #32]
    }
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b66:	f001 fed9 	bl	800791c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005b6a:	f3ef 8211 	mrs	r2, BASEPRI
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	61fa      	str	r2, [r7, #28]
 8005b80:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005b82:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b84:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d302      	bcc.n	8005b98 <xQueueGenericSendFromISR+0xbc>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d13e      	bne.n	8005c16 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	68b9      	ldr	r1, [r7, #8]
 8005bac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005bae:	f000 f91f 	bl	8005df0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005bb2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bba:	d112      	bne.n	8005be2 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d025      	beq.n	8005c10 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc6:	3324      	adds	r3, #36	; 0x24
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 fee7 	bl	800699c <xTaskRemoveFromEventList>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d01d      	beq.n	8005c10 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d01a      	beq.n	8005c10 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	e016      	b.n	8005c10 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005be2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005be6:	2b7f      	cmp	r3, #127	; 0x7f
 8005be8:	d10a      	bne.n	8005c00 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	617b      	str	r3, [r7, #20]
    }
 8005bfc:	bf00      	nop
 8005bfe:	e7fe      	b.n	8005bfe <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c04:	3301      	adds	r3, #1
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	b25a      	sxtb	r2, r3
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005c10:	2301      	movs	r3, #1
 8005c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8005c14:	e001      	b.n	8005c1a <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005c24:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3740      	adds	r7, #64	; 0x40
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08c      	sub	sp, #48	; 0x30
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10a      	bne.n	8005c60 <xQueueReceive+0x30>
        __asm volatile
 8005c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4e:	f383 8811 	msr	BASEPRI, r3
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	623b      	str	r3, [r7, #32]
    }
 8005c5c:	bf00      	nop
 8005c5e:	e7fe      	b.n	8005c5e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d103      	bne.n	8005c6e <xQueueReceive+0x3e>
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <xQueueReceive+0x42>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e000      	b.n	8005c74 <xQueueReceive+0x44>
 8005c72:	2300      	movs	r3, #0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10a      	bne.n	8005c8e <xQueueReceive+0x5e>
        __asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	61fb      	str	r3, [r7, #28]
    }
 8005c8a:	bf00      	nop
 8005c8c:	e7fe      	b.n	8005c8c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c8e:	f001 f821 	bl	8006cd4 <xTaskGetSchedulerState>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d102      	bne.n	8005c9e <xQueueReceive+0x6e>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <xQueueReceive+0x72>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <xQueueReceive+0x74>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <xQueueReceive+0x8e>
        __asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	61bb      	str	r3, [r7, #24]
    }
 8005cba:	bf00      	nop
 8005cbc:	e7fe      	b.n	8005cbc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005cbe:	f001 fd4b 	bl	8007758 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d01f      	beq.n	8005d0e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cd2:	f000 f8f7 	bl	8005ec4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	1e5a      	subs	r2, r3, #1
 8005cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cdc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00f      	beq.n	8005d06 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	3310      	adds	r3, #16
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fe56 	bl	800699c <xTaskRemoveFromEventList>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d007      	beq.n	8005d06 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005cf6:	4b3d      	ldr	r3, [pc, #244]	; (8005dec <xQueueReceive+0x1bc>)
 8005cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005d06:	f001 fd57 	bl	80077b8 <vPortExitCritical>
                return pdPASS;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e069      	b.n	8005de2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d103      	bne.n	8005d1c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005d14:	f001 fd50 	bl	80077b8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	e062      	b.n	8005de2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005d22:	f107 0310 	add.w	r3, r7, #16
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fe9a 	bl	8006a60 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005d30:	f001 fd42 	bl	80077b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005d34:	f000 fc14 	bl	8006560 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005d38:	f001 fd0e 	bl	8007758 <vPortEnterCritical>
 8005d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d42:	b25b      	sxtb	r3, r3
 8005d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d48:	d103      	bne.n	8005d52 <xQueueReceive+0x122>
 8005d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d58:	b25b      	sxtb	r3, r3
 8005d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5e:	d103      	bne.n	8005d68 <xQueueReceive+0x138>
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d68:	f001 fd26 	bl	80077b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d6c:	1d3a      	adds	r2, r7, #4
 8005d6e:	f107 0310 	add.w	r3, r7, #16
 8005d72:	4611      	mov	r1, r2
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 fe89 	bl	8006a8c <xTaskCheckForTimeOut>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d123      	bne.n	8005dc8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d82:	f000 f917 	bl	8005fb4 <prvIsQueueEmpty>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d017      	beq.n	8005dbc <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	3324      	adds	r3, #36	; 0x24
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	4611      	mov	r1, r2
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 fdb1 	bl	80068fc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d9c:	f000 f8b8 	bl	8005f10 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005da0:	f000 fbec 	bl	800657c <xTaskResumeAll>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d189      	bne.n	8005cbe <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005daa:	4b10      	ldr	r3, [pc, #64]	; (8005dec <xQueueReceive+0x1bc>)
 8005dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	e780      	b.n	8005cbe <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dbe:	f000 f8a7 	bl	8005f10 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005dc2:	f000 fbdb 	bl	800657c <xTaskResumeAll>
 8005dc6:	e77a      	b.n	8005cbe <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dca:	f000 f8a1 	bl	8005f10 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005dce:	f000 fbd5 	bl	800657c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dd4:	f000 f8ee 	bl	8005fb4 <prvIsQueueEmpty>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f43f af6f 	beq.w	8005cbe <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005de0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3730      	adds	r7, #48	; 0x30
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	e000ed04 	.word	0xe000ed04

08005df0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e04:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10d      	bne.n	8005e2a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d14d      	bne.n	8005eb2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 ff78 	bl	8006d10 <xTaskPriorityDisinherit>
 8005e20:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	609a      	str	r2, [r3, #8]
 8005e28:	e043      	b.n	8005eb2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d119      	bne.n	8005e64 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6858      	ldr	r0, [r3, #4]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	461a      	mov	r2, r3
 8005e3a:	68b9      	ldr	r1, [r7, #8]
 8005e3c:	f002 f81c 	bl	8007e78 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	441a      	add	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d32b      	bcc.n	8005eb2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	605a      	str	r2, [r3, #4]
 8005e62:	e026      	b.n	8005eb2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	68d8      	ldr	r0, [r3, #12]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	f002 f802 	bl	8007e78 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	425b      	negs	r3, r3
 8005e7e:	441a      	add	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d207      	bcs.n	8005ea0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	425b      	negs	r3, r3
 8005e9a:	441a      	add	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d105      	bne.n	8005eb2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005eba:	697b      	ldr	r3, [r7, #20]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d018      	beq.n	8005f08 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	441a      	add	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d303      	bcc.n	8005ef8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68d9      	ldr	r1, [r3, #12]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	461a      	mov	r2, r3
 8005f02:	6838      	ldr	r0, [r7, #0]
 8005f04:	f001 ffb8 	bl	8007e78 <memcpy>
    }
}
 8005f08:	bf00      	nop
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005f18:	f001 fc1e 	bl	8007758 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f22:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f24:	e011      	b.n	8005f4a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d012      	beq.n	8005f54 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	3324      	adds	r3, #36	; 0x24
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fd32 	bl	800699c <xTaskRemoveFromEventList>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005f3e:	f000 fe0b 	bl	8006b58 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	dce9      	bgt.n	8005f26 <prvUnlockQueue+0x16>
 8005f52:	e000      	b.n	8005f56 <prvUnlockQueue+0x46>
                        break;
 8005f54:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	22ff      	movs	r2, #255	; 0xff
 8005f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005f5e:	f001 fc2b 	bl	80077b8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005f62:	f001 fbf9 	bl	8007758 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f6c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f6e:	e011      	b.n	8005f94 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d012      	beq.n	8005f9e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3310      	adds	r3, #16
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 fd0d 	bl	800699c <xTaskRemoveFromEventList>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005f88:	f000 fde6 	bl	8006b58 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005f8c:	7bbb      	ldrb	r3, [r7, #14]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	dce9      	bgt.n	8005f70 <prvUnlockQueue+0x60>
 8005f9c:	e000      	b.n	8005fa0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005f9e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	22ff      	movs	r2, #255	; 0xff
 8005fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005fa8:	f001 fc06 	bl	80077b8 <vPortExitCritical>
}
 8005fac:	bf00      	nop
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005fbc:	f001 fbcc 	bl	8007758 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d102      	bne.n	8005fce <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	e001      	b.n	8005fd2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005fd2:	f001 fbf1 	bl	80077b8 <vPortExitCritical>

    return xReturn;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005fe8:	f001 fbb6 	bl	8007758 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d102      	bne.n	8005ffe <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	e001      	b.n	8006002 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005ffe:	2300      	movs	r3, #0
 8006000:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006002:	f001 fbd9 	bl	80077b8 <vPortExitCritical>

    return xReturn;
 8006006:	68fb      	ldr	r3, [r7, #12]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800601a:	2300      	movs	r3, #0
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	e014      	b.n	800604a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006020:	4a0f      	ldr	r2, [pc, #60]	; (8006060 <vQueueAddToRegistry+0x50>)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10b      	bne.n	8006044 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800602c:	490c      	ldr	r1, [pc, #48]	; (8006060 <vQueueAddToRegistry+0x50>)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8006036:	4a0a      	ldr	r2, [pc, #40]	; (8006060 <vQueueAddToRegistry+0x50>)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	4413      	add	r3, r2
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8006042:	e006      	b.n	8006052 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3301      	adds	r3, #1
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2b07      	cmp	r3, #7
 800604e:	d9e7      	bls.n	8006020 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8006050:	bf00      	nop
 8006052:	bf00      	nop
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	200040e8 	.word	0x200040e8

08006064 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006074:	f001 fb70 	bl	8007758 <vPortEnterCritical>
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800607e:	b25b      	sxtb	r3, r3
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006084:	d103      	bne.n	800608e <vQueueWaitForMessageRestricted+0x2a>
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006094:	b25b      	sxtb	r3, r3
 8006096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609a:	d103      	bne.n	80060a4 <vQueueWaitForMessageRestricted+0x40>
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060a4:	f001 fb88 	bl	80077b8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d106      	bne.n	80060be <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	3324      	adds	r3, #36	; 0x24
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	68b9      	ldr	r1, [r7, #8]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fc43 	bl	8006944 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80060be:	6978      	ldr	r0, [r7, #20]
 80060c0:	f7ff ff26 	bl	8005f10 <prvUnlockQueue>
    }
 80060c4:	bf00      	nop
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08c      	sub	sp, #48	; 0x30
 80060d0:	af04      	add	r7, sp, #16
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	603b      	str	r3, [r7, #0]
 80060d8:	4613      	mov	r3, r2
 80060da:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80060dc:	88fb      	ldrh	r3, [r7, #6]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4618      	mov	r0, r3
 80060e2:	f001 fca1 	bl	8007a28 <pvPortMalloc>
 80060e6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00e      	beq.n	800610c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060ee:	206c      	movs	r0, #108	; 0x6c
 80060f0:	f001 fc9a 	bl	8007a28 <pvPortMalloc>
 80060f4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	631a      	str	r2, [r3, #48]	; 0x30
 8006102:	e005      	b.n	8006110 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8006104:	6978      	ldr	r0, [r7, #20]
 8006106:	f001 fd6f 	bl	8007be8 <vPortFree>
 800610a:	e001      	b.n	8006110 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800610c:	2300      	movs	r3, #0
 800610e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d013      	beq.n	800613e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006116:	88fa      	ldrh	r2, [r7, #6]
 8006118:	2300      	movs	r3, #0
 800611a:	9303      	str	r3, [sp, #12]
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	9302      	str	r3, [sp, #8]
 8006120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006122:	9301      	str	r3, [sp, #4]
 8006124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f80e 	bl	800614e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006132:	69f8      	ldr	r0, [r7, #28]
 8006134:	f000 f8a2 	bl	800627c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006138:	2301      	movs	r3, #1
 800613a:	61bb      	str	r3, [r7, #24]
 800613c:	e002      	b.n	8006144 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800613e:	f04f 33ff 	mov.w	r3, #4294967295
 8006142:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006144:	69bb      	ldr	r3, [r7, #24]
    }
 8006146:	4618      	mov	r0, r3
 8006148:	3720      	adds	r7, #32
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b088      	sub	sp, #32
 8006152:	af00      	add	r7, sp, #0
 8006154:	60f8      	str	r0, [r7, #12]
 8006156:	60b9      	str	r1, [r7, #8]
 8006158:	607a      	str	r2, [r7, #4]
 800615a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	461a      	mov	r2, r3
 8006166:	21a5      	movs	r1, #165	; 0xa5
 8006168:	f001 fe94 	bl	8007e94 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006176:	3b01      	subs	r3, #1
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	f023 0307 	bic.w	r3, r3, #7
 8006184:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <prvInitialiseNewTask+0x58>
        __asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	617b      	str	r3, [r7, #20]
    }
 80061a2:	bf00      	nop
 80061a4:	e7fe      	b.n	80061a4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d01f      	beq.n	80061ec <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061ac:	2300      	movs	r3, #0
 80061ae:	61fb      	str	r3, [r7, #28]
 80061b0:	e012      	b.n	80061d8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	4413      	add	r3, r2
 80061b8:	7819      	ldrb	r1, [r3, #0]
 80061ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	4413      	add	r3, r2
 80061c0:	3334      	adds	r3, #52	; 0x34
 80061c2:	460a      	mov	r2, r1
 80061c4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	4413      	add	r3, r2
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d006      	beq.n	80061e0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	3301      	adds	r3, #1
 80061d6:	61fb      	str	r3, [r7, #28]
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	2b1d      	cmp	r3, #29
 80061dc:	d9e9      	bls.n	80061b2 <prvInitialiseNewTask+0x64>
 80061de:	e000      	b.n	80061e2 <prvInitialiseNewTask+0x94>
            {
                break;
 80061e0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80061ea:	e003      	b.n	80061f4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d901      	bls.n	80061fe <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061fa:	2304      	movs	r3, #4
 80061fc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006202:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8006204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006208:	65da      	str	r2, [r3, #92]	; 0x5c
            pxNewTCB->uxMutexesHeld = 0;
 800620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620c:	2200      	movs	r2, #0
 800620e:	661a      	str	r2, [r3, #96]	; 0x60
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006212:	3304      	adds	r3, #4
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff f9e5 	bl	80055e4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621c:	3318      	adds	r3, #24
 800621e:	4618      	mov	r0, r3
 8006220:	f7ff f9e0 	bl	80055e4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006228:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	f1c3 0205 	rsb	r2, r3, #5
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006238:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	3364      	adds	r3, #100	; 0x64
 800623e:	2204      	movs	r2, #4
 8006240:	2100      	movs	r1, #0
 8006242:	4618      	mov	r0, r3
 8006244:	f001 fe26 	bl	8007e94 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	3368      	adds	r3, #104	; 0x68
 800624c:	2201      	movs	r2, #1
 800624e:	2100      	movs	r1, #0
 8006250:	4618      	mov	r0, r3
 8006252:	f001 fe1f 	bl	8007e94 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	68f9      	ldr	r1, [r7, #12]
 800625a:	69b8      	ldr	r0, [r7, #24]
 800625c:	f001 f94a 	bl	80074f4 <pxPortInitialiseStack>
 8006260:	4602      	mov	r2, r0
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006270:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006272:	bf00      	nop
 8006274:	3720      	adds	r7, #32
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006284:	f001 fa68 	bl	8007758 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006288:	4b2c      	ldr	r3, [pc, #176]	; (800633c <prvAddNewTaskToReadyList+0xc0>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3301      	adds	r3, #1
 800628e:	4a2b      	ldr	r2, [pc, #172]	; (800633c <prvAddNewTaskToReadyList+0xc0>)
 8006290:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006292:	4b2b      	ldr	r3, [pc, #172]	; (8006340 <prvAddNewTaskToReadyList+0xc4>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d109      	bne.n	80062ae <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800629a:	4a29      	ldr	r2, [pc, #164]	; (8006340 <prvAddNewTaskToReadyList+0xc4>)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062a0:	4b26      	ldr	r3, [pc, #152]	; (800633c <prvAddNewTaskToReadyList+0xc0>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d110      	bne.n	80062ca <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80062a8:	f000 fc7a 	bl	8006ba0 <prvInitialiseTaskLists>
 80062ac:	e00d      	b.n	80062ca <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80062ae:	4b25      	ldr	r3, [pc, #148]	; (8006344 <prvAddNewTaskToReadyList+0xc8>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d109      	bne.n	80062ca <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062b6:	4b22      	ldr	r3, [pc, #136]	; (8006340 <prvAddNewTaskToReadyList+0xc4>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d802      	bhi.n	80062ca <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80062c4:	4a1e      	ldr	r2, [pc, #120]	; (8006340 <prvAddNewTaskToReadyList+0xc4>)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80062ca:	4b1f      	ldr	r3, [pc, #124]	; (8006348 <prvAddNewTaskToReadyList+0xcc>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3301      	adds	r3, #1
 80062d0:	4a1d      	ldr	r2, [pc, #116]	; (8006348 <prvAddNewTaskToReadyList+0xcc>)
 80062d2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80062d4:	4b1c      	ldr	r3, [pc, #112]	; (8006348 <prvAddNewTaskToReadyList+0xcc>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	655a      	str	r2, [r3, #84]	; 0x54
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e0:	2201      	movs	r2, #1
 80062e2:	409a      	lsls	r2, r3
 80062e4:	4b19      	ldr	r3, [pc, #100]	; (800634c <prvAddNewTaskToReadyList+0xd0>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	4a18      	ldr	r2, [pc, #96]	; (800634c <prvAddNewTaskToReadyList+0xd0>)
 80062ec:	6013      	str	r3, [r2, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f2:	4613      	mov	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4a15      	ldr	r2, [pc, #84]	; (8006350 <prvAddNewTaskToReadyList+0xd4>)
 80062fc:	441a      	add	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3304      	adds	r3, #4
 8006302:	4619      	mov	r1, r3
 8006304:	4610      	mov	r0, r2
 8006306:	f7ff f97a 	bl	80055fe <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800630a:	f001 fa55 	bl	80077b8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800630e:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <prvAddNewTaskToReadyList+0xc8>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00e      	beq.n	8006334 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006316:	4b0a      	ldr	r3, [pc, #40]	; (8006340 <prvAddNewTaskToReadyList+0xc4>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006320:	429a      	cmp	r2, r3
 8006322:	d207      	bcs.n	8006334 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006324:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <prvAddNewTaskToReadyList+0xd8>)
 8006326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	200002e4 	.word	0x200002e4
 8006340:	2000020c 	.word	0x2000020c
 8006344:	200002f0 	.word	0x200002f0
 8006348:	20000300 	.word	0x20000300
 800634c:	200002ec 	.word	0x200002ec
 8006350:	20000210 	.word	0x20000210
 8006354:	e000ed04 	.word	0xe000ed04

08006358 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	; 0x28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006362:	2300      	movs	r3, #0
 8006364:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10a      	bne.n	8006382 <xTaskDelayUntil+0x2a>
        __asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	617b      	str	r3, [r7, #20]
    }
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10a      	bne.n	800639e <xTaskDelayUntil+0x46>
        __asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	613b      	str	r3, [r7, #16]
    }
 800639a:	bf00      	nop
 800639c:	e7fe      	b.n	800639c <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800639e:	4b2a      	ldr	r3, [pc, #168]	; (8006448 <xTaskDelayUntil+0xf0>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <xTaskDelayUntil+0x64>
        __asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	60fb      	str	r3, [r7, #12]
    }
 80063b8:	bf00      	nop
 80063ba:	e7fe      	b.n	80063ba <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 80063bc:	f000 f8d0 	bl	8006560 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80063c0:	4b22      	ldr	r3, [pc, #136]	; (800644c <xTaskDelayUntil+0xf4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	4413      	add	r3, r2
 80063ce:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6a3a      	ldr	r2, [r7, #32]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d20b      	bcs.n	80063f2 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69fa      	ldr	r2, [r7, #28]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d211      	bcs.n	8006408 <xTaskDelayUntil+0xb0>
 80063e4:	69fa      	ldr	r2, [r7, #28]
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d90d      	bls.n	8006408 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80063ec:	2301      	movs	r3, #1
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24
 80063f0:	e00a      	b.n	8006408 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69fa      	ldr	r2, [r7, #28]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d303      	bcc.n	8006404 <xTaskDelayUntil+0xac>
 80063fc:	69fa      	ldr	r2, [r7, #28]
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	429a      	cmp	r2, r3
 8006402:	d901      	bls.n	8006408 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8006404:	2301      	movs	r3, #1
 8006406:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	2b00      	cmp	r3, #0
 8006412:	d006      	beq.n	8006422 <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006414:	69fa      	ldr	r2, [r7, #28]
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2100      	movs	r1, #0
 800641c:	4618      	mov	r0, r3
 800641e:	f000 fcf1 	bl	8006e04 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8006422:	f000 f8ab 	bl	800657c <xTaskResumeAll>
 8006426:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d107      	bne.n	800643e <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 800642e:	4b08      	ldr	r3, [pc, #32]	; (8006450 <xTaskDelayUntil+0xf8>)
 8006430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006440:	4618      	mov	r0, r3
 8006442:	3728      	adds	r7, #40	; 0x28
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	2000030c 	.word	0x2000030c
 800644c:	200002e8 	.word	0x200002e8
 8006450:	e000ed04 	.word	0xe000ed04

08006454 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800645c:	2300      	movs	r3, #0
 800645e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d017      	beq.n	8006496 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8006466:	4b13      	ldr	r3, [pc, #76]	; (80064b4 <vTaskDelay+0x60>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <vTaskDelay+0x30>
        __asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	60bb      	str	r3, [r7, #8]
    }
 8006480:	bf00      	nop
 8006482:	e7fe      	b.n	8006482 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8006484:	f000 f86c 	bl	8006560 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006488:	2100      	movs	r1, #0
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fcba 	bl	8006e04 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8006490:	f000 f874 	bl	800657c <xTaskResumeAll>
 8006494:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d107      	bne.n	80064ac <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 800649c:	4b06      	ldr	r3, [pc, #24]	; (80064b8 <vTaskDelay+0x64>)
 800649e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80064ac:	bf00      	nop
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	2000030c 	.word	0x2000030c
 80064b8:	e000ed04 	.word	0xe000ed04

080064bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80064c2:	4b20      	ldr	r3, [pc, #128]	; (8006544 <vTaskStartScheduler+0x88>)
 80064c4:	9301      	str	r3, [sp, #4]
 80064c6:	2300      	movs	r3, #0
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	2300      	movs	r3, #0
 80064cc:	2280      	movs	r2, #128	; 0x80
 80064ce:	491e      	ldr	r1, [pc, #120]	; (8006548 <vTaskStartScheduler+0x8c>)
 80064d0:	481e      	ldr	r0, [pc, #120]	; (800654c <vTaskStartScheduler+0x90>)
 80064d2:	f7ff fdfb 	bl	80060cc <xTaskCreate>
 80064d6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d102      	bne.n	80064e4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80064de:	f000 fcf7 	bl	8006ed0 <xTimerCreateTimerTask>
 80064e2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d116      	bne.n	8006518 <vTaskStartScheduler+0x5c>
        __asm volatile
 80064ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	60bb      	str	r3, [r7, #8]
    }
 80064fc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80064fe:	4b14      	ldr	r3, [pc, #80]	; (8006550 <vTaskStartScheduler+0x94>)
 8006500:	f04f 32ff 	mov.w	r2, #4294967295
 8006504:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006506:	4b13      	ldr	r3, [pc, #76]	; (8006554 <vTaskStartScheduler+0x98>)
 8006508:	2201      	movs	r2, #1
 800650a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800650c:	4b12      	ldr	r3, [pc, #72]	; (8006558 <vTaskStartScheduler+0x9c>)
 800650e:	2200      	movs	r2, #0
 8006510:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8006512:	f001 f87f 	bl	8007614 <xPortStartScheduler>
 8006516:	e00e      	b.n	8006536 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651e:	d10a      	bne.n	8006536 <vTaskStartScheduler+0x7a>
        __asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	607b      	str	r3, [r7, #4]
    }
 8006532:	bf00      	nop
 8006534:	e7fe      	b.n	8006534 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006536:	4b09      	ldr	r3, [pc, #36]	; (800655c <vTaskStartScheduler+0xa0>)
 8006538:	681b      	ldr	r3, [r3, #0]
}
 800653a:	bf00      	nop
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	20000308 	.word	0x20000308
 8006548:	08009208 	.word	0x08009208
 800654c:	08006b71 	.word	0x08006b71
 8006550:	20000304 	.word	0x20000304
 8006554:	200002f0 	.word	0x200002f0
 8006558:	200002e8 	.word	0x200002e8
 800655c:	20000010 	.word	0x20000010

08006560 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006564:	4b04      	ldr	r3, [pc, #16]	; (8006578 <vTaskSuspendAll+0x18>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3301      	adds	r3, #1
 800656a:	4a03      	ldr	r2, [pc, #12]	; (8006578 <vTaskSuspendAll+0x18>)
 800656c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800656e:	bf00      	nop
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	2000030c 	.word	0x2000030c

0800657c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006582:	2300      	movs	r3, #0
 8006584:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006586:	2300      	movs	r3, #0
 8006588:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800658a:	4b41      	ldr	r3, [pc, #260]	; (8006690 <xTaskResumeAll+0x114>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10a      	bne.n	80065a8 <xTaskResumeAll+0x2c>
        __asm volatile
 8006592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	603b      	str	r3, [r7, #0]
    }
 80065a4:	bf00      	nop
 80065a6:	e7fe      	b.n	80065a6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80065a8:	f001 f8d6 	bl	8007758 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80065ac:	4b38      	ldr	r3, [pc, #224]	; (8006690 <xTaskResumeAll+0x114>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3b01      	subs	r3, #1
 80065b2:	4a37      	ldr	r2, [pc, #220]	; (8006690 <xTaskResumeAll+0x114>)
 80065b4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065b6:	4b36      	ldr	r3, [pc, #216]	; (8006690 <xTaskResumeAll+0x114>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d161      	bne.n	8006682 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065be:	4b35      	ldr	r3, [pc, #212]	; (8006694 <xTaskResumeAll+0x118>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d05d      	beq.n	8006682 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065c6:	e02e      	b.n	8006626 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065c8:	4b33      	ldr	r3, [pc, #204]	; (8006698 <xTaskResumeAll+0x11c>)
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3318      	adds	r3, #24
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7ff f86f 	bl	80056b8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3304      	adds	r3, #4
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff f86a 	bl	80056b8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e8:	2201      	movs	r2, #1
 80065ea:	409a      	lsls	r2, r3
 80065ec:	4b2b      	ldr	r3, [pc, #172]	; (800669c <xTaskResumeAll+0x120>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	4a2a      	ldr	r2, [pc, #168]	; (800669c <xTaskResumeAll+0x120>)
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fa:	4613      	mov	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4a27      	ldr	r2, [pc, #156]	; (80066a0 <xTaskResumeAll+0x124>)
 8006604:	441a      	add	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3304      	adds	r3, #4
 800660a:	4619      	mov	r1, r3
 800660c:	4610      	mov	r0, r2
 800660e:	f7fe fff6 	bl	80055fe <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006616:	4b23      	ldr	r3, [pc, #140]	; (80066a4 <xTaskResumeAll+0x128>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	429a      	cmp	r2, r3
 800661e:	d302      	bcc.n	8006626 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8006620:	4b21      	ldr	r3, [pc, #132]	; (80066a8 <xTaskResumeAll+0x12c>)
 8006622:	2201      	movs	r2, #1
 8006624:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006626:	4b1c      	ldr	r3, [pc, #112]	; (8006698 <xTaskResumeAll+0x11c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1cc      	bne.n	80065c8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006634:	f000 fb32 	bl	8006c9c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006638:	4b1c      	ldr	r3, [pc, #112]	; (80066ac <xTaskResumeAll+0x130>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d010      	beq.n	8006666 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006644:	f000 f846 	bl	80066d4 <xTaskIncrementTick>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800664e:	4b16      	ldr	r3, [pc, #88]	; (80066a8 <xTaskResumeAll+0x12c>)
 8006650:	2201      	movs	r2, #1
 8006652:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3b01      	subs	r3, #1
 8006658:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1f1      	bne.n	8006644 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8006660:	4b12      	ldr	r3, [pc, #72]	; (80066ac <xTaskResumeAll+0x130>)
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006666:	4b10      	ldr	r3, [pc, #64]	; (80066a8 <xTaskResumeAll+0x12c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d009      	beq.n	8006682 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800666e:	2301      	movs	r3, #1
 8006670:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006672:	4b0f      	ldr	r3, [pc, #60]	; (80066b0 <xTaskResumeAll+0x134>)
 8006674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006682:	f001 f899 	bl	80077b8 <vPortExitCritical>

    return xAlreadyYielded;
 8006686:	68bb      	ldr	r3, [r7, #8]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	2000030c 	.word	0x2000030c
 8006694:	200002e4 	.word	0x200002e4
 8006698:	200002a4 	.word	0x200002a4
 800669c:	200002ec 	.word	0x200002ec
 80066a0:	20000210 	.word	0x20000210
 80066a4:	2000020c 	.word	0x2000020c
 80066a8:	200002f8 	.word	0x200002f8
 80066ac:	200002f4 	.word	0x200002f4
 80066b0:	e000ed04 	.word	0xe000ed04

080066b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <xTaskGetTickCount+0x1c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80066c0:	687b      	ldr	r3, [r7, #4]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	200002e8 	.word	0x200002e8

080066d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80066da:	2300      	movs	r3, #0
 80066dc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066de:	4b4e      	ldr	r3, [pc, #312]	; (8006818 <xTaskIncrementTick+0x144>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f040 808e 	bne.w	8006804 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066e8:	4b4c      	ldr	r3, [pc, #304]	; (800681c <xTaskIncrementTick+0x148>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	3301      	adds	r3, #1
 80066ee:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80066f0:	4a4a      	ldr	r2, [pc, #296]	; (800681c <xTaskIncrementTick+0x148>)
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d120      	bne.n	800673e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80066fc:	4b48      	ldr	r3, [pc, #288]	; (8006820 <xTaskIncrementTick+0x14c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00a      	beq.n	800671c <xTaskIncrementTick+0x48>
        __asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	603b      	str	r3, [r7, #0]
    }
 8006718:	bf00      	nop
 800671a:	e7fe      	b.n	800671a <xTaskIncrementTick+0x46>
 800671c:	4b40      	ldr	r3, [pc, #256]	; (8006820 <xTaskIncrementTick+0x14c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	4b40      	ldr	r3, [pc, #256]	; (8006824 <xTaskIncrementTick+0x150>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a3e      	ldr	r2, [pc, #248]	; (8006820 <xTaskIncrementTick+0x14c>)
 8006728:	6013      	str	r3, [r2, #0]
 800672a:	4a3e      	ldr	r2, [pc, #248]	; (8006824 <xTaskIncrementTick+0x150>)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6013      	str	r3, [r2, #0]
 8006730:	4b3d      	ldr	r3, [pc, #244]	; (8006828 <xTaskIncrementTick+0x154>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3301      	adds	r3, #1
 8006736:	4a3c      	ldr	r2, [pc, #240]	; (8006828 <xTaskIncrementTick+0x154>)
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	f000 faaf 	bl	8006c9c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800673e:	4b3b      	ldr	r3, [pc, #236]	; (800682c <xTaskIncrementTick+0x158>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	429a      	cmp	r2, r3
 8006746:	d348      	bcc.n	80067da <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006748:	4b35      	ldr	r3, [pc, #212]	; (8006820 <xTaskIncrementTick+0x14c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d104      	bne.n	800675c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006752:	4b36      	ldr	r3, [pc, #216]	; (800682c <xTaskIncrementTick+0x158>)
 8006754:	f04f 32ff 	mov.w	r2, #4294967295
 8006758:	601a      	str	r2, [r3, #0]
                    break;
 800675a:	e03e      	b.n	80067da <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800675c:	4b30      	ldr	r3, [pc, #192]	; (8006820 <xTaskIncrementTick+0x14c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	429a      	cmp	r2, r3
 8006772:	d203      	bcs.n	800677c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006774:	4a2d      	ldr	r2, [pc, #180]	; (800682c <xTaskIncrementTick+0x158>)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800677a:	e02e      	b.n	80067da <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	3304      	adds	r3, #4
 8006780:	4618      	mov	r0, r3
 8006782:	f7fe ff99 	bl	80056b8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	2b00      	cmp	r3, #0
 800678c:	d004      	beq.n	8006798 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	3318      	adds	r3, #24
 8006792:	4618      	mov	r0, r3
 8006794:	f7fe ff90 	bl	80056b8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679c:	2201      	movs	r2, #1
 800679e:	409a      	lsls	r2, r3
 80067a0:	4b23      	ldr	r3, [pc, #140]	; (8006830 <xTaskIncrementTick+0x15c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	4a22      	ldr	r2, [pc, #136]	; (8006830 <xTaskIncrementTick+0x15c>)
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ae:	4613      	mov	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4a1f      	ldr	r2, [pc, #124]	; (8006834 <xTaskIncrementTick+0x160>)
 80067b8:	441a      	add	r2, r3
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	3304      	adds	r3, #4
 80067be:	4619      	mov	r1, r3
 80067c0:	4610      	mov	r0, r2
 80067c2:	f7fe ff1c 	bl	80055fe <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ca:	4b1b      	ldr	r3, [pc, #108]	; (8006838 <xTaskIncrementTick+0x164>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d3b9      	bcc.n	8006748 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80067d4:	2301      	movs	r3, #1
 80067d6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067d8:	e7b6      	b.n	8006748 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067da:	4b17      	ldr	r3, [pc, #92]	; (8006838 <xTaskIncrementTick+0x164>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e0:	4914      	ldr	r1, [pc, #80]	; (8006834 <xTaskIncrementTick+0x160>)
 80067e2:	4613      	mov	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	440b      	add	r3, r1
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d901      	bls.n	80067f6 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 80067f2:	2301      	movs	r3, #1
 80067f4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80067f6:	4b11      	ldr	r3, [pc, #68]	; (800683c <xTaskIncrementTick+0x168>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d007      	beq.n	800680e <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 80067fe:	2301      	movs	r3, #1
 8006800:	617b      	str	r3, [r7, #20]
 8006802:	e004      	b.n	800680e <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006804:	4b0e      	ldr	r3, [pc, #56]	; (8006840 <xTaskIncrementTick+0x16c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3301      	adds	r3, #1
 800680a:	4a0d      	ldr	r2, [pc, #52]	; (8006840 <xTaskIncrementTick+0x16c>)
 800680c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800680e:	697b      	ldr	r3, [r7, #20]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	2000030c 	.word	0x2000030c
 800681c:	200002e8 	.word	0x200002e8
 8006820:	2000029c 	.word	0x2000029c
 8006824:	200002a0 	.word	0x200002a0
 8006828:	200002fc 	.word	0x200002fc
 800682c:	20000304 	.word	0x20000304
 8006830:	200002ec 	.word	0x200002ec
 8006834:	20000210 	.word	0x20000210
 8006838:	2000020c 	.word	0x2000020c
 800683c:	200002f8 	.word	0x200002f8
 8006840:	200002f4 	.word	0x200002f4

08006844 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800684a:	4b27      	ldr	r3, [pc, #156]	; (80068e8 <vTaskSwitchContext+0xa4>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006852:	4b26      	ldr	r3, [pc, #152]	; (80068ec <vTaskSwitchContext+0xa8>)
 8006854:	2201      	movs	r2, #1
 8006856:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006858:	e03f      	b.n	80068da <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800685a:	4b24      	ldr	r3, [pc, #144]	; (80068ec <vTaskSwitchContext+0xa8>)
 800685c:	2200      	movs	r2, #0
 800685e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006860:	4b23      	ldr	r3, [pc, #140]	; (80068f0 <vTaskSwitchContext+0xac>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	fab3 f383 	clz	r3, r3
 800686c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800686e:	7afb      	ldrb	r3, [r7, #11]
 8006870:	f1c3 031f 	rsb	r3, r3, #31
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	491f      	ldr	r1, [pc, #124]	; (80068f4 <vTaskSwitchContext+0xb0>)
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	4613      	mov	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	440b      	add	r3, r1
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10a      	bne.n	80068a0 <vTaskSwitchContext+0x5c>
        __asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	607b      	str	r3, [r7, #4]
    }
 800689c:	bf00      	nop
 800689e:	e7fe      	b.n	800689e <vTaskSwitchContext+0x5a>
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	4613      	mov	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4a12      	ldr	r2, [pc, #72]	; (80068f4 <vTaskSwitchContext+0xb0>)
 80068ac:	4413      	add	r3, r2
 80068ae:	613b      	str	r3, [r7, #16]
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	605a      	str	r2, [r3, #4]
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	3308      	adds	r3, #8
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d104      	bne.n	80068d0 <vTaskSwitchContext+0x8c>
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	605a      	str	r2, [r3, #4]
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	4a08      	ldr	r2, [pc, #32]	; (80068f8 <vTaskSwitchContext+0xb4>)
 80068d8:	6013      	str	r3, [r2, #0]
}
 80068da:	bf00      	nop
 80068dc:	371c      	adds	r7, #28
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	2000030c 	.word	0x2000030c
 80068ec:	200002f8 	.word	0x200002f8
 80068f0:	200002ec 	.word	0x200002ec
 80068f4:	20000210 	.word	0x20000210
 80068f8:	2000020c 	.word	0x2000020c

080068fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10a      	bne.n	8006922 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	60fb      	str	r3, [r7, #12]
    }
 800691e:	bf00      	nop
 8006920:	e7fe      	b.n	8006920 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006922:	4b07      	ldr	r3, [pc, #28]	; (8006940 <vTaskPlaceOnEventList+0x44>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3318      	adds	r3, #24
 8006928:	4619      	mov	r1, r3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7fe fe8b 	bl	8005646 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006930:	2101      	movs	r1, #1
 8006932:	6838      	ldr	r0, [r7, #0]
 8006934:	f000 fa66 	bl	8006e04 <prvAddCurrentTaskToDelayedList>
}
 8006938:	bf00      	nop
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	2000020c 	.word	0x2000020c

08006944 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10a      	bne.n	800696c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	617b      	str	r3, [r7, #20]
    }
 8006968:	bf00      	nop
 800696a:	e7fe      	b.n	800696a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800696c:	4b0a      	ldr	r3, [pc, #40]	; (8006998 <vTaskPlaceOnEventListRestricted+0x54>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3318      	adds	r3, #24
 8006972:	4619      	mov	r1, r3
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f7fe fe42 	bl	80055fe <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8006980:	f04f 33ff 	mov.w	r3, #4294967295
 8006984:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006986:	6879      	ldr	r1, [r7, #4]
 8006988:	68b8      	ldr	r0, [r7, #8]
 800698a:	f000 fa3b 	bl	8006e04 <prvAddCurrentTaskToDelayedList>
    }
 800698e:	bf00      	nop
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	2000020c 	.word	0x2000020c

0800699c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10a      	bne.n	80069c8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	60fb      	str	r3, [r7, #12]
    }
 80069c4:	bf00      	nop
 80069c6:	e7fe      	b.n	80069c6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	3318      	adds	r3, #24
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fe fe73 	bl	80056b8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069d2:	4b1d      	ldr	r3, [pc, #116]	; (8006a48 <xTaskRemoveFromEventList+0xac>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d11c      	bne.n	8006a14 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	3304      	adds	r3, #4
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fe fe6a 	bl	80056b8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e8:	2201      	movs	r2, #1
 80069ea:	409a      	lsls	r2, r3
 80069ec:	4b17      	ldr	r3, [pc, #92]	; (8006a4c <xTaskRemoveFromEventList+0xb0>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	4a16      	ldr	r2, [pc, #88]	; (8006a4c <xTaskRemoveFromEventList+0xb0>)
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4a13      	ldr	r2, [pc, #76]	; (8006a50 <xTaskRemoveFromEventList+0xb4>)
 8006a04:	441a      	add	r2, r3
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	3304      	adds	r3, #4
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	f7fe fdf6 	bl	80055fe <vListInsertEnd>
 8006a12:	e005      	b.n	8006a20 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	3318      	adds	r3, #24
 8006a18:	4619      	mov	r1, r3
 8006a1a:	480e      	ldr	r0, [pc, #56]	; (8006a54 <xTaskRemoveFromEventList+0xb8>)
 8006a1c:	f7fe fdef 	bl	80055fe <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a24:	4b0c      	ldr	r3, [pc, #48]	; (8006a58 <xTaskRemoveFromEventList+0xbc>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d905      	bls.n	8006a3a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006a32:	4b0a      	ldr	r3, [pc, #40]	; (8006a5c <xTaskRemoveFromEventList+0xc0>)
 8006a34:	2201      	movs	r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	e001      	b.n	8006a3e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006a3e:	697b      	ldr	r3, [r7, #20]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	2000030c 	.word	0x2000030c
 8006a4c:	200002ec 	.word	0x200002ec
 8006a50:	20000210 	.word	0x20000210
 8006a54:	200002a4 	.word	0x200002a4
 8006a58:	2000020c 	.word	0x2000020c
 8006a5c:	200002f8 	.word	0x200002f8

08006a60 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a68:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <vTaskInternalSetTimeOutState+0x24>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006a70:	4b05      	ldr	r3, [pc, #20]	; (8006a88 <vTaskInternalSetTimeOutState+0x28>)
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	605a      	str	r2, [r3, #4]
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	200002fc 	.word	0x200002fc
 8006a88:	200002e8 	.word	0x200002e8

08006a8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b088      	sub	sp, #32
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	613b      	str	r3, [r7, #16]
    }
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10a      	bne.n	8006ace <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8006ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	60fb      	str	r3, [r7, #12]
    }
 8006aca:	bf00      	nop
 8006acc:	e7fe      	b.n	8006acc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8006ace:	f000 fe43 	bl	8007758 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006ad2:	4b1f      	ldr	r3, [pc, #124]	; (8006b50 <xTaskCheckForTimeOut+0xc4>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aea:	d102      	bne.n	8006af2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006aec:	2300      	movs	r3, #0
 8006aee:	61fb      	str	r3, [r7, #28]
 8006af0:	e026      	b.n	8006b40 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	4b17      	ldr	r3, [pc, #92]	; (8006b54 <xTaskCheckForTimeOut+0xc8>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d00a      	beq.n	8006b14 <xTaskCheckForTimeOut+0x88>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d305      	bcc.n	8006b14 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	e015      	b.n	8006b40 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d20b      	bcs.n	8006b36 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	1ad2      	subs	r2, r2, r3
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7ff ff98 	bl	8006a60 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006b30:	2300      	movs	r3, #0
 8006b32:	61fb      	str	r3, [r7, #28]
 8006b34:	e004      	b.n	8006b40 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006b40:	f000 fe3a 	bl	80077b8 <vPortExitCritical>

    return xReturn;
 8006b44:	69fb      	ldr	r3, [r7, #28]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3720      	adds	r7, #32
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	200002e8 	.word	0x200002e8
 8006b54:	200002fc 	.word	0x200002fc

08006b58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b58:	b480      	push	{r7}
 8006b5a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006b5c:	4b03      	ldr	r3, [pc, #12]	; (8006b6c <vTaskMissedYield+0x14>)
 8006b5e:	2201      	movs	r2, #1
 8006b60:	601a      	str	r2, [r3, #0]
}
 8006b62:	bf00      	nop
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	200002f8 	.word	0x200002f8

08006b70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006b78:	f000 f852 	bl	8006c20 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b7c:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <prvIdleTask+0x28>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d9f9      	bls.n	8006b78 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006b84:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <prvIdleTask+0x2c>)
 8006b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006b94:	e7f0      	b.n	8006b78 <prvIdleTask+0x8>
 8006b96:	bf00      	nop
 8006b98:	20000210 	.word	0x20000210
 8006b9c:	e000ed04 	.word	0xe000ed04

08006ba0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	607b      	str	r3, [r7, #4]
 8006baa:	e00c      	b.n	8006bc6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4a12      	ldr	r2, [pc, #72]	; (8006c00 <prvInitialiseTaskLists+0x60>)
 8006bb8:	4413      	add	r3, r2
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fe fcf2 	bl	80055a4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	607b      	str	r3, [r7, #4]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d9ef      	bls.n	8006bac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006bcc:	480d      	ldr	r0, [pc, #52]	; (8006c04 <prvInitialiseTaskLists+0x64>)
 8006bce:	f7fe fce9 	bl	80055a4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006bd2:	480d      	ldr	r0, [pc, #52]	; (8006c08 <prvInitialiseTaskLists+0x68>)
 8006bd4:	f7fe fce6 	bl	80055a4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006bd8:	480c      	ldr	r0, [pc, #48]	; (8006c0c <prvInitialiseTaskLists+0x6c>)
 8006bda:	f7fe fce3 	bl	80055a4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8006bde:	480c      	ldr	r0, [pc, #48]	; (8006c10 <prvInitialiseTaskLists+0x70>)
 8006be0:	f7fe fce0 	bl	80055a4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006be4:	480b      	ldr	r0, [pc, #44]	; (8006c14 <prvInitialiseTaskLists+0x74>)
 8006be6:	f7fe fcdd 	bl	80055a4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006bea:	4b0b      	ldr	r3, [pc, #44]	; (8006c18 <prvInitialiseTaskLists+0x78>)
 8006bec:	4a05      	ldr	r2, [pc, #20]	; (8006c04 <prvInitialiseTaskLists+0x64>)
 8006bee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006bf0:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <prvInitialiseTaskLists+0x7c>)
 8006bf2:	4a05      	ldr	r2, [pc, #20]	; (8006c08 <prvInitialiseTaskLists+0x68>)
 8006bf4:	601a      	str	r2, [r3, #0]
}
 8006bf6:	bf00      	nop
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	20000210 	.word	0x20000210
 8006c04:	20000274 	.word	0x20000274
 8006c08:	20000288 	.word	0x20000288
 8006c0c:	200002a4 	.word	0x200002a4
 8006c10:	200002b8 	.word	0x200002b8
 8006c14:	200002d0 	.word	0x200002d0
 8006c18:	2000029c 	.word	0x2000029c
 8006c1c:	200002a0 	.word	0x200002a0

08006c20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c26:	e019      	b.n	8006c5c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006c28:	f000 fd96 	bl	8007758 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c2c:	4b10      	ldr	r3, [pc, #64]	; (8006c70 <prvCheckTasksWaitingTermination+0x50>)
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3304      	adds	r3, #4
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fe fd3d 	bl	80056b8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8006c3e:	4b0d      	ldr	r3, [pc, #52]	; (8006c74 <prvCheckTasksWaitingTermination+0x54>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3b01      	subs	r3, #1
 8006c44:	4a0b      	ldr	r2, [pc, #44]	; (8006c74 <prvCheckTasksWaitingTermination+0x54>)
 8006c46:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006c48:	4b0b      	ldr	r3, [pc, #44]	; (8006c78 <prvCheckTasksWaitingTermination+0x58>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	4a0a      	ldr	r2, [pc, #40]	; (8006c78 <prvCheckTasksWaitingTermination+0x58>)
 8006c50:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8006c52:	f000 fdb1 	bl	80077b8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f810 	bl	8006c7c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c5c:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <prvCheckTasksWaitingTermination+0x58>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1e1      	bne.n	8006c28 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006c64:	bf00      	nop
 8006c66:	bf00      	nop
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	200002b8 	.word	0x200002b8
 8006c74:	200002e4 	.word	0x200002e4
 8006c78:	200002cc 	.word	0x200002cc

08006c7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 ffad 	bl	8007be8 <vPortFree>
                vPortFree( pxTCB );
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 ffaa 	bl	8007be8 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006c94:	bf00      	nop
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ca0:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <prvResetNextTaskUnblockTime+0x30>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d104      	bne.n	8006cb4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006caa:	4b09      	ldr	r3, [pc, #36]	; (8006cd0 <prvResetNextTaskUnblockTime+0x34>)
 8006cac:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006cb2:	e005      	b.n	8006cc0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006cb4:	4b05      	ldr	r3, [pc, #20]	; (8006ccc <prvResetNextTaskUnblockTime+0x30>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a04      	ldr	r2, [pc, #16]	; (8006cd0 <prvResetNextTaskUnblockTime+0x34>)
 8006cbe:	6013      	str	r3, [r2, #0]
}
 8006cc0:	bf00      	nop
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	2000029c 	.word	0x2000029c
 8006cd0:	20000304 	.word	0x20000304

08006cd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006cda:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <xTaskGetSchedulerState+0x34>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d102      	bne.n	8006ce8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	607b      	str	r3, [r7, #4]
 8006ce6:	e008      	b.n	8006cfa <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ce8:	4b08      	ldr	r3, [pc, #32]	; (8006d0c <xTaskGetSchedulerState+0x38>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d102      	bne.n	8006cf6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	607b      	str	r3, [r7, #4]
 8006cf4:	e001      	b.n	8006cfa <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006cfa:	687b      	ldr	r3, [r7, #4]
    }
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	200002f0 	.word	0x200002f0
 8006d0c:	2000030c 	.word	0x2000030c

08006d10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d063      	beq.n	8006dee <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006d26:	4b34      	ldr	r3, [pc, #208]	; (8006df8 <xTaskPriorityDisinherit+0xe8>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d00a      	beq.n	8006d46 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	60fb      	str	r3, [r7, #12]
    }
 8006d42:	bf00      	nop
 8006d44:	e7fe      	b.n	8006d44 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10a      	bne.n	8006d64 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	60bb      	str	r3, [r7, #8]
    }
 8006d60:	bf00      	nop
 8006d62:	e7fe      	b.n	8006d62 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d68:	1e5a      	subs	r2, r3, #1
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	661a      	str	r2, [r3, #96]	; 0x60

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d039      	beq.n	8006dee <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d135      	bne.n	8006dee <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	3304      	adds	r3, #4
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fe fc96 	bl	80056b8 <uxListRemove>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10a      	bne.n	8006da8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d96:	2201      	movs	r2, #1
 8006d98:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9c:	43da      	mvns	r2, r3
 8006d9e:	4b17      	ldr	r3, [pc, #92]	; (8006dfc <xTaskPriorityDisinherit+0xec>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4013      	ands	r3, r2
 8006da4:	4a15      	ldr	r2, [pc, #84]	; (8006dfc <xTaskPriorityDisinherit+0xec>)
 8006da6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db4:	f1c3 0205 	rsb	r2, r3, #5
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	409a      	lsls	r2, r3
 8006dc4:	4b0d      	ldr	r3, [pc, #52]	; (8006dfc <xTaskPriorityDisinherit+0xec>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	4a0c      	ldr	r2, [pc, #48]	; (8006dfc <xTaskPriorityDisinherit+0xec>)
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4a09      	ldr	r2, [pc, #36]	; (8006e00 <xTaskPriorityDisinherit+0xf0>)
 8006ddc:	441a      	add	r2, r3
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	3304      	adds	r3, #4
 8006de2:	4619      	mov	r1, r3
 8006de4:	4610      	mov	r0, r2
 8006de6:	f7fe fc0a 	bl	80055fe <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006dea:	2301      	movs	r3, #1
 8006dec:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006dee:	697b      	ldr	r3, [r7, #20]
    }
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	2000020c 	.word	0x2000020c
 8006dfc:	200002ec 	.word	0x200002ec
 8006e00:	20000210 	.word	0x20000210

08006e04 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006e0e:	4b29      	ldr	r3, [pc, #164]	; (8006eb4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e14:	4b28      	ldr	r3, [pc, #160]	; (8006eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fe fc4c 	bl	80056b8 <uxListRemove>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10b      	bne.n	8006e3e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006e26:	4b24      	ldr	r3, [pc, #144]	; (8006eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e32:	43da      	mvns	r2, r3
 8006e34:	4b21      	ldr	r3, [pc, #132]	; (8006ebc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4013      	ands	r3, r2
 8006e3a:	4a20      	ldr	r2, [pc, #128]	; (8006ebc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e3c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e44:	d10a      	bne.n	8006e5c <prvAddCurrentTaskToDelayedList+0x58>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d007      	beq.n	8006e5c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e4c:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3304      	adds	r3, #4
 8006e52:	4619      	mov	r1, r3
 8006e54:	481a      	ldr	r0, [pc, #104]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006e56:	f7fe fbd2 	bl	80055fe <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006e5a:	e026      	b.n	8006eaa <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4413      	add	r3, r2
 8006e62:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e64:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d209      	bcs.n	8006e88 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e74:	4b13      	ldr	r3, [pc, #76]	; (8006ec4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	4b0f      	ldr	r3, [pc, #60]	; (8006eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	4619      	mov	r1, r3
 8006e80:	4610      	mov	r0, r2
 8006e82:	f7fe fbe0 	bl	8005646 <vListInsert>
}
 8006e86:	e010      	b.n	8006eaa <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e88:	4b0f      	ldr	r3, [pc, #60]	; (8006ec8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	4b0a      	ldr	r3, [pc, #40]	; (8006eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3304      	adds	r3, #4
 8006e92:	4619      	mov	r1, r3
 8006e94:	4610      	mov	r0, r2
 8006e96:	f7fe fbd6 	bl	8005646 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006e9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d202      	bcs.n	8006eaa <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006ea4:	4a09      	ldr	r2, [pc, #36]	; (8006ecc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	6013      	str	r3, [r2, #0]
}
 8006eaa:	bf00      	nop
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	200002e8 	.word	0x200002e8
 8006eb8:	2000020c 	.word	0x2000020c
 8006ebc:	200002ec 	.word	0x200002ec
 8006ec0:	200002d0 	.word	0x200002d0
 8006ec4:	200002a0 	.word	0x200002a0
 8006ec8:	2000029c 	.word	0x2000029c
 8006ecc:	20000304 	.word	0x20000304

08006ed0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006eda:	f000 fad5 	bl	8007488 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006ede:	4b11      	ldr	r3, [pc, #68]	; (8006f24 <xTimerCreateTimerTask+0x54>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00b      	beq.n	8006efe <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006ee6:	4b10      	ldr	r3, [pc, #64]	; (8006f28 <xTimerCreateTimerTask+0x58>)
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	2304      	movs	r3, #4
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ef4:	490d      	ldr	r1, [pc, #52]	; (8006f2c <xTimerCreateTimerTask+0x5c>)
 8006ef6:	480e      	ldr	r0, [pc, #56]	; (8006f30 <xTimerCreateTimerTask+0x60>)
 8006ef8:	f7ff f8e8 	bl	80060cc <xTaskCreate>
 8006efc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10a      	bne.n	8006f1a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	603b      	str	r3, [r7, #0]
    }
 8006f16:	bf00      	nop
 8006f18:	e7fe      	b.n	8006f18 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006f1a:	687b      	ldr	r3, [r7, #4]
    }
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3708      	adds	r7, #8
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	20000340 	.word	0x20000340
 8006f28:	20000344 	.word	0x20000344
 8006f2c:	08009210 	.word	0x08009210
 8006f30:	08007069 	.word	0x08007069

08006f34 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b08a      	sub	sp, #40	; 0x28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
 8006f40:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006f42:	2300      	movs	r3, #0
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10a      	bne.n	8006f62 <xTimerGenericCommand+0x2e>
        __asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	623b      	str	r3, [r7, #32]
    }
 8006f5e:	bf00      	nop
 8006f60:	e7fe      	b.n	8006f60 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006f62:	4b1a      	ldr	r3, [pc, #104]	; (8006fcc <xTimerGenericCommand+0x98>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d02a      	beq.n	8006fc0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2b05      	cmp	r3, #5
 8006f7a:	dc18      	bgt.n	8006fae <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f7c:	f7ff feaa 	bl	8006cd4 <xTaskGetSchedulerState>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d109      	bne.n	8006f9a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f86:	4b11      	ldr	r3, [pc, #68]	; (8006fcc <xTimerGenericCommand+0x98>)
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	f107 0114 	add.w	r1, r7, #20
 8006f8e:	2300      	movs	r3, #0
 8006f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f92:	f7fe fca5 	bl	80058e0 <xQueueGenericSend>
 8006f96:	6278      	str	r0, [r7, #36]	; 0x24
 8006f98:	e012      	b.n	8006fc0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006f9a:	4b0c      	ldr	r3, [pc, #48]	; (8006fcc <xTimerGenericCommand+0x98>)
 8006f9c:	6818      	ldr	r0, [r3, #0]
 8006f9e:	f107 0114 	add.w	r1, r7, #20
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f7fe fc9b 	bl	80058e0 <xQueueGenericSend>
 8006faa:	6278      	str	r0, [r7, #36]	; 0x24
 8006fac:	e008      	b.n	8006fc0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006fae:	4b07      	ldr	r3, [pc, #28]	; (8006fcc <xTimerGenericCommand+0x98>)
 8006fb0:	6818      	ldr	r0, [r3, #0]
 8006fb2:	f107 0114 	add.w	r1, r7, #20
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	f7fe fd8f 	bl	8005adc <xQueueGenericSendFromISR>
 8006fbe:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3728      	adds	r7, #40	; 0x28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000340 	.word	0x20000340

08006fd0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af02      	add	r7, sp, #8
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fda:	4b22      	ldr	r3, [pc, #136]	; (8007064 <prvProcessExpiredTimer+0x94>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fe fb65 	bl	80056b8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ff4:	f003 0304 	and.w	r3, r3, #4
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d022      	beq.n	8007042 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	699a      	ldr	r2, [r3, #24]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	18d1      	adds	r1, r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	6978      	ldr	r0, [r7, #20]
 800700a:	f000 f8d1 	bl	80071b0 <prvInsertTimerInActiveList>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d01f      	beq.n	8007054 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007014:	2300      	movs	r3, #0
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	2300      	movs	r3, #0
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	2100      	movs	r1, #0
 800701e:	6978      	ldr	r0, [r7, #20]
 8007020:	f7ff ff88 	bl	8006f34 <xTimerGenericCommand>
 8007024:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d113      	bne.n	8007054 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	60fb      	str	r3, [r7, #12]
    }
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007048:	f023 0301 	bic.w	r3, r3, #1
 800704c:	b2da      	uxtb	r2, r3
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	6a1b      	ldr	r3, [r3, #32]
 8007058:	6978      	ldr	r0, [r7, #20]
 800705a:	4798      	blx	r3
    }
 800705c:	bf00      	nop
 800705e:	3718      	adds	r7, #24
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	20000338 	.word	0x20000338

08007068 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007070:	f107 0308 	add.w	r3, r7, #8
 8007074:	4618      	mov	r0, r3
 8007076:	f000 f857 	bl	8007128 <prvGetNextExpireTime>
 800707a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	4619      	mov	r1, r3
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 f803 	bl	800708c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007086:	f000 f8d5 	bl	8007234 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800708a:	e7f1      	b.n	8007070 <prvTimerTask+0x8>

0800708c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007096:	f7ff fa63 	bl	8006560 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800709a:	f107 0308 	add.w	r3, r7, #8
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 f866 	bl	8007170 <prvSampleTimeNow>
 80070a4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d130      	bne.n	800710e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10a      	bne.n	80070c8 <prvProcessTimerOrBlockTask+0x3c>
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d806      	bhi.n	80070c8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80070ba:	f7ff fa5f 	bl	800657c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80070be:	68f9      	ldr	r1, [r7, #12]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f7ff ff85 	bl	8006fd0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80070c6:	e024      	b.n	8007112 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d008      	beq.n	80070e0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80070ce:	4b13      	ldr	r3, [pc, #76]	; (800711c <prvProcessTimerOrBlockTask+0x90>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <prvProcessTimerOrBlockTask+0x50>
 80070d8:	2301      	movs	r3, #1
 80070da:	e000      	b.n	80070de <prvProcessTimerOrBlockTask+0x52>
 80070dc:	2300      	movs	r3, #0
 80070de:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80070e0:	4b0f      	ldr	r3, [pc, #60]	; (8007120 <prvProcessTimerOrBlockTask+0x94>)
 80070e2:	6818      	ldr	r0, [r3, #0]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	4619      	mov	r1, r3
 80070ee:	f7fe ffb9 	bl	8006064 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80070f2:	f7ff fa43 	bl	800657c <xTaskResumeAll>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80070fc:	4b09      	ldr	r3, [pc, #36]	; (8007124 <prvProcessTimerOrBlockTask+0x98>)
 80070fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	f3bf 8f6f 	isb	sy
    }
 800710c:	e001      	b.n	8007112 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800710e:	f7ff fa35 	bl	800657c <xTaskResumeAll>
    }
 8007112:	bf00      	nop
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	2000033c 	.word	0x2000033c
 8007120:	20000340 	.word	0x20000340
 8007124:	e000ed04 	.word	0xe000ed04

08007128 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007130:	4b0e      	ldr	r3, [pc, #56]	; (800716c <prvGetNextExpireTime+0x44>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d101      	bne.n	800713e <prvGetNextExpireTime+0x16>
 800713a:	2201      	movs	r2, #1
 800713c:	e000      	b.n	8007140 <prvGetNextExpireTime+0x18>
 800713e:	2200      	movs	r2, #0
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d105      	bne.n	8007158 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800714c:	4b07      	ldr	r3, [pc, #28]	; (800716c <prvGetNextExpireTime+0x44>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	60fb      	str	r3, [r7, #12]
 8007156:	e001      	b.n	800715c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800715c:	68fb      	ldr	r3, [r7, #12]
    }
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	20000338 	.word	0x20000338

08007170 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007178:	f7ff fa9c 	bl	80066b4 <xTaskGetTickCount>
 800717c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800717e:	4b0b      	ldr	r3, [pc, #44]	; (80071ac <prvSampleTimeNow+0x3c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	429a      	cmp	r2, r3
 8007186:	d205      	bcs.n	8007194 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007188:	f000 f91a 	bl	80073c0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	e002      	b.n	800719a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800719a:	4a04      	ldr	r2, [pc, #16]	; (80071ac <prvSampleTimeNow+0x3c>)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80071a0:	68fb      	ldr	r3, [r7, #12]
    }
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	20000348 	.word	0x20000348

080071b0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
 80071bc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80071be:	2300      	movs	r3, #0
 80071c0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d812      	bhi.n	80071fc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	1ad2      	subs	r2, r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d302      	bcc.n	80071ea <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80071e4:	2301      	movs	r3, #1
 80071e6:	617b      	str	r3, [r7, #20]
 80071e8:	e01b      	b.n	8007222 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80071ea:	4b10      	ldr	r3, [pc, #64]	; (800722c <prvInsertTimerInActiveList+0x7c>)
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	3304      	adds	r3, #4
 80071f2:	4619      	mov	r1, r3
 80071f4:	4610      	mov	r0, r2
 80071f6:	f7fe fa26 	bl	8005646 <vListInsert>
 80071fa:	e012      	b.n	8007222 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	429a      	cmp	r2, r3
 8007202:	d206      	bcs.n	8007212 <prvInsertTimerInActiveList+0x62>
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	429a      	cmp	r2, r3
 800720a:	d302      	bcc.n	8007212 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800720c:	2301      	movs	r3, #1
 800720e:	617b      	str	r3, [r7, #20]
 8007210:	e007      	b.n	8007222 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007212:	4b07      	ldr	r3, [pc, #28]	; (8007230 <prvInsertTimerInActiveList+0x80>)
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	3304      	adds	r3, #4
 800721a:	4619      	mov	r1, r3
 800721c:	4610      	mov	r0, r2
 800721e:	f7fe fa12 	bl	8005646 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007222:	697b      	ldr	r3, [r7, #20]
    }
 8007224:	4618      	mov	r0, r3
 8007226:	3718      	adds	r7, #24
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	2000033c 	.word	0x2000033c
 8007230:	20000338 	.word	0x20000338

08007234 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007234:	b580      	push	{r7, lr}
 8007236:	b08c      	sub	sp, #48	; 0x30
 8007238:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800723a:	e0ae      	b.n	800739a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	2b00      	cmp	r3, #0
 8007240:	f2c0 80aa 	blt.w	8007398 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d004      	beq.n	800725a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	3304      	adds	r3, #4
 8007254:	4618      	mov	r0, r3
 8007256:	f7fe fa2f 	bl	80056b8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800725a:	1d3b      	adds	r3, r7, #4
 800725c:	4618      	mov	r0, r3
 800725e:	f7ff ff87 	bl	8007170 <prvSampleTimeNow>
 8007262:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	2b09      	cmp	r3, #9
 8007268:	f200 8097 	bhi.w	800739a <prvProcessReceivedCommands+0x166>
 800726c:	a201      	add	r2, pc, #4	; (adr r2, 8007274 <prvProcessReceivedCommands+0x40>)
 800726e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007272:	bf00      	nop
 8007274:	0800729d 	.word	0x0800729d
 8007278:	0800729d 	.word	0x0800729d
 800727c:	0800729d 	.word	0x0800729d
 8007280:	08007311 	.word	0x08007311
 8007284:	08007325 	.word	0x08007325
 8007288:	0800736f 	.word	0x0800736f
 800728c:	0800729d 	.word	0x0800729d
 8007290:	0800729d 	.word	0x0800729d
 8007294:	08007311 	.word	0x08007311
 8007298:	08007325 	.word	0x08007325
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072a2:	f043 0301 	orr.w	r3, r3, #1
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	18d1      	adds	r1, r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6a3a      	ldr	r2, [r7, #32]
 80072ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072bc:	f7ff ff78 	bl	80071b0 <prvInsertTimerInActiveList>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d069      	beq.n	800739a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072cc:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072d4:	f003 0304 	and.w	r3, r3, #4
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d05e      	beq.n	800739a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	441a      	add	r2, r3
 80072e4:	2300      	movs	r3, #0
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	2300      	movs	r3, #0
 80072ea:	2100      	movs	r1, #0
 80072ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072ee:	f7ff fe21 	bl	8006f34 <xTimerGenericCommand>
 80072f2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d14f      	bne.n	800739a <prvProcessReceivedCommands+0x166>
        __asm volatile
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	61bb      	str	r3, [r7, #24]
    }
 800730c:	bf00      	nop
 800730e:	e7fe      	b.n	800730e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007316:	f023 0301 	bic.w	r3, r3, #1
 800731a:	b2da      	uxtb	r2, r3
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007322:	e03a      	b.n	800739a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800732a:	f043 0301 	orr.w	r3, r3, #1
 800732e:	b2da      	uxtb	r2, r3
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10a      	bne.n	800735a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	617b      	str	r3, [r7, #20]
    }
 8007356:	bf00      	nop
 8007358:	e7fe      	b.n	8007358 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	699a      	ldr	r2, [r3, #24]
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	18d1      	adds	r1, r2, r3
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	6a3a      	ldr	r2, [r7, #32]
 8007366:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007368:	f7ff ff22 	bl	80071b0 <prvInsertTimerInActiveList>
                        break;
 800736c:	e015      	b.n	800739a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d103      	bne.n	8007384 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800737c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800737e:	f000 fc33 	bl	8007be8 <vPortFree>
 8007382:	e00a      	b.n	800739a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800738a:	f023 0301 	bic.w	r3, r3, #1
 800738e:	b2da      	uxtb	r2, r3
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007396:	e000      	b.n	800739a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007398:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800739a:	4b08      	ldr	r3, [pc, #32]	; (80073bc <prvProcessReceivedCommands+0x188>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f107 0108 	add.w	r1, r7, #8
 80073a2:	2200      	movs	r2, #0
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7fe fc43 	bl	8005c30 <xQueueReceive>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f47f af45 	bne.w	800723c <prvProcessReceivedCommands+0x8>
        }
    }
 80073b2:	bf00      	nop
 80073b4:	bf00      	nop
 80073b6:	3728      	adds	r7, #40	; 0x28
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	20000340 	.word	0x20000340

080073c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b088      	sub	sp, #32
 80073c4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073c6:	e048      	b.n	800745a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073c8:	4b2d      	ldr	r3, [pc, #180]	; (8007480 <prvSwitchTimerLists+0xc0>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073d2:	4b2b      	ldr	r3, [pc, #172]	; (8007480 <prvSwitchTimerLists+0xc0>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	3304      	adds	r3, #4
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7fe f969 	bl	80056b8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d02e      	beq.n	800745a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	4413      	add	r3, r2
 8007404:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	429a      	cmp	r2, r3
 800740c:	d90e      	bls.n	800742c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800741a:	4b19      	ldr	r3, [pc, #100]	; (8007480 <prvSwitchTimerLists+0xc0>)
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3304      	adds	r3, #4
 8007422:	4619      	mov	r1, r3
 8007424:	4610      	mov	r0, r2
 8007426:	f7fe f90e 	bl	8005646 <vListInsert>
 800742a:	e016      	b.n	800745a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800742c:	2300      	movs	r3, #0
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	2300      	movs	r3, #0
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	2100      	movs	r1, #0
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f7ff fd7c 	bl	8006f34 <xTimerGenericCommand>
 800743c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10a      	bne.n	800745a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	603b      	str	r3, [r7, #0]
    }
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800745a:	4b09      	ldr	r3, [pc, #36]	; (8007480 <prvSwitchTimerLists+0xc0>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1b1      	bne.n	80073c8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8007464:	4b06      	ldr	r3, [pc, #24]	; (8007480 <prvSwitchTimerLists+0xc0>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800746a:	4b06      	ldr	r3, [pc, #24]	; (8007484 <prvSwitchTimerLists+0xc4>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a04      	ldr	r2, [pc, #16]	; (8007480 <prvSwitchTimerLists+0xc0>)
 8007470:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007472:	4a04      	ldr	r2, [pc, #16]	; (8007484 <prvSwitchTimerLists+0xc4>)
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	6013      	str	r3, [r2, #0]
    }
 8007478:	bf00      	nop
 800747a:	3718      	adds	r7, #24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	20000338 	.word	0x20000338
 8007484:	2000033c 	.word	0x2000033c

08007488 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007488:	b580      	push	{r7, lr}
 800748a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800748c:	f000 f964 	bl	8007758 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007490:	4b12      	ldr	r3, [pc, #72]	; (80074dc <prvCheckForValidListAndQueue+0x54>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d11d      	bne.n	80074d4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007498:	4811      	ldr	r0, [pc, #68]	; (80074e0 <prvCheckForValidListAndQueue+0x58>)
 800749a:	f7fe f883 	bl	80055a4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800749e:	4811      	ldr	r0, [pc, #68]	; (80074e4 <prvCheckForValidListAndQueue+0x5c>)
 80074a0:	f7fe f880 	bl	80055a4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80074a4:	4b10      	ldr	r3, [pc, #64]	; (80074e8 <prvCheckForValidListAndQueue+0x60>)
 80074a6:	4a0e      	ldr	r2, [pc, #56]	; (80074e0 <prvCheckForValidListAndQueue+0x58>)
 80074a8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80074aa:	4b10      	ldr	r3, [pc, #64]	; (80074ec <prvCheckForValidListAndQueue+0x64>)
 80074ac:	4a0d      	ldr	r2, [pc, #52]	; (80074e4 <prvCheckForValidListAndQueue+0x5c>)
 80074ae:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80074b0:	2200      	movs	r2, #0
 80074b2:	210c      	movs	r1, #12
 80074b4:	200a      	movs	r0, #10
 80074b6:	f7fe f991 	bl	80057dc <xQueueGenericCreate>
 80074ba:	4603      	mov	r3, r0
 80074bc:	4a07      	ldr	r2, [pc, #28]	; (80074dc <prvCheckForValidListAndQueue+0x54>)
 80074be:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80074c0:	4b06      	ldr	r3, [pc, #24]	; (80074dc <prvCheckForValidListAndQueue+0x54>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d005      	beq.n	80074d4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80074c8:	4b04      	ldr	r3, [pc, #16]	; (80074dc <prvCheckForValidListAndQueue+0x54>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4908      	ldr	r1, [pc, #32]	; (80074f0 <prvCheckForValidListAndQueue+0x68>)
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fe fd9e 	bl	8006010 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80074d4:	f000 f970 	bl	80077b8 <vPortExitCritical>
    }
 80074d8:	bf00      	nop
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	20000340 	.word	0x20000340
 80074e0:	20000310 	.word	0x20000310
 80074e4:	20000324 	.word	0x20000324
 80074e8:	20000338 	.word	0x20000338
 80074ec:	2000033c 	.word	0x2000033c
 80074f0:	08009218 	.word	0x08009218

080074f4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	3b04      	subs	r3, #4
 8007504:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800750c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3b04      	subs	r3, #4
 8007512:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f023 0201 	bic.w	r2, r3, #1
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3b04      	subs	r3, #4
 8007522:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007524:	4a0c      	ldr	r2, [pc, #48]	; (8007558 <pxPortInitialiseStack+0x64>)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	3b14      	subs	r3, #20
 800752e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	3b04      	subs	r3, #4
 800753a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f06f 0202 	mvn.w	r2, #2
 8007542:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	3b20      	subs	r3, #32
 8007548:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800754a:	68fb      	ldr	r3, [r7, #12]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	0800755d 	.word	0x0800755d

0800755c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007562:	2300      	movs	r3, #0
 8007564:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007566:	4b12      	ldr	r3, [pc, #72]	; (80075b0 <prvTaskExitError+0x54>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756e:	d00a      	beq.n	8007586 <prvTaskExitError+0x2a>
        __asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	60fb      	str	r3, [r7, #12]
    }
 8007582:	bf00      	nop
 8007584:	e7fe      	b.n	8007584 <prvTaskExitError+0x28>
        __asm volatile
 8007586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	60bb      	str	r3, [r7, #8]
    }
 8007598:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800759a:	bf00      	nop
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0fc      	beq.n	800759c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80075a2:	bf00      	nop
 80075a4:	bf00      	nop
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	20000014 	.word	0x20000014
	...

080075c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80075c0:	4b07      	ldr	r3, [pc, #28]	; (80075e0 <pxCurrentTCBConst2>)
 80075c2:	6819      	ldr	r1, [r3, #0]
 80075c4:	6808      	ldr	r0, [r1, #0]
 80075c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ca:	f380 8809 	msr	PSP, r0
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f04f 0000 	mov.w	r0, #0
 80075d6:	f380 8811 	msr	BASEPRI, r0
 80075da:	4770      	bx	lr
 80075dc:	f3af 8000 	nop.w

080075e0 <pxCurrentTCBConst2>:
 80075e0:	2000020c 	.word	0x2000020c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop

080075e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80075e8:	4808      	ldr	r0, [pc, #32]	; (800760c <prvPortStartFirstTask+0x24>)
 80075ea:	6800      	ldr	r0, [r0, #0]
 80075ec:	6800      	ldr	r0, [r0, #0]
 80075ee:	f380 8808 	msr	MSP, r0
 80075f2:	f04f 0000 	mov.w	r0, #0
 80075f6:	f380 8814 	msr	CONTROL, r0
 80075fa:	b662      	cpsie	i
 80075fc:	b661      	cpsie	f
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	df00      	svc	0
 8007608:	bf00      	nop
 800760a:	0000      	.short	0x0000
 800760c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop

08007614 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800761a:	4b46      	ldr	r3, [pc, #280]	; (8007734 <xPortStartScheduler+0x120>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a46      	ldr	r2, [pc, #280]	; (8007738 <xPortStartScheduler+0x124>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d10a      	bne.n	800763a <xPortStartScheduler+0x26>
        __asm volatile
 8007624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	613b      	str	r3, [r7, #16]
    }
 8007636:	bf00      	nop
 8007638:	e7fe      	b.n	8007638 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800763a:	4b3e      	ldr	r3, [pc, #248]	; (8007734 <xPortStartScheduler+0x120>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a3f      	ldr	r2, [pc, #252]	; (800773c <xPortStartScheduler+0x128>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d10a      	bne.n	800765a <xPortStartScheduler+0x46>
        __asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	60fb      	str	r3, [r7, #12]
    }
 8007656:	bf00      	nop
 8007658:	e7fe      	b.n	8007658 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800765a:	4b39      	ldr	r3, [pc, #228]	; (8007740 <xPortStartScheduler+0x12c>)
 800765c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	b2db      	uxtb	r3, r3
 8007664:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	22ff      	movs	r2, #255	; 0xff
 800766a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	b2db      	uxtb	r3, r3
 8007672:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007674:	78fb      	ldrb	r3, [r7, #3]
 8007676:	b2db      	uxtb	r3, r3
 8007678:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800767c:	b2da      	uxtb	r2, r3
 800767e:	4b31      	ldr	r3, [pc, #196]	; (8007744 <xPortStartScheduler+0x130>)
 8007680:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007682:	4b31      	ldr	r3, [pc, #196]	; (8007748 <xPortStartScheduler+0x134>)
 8007684:	2207      	movs	r2, #7
 8007686:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007688:	e009      	b.n	800769e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800768a:	4b2f      	ldr	r3, [pc, #188]	; (8007748 <xPortStartScheduler+0x134>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3b01      	subs	r3, #1
 8007690:	4a2d      	ldr	r2, [pc, #180]	; (8007748 <xPortStartScheduler+0x134>)
 8007692:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007694:	78fb      	ldrb	r3, [r7, #3]
 8007696:	b2db      	uxtb	r3, r3
 8007698:	005b      	lsls	r3, r3, #1
 800769a:	b2db      	uxtb	r3, r3
 800769c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800769e:	78fb      	ldrb	r3, [r7, #3]
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a6:	2b80      	cmp	r3, #128	; 0x80
 80076a8:	d0ef      	beq.n	800768a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076aa:	4b27      	ldr	r3, [pc, #156]	; (8007748 <xPortStartScheduler+0x134>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f1c3 0307 	rsb	r3, r3, #7
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d00a      	beq.n	80076cc <xPortStartScheduler+0xb8>
        __asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	60bb      	str	r3, [r7, #8]
    }
 80076c8:	bf00      	nop
 80076ca:	e7fe      	b.n	80076ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076cc:	4b1e      	ldr	r3, [pc, #120]	; (8007748 <xPortStartScheduler+0x134>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	021b      	lsls	r3, r3, #8
 80076d2:	4a1d      	ldr	r2, [pc, #116]	; (8007748 <xPortStartScheduler+0x134>)
 80076d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076d6:	4b1c      	ldr	r3, [pc, #112]	; (8007748 <xPortStartScheduler+0x134>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076de:	4a1a      	ldr	r2, [pc, #104]	; (8007748 <xPortStartScheduler+0x134>)
 80076e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80076ea:	4b18      	ldr	r3, [pc, #96]	; (800774c <xPortStartScheduler+0x138>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a17      	ldr	r2, [pc, #92]	; (800774c <xPortStartScheduler+0x138>)
 80076f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80076f6:	4b15      	ldr	r3, [pc, #84]	; (800774c <xPortStartScheduler+0x138>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a14      	ldr	r2, [pc, #80]	; (800774c <xPortStartScheduler+0x138>)
 80076fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007700:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007702:	f000 f8db 	bl	80078bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007706:	4b12      	ldr	r3, [pc, #72]	; (8007750 <xPortStartScheduler+0x13c>)
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800770c:	f000 f8fa 	bl	8007904 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007710:	4b10      	ldr	r3, [pc, #64]	; (8007754 <xPortStartScheduler+0x140>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a0f      	ldr	r2, [pc, #60]	; (8007754 <xPortStartScheduler+0x140>)
 8007716:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800771a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800771c:	f7ff ff64 	bl	80075e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007720:	f7ff f890 	bl	8006844 <vTaskSwitchContext>
    prvTaskExitError();
 8007724:	f7ff ff1a 	bl	800755c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3718      	adds	r7, #24
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	e000ed00 	.word	0xe000ed00
 8007738:	410fc271 	.word	0x410fc271
 800773c:	410fc270 	.word	0x410fc270
 8007740:	e000e400 	.word	0xe000e400
 8007744:	2000034c 	.word	0x2000034c
 8007748:	20000350 	.word	0x20000350
 800774c:	e000ed20 	.word	0xe000ed20
 8007750:	20000014 	.word	0x20000014
 8007754:	e000ef34 	.word	0xe000ef34

08007758 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
        __asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	607b      	str	r3, [r7, #4]
    }
 8007770:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007772:	4b0f      	ldr	r3, [pc, #60]	; (80077b0 <vPortEnterCritical+0x58>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3301      	adds	r3, #1
 8007778:	4a0d      	ldr	r2, [pc, #52]	; (80077b0 <vPortEnterCritical+0x58>)
 800777a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800777c:	4b0c      	ldr	r3, [pc, #48]	; (80077b0 <vPortEnterCritical+0x58>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d10f      	bne.n	80077a4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007784:	4b0b      	ldr	r3, [pc, #44]	; (80077b4 <vPortEnterCritical+0x5c>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <vPortEnterCritical+0x4c>
        __asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	603b      	str	r3, [r7, #0]
    }
 80077a0:	bf00      	nop
 80077a2:	e7fe      	b.n	80077a2 <vPortEnterCritical+0x4a>
    }
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	20000014 	.word	0x20000014
 80077b4:	e000ed04 	.word	0xe000ed04

080077b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80077be:	4b12      	ldr	r3, [pc, #72]	; (8007808 <vPortExitCritical+0x50>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10a      	bne.n	80077dc <vPortExitCritical+0x24>
        __asm volatile
 80077c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	607b      	str	r3, [r7, #4]
    }
 80077d8:	bf00      	nop
 80077da:	e7fe      	b.n	80077da <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80077dc:	4b0a      	ldr	r3, [pc, #40]	; (8007808 <vPortExitCritical+0x50>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3b01      	subs	r3, #1
 80077e2:	4a09      	ldr	r2, [pc, #36]	; (8007808 <vPortExitCritical+0x50>)
 80077e4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80077e6:	4b08      	ldr	r3, [pc, #32]	; (8007808 <vPortExitCritical+0x50>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d105      	bne.n	80077fa <vPortExitCritical+0x42>
 80077ee:	2300      	movs	r3, #0
 80077f0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	f383 8811 	msr	BASEPRI, r3
    }
 80077f8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80077fa:	bf00      	nop
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	20000014 	.word	0x20000014
 800780c:	00000000 	.word	0x00000000

08007810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007810:	f3ef 8009 	mrs	r0, PSP
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	4b15      	ldr	r3, [pc, #84]	; (8007870 <pxCurrentTCBConst>)
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	f01e 0f10 	tst.w	lr, #16
 8007820:	bf08      	it	eq
 8007822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782a:	6010      	str	r0, [r2, #0]
 800782c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007830:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007834:	f380 8811 	msr	BASEPRI, r0
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f7ff f800 	bl	8006844 <vTaskSwitchContext>
 8007844:	f04f 0000 	mov.w	r0, #0
 8007848:	f380 8811 	msr	BASEPRI, r0
 800784c:	bc09      	pop	{r0, r3}
 800784e:	6819      	ldr	r1, [r3, #0]
 8007850:	6808      	ldr	r0, [r1, #0]
 8007852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007856:	f01e 0f10 	tst.w	lr, #16
 800785a:	bf08      	it	eq
 800785c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007860:	f380 8809 	msr	PSP, r0
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	f3af 8000 	nop.w

08007870 <pxCurrentTCBConst>:
 8007870:	2000020c 	.word	0x2000020c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop

08007878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
        __asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	607b      	str	r3, [r7, #4]
    }
 8007890:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007892:	f7fe ff1f 	bl	80066d4 <xTaskIncrementTick>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d003      	beq.n	80078a4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800789c:	4b06      	ldr	r3, [pc, #24]	; (80078b8 <SysTick_Handler+0x40>)
 800789e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	2300      	movs	r3, #0
 80078a6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	f383 8811 	msr	BASEPRI, r3
    }
 80078ae:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80078b0:	bf00      	nop
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	e000ed04 	.word	0xe000ed04

080078bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80078bc:	b480      	push	{r7}
 80078be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078c0:	4b0b      	ldr	r3, [pc, #44]	; (80078f0 <vPortSetupTimerInterrupt+0x34>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078c6:	4b0b      	ldr	r3, [pc, #44]	; (80078f4 <vPortSetupTimerInterrupt+0x38>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078cc:	4b0a      	ldr	r3, [pc, #40]	; (80078f8 <vPortSetupTimerInterrupt+0x3c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a0a      	ldr	r2, [pc, #40]	; (80078fc <vPortSetupTimerInterrupt+0x40>)
 80078d2:	fba2 2303 	umull	r2, r3, r2, r3
 80078d6:	099b      	lsrs	r3, r3, #6
 80078d8:	4a09      	ldr	r2, [pc, #36]	; (8007900 <vPortSetupTimerInterrupt+0x44>)
 80078da:	3b01      	subs	r3, #1
 80078dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80078de:	4b04      	ldr	r3, [pc, #16]	; (80078f0 <vPortSetupTimerInterrupt+0x34>)
 80078e0:	2207      	movs	r2, #7
 80078e2:	601a      	str	r2, [r3, #0]
}
 80078e4:	bf00      	nop
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	e000e010 	.word	0xe000e010
 80078f4:	e000e018 	.word	0xe000e018
 80078f8:	20000004 	.word	0x20000004
 80078fc:	10624dd3 	.word	0x10624dd3
 8007900:	e000e014 	.word	0xe000e014

08007904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007914 <vPortEnableVFP+0x10>
 8007908:	6801      	ldr	r1, [r0, #0]
 800790a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800790e:	6001      	str	r1, [r0, #0]
 8007910:	4770      	bx	lr
 8007912:	0000      	.short	0x0000
 8007914:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007918:	bf00      	nop
 800791a:	bf00      	nop

0800791c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
    	vSetVarulMaxPRIGROUPValue();
 8007922:	f000 f83b 	bl	800799c <vSetVarulMaxPRIGROUPValue>
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007926:	f3ef 8305 	mrs	r3, IPSR
 800792a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b0f      	cmp	r3, #15
 8007930:	d914      	bls.n	800795c <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007932:	4a16      	ldr	r2, [pc, #88]	; (800798c <vPortValidateInterruptPriority+0x70>)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4413      	add	r3, r2
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800793c:	4b14      	ldr	r3, [pc, #80]	; (8007990 <vPortValidateInterruptPriority+0x74>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	7afa      	ldrb	r2, [r7, #11]
 8007942:	429a      	cmp	r2, r3
 8007944:	d20a      	bcs.n	800795c <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8007946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794a:	f383 8811 	msr	BASEPRI, r3
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	607b      	str	r3, [r7, #4]
    }
 8007958:	bf00      	nop
 800795a:	e7fe      	b.n	800795a <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800795c:	4b0d      	ldr	r3, [pc, #52]	; (8007994 <vPortValidateInterruptPriority+0x78>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007964:	4b0c      	ldr	r3, [pc, #48]	; (8007998 <vPortValidateInterruptPriority+0x7c>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	429a      	cmp	r2, r3
 800796a:	d90a      	bls.n	8007982 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	603b      	str	r3, [r7, #0]
    }
 800797e:	bf00      	nop
 8007980:	e7fe      	b.n	8007980 <vPortValidateInterruptPriority+0x64>
    }
 8007982:	bf00      	nop
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	e000e3f0 	.word	0xe000e3f0
 8007990:	2000034c 	.word	0x2000034c
 8007994:	e000ed0c 	.word	0xe000ed0c
 8007998:	20000350 	.word	0x20000350

0800799c <vSetVarulMaxPRIGROUPValue>:

    //###########################################################
    // Add function below in file port.c
    #if( configASSERT_DEFINED == 1 )
    void vSetVarulMaxPRIGROUPValue( void )
    {
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
    	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079a2:	4b1f      	ldr	r3, [pc, #124]	; (8007a20 <vSetVarulMaxPRIGROUPValue+0x84>)
 80079a4:	60fb      	str	r3, [r7, #12]
    	volatile uint8_t ucMaxPriorityValue;
    	/* Determine the number of priority bits available.  First write to all
    	possible bits. */
    	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	22ff      	movs	r2, #255	; 0xff
 80079aa:	701a      	strb	r2, [r3, #0]
    	/* Read the value back to see how many bits stuck. */
    	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	71fb      	strb	r3, [r7, #7]
    	/* Calculate the maximum acceptable priority group value for the number
    	of bits read back. */
    	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079b4:	4b1b      	ldr	r3, [pc, #108]	; (8007a24 <vSetVarulMaxPRIGROUPValue+0x88>)
 80079b6:	2207      	movs	r2, #7
 80079b8:	601a      	str	r2, [r3, #0]
    	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ba:	e009      	b.n	80079d0 <vSetVarulMaxPRIGROUPValue+0x34>
    	{
    		ulMaxPRIGROUPValue--;
 80079bc:	4b19      	ldr	r3, [pc, #100]	; (8007a24 <vSetVarulMaxPRIGROUPValue+0x88>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	4a18      	ldr	r2, [pc, #96]	; (8007a24 <vSetVarulMaxPRIGROUPValue+0x88>)
 80079c4:	6013      	str	r3, [r2, #0]
    		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	71fb      	strb	r3, [r7, #7]
    	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079d0:	79fb      	ldrb	r3, [r7, #7]
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d8:	2b80      	cmp	r3, #128	; 0x80
 80079da:	d0ef      	beq.n	80079bc <vSetVarulMaxPRIGROUPValue+0x20>
    #ifdef configPRIO_BITS
    	{
    		/* Check the FreeRTOS configuration that defines the number of
    		priority bits matches the number of priority bits actually queried
    		from the hardware. */
    		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079dc:	4b11      	ldr	r3, [pc, #68]	; (8007a24 <vSetVarulMaxPRIGROUPValue+0x88>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f1c3 0307 	rsb	r3, r3, #7
 80079e4:	2b04      	cmp	r3, #4
 80079e6:	d00a      	beq.n	80079fe <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 80079e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	60bb      	str	r3, [r7, #8]
    }
 80079fa:	bf00      	nop
 80079fc:	e7fe      	b.n	80079fc <vSetVarulMaxPRIGROUPValue+0x60>
    	}
    #endif
    	/* Shift the priority group value back to its position within the AIRCR
    	register. */
    	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079fe:	4b09      	ldr	r3, [pc, #36]	; (8007a24 <vSetVarulMaxPRIGROUPValue+0x88>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	021b      	lsls	r3, r3, #8
 8007a04:	4a07      	ldr	r2, [pc, #28]	; (8007a24 <vSetVarulMaxPRIGROUPValue+0x88>)
 8007a06:	6013      	str	r3, [r2, #0]
    	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a08:	4b06      	ldr	r3, [pc, #24]	; (8007a24 <vSetVarulMaxPRIGROUPValue+0x88>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a10:	4a04      	ldr	r2, [pc, #16]	; (8007a24 <vSetVarulMaxPRIGROUPValue+0x88>)
 8007a12:	6013      	str	r3, [r2, #0]
    }
 8007a14:	bf00      	nop
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr
 8007a20:	e000e400 	.word	0xe000e400
 8007a24:	20000350 	.word	0x20000350

08007a28 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08a      	sub	sp, #40	; 0x28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007a30:	2300      	movs	r3, #0
 8007a32:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007a34:	f7fe fd94 	bl	8006560 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007a38:	4b65      	ldr	r3, [pc, #404]	; (8007bd0 <pvPortMalloc+0x1a8>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007a40:	f000 f934 	bl	8007cac <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a44:	4b63      	ldr	r3, [pc, #396]	; (8007bd4 <pvPortMalloc+0x1ac>)
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f040 80a7 	bne.w	8007ba0 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d02d      	beq.n	8007ab4 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8007a58:	2208      	movs	r2, #8
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d227      	bcs.n	8007ab4 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8007a64:	2208      	movs	r2, #8
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4413      	add	r3, r2
 8007a6a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f003 0307 	and.w	r3, r3, #7
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d021      	beq.n	8007aba <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f023 0307 	bic.w	r3, r3, #7
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d214      	bcs.n	8007aae <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f023 0307 	bic.w	r3, r3, #7
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f003 0307 	and.w	r3, r3, #7
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d010      	beq.n	8007aba <pvPortMalloc+0x92>
        __asm volatile
 8007a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9c:	f383 8811 	msr	BASEPRI, r3
 8007aa0:	f3bf 8f6f 	isb	sy
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	617b      	str	r3, [r7, #20]
    }
 8007aaa:	bf00      	nop
 8007aac:	e7fe      	b.n	8007aac <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ab2:	e002      	b.n	8007aba <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	607b      	str	r3, [r7, #4]
 8007ab8:	e000      	b.n	8007abc <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007aba:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d06e      	beq.n	8007ba0 <pvPortMalloc+0x178>
 8007ac2:	4b45      	ldr	r3, [pc, #276]	; (8007bd8 <pvPortMalloc+0x1b0>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d869      	bhi.n	8007ba0 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007acc:	4b43      	ldr	r3, [pc, #268]	; (8007bdc <pvPortMalloc+0x1b4>)
 8007ace:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007ad0:	4b42      	ldr	r3, [pc, #264]	; (8007bdc <pvPortMalloc+0x1b4>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ad6:	e004      	b.n	8007ae2 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d903      	bls.n	8007af4 <pvPortMalloc+0xcc>
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1f1      	bne.n	8007ad8 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007af4:	4b36      	ldr	r3, [pc, #216]	; (8007bd0 <pvPortMalloc+0x1a8>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d050      	beq.n	8007ba0 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2208      	movs	r2, #8
 8007b04:	4413      	add	r3, r2
 8007b06:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	1ad2      	subs	r2, r2, r3
 8007b18:	2308      	movs	r3, #8
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d91f      	bls.n	8007b60 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4413      	add	r3, r2
 8007b26:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	f003 0307 	and.w	r3, r3, #7
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00a      	beq.n	8007b48 <pvPortMalloc+0x120>
        __asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	613b      	str	r3, [r7, #16]
    }
 8007b44:	bf00      	nop
 8007b46:	e7fe      	b.n	8007b46 <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	1ad2      	subs	r2, r2, r3
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b5a:	69b8      	ldr	r0, [r7, #24]
 8007b5c:	f000 f908 	bl	8007d70 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b60:	4b1d      	ldr	r3, [pc, #116]	; (8007bd8 <pvPortMalloc+0x1b0>)
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	4a1b      	ldr	r2, [pc, #108]	; (8007bd8 <pvPortMalloc+0x1b0>)
 8007b6c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b6e:	4b1a      	ldr	r3, [pc, #104]	; (8007bd8 <pvPortMalloc+0x1b0>)
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	4b1b      	ldr	r3, [pc, #108]	; (8007be0 <pvPortMalloc+0x1b8>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d203      	bcs.n	8007b82 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b7a:	4b17      	ldr	r3, [pc, #92]	; (8007bd8 <pvPortMalloc+0x1b0>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a18      	ldr	r2, [pc, #96]	; (8007be0 <pvPortMalloc+0x1b8>)
 8007b80:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	4b13      	ldr	r3, [pc, #76]	; (8007bd4 <pvPortMalloc+0x1ac>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	2200      	movs	r2, #0
 8007b94:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007b96:	4b13      	ldr	r3, [pc, #76]	; (8007be4 <pvPortMalloc+0x1bc>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	4a11      	ldr	r2, [pc, #68]	; (8007be4 <pvPortMalloc+0x1bc>)
 8007b9e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007ba0:	f7fe fcec 	bl	800657c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00a      	beq.n	8007bc4 <pvPortMalloc+0x19c>
        __asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	60fb      	str	r3, [r7, #12]
    }
 8007bc0:	bf00      	nop
 8007bc2:	e7fe      	b.n	8007bc2 <pvPortMalloc+0x19a>
    return pvReturn;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3728      	adds	r7, #40	; 0x28
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20003f5c 	.word	0x20003f5c
 8007bd4:	20003f70 	.word	0x20003f70
 8007bd8:	20003f60 	.word	0x20003f60
 8007bdc:	20003f54 	.word	0x20003f54
 8007be0:	20003f64 	.word	0x20003f64
 8007be4:	20003f68 	.word	0x20003f68

08007be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d04d      	beq.n	8007c96 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007bfa:	2308      	movs	r3, #8
 8007bfc:	425b      	negs	r3, r3
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	4413      	add	r3, r2
 8007c02:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	4b24      	ldr	r3, [pc, #144]	; (8007ca0 <vPortFree+0xb8>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4013      	ands	r3, r2
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10a      	bne.n	8007c2c <vPortFree+0x44>
        __asm volatile
 8007c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1a:	f383 8811 	msr	BASEPRI, r3
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	60fb      	str	r3, [r7, #12]
    }
 8007c28:	bf00      	nop
 8007c2a:	e7fe      	b.n	8007c2a <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00a      	beq.n	8007c4a <vPortFree+0x62>
        __asm volatile
 8007c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	60bb      	str	r3, [r7, #8]
    }
 8007c46:	bf00      	nop
 8007c48:	e7fe      	b.n	8007c48 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	4b14      	ldr	r3, [pc, #80]	; (8007ca0 <vPortFree+0xb8>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4013      	ands	r3, r2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d01e      	beq.n	8007c96 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d11a      	bne.n	8007c96 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	4b0e      	ldr	r3, [pc, #56]	; (8007ca0 <vPortFree+0xb8>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	43db      	mvns	r3, r3
 8007c6a:	401a      	ands	r2, r3
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007c70:	f7fe fc76 	bl	8006560 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	4b0a      	ldr	r3, [pc, #40]	; (8007ca4 <vPortFree+0xbc>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	4a09      	ldr	r2, [pc, #36]	; (8007ca4 <vPortFree+0xbc>)
 8007c80:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c82:	6938      	ldr	r0, [r7, #16]
 8007c84:	f000 f874 	bl	8007d70 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007c88:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <vPortFree+0xc0>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	4a06      	ldr	r2, [pc, #24]	; (8007ca8 <vPortFree+0xc0>)
 8007c90:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007c92:	f7fe fc73 	bl	800657c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007c96:	bf00      	nop
 8007c98:	3718      	adds	r7, #24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20003f70 	.word	0x20003f70
 8007ca4:	20003f60 	.word	0x20003f60
 8007ca8:	20003f6c 	.word	0x20003f6c

08007cac <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007cb2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007cb6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007cb8:	4b27      	ldr	r3, [pc, #156]	; (8007d58 <prvHeapInit+0xac>)
 8007cba:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f003 0307 	and.w	r3, r3, #7
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00c      	beq.n	8007ce0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	3307      	adds	r3, #7
 8007cca:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f023 0307 	bic.w	r3, r3, #7
 8007cd2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	4a1f      	ldr	r2, [pc, #124]	; (8007d58 <prvHeapInit+0xac>)
 8007cdc:	4413      	add	r3, r2
 8007cde:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ce4:	4a1d      	ldr	r2, [pc, #116]	; (8007d5c <prvHeapInit+0xb0>)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007cea:	4b1c      	ldr	r3, [pc, #112]	; (8007d5c <prvHeapInit+0xb0>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007cf8:	2208      	movs	r2, #8
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	1a9b      	subs	r3, r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f023 0307 	bic.w	r3, r3, #7
 8007d06:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4a15      	ldr	r2, [pc, #84]	; (8007d60 <prvHeapInit+0xb4>)
 8007d0c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007d0e:	4b14      	ldr	r3, [pc, #80]	; (8007d60 <prvHeapInit+0xb4>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2200      	movs	r2, #0
 8007d14:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007d16:	4b12      	ldr	r3, [pc, #72]	; (8007d60 <prvHeapInit+0xb4>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	1ad2      	subs	r2, r2, r3
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d2c:	4b0c      	ldr	r3, [pc, #48]	; (8007d60 <prvHeapInit+0xb4>)
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	4a0a      	ldr	r2, [pc, #40]	; (8007d64 <prvHeapInit+0xb8>)
 8007d3a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	4a09      	ldr	r2, [pc, #36]	; (8007d68 <prvHeapInit+0xbc>)
 8007d42:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d44:	4b09      	ldr	r3, [pc, #36]	; (8007d6c <prvHeapInit+0xc0>)
 8007d46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d4a:	601a      	str	r2, [r3, #0]
}
 8007d4c:	bf00      	nop
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	20000354 	.word	0x20000354
 8007d5c:	20003f54 	.word	0x20003f54
 8007d60:	20003f5c 	.word	0x20003f5c
 8007d64:	20003f64 	.word	0x20003f64
 8007d68:	20003f60 	.word	0x20003f60
 8007d6c:	20003f70 	.word	0x20003f70

08007d70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d78:	4b28      	ldr	r3, [pc, #160]	; (8007e1c <prvInsertBlockIntoFreeList+0xac>)
 8007d7a:	60fb      	str	r3, [r7, #12]
 8007d7c:	e002      	b.n	8007d84 <prvInsertBlockIntoFreeList+0x14>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d8f7      	bhi.n	8007d7e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	4413      	add	r3, r2
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d108      	bne.n	8007db2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	685a      	ldr	r2, [r3, #4]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	441a      	add	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	441a      	add	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d118      	bne.n	8007df8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	4b15      	ldr	r3, [pc, #84]	; (8007e20 <prvInsertBlockIntoFreeList+0xb0>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d00d      	beq.n	8007dee <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685a      	ldr	r2, [r3, #4]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	441a      	add	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	601a      	str	r2, [r3, #0]
 8007dec:	e008      	b.n	8007e00 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007dee:	4b0c      	ldr	r3, [pc, #48]	; (8007e20 <prvInsertBlockIntoFreeList+0xb0>)
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	e003      	b.n	8007e00 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d002      	beq.n	8007e0e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007e0e:	bf00      	nop
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	20003f54 	.word	0x20003f54
 8007e20:	20003f5c 	.word	0x20003f5c

08007e24 <__errno>:
 8007e24:	4b01      	ldr	r3, [pc, #4]	; (8007e2c <__errno+0x8>)
 8007e26:	6818      	ldr	r0, [r3, #0]
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	20000018 	.word	0x20000018

08007e30 <__libc_init_array>:
 8007e30:	b570      	push	{r4, r5, r6, lr}
 8007e32:	4d0d      	ldr	r5, [pc, #52]	; (8007e68 <__libc_init_array+0x38>)
 8007e34:	4c0d      	ldr	r4, [pc, #52]	; (8007e6c <__libc_init_array+0x3c>)
 8007e36:	1b64      	subs	r4, r4, r5
 8007e38:	10a4      	asrs	r4, r4, #2
 8007e3a:	2600      	movs	r6, #0
 8007e3c:	42a6      	cmp	r6, r4
 8007e3e:	d109      	bne.n	8007e54 <__libc_init_array+0x24>
 8007e40:	4d0b      	ldr	r5, [pc, #44]	; (8007e70 <__libc_init_array+0x40>)
 8007e42:	4c0c      	ldr	r4, [pc, #48]	; (8007e74 <__libc_init_array+0x44>)
 8007e44:	f000 fffa 	bl	8008e3c <_init>
 8007e48:	1b64      	subs	r4, r4, r5
 8007e4a:	10a4      	asrs	r4, r4, #2
 8007e4c:	2600      	movs	r6, #0
 8007e4e:	42a6      	cmp	r6, r4
 8007e50:	d105      	bne.n	8007e5e <__libc_init_array+0x2e>
 8007e52:	bd70      	pop	{r4, r5, r6, pc}
 8007e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e58:	4798      	blx	r3
 8007e5a:	3601      	adds	r6, #1
 8007e5c:	e7ee      	b.n	8007e3c <__libc_init_array+0xc>
 8007e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e62:	4798      	blx	r3
 8007e64:	3601      	adds	r6, #1
 8007e66:	e7f2      	b.n	8007e4e <__libc_init_array+0x1e>
 8007e68:	08009cac 	.word	0x08009cac
 8007e6c:	08009cac 	.word	0x08009cac
 8007e70:	08009cac 	.word	0x08009cac
 8007e74:	08009cb0 	.word	0x08009cb0

08007e78 <memcpy>:
 8007e78:	440a      	add	r2, r1
 8007e7a:	4291      	cmp	r1, r2
 8007e7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e80:	d100      	bne.n	8007e84 <memcpy+0xc>
 8007e82:	4770      	bx	lr
 8007e84:	b510      	push	{r4, lr}
 8007e86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e8e:	4291      	cmp	r1, r2
 8007e90:	d1f9      	bne.n	8007e86 <memcpy+0xe>
 8007e92:	bd10      	pop	{r4, pc}

08007e94 <memset>:
 8007e94:	4402      	add	r2, r0
 8007e96:	4603      	mov	r3, r0
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d100      	bne.n	8007e9e <memset+0xa>
 8007e9c:	4770      	bx	lr
 8007e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007ea2:	e7f9      	b.n	8007e98 <memset+0x4>

08007ea4 <_free_r>:
 8007ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ea6:	2900      	cmp	r1, #0
 8007ea8:	d048      	beq.n	8007f3c <_free_r+0x98>
 8007eaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eae:	9001      	str	r0, [sp, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f1a1 0404 	sub.w	r4, r1, #4
 8007eb6:	bfb8      	it	lt
 8007eb8:	18e4      	addlt	r4, r4, r3
 8007eba:	f000 fc19 	bl	80086f0 <__malloc_lock>
 8007ebe:	4a20      	ldr	r2, [pc, #128]	; (8007f40 <_free_r+0x9c>)
 8007ec0:	9801      	ldr	r0, [sp, #4]
 8007ec2:	6813      	ldr	r3, [r2, #0]
 8007ec4:	4615      	mov	r5, r2
 8007ec6:	b933      	cbnz	r3, 8007ed6 <_free_r+0x32>
 8007ec8:	6063      	str	r3, [r4, #4]
 8007eca:	6014      	str	r4, [r2, #0]
 8007ecc:	b003      	add	sp, #12
 8007ece:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ed2:	f000 bc13 	b.w	80086fc <__malloc_unlock>
 8007ed6:	42a3      	cmp	r3, r4
 8007ed8:	d90b      	bls.n	8007ef2 <_free_r+0x4e>
 8007eda:	6821      	ldr	r1, [r4, #0]
 8007edc:	1862      	adds	r2, r4, r1
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	bf04      	itt	eq
 8007ee2:	681a      	ldreq	r2, [r3, #0]
 8007ee4:	685b      	ldreq	r3, [r3, #4]
 8007ee6:	6063      	str	r3, [r4, #4]
 8007ee8:	bf04      	itt	eq
 8007eea:	1852      	addeq	r2, r2, r1
 8007eec:	6022      	streq	r2, [r4, #0]
 8007eee:	602c      	str	r4, [r5, #0]
 8007ef0:	e7ec      	b.n	8007ecc <_free_r+0x28>
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	b10b      	cbz	r3, 8007efc <_free_r+0x58>
 8007ef8:	42a3      	cmp	r3, r4
 8007efa:	d9fa      	bls.n	8007ef2 <_free_r+0x4e>
 8007efc:	6811      	ldr	r1, [r2, #0]
 8007efe:	1855      	adds	r5, r2, r1
 8007f00:	42a5      	cmp	r5, r4
 8007f02:	d10b      	bne.n	8007f1c <_free_r+0x78>
 8007f04:	6824      	ldr	r4, [r4, #0]
 8007f06:	4421      	add	r1, r4
 8007f08:	1854      	adds	r4, r2, r1
 8007f0a:	42a3      	cmp	r3, r4
 8007f0c:	6011      	str	r1, [r2, #0]
 8007f0e:	d1dd      	bne.n	8007ecc <_free_r+0x28>
 8007f10:	681c      	ldr	r4, [r3, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	6053      	str	r3, [r2, #4]
 8007f16:	4421      	add	r1, r4
 8007f18:	6011      	str	r1, [r2, #0]
 8007f1a:	e7d7      	b.n	8007ecc <_free_r+0x28>
 8007f1c:	d902      	bls.n	8007f24 <_free_r+0x80>
 8007f1e:	230c      	movs	r3, #12
 8007f20:	6003      	str	r3, [r0, #0]
 8007f22:	e7d3      	b.n	8007ecc <_free_r+0x28>
 8007f24:	6825      	ldr	r5, [r4, #0]
 8007f26:	1961      	adds	r1, r4, r5
 8007f28:	428b      	cmp	r3, r1
 8007f2a:	bf04      	itt	eq
 8007f2c:	6819      	ldreq	r1, [r3, #0]
 8007f2e:	685b      	ldreq	r3, [r3, #4]
 8007f30:	6063      	str	r3, [r4, #4]
 8007f32:	bf04      	itt	eq
 8007f34:	1949      	addeq	r1, r1, r5
 8007f36:	6021      	streq	r1, [r4, #0]
 8007f38:	6054      	str	r4, [r2, #4]
 8007f3a:	e7c7      	b.n	8007ecc <_free_r+0x28>
 8007f3c:	b003      	add	sp, #12
 8007f3e:	bd30      	pop	{r4, r5, pc}
 8007f40:	20003f74 	.word	0x20003f74

08007f44 <_malloc_r>:
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f46:	1ccd      	adds	r5, r1, #3
 8007f48:	f025 0503 	bic.w	r5, r5, #3
 8007f4c:	3508      	adds	r5, #8
 8007f4e:	2d0c      	cmp	r5, #12
 8007f50:	bf38      	it	cc
 8007f52:	250c      	movcc	r5, #12
 8007f54:	2d00      	cmp	r5, #0
 8007f56:	4606      	mov	r6, r0
 8007f58:	db01      	blt.n	8007f5e <_malloc_r+0x1a>
 8007f5a:	42a9      	cmp	r1, r5
 8007f5c:	d903      	bls.n	8007f66 <_malloc_r+0x22>
 8007f5e:	230c      	movs	r3, #12
 8007f60:	6033      	str	r3, [r6, #0]
 8007f62:	2000      	movs	r0, #0
 8007f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f66:	f000 fbc3 	bl	80086f0 <__malloc_lock>
 8007f6a:	4921      	ldr	r1, [pc, #132]	; (8007ff0 <_malloc_r+0xac>)
 8007f6c:	680a      	ldr	r2, [r1, #0]
 8007f6e:	4614      	mov	r4, r2
 8007f70:	b99c      	cbnz	r4, 8007f9a <_malloc_r+0x56>
 8007f72:	4f20      	ldr	r7, [pc, #128]	; (8007ff4 <_malloc_r+0xb0>)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	b923      	cbnz	r3, 8007f82 <_malloc_r+0x3e>
 8007f78:	4621      	mov	r1, r4
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	f000 f8ca 	bl	8008114 <_sbrk_r>
 8007f80:	6038      	str	r0, [r7, #0]
 8007f82:	4629      	mov	r1, r5
 8007f84:	4630      	mov	r0, r6
 8007f86:	f000 f8c5 	bl	8008114 <_sbrk_r>
 8007f8a:	1c43      	adds	r3, r0, #1
 8007f8c:	d123      	bne.n	8007fd6 <_malloc_r+0x92>
 8007f8e:	230c      	movs	r3, #12
 8007f90:	6033      	str	r3, [r6, #0]
 8007f92:	4630      	mov	r0, r6
 8007f94:	f000 fbb2 	bl	80086fc <__malloc_unlock>
 8007f98:	e7e3      	b.n	8007f62 <_malloc_r+0x1e>
 8007f9a:	6823      	ldr	r3, [r4, #0]
 8007f9c:	1b5b      	subs	r3, r3, r5
 8007f9e:	d417      	bmi.n	8007fd0 <_malloc_r+0x8c>
 8007fa0:	2b0b      	cmp	r3, #11
 8007fa2:	d903      	bls.n	8007fac <_malloc_r+0x68>
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	441c      	add	r4, r3
 8007fa8:	6025      	str	r5, [r4, #0]
 8007faa:	e004      	b.n	8007fb6 <_malloc_r+0x72>
 8007fac:	6863      	ldr	r3, [r4, #4]
 8007fae:	42a2      	cmp	r2, r4
 8007fb0:	bf0c      	ite	eq
 8007fb2:	600b      	streq	r3, [r1, #0]
 8007fb4:	6053      	strne	r3, [r2, #4]
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	f000 fba0 	bl	80086fc <__malloc_unlock>
 8007fbc:	f104 000b 	add.w	r0, r4, #11
 8007fc0:	1d23      	adds	r3, r4, #4
 8007fc2:	f020 0007 	bic.w	r0, r0, #7
 8007fc6:	1ac2      	subs	r2, r0, r3
 8007fc8:	d0cc      	beq.n	8007f64 <_malloc_r+0x20>
 8007fca:	1a1b      	subs	r3, r3, r0
 8007fcc:	50a3      	str	r3, [r4, r2]
 8007fce:	e7c9      	b.n	8007f64 <_malloc_r+0x20>
 8007fd0:	4622      	mov	r2, r4
 8007fd2:	6864      	ldr	r4, [r4, #4]
 8007fd4:	e7cc      	b.n	8007f70 <_malloc_r+0x2c>
 8007fd6:	1cc4      	adds	r4, r0, #3
 8007fd8:	f024 0403 	bic.w	r4, r4, #3
 8007fdc:	42a0      	cmp	r0, r4
 8007fde:	d0e3      	beq.n	8007fa8 <_malloc_r+0x64>
 8007fe0:	1a21      	subs	r1, r4, r0
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	f000 f896 	bl	8008114 <_sbrk_r>
 8007fe8:	3001      	adds	r0, #1
 8007fea:	d1dd      	bne.n	8007fa8 <_malloc_r+0x64>
 8007fec:	e7cf      	b.n	8007f8e <_malloc_r+0x4a>
 8007fee:	bf00      	nop
 8007ff0:	20003f74 	.word	0x20003f74
 8007ff4:	20003f78 	.word	0x20003f78

08007ff8 <iprintf>:
 8007ff8:	b40f      	push	{r0, r1, r2, r3}
 8007ffa:	4b0a      	ldr	r3, [pc, #40]	; (8008024 <iprintf+0x2c>)
 8007ffc:	b513      	push	{r0, r1, r4, lr}
 8007ffe:	681c      	ldr	r4, [r3, #0]
 8008000:	b124      	cbz	r4, 800800c <iprintf+0x14>
 8008002:	69a3      	ldr	r3, [r4, #24]
 8008004:	b913      	cbnz	r3, 800800c <iprintf+0x14>
 8008006:	4620      	mov	r0, r4
 8008008:	f000 fa6e 	bl	80084e8 <__sinit>
 800800c:	ab05      	add	r3, sp, #20
 800800e:	9a04      	ldr	r2, [sp, #16]
 8008010:	68a1      	ldr	r1, [r4, #8]
 8008012:	9301      	str	r3, [sp, #4]
 8008014:	4620      	mov	r0, r4
 8008016:	f000 fba1 	bl	800875c <_vfiprintf_r>
 800801a:	b002      	add	sp, #8
 800801c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008020:	b004      	add	sp, #16
 8008022:	4770      	bx	lr
 8008024:	20000018 	.word	0x20000018

08008028 <_puts_r>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	460e      	mov	r6, r1
 800802c:	4605      	mov	r5, r0
 800802e:	b118      	cbz	r0, 8008038 <_puts_r+0x10>
 8008030:	6983      	ldr	r3, [r0, #24]
 8008032:	b90b      	cbnz	r3, 8008038 <_puts_r+0x10>
 8008034:	f000 fa58 	bl	80084e8 <__sinit>
 8008038:	69ab      	ldr	r3, [r5, #24]
 800803a:	68ac      	ldr	r4, [r5, #8]
 800803c:	b913      	cbnz	r3, 8008044 <_puts_r+0x1c>
 800803e:	4628      	mov	r0, r5
 8008040:	f000 fa52 	bl	80084e8 <__sinit>
 8008044:	4b2c      	ldr	r3, [pc, #176]	; (80080f8 <_puts_r+0xd0>)
 8008046:	429c      	cmp	r4, r3
 8008048:	d120      	bne.n	800808c <_puts_r+0x64>
 800804a:	686c      	ldr	r4, [r5, #4]
 800804c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800804e:	07db      	lsls	r3, r3, #31
 8008050:	d405      	bmi.n	800805e <_puts_r+0x36>
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	0598      	lsls	r0, r3, #22
 8008056:	d402      	bmi.n	800805e <_puts_r+0x36>
 8008058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800805a:	f000 fae3 	bl	8008624 <__retarget_lock_acquire_recursive>
 800805e:	89a3      	ldrh	r3, [r4, #12]
 8008060:	0719      	lsls	r1, r3, #28
 8008062:	d51d      	bpl.n	80080a0 <_puts_r+0x78>
 8008064:	6923      	ldr	r3, [r4, #16]
 8008066:	b1db      	cbz	r3, 80080a0 <_puts_r+0x78>
 8008068:	3e01      	subs	r6, #1
 800806a:	68a3      	ldr	r3, [r4, #8]
 800806c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008070:	3b01      	subs	r3, #1
 8008072:	60a3      	str	r3, [r4, #8]
 8008074:	bb39      	cbnz	r1, 80080c6 <_puts_r+0x9e>
 8008076:	2b00      	cmp	r3, #0
 8008078:	da38      	bge.n	80080ec <_puts_r+0xc4>
 800807a:	4622      	mov	r2, r4
 800807c:	210a      	movs	r1, #10
 800807e:	4628      	mov	r0, r5
 8008080:	f000 f858 	bl	8008134 <__swbuf_r>
 8008084:	3001      	adds	r0, #1
 8008086:	d011      	beq.n	80080ac <_puts_r+0x84>
 8008088:	250a      	movs	r5, #10
 800808a:	e011      	b.n	80080b0 <_puts_r+0x88>
 800808c:	4b1b      	ldr	r3, [pc, #108]	; (80080fc <_puts_r+0xd4>)
 800808e:	429c      	cmp	r4, r3
 8008090:	d101      	bne.n	8008096 <_puts_r+0x6e>
 8008092:	68ac      	ldr	r4, [r5, #8]
 8008094:	e7da      	b.n	800804c <_puts_r+0x24>
 8008096:	4b1a      	ldr	r3, [pc, #104]	; (8008100 <_puts_r+0xd8>)
 8008098:	429c      	cmp	r4, r3
 800809a:	bf08      	it	eq
 800809c:	68ec      	ldreq	r4, [r5, #12]
 800809e:	e7d5      	b.n	800804c <_puts_r+0x24>
 80080a0:	4621      	mov	r1, r4
 80080a2:	4628      	mov	r0, r5
 80080a4:	f000 f898 	bl	80081d8 <__swsetup_r>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d0dd      	beq.n	8008068 <_puts_r+0x40>
 80080ac:	f04f 35ff 	mov.w	r5, #4294967295
 80080b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080b2:	07da      	lsls	r2, r3, #31
 80080b4:	d405      	bmi.n	80080c2 <_puts_r+0x9a>
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	059b      	lsls	r3, r3, #22
 80080ba:	d402      	bmi.n	80080c2 <_puts_r+0x9a>
 80080bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080be:	f000 fab2 	bl	8008626 <__retarget_lock_release_recursive>
 80080c2:	4628      	mov	r0, r5
 80080c4:	bd70      	pop	{r4, r5, r6, pc}
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	da04      	bge.n	80080d4 <_puts_r+0xac>
 80080ca:	69a2      	ldr	r2, [r4, #24]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	dc06      	bgt.n	80080de <_puts_r+0xb6>
 80080d0:	290a      	cmp	r1, #10
 80080d2:	d004      	beq.n	80080de <_puts_r+0xb6>
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	1c5a      	adds	r2, r3, #1
 80080d8:	6022      	str	r2, [r4, #0]
 80080da:	7019      	strb	r1, [r3, #0]
 80080dc:	e7c5      	b.n	800806a <_puts_r+0x42>
 80080de:	4622      	mov	r2, r4
 80080e0:	4628      	mov	r0, r5
 80080e2:	f000 f827 	bl	8008134 <__swbuf_r>
 80080e6:	3001      	adds	r0, #1
 80080e8:	d1bf      	bne.n	800806a <_puts_r+0x42>
 80080ea:	e7df      	b.n	80080ac <_puts_r+0x84>
 80080ec:	6823      	ldr	r3, [r4, #0]
 80080ee:	250a      	movs	r5, #10
 80080f0:	1c5a      	adds	r2, r3, #1
 80080f2:	6022      	str	r2, [r4, #0]
 80080f4:	701d      	strb	r5, [r3, #0]
 80080f6:	e7db      	b.n	80080b0 <_puts_r+0x88>
 80080f8:	08009c30 	.word	0x08009c30
 80080fc:	08009c50 	.word	0x08009c50
 8008100:	08009c10 	.word	0x08009c10

08008104 <puts>:
 8008104:	4b02      	ldr	r3, [pc, #8]	; (8008110 <puts+0xc>)
 8008106:	4601      	mov	r1, r0
 8008108:	6818      	ldr	r0, [r3, #0]
 800810a:	f7ff bf8d 	b.w	8008028 <_puts_r>
 800810e:	bf00      	nop
 8008110:	20000018 	.word	0x20000018

08008114 <_sbrk_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	4d06      	ldr	r5, [pc, #24]	; (8008130 <_sbrk_r+0x1c>)
 8008118:	2300      	movs	r3, #0
 800811a:	4604      	mov	r4, r0
 800811c:	4608      	mov	r0, r1
 800811e:	602b      	str	r3, [r5, #0]
 8008120:	f7fa fe5a 	bl	8002dd8 <_sbrk>
 8008124:	1c43      	adds	r3, r0, #1
 8008126:	d102      	bne.n	800812e <_sbrk_r+0x1a>
 8008128:	682b      	ldr	r3, [r5, #0]
 800812a:	b103      	cbz	r3, 800812e <_sbrk_r+0x1a>
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	bd38      	pop	{r3, r4, r5, pc}
 8008130:	20004134 	.word	0x20004134

08008134 <__swbuf_r>:
 8008134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008136:	460e      	mov	r6, r1
 8008138:	4614      	mov	r4, r2
 800813a:	4605      	mov	r5, r0
 800813c:	b118      	cbz	r0, 8008146 <__swbuf_r+0x12>
 800813e:	6983      	ldr	r3, [r0, #24]
 8008140:	b90b      	cbnz	r3, 8008146 <__swbuf_r+0x12>
 8008142:	f000 f9d1 	bl	80084e8 <__sinit>
 8008146:	4b21      	ldr	r3, [pc, #132]	; (80081cc <__swbuf_r+0x98>)
 8008148:	429c      	cmp	r4, r3
 800814a:	d12b      	bne.n	80081a4 <__swbuf_r+0x70>
 800814c:	686c      	ldr	r4, [r5, #4]
 800814e:	69a3      	ldr	r3, [r4, #24]
 8008150:	60a3      	str	r3, [r4, #8]
 8008152:	89a3      	ldrh	r3, [r4, #12]
 8008154:	071a      	lsls	r2, r3, #28
 8008156:	d52f      	bpl.n	80081b8 <__swbuf_r+0x84>
 8008158:	6923      	ldr	r3, [r4, #16]
 800815a:	b36b      	cbz	r3, 80081b8 <__swbuf_r+0x84>
 800815c:	6923      	ldr	r3, [r4, #16]
 800815e:	6820      	ldr	r0, [r4, #0]
 8008160:	1ac0      	subs	r0, r0, r3
 8008162:	6963      	ldr	r3, [r4, #20]
 8008164:	b2f6      	uxtb	r6, r6
 8008166:	4283      	cmp	r3, r0
 8008168:	4637      	mov	r7, r6
 800816a:	dc04      	bgt.n	8008176 <__swbuf_r+0x42>
 800816c:	4621      	mov	r1, r4
 800816e:	4628      	mov	r0, r5
 8008170:	f000 f926 	bl	80083c0 <_fflush_r>
 8008174:	bb30      	cbnz	r0, 80081c4 <__swbuf_r+0x90>
 8008176:	68a3      	ldr	r3, [r4, #8]
 8008178:	3b01      	subs	r3, #1
 800817a:	60a3      	str	r3, [r4, #8]
 800817c:	6823      	ldr	r3, [r4, #0]
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	6022      	str	r2, [r4, #0]
 8008182:	701e      	strb	r6, [r3, #0]
 8008184:	6963      	ldr	r3, [r4, #20]
 8008186:	3001      	adds	r0, #1
 8008188:	4283      	cmp	r3, r0
 800818a:	d004      	beq.n	8008196 <__swbuf_r+0x62>
 800818c:	89a3      	ldrh	r3, [r4, #12]
 800818e:	07db      	lsls	r3, r3, #31
 8008190:	d506      	bpl.n	80081a0 <__swbuf_r+0x6c>
 8008192:	2e0a      	cmp	r6, #10
 8008194:	d104      	bne.n	80081a0 <__swbuf_r+0x6c>
 8008196:	4621      	mov	r1, r4
 8008198:	4628      	mov	r0, r5
 800819a:	f000 f911 	bl	80083c0 <_fflush_r>
 800819e:	b988      	cbnz	r0, 80081c4 <__swbuf_r+0x90>
 80081a0:	4638      	mov	r0, r7
 80081a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081a4:	4b0a      	ldr	r3, [pc, #40]	; (80081d0 <__swbuf_r+0x9c>)
 80081a6:	429c      	cmp	r4, r3
 80081a8:	d101      	bne.n	80081ae <__swbuf_r+0x7a>
 80081aa:	68ac      	ldr	r4, [r5, #8]
 80081ac:	e7cf      	b.n	800814e <__swbuf_r+0x1a>
 80081ae:	4b09      	ldr	r3, [pc, #36]	; (80081d4 <__swbuf_r+0xa0>)
 80081b0:	429c      	cmp	r4, r3
 80081b2:	bf08      	it	eq
 80081b4:	68ec      	ldreq	r4, [r5, #12]
 80081b6:	e7ca      	b.n	800814e <__swbuf_r+0x1a>
 80081b8:	4621      	mov	r1, r4
 80081ba:	4628      	mov	r0, r5
 80081bc:	f000 f80c 	bl	80081d8 <__swsetup_r>
 80081c0:	2800      	cmp	r0, #0
 80081c2:	d0cb      	beq.n	800815c <__swbuf_r+0x28>
 80081c4:	f04f 37ff 	mov.w	r7, #4294967295
 80081c8:	e7ea      	b.n	80081a0 <__swbuf_r+0x6c>
 80081ca:	bf00      	nop
 80081cc:	08009c30 	.word	0x08009c30
 80081d0:	08009c50 	.word	0x08009c50
 80081d4:	08009c10 	.word	0x08009c10

080081d8 <__swsetup_r>:
 80081d8:	4b32      	ldr	r3, [pc, #200]	; (80082a4 <__swsetup_r+0xcc>)
 80081da:	b570      	push	{r4, r5, r6, lr}
 80081dc:	681d      	ldr	r5, [r3, #0]
 80081de:	4606      	mov	r6, r0
 80081e0:	460c      	mov	r4, r1
 80081e2:	b125      	cbz	r5, 80081ee <__swsetup_r+0x16>
 80081e4:	69ab      	ldr	r3, [r5, #24]
 80081e6:	b913      	cbnz	r3, 80081ee <__swsetup_r+0x16>
 80081e8:	4628      	mov	r0, r5
 80081ea:	f000 f97d 	bl	80084e8 <__sinit>
 80081ee:	4b2e      	ldr	r3, [pc, #184]	; (80082a8 <__swsetup_r+0xd0>)
 80081f0:	429c      	cmp	r4, r3
 80081f2:	d10f      	bne.n	8008214 <__swsetup_r+0x3c>
 80081f4:	686c      	ldr	r4, [r5, #4]
 80081f6:	89a3      	ldrh	r3, [r4, #12]
 80081f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081fc:	0719      	lsls	r1, r3, #28
 80081fe:	d42c      	bmi.n	800825a <__swsetup_r+0x82>
 8008200:	06dd      	lsls	r5, r3, #27
 8008202:	d411      	bmi.n	8008228 <__swsetup_r+0x50>
 8008204:	2309      	movs	r3, #9
 8008206:	6033      	str	r3, [r6, #0]
 8008208:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800820c:	81a3      	strh	r3, [r4, #12]
 800820e:	f04f 30ff 	mov.w	r0, #4294967295
 8008212:	e03e      	b.n	8008292 <__swsetup_r+0xba>
 8008214:	4b25      	ldr	r3, [pc, #148]	; (80082ac <__swsetup_r+0xd4>)
 8008216:	429c      	cmp	r4, r3
 8008218:	d101      	bne.n	800821e <__swsetup_r+0x46>
 800821a:	68ac      	ldr	r4, [r5, #8]
 800821c:	e7eb      	b.n	80081f6 <__swsetup_r+0x1e>
 800821e:	4b24      	ldr	r3, [pc, #144]	; (80082b0 <__swsetup_r+0xd8>)
 8008220:	429c      	cmp	r4, r3
 8008222:	bf08      	it	eq
 8008224:	68ec      	ldreq	r4, [r5, #12]
 8008226:	e7e6      	b.n	80081f6 <__swsetup_r+0x1e>
 8008228:	0758      	lsls	r0, r3, #29
 800822a:	d512      	bpl.n	8008252 <__swsetup_r+0x7a>
 800822c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800822e:	b141      	cbz	r1, 8008242 <__swsetup_r+0x6a>
 8008230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008234:	4299      	cmp	r1, r3
 8008236:	d002      	beq.n	800823e <__swsetup_r+0x66>
 8008238:	4630      	mov	r0, r6
 800823a:	f7ff fe33 	bl	8007ea4 <_free_r>
 800823e:	2300      	movs	r3, #0
 8008240:	6363      	str	r3, [r4, #52]	; 0x34
 8008242:	89a3      	ldrh	r3, [r4, #12]
 8008244:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008248:	81a3      	strh	r3, [r4, #12]
 800824a:	2300      	movs	r3, #0
 800824c:	6063      	str	r3, [r4, #4]
 800824e:	6923      	ldr	r3, [r4, #16]
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	89a3      	ldrh	r3, [r4, #12]
 8008254:	f043 0308 	orr.w	r3, r3, #8
 8008258:	81a3      	strh	r3, [r4, #12]
 800825a:	6923      	ldr	r3, [r4, #16]
 800825c:	b94b      	cbnz	r3, 8008272 <__swsetup_r+0x9a>
 800825e:	89a3      	ldrh	r3, [r4, #12]
 8008260:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008268:	d003      	beq.n	8008272 <__swsetup_r+0x9a>
 800826a:	4621      	mov	r1, r4
 800826c:	4630      	mov	r0, r6
 800826e:	f000 f9ff 	bl	8008670 <__smakebuf_r>
 8008272:	89a0      	ldrh	r0, [r4, #12]
 8008274:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008278:	f010 0301 	ands.w	r3, r0, #1
 800827c:	d00a      	beq.n	8008294 <__swsetup_r+0xbc>
 800827e:	2300      	movs	r3, #0
 8008280:	60a3      	str	r3, [r4, #8]
 8008282:	6963      	ldr	r3, [r4, #20]
 8008284:	425b      	negs	r3, r3
 8008286:	61a3      	str	r3, [r4, #24]
 8008288:	6923      	ldr	r3, [r4, #16]
 800828a:	b943      	cbnz	r3, 800829e <__swsetup_r+0xc6>
 800828c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008290:	d1ba      	bne.n	8008208 <__swsetup_r+0x30>
 8008292:	bd70      	pop	{r4, r5, r6, pc}
 8008294:	0781      	lsls	r1, r0, #30
 8008296:	bf58      	it	pl
 8008298:	6963      	ldrpl	r3, [r4, #20]
 800829a:	60a3      	str	r3, [r4, #8]
 800829c:	e7f4      	b.n	8008288 <__swsetup_r+0xb0>
 800829e:	2000      	movs	r0, #0
 80082a0:	e7f7      	b.n	8008292 <__swsetup_r+0xba>
 80082a2:	bf00      	nop
 80082a4:	20000018 	.word	0x20000018
 80082a8:	08009c30 	.word	0x08009c30
 80082ac:	08009c50 	.word	0x08009c50
 80082b0:	08009c10 	.word	0x08009c10

080082b4 <__sflush_r>:
 80082b4:	898a      	ldrh	r2, [r1, #12]
 80082b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ba:	4605      	mov	r5, r0
 80082bc:	0710      	lsls	r0, r2, #28
 80082be:	460c      	mov	r4, r1
 80082c0:	d458      	bmi.n	8008374 <__sflush_r+0xc0>
 80082c2:	684b      	ldr	r3, [r1, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	dc05      	bgt.n	80082d4 <__sflush_r+0x20>
 80082c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	dc02      	bgt.n	80082d4 <__sflush_r+0x20>
 80082ce:	2000      	movs	r0, #0
 80082d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082d6:	2e00      	cmp	r6, #0
 80082d8:	d0f9      	beq.n	80082ce <__sflush_r+0x1a>
 80082da:	2300      	movs	r3, #0
 80082dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082e0:	682f      	ldr	r7, [r5, #0]
 80082e2:	602b      	str	r3, [r5, #0]
 80082e4:	d032      	beq.n	800834c <__sflush_r+0x98>
 80082e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082e8:	89a3      	ldrh	r3, [r4, #12]
 80082ea:	075a      	lsls	r2, r3, #29
 80082ec:	d505      	bpl.n	80082fa <__sflush_r+0x46>
 80082ee:	6863      	ldr	r3, [r4, #4]
 80082f0:	1ac0      	subs	r0, r0, r3
 80082f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082f4:	b10b      	cbz	r3, 80082fa <__sflush_r+0x46>
 80082f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082f8:	1ac0      	subs	r0, r0, r3
 80082fa:	2300      	movs	r3, #0
 80082fc:	4602      	mov	r2, r0
 80082fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008300:	6a21      	ldr	r1, [r4, #32]
 8008302:	4628      	mov	r0, r5
 8008304:	47b0      	blx	r6
 8008306:	1c43      	adds	r3, r0, #1
 8008308:	89a3      	ldrh	r3, [r4, #12]
 800830a:	d106      	bne.n	800831a <__sflush_r+0x66>
 800830c:	6829      	ldr	r1, [r5, #0]
 800830e:	291d      	cmp	r1, #29
 8008310:	d82c      	bhi.n	800836c <__sflush_r+0xb8>
 8008312:	4a2a      	ldr	r2, [pc, #168]	; (80083bc <__sflush_r+0x108>)
 8008314:	40ca      	lsrs	r2, r1
 8008316:	07d6      	lsls	r6, r2, #31
 8008318:	d528      	bpl.n	800836c <__sflush_r+0xb8>
 800831a:	2200      	movs	r2, #0
 800831c:	6062      	str	r2, [r4, #4]
 800831e:	04d9      	lsls	r1, r3, #19
 8008320:	6922      	ldr	r2, [r4, #16]
 8008322:	6022      	str	r2, [r4, #0]
 8008324:	d504      	bpl.n	8008330 <__sflush_r+0x7c>
 8008326:	1c42      	adds	r2, r0, #1
 8008328:	d101      	bne.n	800832e <__sflush_r+0x7a>
 800832a:	682b      	ldr	r3, [r5, #0]
 800832c:	b903      	cbnz	r3, 8008330 <__sflush_r+0x7c>
 800832e:	6560      	str	r0, [r4, #84]	; 0x54
 8008330:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008332:	602f      	str	r7, [r5, #0]
 8008334:	2900      	cmp	r1, #0
 8008336:	d0ca      	beq.n	80082ce <__sflush_r+0x1a>
 8008338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800833c:	4299      	cmp	r1, r3
 800833e:	d002      	beq.n	8008346 <__sflush_r+0x92>
 8008340:	4628      	mov	r0, r5
 8008342:	f7ff fdaf 	bl	8007ea4 <_free_r>
 8008346:	2000      	movs	r0, #0
 8008348:	6360      	str	r0, [r4, #52]	; 0x34
 800834a:	e7c1      	b.n	80082d0 <__sflush_r+0x1c>
 800834c:	6a21      	ldr	r1, [r4, #32]
 800834e:	2301      	movs	r3, #1
 8008350:	4628      	mov	r0, r5
 8008352:	47b0      	blx	r6
 8008354:	1c41      	adds	r1, r0, #1
 8008356:	d1c7      	bne.n	80082e8 <__sflush_r+0x34>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0c4      	beq.n	80082e8 <__sflush_r+0x34>
 800835e:	2b1d      	cmp	r3, #29
 8008360:	d001      	beq.n	8008366 <__sflush_r+0xb2>
 8008362:	2b16      	cmp	r3, #22
 8008364:	d101      	bne.n	800836a <__sflush_r+0xb6>
 8008366:	602f      	str	r7, [r5, #0]
 8008368:	e7b1      	b.n	80082ce <__sflush_r+0x1a>
 800836a:	89a3      	ldrh	r3, [r4, #12]
 800836c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008370:	81a3      	strh	r3, [r4, #12]
 8008372:	e7ad      	b.n	80082d0 <__sflush_r+0x1c>
 8008374:	690f      	ldr	r7, [r1, #16]
 8008376:	2f00      	cmp	r7, #0
 8008378:	d0a9      	beq.n	80082ce <__sflush_r+0x1a>
 800837a:	0793      	lsls	r3, r2, #30
 800837c:	680e      	ldr	r6, [r1, #0]
 800837e:	bf08      	it	eq
 8008380:	694b      	ldreq	r3, [r1, #20]
 8008382:	600f      	str	r7, [r1, #0]
 8008384:	bf18      	it	ne
 8008386:	2300      	movne	r3, #0
 8008388:	eba6 0807 	sub.w	r8, r6, r7
 800838c:	608b      	str	r3, [r1, #8]
 800838e:	f1b8 0f00 	cmp.w	r8, #0
 8008392:	dd9c      	ble.n	80082ce <__sflush_r+0x1a>
 8008394:	6a21      	ldr	r1, [r4, #32]
 8008396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008398:	4643      	mov	r3, r8
 800839a:	463a      	mov	r2, r7
 800839c:	4628      	mov	r0, r5
 800839e:	47b0      	blx	r6
 80083a0:	2800      	cmp	r0, #0
 80083a2:	dc06      	bgt.n	80083b2 <__sflush_r+0xfe>
 80083a4:	89a3      	ldrh	r3, [r4, #12]
 80083a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083aa:	81a3      	strh	r3, [r4, #12]
 80083ac:	f04f 30ff 	mov.w	r0, #4294967295
 80083b0:	e78e      	b.n	80082d0 <__sflush_r+0x1c>
 80083b2:	4407      	add	r7, r0
 80083b4:	eba8 0800 	sub.w	r8, r8, r0
 80083b8:	e7e9      	b.n	800838e <__sflush_r+0xda>
 80083ba:	bf00      	nop
 80083bc:	20400001 	.word	0x20400001

080083c0 <_fflush_r>:
 80083c0:	b538      	push	{r3, r4, r5, lr}
 80083c2:	690b      	ldr	r3, [r1, #16]
 80083c4:	4605      	mov	r5, r0
 80083c6:	460c      	mov	r4, r1
 80083c8:	b913      	cbnz	r3, 80083d0 <_fflush_r+0x10>
 80083ca:	2500      	movs	r5, #0
 80083cc:	4628      	mov	r0, r5
 80083ce:	bd38      	pop	{r3, r4, r5, pc}
 80083d0:	b118      	cbz	r0, 80083da <_fflush_r+0x1a>
 80083d2:	6983      	ldr	r3, [r0, #24]
 80083d4:	b90b      	cbnz	r3, 80083da <_fflush_r+0x1a>
 80083d6:	f000 f887 	bl	80084e8 <__sinit>
 80083da:	4b14      	ldr	r3, [pc, #80]	; (800842c <_fflush_r+0x6c>)
 80083dc:	429c      	cmp	r4, r3
 80083de:	d11b      	bne.n	8008418 <_fflush_r+0x58>
 80083e0:	686c      	ldr	r4, [r5, #4]
 80083e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d0ef      	beq.n	80083ca <_fflush_r+0xa>
 80083ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083ec:	07d0      	lsls	r0, r2, #31
 80083ee:	d404      	bmi.n	80083fa <_fflush_r+0x3a>
 80083f0:	0599      	lsls	r1, r3, #22
 80083f2:	d402      	bmi.n	80083fa <_fflush_r+0x3a>
 80083f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083f6:	f000 f915 	bl	8008624 <__retarget_lock_acquire_recursive>
 80083fa:	4628      	mov	r0, r5
 80083fc:	4621      	mov	r1, r4
 80083fe:	f7ff ff59 	bl	80082b4 <__sflush_r>
 8008402:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008404:	07da      	lsls	r2, r3, #31
 8008406:	4605      	mov	r5, r0
 8008408:	d4e0      	bmi.n	80083cc <_fflush_r+0xc>
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	059b      	lsls	r3, r3, #22
 800840e:	d4dd      	bmi.n	80083cc <_fflush_r+0xc>
 8008410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008412:	f000 f908 	bl	8008626 <__retarget_lock_release_recursive>
 8008416:	e7d9      	b.n	80083cc <_fflush_r+0xc>
 8008418:	4b05      	ldr	r3, [pc, #20]	; (8008430 <_fflush_r+0x70>)
 800841a:	429c      	cmp	r4, r3
 800841c:	d101      	bne.n	8008422 <_fflush_r+0x62>
 800841e:	68ac      	ldr	r4, [r5, #8]
 8008420:	e7df      	b.n	80083e2 <_fflush_r+0x22>
 8008422:	4b04      	ldr	r3, [pc, #16]	; (8008434 <_fflush_r+0x74>)
 8008424:	429c      	cmp	r4, r3
 8008426:	bf08      	it	eq
 8008428:	68ec      	ldreq	r4, [r5, #12]
 800842a:	e7da      	b.n	80083e2 <_fflush_r+0x22>
 800842c:	08009c30 	.word	0x08009c30
 8008430:	08009c50 	.word	0x08009c50
 8008434:	08009c10 	.word	0x08009c10

08008438 <std>:
 8008438:	2300      	movs	r3, #0
 800843a:	b510      	push	{r4, lr}
 800843c:	4604      	mov	r4, r0
 800843e:	e9c0 3300 	strd	r3, r3, [r0]
 8008442:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008446:	6083      	str	r3, [r0, #8]
 8008448:	8181      	strh	r1, [r0, #12]
 800844a:	6643      	str	r3, [r0, #100]	; 0x64
 800844c:	81c2      	strh	r2, [r0, #14]
 800844e:	6183      	str	r3, [r0, #24]
 8008450:	4619      	mov	r1, r3
 8008452:	2208      	movs	r2, #8
 8008454:	305c      	adds	r0, #92	; 0x5c
 8008456:	f7ff fd1d 	bl	8007e94 <memset>
 800845a:	4b05      	ldr	r3, [pc, #20]	; (8008470 <std+0x38>)
 800845c:	6263      	str	r3, [r4, #36]	; 0x24
 800845e:	4b05      	ldr	r3, [pc, #20]	; (8008474 <std+0x3c>)
 8008460:	62a3      	str	r3, [r4, #40]	; 0x28
 8008462:	4b05      	ldr	r3, [pc, #20]	; (8008478 <std+0x40>)
 8008464:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008466:	4b05      	ldr	r3, [pc, #20]	; (800847c <std+0x44>)
 8008468:	6224      	str	r4, [r4, #32]
 800846a:	6323      	str	r3, [r4, #48]	; 0x30
 800846c:	bd10      	pop	{r4, pc}
 800846e:	bf00      	nop
 8008470:	08008ce5 	.word	0x08008ce5
 8008474:	08008d07 	.word	0x08008d07
 8008478:	08008d3f 	.word	0x08008d3f
 800847c:	08008d63 	.word	0x08008d63

08008480 <_cleanup_r>:
 8008480:	4901      	ldr	r1, [pc, #4]	; (8008488 <_cleanup_r+0x8>)
 8008482:	f000 b8af 	b.w	80085e4 <_fwalk_reent>
 8008486:	bf00      	nop
 8008488:	080083c1 	.word	0x080083c1

0800848c <__sfmoreglue>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	1e4a      	subs	r2, r1, #1
 8008490:	2568      	movs	r5, #104	; 0x68
 8008492:	4355      	muls	r5, r2
 8008494:	460e      	mov	r6, r1
 8008496:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800849a:	f7ff fd53 	bl	8007f44 <_malloc_r>
 800849e:	4604      	mov	r4, r0
 80084a0:	b140      	cbz	r0, 80084b4 <__sfmoreglue+0x28>
 80084a2:	2100      	movs	r1, #0
 80084a4:	e9c0 1600 	strd	r1, r6, [r0]
 80084a8:	300c      	adds	r0, #12
 80084aa:	60a0      	str	r0, [r4, #8]
 80084ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084b0:	f7ff fcf0 	bl	8007e94 <memset>
 80084b4:	4620      	mov	r0, r4
 80084b6:	bd70      	pop	{r4, r5, r6, pc}

080084b8 <__sfp_lock_acquire>:
 80084b8:	4801      	ldr	r0, [pc, #4]	; (80084c0 <__sfp_lock_acquire+0x8>)
 80084ba:	f000 b8b3 	b.w	8008624 <__retarget_lock_acquire_recursive>
 80084be:	bf00      	nop
 80084c0:	20004130 	.word	0x20004130

080084c4 <__sfp_lock_release>:
 80084c4:	4801      	ldr	r0, [pc, #4]	; (80084cc <__sfp_lock_release+0x8>)
 80084c6:	f000 b8ae 	b.w	8008626 <__retarget_lock_release_recursive>
 80084ca:	bf00      	nop
 80084cc:	20004130 	.word	0x20004130

080084d0 <__sinit_lock_acquire>:
 80084d0:	4801      	ldr	r0, [pc, #4]	; (80084d8 <__sinit_lock_acquire+0x8>)
 80084d2:	f000 b8a7 	b.w	8008624 <__retarget_lock_acquire_recursive>
 80084d6:	bf00      	nop
 80084d8:	2000412b 	.word	0x2000412b

080084dc <__sinit_lock_release>:
 80084dc:	4801      	ldr	r0, [pc, #4]	; (80084e4 <__sinit_lock_release+0x8>)
 80084de:	f000 b8a2 	b.w	8008626 <__retarget_lock_release_recursive>
 80084e2:	bf00      	nop
 80084e4:	2000412b 	.word	0x2000412b

080084e8 <__sinit>:
 80084e8:	b510      	push	{r4, lr}
 80084ea:	4604      	mov	r4, r0
 80084ec:	f7ff fff0 	bl	80084d0 <__sinit_lock_acquire>
 80084f0:	69a3      	ldr	r3, [r4, #24]
 80084f2:	b11b      	cbz	r3, 80084fc <__sinit+0x14>
 80084f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084f8:	f7ff bff0 	b.w	80084dc <__sinit_lock_release>
 80084fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008500:	6523      	str	r3, [r4, #80]	; 0x50
 8008502:	4b13      	ldr	r3, [pc, #76]	; (8008550 <__sinit+0x68>)
 8008504:	4a13      	ldr	r2, [pc, #76]	; (8008554 <__sinit+0x6c>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	62a2      	str	r2, [r4, #40]	; 0x28
 800850a:	42a3      	cmp	r3, r4
 800850c:	bf04      	itt	eq
 800850e:	2301      	moveq	r3, #1
 8008510:	61a3      	streq	r3, [r4, #24]
 8008512:	4620      	mov	r0, r4
 8008514:	f000 f820 	bl	8008558 <__sfp>
 8008518:	6060      	str	r0, [r4, #4]
 800851a:	4620      	mov	r0, r4
 800851c:	f000 f81c 	bl	8008558 <__sfp>
 8008520:	60a0      	str	r0, [r4, #8]
 8008522:	4620      	mov	r0, r4
 8008524:	f000 f818 	bl	8008558 <__sfp>
 8008528:	2200      	movs	r2, #0
 800852a:	60e0      	str	r0, [r4, #12]
 800852c:	2104      	movs	r1, #4
 800852e:	6860      	ldr	r0, [r4, #4]
 8008530:	f7ff ff82 	bl	8008438 <std>
 8008534:	68a0      	ldr	r0, [r4, #8]
 8008536:	2201      	movs	r2, #1
 8008538:	2109      	movs	r1, #9
 800853a:	f7ff ff7d 	bl	8008438 <std>
 800853e:	68e0      	ldr	r0, [r4, #12]
 8008540:	2202      	movs	r2, #2
 8008542:	2112      	movs	r1, #18
 8008544:	f7ff ff78 	bl	8008438 <std>
 8008548:	2301      	movs	r3, #1
 800854a:	61a3      	str	r3, [r4, #24]
 800854c:	e7d2      	b.n	80084f4 <__sinit+0xc>
 800854e:	bf00      	nop
 8008550:	08009c0c 	.word	0x08009c0c
 8008554:	08008481 	.word	0x08008481

08008558 <__sfp>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	4607      	mov	r7, r0
 800855c:	f7ff ffac 	bl	80084b8 <__sfp_lock_acquire>
 8008560:	4b1e      	ldr	r3, [pc, #120]	; (80085dc <__sfp+0x84>)
 8008562:	681e      	ldr	r6, [r3, #0]
 8008564:	69b3      	ldr	r3, [r6, #24]
 8008566:	b913      	cbnz	r3, 800856e <__sfp+0x16>
 8008568:	4630      	mov	r0, r6
 800856a:	f7ff ffbd 	bl	80084e8 <__sinit>
 800856e:	3648      	adds	r6, #72	; 0x48
 8008570:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008574:	3b01      	subs	r3, #1
 8008576:	d503      	bpl.n	8008580 <__sfp+0x28>
 8008578:	6833      	ldr	r3, [r6, #0]
 800857a:	b30b      	cbz	r3, 80085c0 <__sfp+0x68>
 800857c:	6836      	ldr	r6, [r6, #0]
 800857e:	e7f7      	b.n	8008570 <__sfp+0x18>
 8008580:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008584:	b9d5      	cbnz	r5, 80085bc <__sfp+0x64>
 8008586:	4b16      	ldr	r3, [pc, #88]	; (80085e0 <__sfp+0x88>)
 8008588:	60e3      	str	r3, [r4, #12]
 800858a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800858e:	6665      	str	r5, [r4, #100]	; 0x64
 8008590:	f000 f847 	bl	8008622 <__retarget_lock_init_recursive>
 8008594:	f7ff ff96 	bl	80084c4 <__sfp_lock_release>
 8008598:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800859c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80085a0:	6025      	str	r5, [r4, #0]
 80085a2:	61a5      	str	r5, [r4, #24]
 80085a4:	2208      	movs	r2, #8
 80085a6:	4629      	mov	r1, r5
 80085a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085ac:	f7ff fc72 	bl	8007e94 <memset>
 80085b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085b8:	4620      	mov	r0, r4
 80085ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085bc:	3468      	adds	r4, #104	; 0x68
 80085be:	e7d9      	b.n	8008574 <__sfp+0x1c>
 80085c0:	2104      	movs	r1, #4
 80085c2:	4638      	mov	r0, r7
 80085c4:	f7ff ff62 	bl	800848c <__sfmoreglue>
 80085c8:	4604      	mov	r4, r0
 80085ca:	6030      	str	r0, [r6, #0]
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d1d5      	bne.n	800857c <__sfp+0x24>
 80085d0:	f7ff ff78 	bl	80084c4 <__sfp_lock_release>
 80085d4:	230c      	movs	r3, #12
 80085d6:	603b      	str	r3, [r7, #0]
 80085d8:	e7ee      	b.n	80085b8 <__sfp+0x60>
 80085da:	bf00      	nop
 80085dc:	08009c0c 	.word	0x08009c0c
 80085e0:	ffff0001 	.word	0xffff0001

080085e4 <_fwalk_reent>:
 80085e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e8:	4606      	mov	r6, r0
 80085ea:	4688      	mov	r8, r1
 80085ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80085f0:	2700      	movs	r7, #0
 80085f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085f6:	f1b9 0901 	subs.w	r9, r9, #1
 80085fa:	d505      	bpl.n	8008608 <_fwalk_reent+0x24>
 80085fc:	6824      	ldr	r4, [r4, #0]
 80085fe:	2c00      	cmp	r4, #0
 8008600:	d1f7      	bne.n	80085f2 <_fwalk_reent+0xe>
 8008602:	4638      	mov	r0, r7
 8008604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008608:	89ab      	ldrh	r3, [r5, #12]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d907      	bls.n	800861e <_fwalk_reent+0x3a>
 800860e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008612:	3301      	adds	r3, #1
 8008614:	d003      	beq.n	800861e <_fwalk_reent+0x3a>
 8008616:	4629      	mov	r1, r5
 8008618:	4630      	mov	r0, r6
 800861a:	47c0      	blx	r8
 800861c:	4307      	orrs	r7, r0
 800861e:	3568      	adds	r5, #104	; 0x68
 8008620:	e7e9      	b.n	80085f6 <_fwalk_reent+0x12>

08008622 <__retarget_lock_init_recursive>:
 8008622:	4770      	bx	lr

08008624 <__retarget_lock_acquire_recursive>:
 8008624:	4770      	bx	lr

08008626 <__retarget_lock_release_recursive>:
 8008626:	4770      	bx	lr

08008628 <__swhatbuf_r>:
 8008628:	b570      	push	{r4, r5, r6, lr}
 800862a:	460e      	mov	r6, r1
 800862c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008630:	2900      	cmp	r1, #0
 8008632:	b096      	sub	sp, #88	; 0x58
 8008634:	4614      	mov	r4, r2
 8008636:	461d      	mov	r5, r3
 8008638:	da07      	bge.n	800864a <__swhatbuf_r+0x22>
 800863a:	2300      	movs	r3, #0
 800863c:	602b      	str	r3, [r5, #0]
 800863e:	89b3      	ldrh	r3, [r6, #12]
 8008640:	061a      	lsls	r2, r3, #24
 8008642:	d410      	bmi.n	8008666 <__swhatbuf_r+0x3e>
 8008644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008648:	e00e      	b.n	8008668 <__swhatbuf_r+0x40>
 800864a:	466a      	mov	r2, sp
 800864c:	f000 fbb0 	bl	8008db0 <_fstat_r>
 8008650:	2800      	cmp	r0, #0
 8008652:	dbf2      	blt.n	800863a <__swhatbuf_r+0x12>
 8008654:	9a01      	ldr	r2, [sp, #4]
 8008656:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800865a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800865e:	425a      	negs	r2, r3
 8008660:	415a      	adcs	r2, r3
 8008662:	602a      	str	r2, [r5, #0]
 8008664:	e7ee      	b.n	8008644 <__swhatbuf_r+0x1c>
 8008666:	2340      	movs	r3, #64	; 0x40
 8008668:	2000      	movs	r0, #0
 800866a:	6023      	str	r3, [r4, #0]
 800866c:	b016      	add	sp, #88	; 0x58
 800866e:	bd70      	pop	{r4, r5, r6, pc}

08008670 <__smakebuf_r>:
 8008670:	898b      	ldrh	r3, [r1, #12]
 8008672:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008674:	079d      	lsls	r5, r3, #30
 8008676:	4606      	mov	r6, r0
 8008678:	460c      	mov	r4, r1
 800867a:	d507      	bpl.n	800868c <__smakebuf_r+0x1c>
 800867c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	6123      	str	r3, [r4, #16]
 8008684:	2301      	movs	r3, #1
 8008686:	6163      	str	r3, [r4, #20]
 8008688:	b002      	add	sp, #8
 800868a:	bd70      	pop	{r4, r5, r6, pc}
 800868c:	ab01      	add	r3, sp, #4
 800868e:	466a      	mov	r2, sp
 8008690:	f7ff ffca 	bl	8008628 <__swhatbuf_r>
 8008694:	9900      	ldr	r1, [sp, #0]
 8008696:	4605      	mov	r5, r0
 8008698:	4630      	mov	r0, r6
 800869a:	f7ff fc53 	bl	8007f44 <_malloc_r>
 800869e:	b948      	cbnz	r0, 80086b4 <__smakebuf_r+0x44>
 80086a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086a4:	059a      	lsls	r2, r3, #22
 80086a6:	d4ef      	bmi.n	8008688 <__smakebuf_r+0x18>
 80086a8:	f023 0303 	bic.w	r3, r3, #3
 80086ac:	f043 0302 	orr.w	r3, r3, #2
 80086b0:	81a3      	strh	r3, [r4, #12]
 80086b2:	e7e3      	b.n	800867c <__smakebuf_r+0xc>
 80086b4:	4b0d      	ldr	r3, [pc, #52]	; (80086ec <__smakebuf_r+0x7c>)
 80086b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80086b8:	89a3      	ldrh	r3, [r4, #12]
 80086ba:	6020      	str	r0, [r4, #0]
 80086bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086c0:	81a3      	strh	r3, [r4, #12]
 80086c2:	9b00      	ldr	r3, [sp, #0]
 80086c4:	6163      	str	r3, [r4, #20]
 80086c6:	9b01      	ldr	r3, [sp, #4]
 80086c8:	6120      	str	r0, [r4, #16]
 80086ca:	b15b      	cbz	r3, 80086e4 <__smakebuf_r+0x74>
 80086cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086d0:	4630      	mov	r0, r6
 80086d2:	f000 fb7f 	bl	8008dd4 <_isatty_r>
 80086d6:	b128      	cbz	r0, 80086e4 <__smakebuf_r+0x74>
 80086d8:	89a3      	ldrh	r3, [r4, #12]
 80086da:	f023 0303 	bic.w	r3, r3, #3
 80086de:	f043 0301 	orr.w	r3, r3, #1
 80086e2:	81a3      	strh	r3, [r4, #12]
 80086e4:	89a0      	ldrh	r0, [r4, #12]
 80086e6:	4305      	orrs	r5, r0
 80086e8:	81a5      	strh	r5, [r4, #12]
 80086ea:	e7cd      	b.n	8008688 <__smakebuf_r+0x18>
 80086ec:	08008481 	.word	0x08008481

080086f0 <__malloc_lock>:
 80086f0:	4801      	ldr	r0, [pc, #4]	; (80086f8 <__malloc_lock+0x8>)
 80086f2:	f7ff bf97 	b.w	8008624 <__retarget_lock_acquire_recursive>
 80086f6:	bf00      	nop
 80086f8:	2000412c 	.word	0x2000412c

080086fc <__malloc_unlock>:
 80086fc:	4801      	ldr	r0, [pc, #4]	; (8008704 <__malloc_unlock+0x8>)
 80086fe:	f7ff bf92 	b.w	8008626 <__retarget_lock_release_recursive>
 8008702:	bf00      	nop
 8008704:	2000412c 	.word	0x2000412c

08008708 <__sfputc_r>:
 8008708:	6893      	ldr	r3, [r2, #8]
 800870a:	3b01      	subs	r3, #1
 800870c:	2b00      	cmp	r3, #0
 800870e:	b410      	push	{r4}
 8008710:	6093      	str	r3, [r2, #8]
 8008712:	da08      	bge.n	8008726 <__sfputc_r+0x1e>
 8008714:	6994      	ldr	r4, [r2, #24]
 8008716:	42a3      	cmp	r3, r4
 8008718:	db01      	blt.n	800871e <__sfputc_r+0x16>
 800871a:	290a      	cmp	r1, #10
 800871c:	d103      	bne.n	8008726 <__sfputc_r+0x1e>
 800871e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008722:	f7ff bd07 	b.w	8008134 <__swbuf_r>
 8008726:	6813      	ldr	r3, [r2, #0]
 8008728:	1c58      	adds	r0, r3, #1
 800872a:	6010      	str	r0, [r2, #0]
 800872c:	7019      	strb	r1, [r3, #0]
 800872e:	4608      	mov	r0, r1
 8008730:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008734:	4770      	bx	lr

08008736 <__sfputs_r>:
 8008736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008738:	4606      	mov	r6, r0
 800873a:	460f      	mov	r7, r1
 800873c:	4614      	mov	r4, r2
 800873e:	18d5      	adds	r5, r2, r3
 8008740:	42ac      	cmp	r4, r5
 8008742:	d101      	bne.n	8008748 <__sfputs_r+0x12>
 8008744:	2000      	movs	r0, #0
 8008746:	e007      	b.n	8008758 <__sfputs_r+0x22>
 8008748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800874c:	463a      	mov	r2, r7
 800874e:	4630      	mov	r0, r6
 8008750:	f7ff ffda 	bl	8008708 <__sfputc_r>
 8008754:	1c43      	adds	r3, r0, #1
 8008756:	d1f3      	bne.n	8008740 <__sfputs_r+0xa>
 8008758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800875c <_vfiprintf_r>:
 800875c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008760:	460d      	mov	r5, r1
 8008762:	b09d      	sub	sp, #116	; 0x74
 8008764:	4614      	mov	r4, r2
 8008766:	4698      	mov	r8, r3
 8008768:	4606      	mov	r6, r0
 800876a:	b118      	cbz	r0, 8008774 <_vfiprintf_r+0x18>
 800876c:	6983      	ldr	r3, [r0, #24]
 800876e:	b90b      	cbnz	r3, 8008774 <_vfiprintf_r+0x18>
 8008770:	f7ff feba 	bl	80084e8 <__sinit>
 8008774:	4b89      	ldr	r3, [pc, #548]	; (800899c <_vfiprintf_r+0x240>)
 8008776:	429d      	cmp	r5, r3
 8008778:	d11b      	bne.n	80087b2 <_vfiprintf_r+0x56>
 800877a:	6875      	ldr	r5, [r6, #4]
 800877c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800877e:	07d9      	lsls	r1, r3, #31
 8008780:	d405      	bmi.n	800878e <_vfiprintf_r+0x32>
 8008782:	89ab      	ldrh	r3, [r5, #12]
 8008784:	059a      	lsls	r2, r3, #22
 8008786:	d402      	bmi.n	800878e <_vfiprintf_r+0x32>
 8008788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800878a:	f7ff ff4b 	bl	8008624 <__retarget_lock_acquire_recursive>
 800878e:	89ab      	ldrh	r3, [r5, #12]
 8008790:	071b      	lsls	r3, r3, #28
 8008792:	d501      	bpl.n	8008798 <_vfiprintf_r+0x3c>
 8008794:	692b      	ldr	r3, [r5, #16]
 8008796:	b9eb      	cbnz	r3, 80087d4 <_vfiprintf_r+0x78>
 8008798:	4629      	mov	r1, r5
 800879a:	4630      	mov	r0, r6
 800879c:	f7ff fd1c 	bl	80081d8 <__swsetup_r>
 80087a0:	b1c0      	cbz	r0, 80087d4 <_vfiprintf_r+0x78>
 80087a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087a4:	07dc      	lsls	r4, r3, #31
 80087a6:	d50e      	bpl.n	80087c6 <_vfiprintf_r+0x6a>
 80087a8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ac:	b01d      	add	sp, #116	; 0x74
 80087ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b2:	4b7b      	ldr	r3, [pc, #492]	; (80089a0 <_vfiprintf_r+0x244>)
 80087b4:	429d      	cmp	r5, r3
 80087b6:	d101      	bne.n	80087bc <_vfiprintf_r+0x60>
 80087b8:	68b5      	ldr	r5, [r6, #8]
 80087ba:	e7df      	b.n	800877c <_vfiprintf_r+0x20>
 80087bc:	4b79      	ldr	r3, [pc, #484]	; (80089a4 <_vfiprintf_r+0x248>)
 80087be:	429d      	cmp	r5, r3
 80087c0:	bf08      	it	eq
 80087c2:	68f5      	ldreq	r5, [r6, #12]
 80087c4:	e7da      	b.n	800877c <_vfiprintf_r+0x20>
 80087c6:	89ab      	ldrh	r3, [r5, #12]
 80087c8:	0598      	lsls	r0, r3, #22
 80087ca:	d4ed      	bmi.n	80087a8 <_vfiprintf_r+0x4c>
 80087cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087ce:	f7ff ff2a 	bl	8008626 <__retarget_lock_release_recursive>
 80087d2:	e7e9      	b.n	80087a8 <_vfiprintf_r+0x4c>
 80087d4:	2300      	movs	r3, #0
 80087d6:	9309      	str	r3, [sp, #36]	; 0x24
 80087d8:	2320      	movs	r3, #32
 80087da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087de:	f8cd 800c 	str.w	r8, [sp, #12]
 80087e2:	2330      	movs	r3, #48	; 0x30
 80087e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80089a8 <_vfiprintf_r+0x24c>
 80087e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087ec:	f04f 0901 	mov.w	r9, #1
 80087f0:	4623      	mov	r3, r4
 80087f2:	469a      	mov	sl, r3
 80087f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087f8:	b10a      	cbz	r2, 80087fe <_vfiprintf_r+0xa2>
 80087fa:	2a25      	cmp	r2, #37	; 0x25
 80087fc:	d1f9      	bne.n	80087f2 <_vfiprintf_r+0x96>
 80087fe:	ebba 0b04 	subs.w	fp, sl, r4
 8008802:	d00b      	beq.n	800881c <_vfiprintf_r+0xc0>
 8008804:	465b      	mov	r3, fp
 8008806:	4622      	mov	r2, r4
 8008808:	4629      	mov	r1, r5
 800880a:	4630      	mov	r0, r6
 800880c:	f7ff ff93 	bl	8008736 <__sfputs_r>
 8008810:	3001      	adds	r0, #1
 8008812:	f000 80aa 	beq.w	800896a <_vfiprintf_r+0x20e>
 8008816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008818:	445a      	add	r2, fp
 800881a:	9209      	str	r2, [sp, #36]	; 0x24
 800881c:	f89a 3000 	ldrb.w	r3, [sl]
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 80a2 	beq.w	800896a <_vfiprintf_r+0x20e>
 8008826:	2300      	movs	r3, #0
 8008828:	f04f 32ff 	mov.w	r2, #4294967295
 800882c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008830:	f10a 0a01 	add.w	sl, sl, #1
 8008834:	9304      	str	r3, [sp, #16]
 8008836:	9307      	str	r3, [sp, #28]
 8008838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800883c:	931a      	str	r3, [sp, #104]	; 0x68
 800883e:	4654      	mov	r4, sl
 8008840:	2205      	movs	r2, #5
 8008842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008846:	4858      	ldr	r0, [pc, #352]	; (80089a8 <_vfiprintf_r+0x24c>)
 8008848:	f7f7 fcf2 	bl	8000230 <memchr>
 800884c:	9a04      	ldr	r2, [sp, #16]
 800884e:	b9d8      	cbnz	r0, 8008888 <_vfiprintf_r+0x12c>
 8008850:	06d1      	lsls	r1, r2, #27
 8008852:	bf44      	itt	mi
 8008854:	2320      	movmi	r3, #32
 8008856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800885a:	0713      	lsls	r3, r2, #28
 800885c:	bf44      	itt	mi
 800885e:	232b      	movmi	r3, #43	; 0x2b
 8008860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008864:	f89a 3000 	ldrb.w	r3, [sl]
 8008868:	2b2a      	cmp	r3, #42	; 0x2a
 800886a:	d015      	beq.n	8008898 <_vfiprintf_r+0x13c>
 800886c:	9a07      	ldr	r2, [sp, #28]
 800886e:	4654      	mov	r4, sl
 8008870:	2000      	movs	r0, #0
 8008872:	f04f 0c0a 	mov.w	ip, #10
 8008876:	4621      	mov	r1, r4
 8008878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800887c:	3b30      	subs	r3, #48	; 0x30
 800887e:	2b09      	cmp	r3, #9
 8008880:	d94e      	bls.n	8008920 <_vfiprintf_r+0x1c4>
 8008882:	b1b0      	cbz	r0, 80088b2 <_vfiprintf_r+0x156>
 8008884:	9207      	str	r2, [sp, #28]
 8008886:	e014      	b.n	80088b2 <_vfiprintf_r+0x156>
 8008888:	eba0 0308 	sub.w	r3, r0, r8
 800888c:	fa09 f303 	lsl.w	r3, r9, r3
 8008890:	4313      	orrs	r3, r2
 8008892:	9304      	str	r3, [sp, #16]
 8008894:	46a2      	mov	sl, r4
 8008896:	e7d2      	b.n	800883e <_vfiprintf_r+0xe2>
 8008898:	9b03      	ldr	r3, [sp, #12]
 800889a:	1d19      	adds	r1, r3, #4
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	9103      	str	r1, [sp, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	bfbb      	ittet	lt
 80088a4:	425b      	neglt	r3, r3
 80088a6:	f042 0202 	orrlt.w	r2, r2, #2
 80088aa:	9307      	strge	r3, [sp, #28]
 80088ac:	9307      	strlt	r3, [sp, #28]
 80088ae:	bfb8      	it	lt
 80088b0:	9204      	strlt	r2, [sp, #16]
 80088b2:	7823      	ldrb	r3, [r4, #0]
 80088b4:	2b2e      	cmp	r3, #46	; 0x2e
 80088b6:	d10c      	bne.n	80088d2 <_vfiprintf_r+0x176>
 80088b8:	7863      	ldrb	r3, [r4, #1]
 80088ba:	2b2a      	cmp	r3, #42	; 0x2a
 80088bc:	d135      	bne.n	800892a <_vfiprintf_r+0x1ce>
 80088be:	9b03      	ldr	r3, [sp, #12]
 80088c0:	1d1a      	adds	r2, r3, #4
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	9203      	str	r2, [sp, #12]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	bfb8      	it	lt
 80088ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80088ce:	3402      	adds	r4, #2
 80088d0:	9305      	str	r3, [sp, #20]
 80088d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80089b8 <_vfiprintf_r+0x25c>
 80088d6:	7821      	ldrb	r1, [r4, #0]
 80088d8:	2203      	movs	r2, #3
 80088da:	4650      	mov	r0, sl
 80088dc:	f7f7 fca8 	bl	8000230 <memchr>
 80088e0:	b140      	cbz	r0, 80088f4 <_vfiprintf_r+0x198>
 80088e2:	2340      	movs	r3, #64	; 0x40
 80088e4:	eba0 000a 	sub.w	r0, r0, sl
 80088e8:	fa03 f000 	lsl.w	r0, r3, r0
 80088ec:	9b04      	ldr	r3, [sp, #16]
 80088ee:	4303      	orrs	r3, r0
 80088f0:	3401      	adds	r4, #1
 80088f2:	9304      	str	r3, [sp, #16]
 80088f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f8:	482c      	ldr	r0, [pc, #176]	; (80089ac <_vfiprintf_r+0x250>)
 80088fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088fe:	2206      	movs	r2, #6
 8008900:	f7f7 fc96 	bl	8000230 <memchr>
 8008904:	2800      	cmp	r0, #0
 8008906:	d03f      	beq.n	8008988 <_vfiprintf_r+0x22c>
 8008908:	4b29      	ldr	r3, [pc, #164]	; (80089b0 <_vfiprintf_r+0x254>)
 800890a:	bb1b      	cbnz	r3, 8008954 <_vfiprintf_r+0x1f8>
 800890c:	9b03      	ldr	r3, [sp, #12]
 800890e:	3307      	adds	r3, #7
 8008910:	f023 0307 	bic.w	r3, r3, #7
 8008914:	3308      	adds	r3, #8
 8008916:	9303      	str	r3, [sp, #12]
 8008918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800891a:	443b      	add	r3, r7
 800891c:	9309      	str	r3, [sp, #36]	; 0x24
 800891e:	e767      	b.n	80087f0 <_vfiprintf_r+0x94>
 8008920:	fb0c 3202 	mla	r2, ip, r2, r3
 8008924:	460c      	mov	r4, r1
 8008926:	2001      	movs	r0, #1
 8008928:	e7a5      	b.n	8008876 <_vfiprintf_r+0x11a>
 800892a:	2300      	movs	r3, #0
 800892c:	3401      	adds	r4, #1
 800892e:	9305      	str	r3, [sp, #20]
 8008930:	4619      	mov	r1, r3
 8008932:	f04f 0c0a 	mov.w	ip, #10
 8008936:	4620      	mov	r0, r4
 8008938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800893c:	3a30      	subs	r2, #48	; 0x30
 800893e:	2a09      	cmp	r2, #9
 8008940:	d903      	bls.n	800894a <_vfiprintf_r+0x1ee>
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0c5      	beq.n	80088d2 <_vfiprintf_r+0x176>
 8008946:	9105      	str	r1, [sp, #20]
 8008948:	e7c3      	b.n	80088d2 <_vfiprintf_r+0x176>
 800894a:	fb0c 2101 	mla	r1, ip, r1, r2
 800894e:	4604      	mov	r4, r0
 8008950:	2301      	movs	r3, #1
 8008952:	e7f0      	b.n	8008936 <_vfiprintf_r+0x1da>
 8008954:	ab03      	add	r3, sp, #12
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	462a      	mov	r2, r5
 800895a:	4b16      	ldr	r3, [pc, #88]	; (80089b4 <_vfiprintf_r+0x258>)
 800895c:	a904      	add	r1, sp, #16
 800895e:	4630      	mov	r0, r6
 8008960:	f3af 8000 	nop.w
 8008964:	4607      	mov	r7, r0
 8008966:	1c78      	adds	r0, r7, #1
 8008968:	d1d6      	bne.n	8008918 <_vfiprintf_r+0x1bc>
 800896a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800896c:	07d9      	lsls	r1, r3, #31
 800896e:	d405      	bmi.n	800897c <_vfiprintf_r+0x220>
 8008970:	89ab      	ldrh	r3, [r5, #12]
 8008972:	059a      	lsls	r2, r3, #22
 8008974:	d402      	bmi.n	800897c <_vfiprintf_r+0x220>
 8008976:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008978:	f7ff fe55 	bl	8008626 <__retarget_lock_release_recursive>
 800897c:	89ab      	ldrh	r3, [r5, #12]
 800897e:	065b      	lsls	r3, r3, #25
 8008980:	f53f af12 	bmi.w	80087a8 <_vfiprintf_r+0x4c>
 8008984:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008986:	e711      	b.n	80087ac <_vfiprintf_r+0x50>
 8008988:	ab03      	add	r3, sp, #12
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	462a      	mov	r2, r5
 800898e:	4b09      	ldr	r3, [pc, #36]	; (80089b4 <_vfiprintf_r+0x258>)
 8008990:	a904      	add	r1, sp, #16
 8008992:	4630      	mov	r0, r6
 8008994:	f000 f880 	bl	8008a98 <_printf_i>
 8008998:	e7e4      	b.n	8008964 <_vfiprintf_r+0x208>
 800899a:	bf00      	nop
 800899c:	08009c30 	.word	0x08009c30
 80089a0:	08009c50 	.word	0x08009c50
 80089a4:	08009c10 	.word	0x08009c10
 80089a8:	08009c70 	.word	0x08009c70
 80089ac:	08009c7a 	.word	0x08009c7a
 80089b0:	00000000 	.word	0x00000000
 80089b4:	08008737 	.word	0x08008737
 80089b8:	08009c76 	.word	0x08009c76

080089bc <_printf_common>:
 80089bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c0:	4616      	mov	r6, r2
 80089c2:	4699      	mov	r9, r3
 80089c4:	688a      	ldr	r2, [r1, #8]
 80089c6:	690b      	ldr	r3, [r1, #16]
 80089c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089cc:	4293      	cmp	r3, r2
 80089ce:	bfb8      	it	lt
 80089d0:	4613      	movlt	r3, r2
 80089d2:	6033      	str	r3, [r6, #0]
 80089d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089d8:	4607      	mov	r7, r0
 80089da:	460c      	mov	r4, r1
 80089dc:	b10a      	cbz	r2, 80089e2 <_printf_common+0x26>
 80089de:	3301      	adds	r3, #1
 80089e0:	6033      	str	r3, [r6, #0]
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	0699      	lsls	r1, r3, #26
 80089e6:	bf42      	ittt	mi
 80089e8:	6833      	ldrmi	r3, [r6, #0]
 80089ea:	3302      	addmi	r3, #2
 80089ec:	6033      	strmi	r3, [r6, #0]
 80089ee:	6825      	ldr	r5, [r4, #0]
 80089f0:	f015 0506 	ands.w	r5, r5, #6
 80089f4:	d106      	bne.n	8008a04 <_printf_common+0x48>
 80089f6:	f104 0a19 	add.w	sl, r4, #25
 80089fa:	68e3      	ldr	r3, [r4, #12]
 80089fc:	6832      	ldr	r2, [r6, #0]
 80089fe:	1a9b      	subs	r3, r3, r2
 8008a00:	42ab      	cmp	r3, r5
 8008a02:	dc26      	bgt.n	8008a52 <_printf_common+0x96>
 8008a04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a08:	1e13      	subs	r3, r2, #0
 8008a0a:	6822      	ldr	r2, [r4, #0]
 8008a0c:	bf18      	it	ne
 8008a0e:	2301      	movne	r3, #1
 8008a10:	0692      	lsls	r2, r2, #26
 8008a12:	d42b      	bmi.n	8008a6c <_printf_common+0xb0>
 8008a14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a18:	4649      	mov	r1, r9
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	47c0      	blx	r8
 8008a1e:	3001      	adds	r0, #1
 8008a20:	d01e      	beq.n	8008a60 <_printf_common+0xa4>
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	68e5      	ldr	r5, [r4, #12]
 8008a26:	6832      	ldr	r2, [r6, #0]
 8008a28:	f003 0306 	and.w	r3, r3, #6
 8008a2c:	2b04      	cmp	r3, #4
 8008a2e:	bf08      	it	eq
 8008a30:	1aad      	subeq	r5, r5, r2
 8008a32:	68a3      	ldr	r3, [r4, #8]
 8008a34:	6922      	ldr	r2, [r4, #16]
 8008a36:	bf0c      	ite	eq
 8008a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a3c:	2500      	movne	r5, #0
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	bfc4      	itt	gt
 8008a42:	1a9b      	subgt	r3, r3, r2
 8008a44:	18ed      	addgt	r5, r5, r3
 8008a46:	2600      	movs	r6, #0
 8008a48:	341a      	adds	r4, #26
 8008a4a:	42b5      	cmp	r5, r6
 8008a4c:	d11a      	bne.n	8008a84 <_printf_common+0xc8>
 8008a4e:	2000      	movs	r0, #0
 8008a50:	e008      	b.n	8008a64 <_printf_common+0xa8>
 8008a52:	2301      	movs	r3, #1
 8008a54:	4652      	mov	r2, sl
 8008a56:	4649      	mov	r1, r9
 8008a58:	4638      	mov	r0, r7
 8008a5a:	47c0      	blx	r8
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	d103      	bne.n	8008a68 <_printf_common+0xac>
 8008a60:	f04f 30ff 	mov.w	r0, #4294967295
 8008a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a68:	3501      	adds	r5, #1
 8008a6a:	e7c6      	b.n	80089fa <_printf_common+0x3e>
 8008a6c:	18e1      	adds	r1, r4, r3
 8008a6e:	1c5a      	adds	r2, r3, #1
 8008a70:	2030      	movs	r0, #48	; 0x30
 8008a72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a76:	4422      	add	r2, r4
 8008a78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a80:	3302      	adds	r3, #2
 8008a82:	e7c7      	b.n	8008a14 <_printf_common+0x58>
 8008a84:	2301      	movs	r3, #1
 8008a86:	4622      	mov	r2, r4
 8008a88:	4649      	mov	r1, r9
 8008a8a:	4638      	mov	r0, r7
 8008a8c:	47c0      	blx	r8
 8008a8e:	3001      	adds	r0, #1
 8008a90:	d0e6      	beq.n	8008a60 <_printf_common+0xa4>
 8008a92:	3601      	adds	r6, #1
 8008a94:	e7d9      	b.n	8008a4a <_printf_common+0x8e>
	...

08008a98 <_printf_i>:
 8008a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a9c:	460c      	mov	r4, r1
 8008a9e:	4691      	mov	r9, r2
 8008aa0:	7e27      	ldrb	r7, [r4, #24]
 8008aa2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008aa4:	2f78      	cmp	r7, #120	; 0x78
 8008aa6:	4680      	mov	r8, r0
 8008aa8:	469a      	mov	sl, r3
 8008aaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008aae:	d807      	bhi.n	8008ac0 <_printf_i+0x28>
 8008ab0:	2f62      	cmp	r7, #98	; 0x62
 8008ab2:	d80a      	bhi.n	8008aca <_printf_i+0x32>
 8008ab4:	2f00      	cmp	r7, #0
 8008ab6:	f000 80d8 	beq.w	8008c6a <_printf_i+0x1d2>
 8008aba:	2f58      	cmp	r7, #88	; 0x58
 8008abc:	f000 80a3 	beq.w	8008c06 <_printf_i+0x16e>
 8008ac0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ac8:	e03a      	b.n	8008b40 <_printf_i+0xa8>
 8008aca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ace:	2b15      	cmp	r3, #21
 8008ad0:	d8f6      	bhi.n	8008ac0 <_printf_i+0x28>
 8008ad2:	a001      	add	r0, pc, #4	; (adr r0, 8008ad8 <_printf_i+0x40>)
 8008ad4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008ad8:	08008b31 	.word	0x08008b31
 8008adc:	08008b45 	.word	0x08008b45
 8008ae0:	08008ac1 	.word	0x08008ac1
 8008ae4:	08008ac1 	.word	0x08008ac1
 8008ae8:	08008ac1 	.word	0x08008ac1
 8008aec:	08008ac1 	.word	0x08008ac1
 8008af0:	08008b45 	.word	0x08008b45
 8008af4:	08008ac1 	.word	0x08008ac1
 8008af8:	08008ac1 	.word	0x08008ac1
 8008afc:	08008ac1 	.word	0x08008ac1
 8008b00:	08008ac1 	.word	0x08008ac1
 8008b04:	08008c51 	.word	0x08008c51
 8008b08:	08008b75 	.word	0x08008b75
 8008b0c:	08008c33 	.word	0x08008c33
 8008b10:	08008ac1 	.word	0x08008ac1
 8008b14:	08008ac1 	.word	0x08008ac1
 8008b18:	08008c73 	.word	0x08008c73
 8008b1c:	08008ac1 	.word	0x08008ac1
 8008b20:	08008b75 	.word	0x08008b75
 8008b24:	08008ac1 	.word	0x08008ac1
 8008b28:	08008ac1 	.word	0x08008ac1
 8008b2c:	08008c3b 	.word	0x08008c3b
 8008b30:	680b      	ldr	r3, [r1, #0]
 8008b32:	1d1a      	adds	r2, r3, #4
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	600a      	str	r2, [r1, #0]
 8008b38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b40:	2301      	movs	r3, #1
 8008b42:	e0a3      	b.n	8008c8c <_printf_i+0x1f4>
 8008b44:	6825      	ldr	r5, [r4, #0]
 8008b46:	6808      	ldr	r0, [r1, #0]
 8008b48:	062e      	lsls	r6, r5, #24
 8008b4a:	f100 0304 	add.w	r3, r0, #4
 8008b4e:	d50a      	bpl.n	8008b66 <_printf_i+0xce>
 8008b50:	6805      	ldr	r5, [r0, #0]
 8008b52:	600b      	str	r3, [r1, #0]
 8008b54:	2d00      	cmp	r5, #0
 8008b56:	da03      	bge.n	8008b60 <_printf_i+0xc8>
 8008b58:	232d      	movs	r3, #45	; 0x2d
 8008b5a:	426d      	negs	r5, r5
 8008b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b60:	485e      	ldr	r0, [pc, #376]	; (8008cdc <_printf_i+0x244>)
 8008b62:	230a      	movs	r3, #10
 8008b64:	e019      	b.n	8008b9a <_printf_i+0x102>
 8008b66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008b6a:	6805      	ldr	r5, [r0, #0]
 8008b6c:	600b      	str	r3, [r1, #0]
 8008b6e:	bf18      	it	ne
 8008b70:	b22d      	sxthne	r5, r5
 8008b72:	e7ef      	b.n	8008b54 <_printf_i+0xbc>
 8008b74:	680b      	ldr	r3, [r1, #0]
 8008b76:	6825      	ldr	r5, [r4, #0]
 8008b78:	1d18      	adds	r0, r3, #4
 8008b7a:	6008      	str	r0, [r1, #0]
 8008b7c:	0628      	lsls	r0, r5, #24
 8008b7e:	d501      	bpl.n	8008b84 <_printf_i+0xec>
 8008b80:	681d      	ldr	r5, [r3, #0]
 8008b82:	e002      	b.n	8008b8a <_printf_i+0xf2>
 8008b84:	0669      	lsls	r1, r5, #25
 8008b86:	d5fb      	bpl.n	8008b80 <_printf_i+0xe8>
 8008b88:	881d      	ldrh	r5, [r3, #0]
 8008b8a:	4854      	ldr	r0, [pc, #336]	; (8008cdc <_printf_i+0x244>)
 8008b8c:	2f6f      	cmp	r7, #111	; 0x6f
 8008b8e:	bf0c      	ite	eq
 8008b90:	2308      	moveq	r3, #8
 8008b92:	230a      	movne	r3, #10
 8008b94:	2100      	movs	r1, #0
 8008b96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b9a:	6866      	ldr	r6, [r4, #4]
 8008b9c:	60a6      	str	r6, [r4, #8]
 8008b9e:	2e00      	cmp	r6, #0
 8008ba0:	bfa2      	ittt	ge
 8008ba2:	6821      	ldrge	r1, [r4, #0]
 8008ba4:	f021 0104 	bicge.w	r1, r1, #4
 8008ba8:	6021      	strge	r1, [r4, #0]
 8008baa:	b90d      	cbnz	r5, 8008bb0 <_printf_i+0x118>
 8008bac:	2e00      	cmp	r6, #0
 8008bae:	d04d      	beq.n	8008c4c <_printf_i+0x1b4>
 8008bb0:	4616      	mov	r6, r2
 8008bb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bb6:	fb03 5711 	mls	r7, r3, r1, r5
 8008bba:	5dc7      	ldrb	r7, [r0, r7]
 8008bbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bc0:	462f      	mov	r7, r5
 8008bc2:	42bb      	cmp	r3, r7
 8008bc4:	460d      	mov	r5, r1
 8008bc6:	d9f4      	bls.n	8008bb2 <_printf_i+0x11a>
 8008bc8:	2b08      	cmp	r3, #8
 8008bca:	d10b      	bne.n	8008be4 <_printf_i+0x14c>
 8008bcc:	6823      	ldr	r3, [r4, #0]
 8008bce:	07df      	lsls	r7, r3, #31
 8008bd0:	d508      	bpl.n	8008be4 <_printf_i+0x14c>
 8008bd2:	6923      	ldr	r3, [r4, #16]
 8008bd4:	6861      	ldr	r1, [r4, #4]
 8008bd6:	4299      	cmp	r1, r3
 8008bd8:	bfde      	ittt	le
 8008bda:	2330      	movle	r3, #48	; 0x30
 8008bdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008be0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008be4:	1b92      	subs	r2, r2, r6
 8008be6:	6122      	str	r2, [r4, #16]
 8008be8:	f8cd a000 	str.w	sl, [sp]
 8008bec:	464b      	mov	r3, r9
 8008bee:	aa03      	add	r2, sp, #12
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	4640      	mov	r0, r8
 8008bf4:	f7ff fee2 	bl	80089bc <_printf_common>
 8008bf8:	3001      	adds	r0, #1
 8008bfa:	d14c      	bne.n	8008c96 <_printf_i+0x1fe>
 8008bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008c00:	b004      	add	sp, #16
 8008c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c06:	4835      	ldr	r0, [pc, #212]	; (8008cdc <_printf_i+0x244>)
 8008c08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	680e      	ldr	r6, [r1, #0]
 8008c10:	061f      	lsls	r7, r3, #24
 8008c12:	f856 5b04 	ldr.w	r5, [r6], #4
 8008c16:	600e      	str	r6, [r1, #0]
 8008c18:	d514      	bpl.n	8008c44 <_printf_i+0x1ac>
 8008c1a:	07d9      	lsls	r1, r3, #31
 8008c1c:	bf44      	itt	mi
 8008c1e:	f043 0320 	orrmi.w	r3, r3, #32
 8008c22:	6023      	strmi	r3, [r4, #0]
 8008c24:	b91d      	cbnz	r5, 8008c2e <_printf_i+0x196>
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	f023 0320 	bic.w	r3, r3, #32
 8008c2c:	6023      	str	r3, [r4, #0]
 8008c2e:	2310      	movs	r3, #16
 8008c30:	e7b0      	b.n	8008b94 <_printf_i+0xfc>
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	f043 0320 	orr.w	r3, r3, #32
 8008c38:	6023      	str	r3, [r4, #0]
 8008c3a:	2378      	movs	r3, #120	; 0x78
 8008c3c:	4828      	ldr	r0, [pc, #160]	; (8008ce0 <_printf_i+0x248>)
 8008c3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c42:	e7e3      	b.n	8008c0c <_printf_i+0x174>
 8008c44:	065e      	lsls	r6, r3, #25
 8008c46:	bf48      	it	mi
 8008c48:	b2ad      	uxthmi	r5, r5
 8008c4a:	e7e6      	b.n	8008c1a <_printf_i+0x182>
 8008c4c:	4616      	mov	r6, r2
 8008c4e:	e7bb      	b.n	8008bc8 <_printf_i+0x130>
 8008c50:	680b      	ldr	r3, [r1, #0]
 8008c52:	6826      	ldr	r6, [r4, #0]
 8008c54:	6960      	ldr	r0, [r4, #20]
 8008c56:	1d1d      	adds	r5, r3, #4
 8008c58:	600d      	str	r5, [r1, #0]
 8008c5a:	0635      	lsls	r5, r6, #24
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	d501      	bpl.n	8008c64 <_printf_i+0x1cc>
 8008c60:	6018      	str	r0, [r3, #0]
 8008c62:	e002      	b.n	8008c6a <_printf_i+0x1d2>
 8008c64:	0671      	lsls	r1, r6, #25
 8008c66:	d5fb      	bpl.n	8008c60 <_printf_i+0x1c8>
 8008c68:	8018      	strh	r0, [r3, #0]
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	6123      	str	r3, [r4, #16]
 8008c6e:	4616      	mov	r6, r2
 8008c70:	e7ba      	b.n	8008be8 <_printf_i+0x150>
 8008c72:	680b      	ldr	r3, [r1, #0]
 8008c74:	1d1a      	adds	r2, r3, #4
 8008c76:	600a      	str	r2, [r1, #0]
 8008c78:	681e      	ldr	r6, [r3, #0]
 8008c7a:	6862      	ldr	r2, [r4, #4]
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	4630      	mov	r0, r6
 8008c80:	f7f7 fad6 	bl	8000230 <memchr>
 8008c84:	b108      	cbz	r0, 8008c8a <_printf_i+0x1f2>
 8008c86:	1b80      	subs	r0, r0, r6
 8008c88:	6060      	str	r0, [r4, #4]
 8008c8a:	6863      	ldr	r3, [r4, #4]
 8008c8c:	6123      	str	r3, [r4, #16]
 8008c8e:	2300      	movs	r3, #0
 8008c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c94:	e7a8      	b.n	8008be8 <_printf_i+0x150>
 8008c96:	6923      	ldr	r3, [r4, #16]
 8008c98:	4632      	mov	r2, r6
 8008c9a:	4649      	mov	r1, r9
 8008c9c:	4640      	mov	r0, r8
 8008c9e:	47d0      	blx	sl
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	d0ab      	beq.n	8008bfc <_printf_i+0x164>
 8008ca4:	6823      	ldr	r3, [r4, #0]
 8008ca6:	079b      	lsls	r3, r3, #30
 8008ca8:	d413      	bmi.n	8008cd2 <_printf_i+0x23a>
 8008caa:	68e0      	ldr	r0, [r4, #12]
 8008cac:	9b03      	ldr	r3, [sp, #12]
 8008cae:	4298      	cmp	r0, r3
 8008cb0:	bfb8      	it	lt
 8008cb2:	4618      	movlt	r0, r3
 8008cb4:	e7a4      	b.n	8008c00 <_printf_i+0x168>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	4632      	mov	r2, r6
 8008cba:	4649      	mov	r1, r9
 8008cbc:	4640      	mov	r0, r8
 8008cbe:	47d0      	blx	sl
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d09b      	beq.n	8008bfc <_printf_i+0x164>
 8008cc4:	3501      	adds	r5, #1
 8008cc6:	68e3      	ldr	r3, [r4, #12]
 8008cc8:	9903      	ldr	r1, [sp, #12]
 8008cca:	1a5b      	subs	r3, r3, r1
 8008ccc:	42ab      	cmp	r3, r5
 8008cce:	dcf2      	bgt.n	8008cb6 <_printf_i+0x21e>
 8008cd0:	e7eb      	b.n	8008caa <_printf_i+0x212>
 8008cd2:	2500      	movs	r5, #0
 8008cd4:	f104 0619 	add.w	r6, r4, #25
 8008cd8:	e7f5      	b.n	8008cc6 <_printf_i+0x22e>
 8008cda:	bf00      	nop
 8008cdc:	08009c81 	.word	0x08009c81
 8008ce0:	08009c92 	.word	0x08009c92

08008ce4 <__sread>:
 8008ce4:	b510      	push	{r4, lr}
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cec:	f000 f894 	bl	8008e18 <_read_r>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	bfab      	itete	ge
 8008cf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cf6:	89a3      	ldrhlt	r3, [r4, #12]
 8008cf8:	181b      	addge	r3, r3, r0
 8008cfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cfe:	bfac      	ite	ge
 8008d00:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d02:	81a3      	strhlt	r3, [r4, #12]
 8008d04:	bd10      	pop	{r4, pc}

08008d06 <__swrite>:
 8008d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0a:	461f      	mov	r7, r3
 8008d0c:	898b      	ldrh	r3, [r1, #12]
 8008d0e:	05db      	lsls	r3, r3, #23
 8008d10:	4605      	mov	r5, r0
 8008d12:	460c      	mov	r4, r1
 8008d14:	4616      	mov	r6, r2
 8008d16:	d505      	bpl.n	8008d24 <__swrite+0x1e>
 8008d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d1c:	2302      	movs	r3, #2
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f000 f868 	bl	8008df4 <_lseek_r>
 8008d24:	89a3      	ldrh	r3, [r4, #12]
 8008d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d2e:	81a3      	strh	r3, [r4, #12]
 8008d30:	4632      	mov	r2, r6
 8008d32:	463b      	mov	r3, r7
 8008d34:	4628      	mov	r0, r5
 8008d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d3a:	f000 b817 	b.w	8008d6c <_write_r>

08008d3e <__sseek>:
 8008d3e:	b510      	push	{r4, lr}
 8008d40:	460c      	mov	r4, r1
 8008d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d46:	f000 f855 	bl	8008df4 <_lseek_r>
 8008d4a:	1c43      	adds	r3, r0, #1
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	bf15      	itete	ne
 8008d50:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d5a:	81a3      	strheq	r3, [r4, #12]
 8008d5c:	bf18      	it	ne
 8008d5e:	81a3      	strhne	r3, [r4, #12]
 8008d60:	bd10      	pop	{r4, pc}

08008d62 <__sclose>:
 8008d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d66:	f000 b813 	b.w	8008d90 <_close_r>
	...

08008d6c <_write_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	4d07      	ldr	r5, [pc, #28]	; (8008d8c <_write_r+0x20>)
 8008d70:	4604      	mov	r4, r0
 8008d72:	4608      	mov	r0, r1
 8008d74:	4611      	mov	r1, r2
 8008d76:	2200      	movs	r2, #0
 8008d78:	602a      	str	r2, [r5, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	f7f9 ffdb 	bl	8002d36 <_write>
 8008d80:	1c43      	adds	r3, r0, #1
 8008d82:	d102      	bne.n	8008d8a <_write_r+0x1e>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	b103      	cbz	r3, 8008d8a <_write_r+0x1e>
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	bd38      	pop	{r3, r4, r5, pc}
 8008d8c:	20004134 	.word	0x20004134

08008d90 <_close_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4d06      	ldr	r5, [pc, #24]	; (8008dac <_close_r+0x1c>)
 8008d94:	2300      	movs	r3, #0
 8008d96:	4604      	mov	r4, r0
 8008d98:	4608      	mov	r0, r1
 8008d9a:	602b      	str	r3, [r5, #0]
 8008d9c:	f7f9 ffe7 	bl	8002d6e <_close>
 8008da0:	1c43      	adds	r3, r0, #1
 8008da2:	d102      	bne.n	8008daa <_close_r+0x1a>
 8008da4:	682b      	ldr	r3, [r5, #0]
 8008da6:	b103      	cbz	r3, 8008daa <_close_r+0x1a>
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	bd38      	pop	{r3, r4, r5, pc}
 8008dac:	20004134 	.word	0x20004134

08008db0 <_fstat_r>:
 8008db0:	b538      	push	{r3, r4, r5, lr}
 8008db2:	4d07      	ldr	r5, [pc, #28]	; (8008dd0 <_fstat_r+0x20>)
 8008db4:	2300      	movs	r3, #0
 8008db6:	4604      	mov	r4, r0
 8008db8:	4608      	mov	r0, r1
 8008dba:	4611      	mov	r1, r2
 8008dbc:	602b      	str	r3, [r5, #0]
 8008dbe:	f7f9 ffe2 	bl	8002d86 <_fstat>
 8008dc2:	1c43      	adds	r3, r0, #1
 8008dc4:	d102      	bne.n	8008dcc <_fstat_r+0x1c>
 8008dc6:	682b      	ldr	r3, [r5, #0]
 8008dc8:	b103      	cbz	r3, 8008dcc <_fstat_r+0x1c>
 8008dca:	6023      	str	r3, [r4, #0]
 8008dcc:	bd38      	pop	{r3, r4, r5, pc}
 8008dce:	bf00      	nop
 8008dd0:	20004134 	.word	0x20004134

08008dd4 <_isatty_r>:
 8008dd4:	b538      	push	{r3, r4, r5, lr}
 8008dd6:	4d06      	ldr	r5, [pc, #24]	; (8008df0 <_isatty_r+0x1c>)
 8008dd8:	2300      	movs	r3, #0
 8008dda:	4604      	mov	r4, r0
 8008ddc:	4608      	mov	r0, r1
 8008dde:	602b      	str	r3, [r5, #0]
 8008de0:	f7f9 ffe1 	bl	8002da6 <_isatty>
 8008de4:	1c43      	adds	r3, r0, #1
 8008de6:	d102      	bne.n	8008dee <_isatty_r+0x1a>
 8008de8:	682b      	ldr	r3, [r5, #0]
 8008dea:	b103      	cbz	r3, 8008dee <_isatty_r+0x1a>
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	bd38      	pop	{r3, r4, r5, pc}
 8008df0:	20004134 	.word	0x20004134

08008df4 <_lseek_r>:
 8008df4:	b538      	push	{r3, r4, r5, lr}
 8008df6:	4d07      	ldr	r5, [pc, #28]	; (8008e14 <_lseek_r+0x20>)
 8008df8:	4604      	mov	r4, r0
 8008dfa:	4608      	mov	r0, r1
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	2200      	movs	r2, #0
 8008e00:	602a      	str	r2, [r5, #0]
 8008e02:	461a      	mov	r2, r3
 8008e04:	f7f9 ffda 	bl	8002dbc <_lseek>
 8008e08:	1c43      	adds	r3, r0, #1
 8008e0a:	d102      	bne.n	8008e12 <_lseek_r+0x1e>
 8008e0c:	682b      	ldr	r3, [r5, #0]
 8008e0e:	b103      	cbz	r3, 8008e12 <_lseek_r+0x1e>
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	bd38      	pop	{r3, r4, r5, pc}
 8008e14:	20004134 	.word	0x20004134

08008e18 <_read_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4d07      	ldr	r5, [pc, #28]	; (8008e38 <_read_r+0x20>)
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	4608      	mov	r0, r1
 8008e20:	4611      	mov	r1, r2
 8008e22:	2200      	movs	r2, #0
 8008e24:	602a      	str	r2, [r5, #0]
 8008e26:	461a      	mov	r2, r3
 8008e28:	f7f9 ff68 	bl	8002cfc <_read>
 8008e2c:	1c43      	adds	r3, r0, #1
 8008e2e:	d102      	bne.n	8008e36 <_read_r+0x1e>
 8008e30:	682b      	ldr	r3, [r5, #0]
 8008e32:	b103      	cbz	r3, 8008e36 <_read_r+0x1e>
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
 8008e38:	20004134 	.word	0x20004134

08008e3c <_init>:
 8008e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3e:	bf00      	nop
 8008e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e42:	bc08      	pop	{r3}
 8008e44:	469e      	mov	lr, r3
 8008e46:	4770      	bx	lr

08008e48 <_fini>:
 8008e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4a:	bf00      	nop
 8008e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4e:	bc08      	pop	{r3}
 8008e50:	469e      	mov	lr, r3
 8008e52:	4770      	bx	lr
